{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/clickhouse/1.png","path":"img/clickhouse/1.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/logo.png","path":"img/clickhouse/logo.png","modified":1,"renderable":0},{"_id":"source/img/grafana/1.png","path":"img/grafana/1.png","modified":1,"renderable":0},{"_id":"source/img/grafana/4.png","path":"img/grafana/4.png","modified":1,"renderable":0},{"_id":"source/img/grafana/5.png","path":"img/grafana/5.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/2.png","path":"img/grafana-alerting/2.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/3.png","path":"img/grafana-alerting/3.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/4.png","path":"img/grafana-alerting/4.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/7.png","path":"img/grafana-alerting/7.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/5.png","path":"img/grafana-alerting/5.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/6.png","path":"img/grafana-alerting/6.png","modified":1,"renderable":0},{"_id":"source/img/k8s/3.jpg","path":"img/k8s/3.jpg","modified":1,"renderable":0},{"_id":"source/img/k8s/4.png","path":"img/k8s/4.png","modified":1,"renderable":0},{"_id":"source/img/loki/logo.png","path":"img/loki/logo.png","modified":1,"renderable":0},{"_id":"source/img/loki/3.png","path":"img/loki/3.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"source/img/grafana/11.png","path":"img/grafana/11.png","modified":1,"renderable":0},{"_id":"source/img/grafana/122.png","path":"img/grafana/122.png","modified":1,"renderable":0},{"_id":"source/img/grafana/2.png","path":"img/grafana/2.png","modified":1,"renderable":0},{"_id":"source/img/grafana/3.png","path":"img/grafana/3.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/8.png","path":"img/grafana-alerting/8.png","modified":1,"renderable":0},{"_id":"source/img/k8s/2.png","path":"img/k8s/2.png","modified":1,"renderable":0},{"_id":"source/img/k8s/1.png","path":"img/k8s/1.png","modified":1,"renderable":0},{"_id":"source/img/k8s/6.png","path":"img/k8s/6.png","modified":1,"renderable":0},{"_id":"source/img/loki/2.png","path":"img/loki/2.png","modified":1,"renderable":0},{"_id":"source/img/grafana/12.png","path":"img/grafana/12.png","modified":1,"renderable":0},{"_id":"source/img/k8s/5.svg","path":"img/k8s/5.svg","modified":1,"renderable":0},{"_id":"source/img/ubuntu/1.png","path":"img/ubuntu/1.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"source/img/grafana/2.bak.png","path":"img/grafana/2.bak.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/img/loki/1.png","path":"img/loki/1.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/images/banner_org.jpg","path":"css/images/banner_org.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/hexo/1.png","path":"img/hexo/1.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1573702408591},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1573702408591},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1573702408591},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1573702408591},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1573702408591},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1573702408591},{"_id":"source/_posts/clickhouse.md","hash":"cf4e121618d3e320982f4d55b05789e26f0517c4","modified":1578381729099},{"_id":"source/_posts/btree.md","hash":"20163b97ecca7688995fff29fa8b8c1a57b322ae","modified":1573702408579},{"_id":"source/_posts/awk.md","hash":"f86ae4e349ec7f29b33b0d1904cec01930633560","modified":1578294158641},{"_id":"source/_posts/core-dns.md","hash":"496f6e44284a39dea988a0d5a8e909b07ffb9cb3","modified":1573702408579},{"_id":"source/_posts/gitrunner-helm-install.md","hash":"76e9725956c556ce048ce4cf21a9eedf78beff85","modified":1573702408579},{"_id":"source/_posts/grafana-alerting.md","hash":"f7197e95e4f57bbea01666630fb2addd0739369d","modified":1576476876754},{"_id":"source/_posts/grafana-mysql-source.md","hash":"d9711c46097eae328b5bfe9abd3a16c29ce16326","modified":1575276612601},{"_id":"source/_posts/grafana-variables.md","hash":"bc94b22009fb78926a59c1d8ecf23aac88715a99","modified":1575277210803},{"_id":"source/_posts/hexo.md","hash":"5b632677a82fbf75b4679de4f4f7854d489469a8","modified":1578293978164},{"_id":"source/_posts/helm.md","hash":"81b70934e1cd8998e90f51d573b1eebfe10bbcb4","modified":1573702408579},{"_id":"source/_posts/jenkins-introduction.md","hash":"464df297713d0f726a33d7e2a1529e7553c73abf","modified":1573702408579},{"_id":"source/_posts/k8s-migration-1.md","hash":"f77c8e5b37e5b47c34d5a7ea6cc4ef0bf9cd74ee","modified":1573702942170},{"_id":"source/_posts/k8s-introduction.md","hash":"b733e25731b2e663929fb43fc0caa46c1583fd16","modified":1573702948626},{"_id":"source/_posts/k8s-notes.md","hash":"b80047e57a39241eb21554ff03021cfbd35276f2","modified":1576568177737},{"_id":"source/_posts/ldap-pbkdf2.md","hash":"df04dc474678133d3c6e04547a189c258d4caa5b","modified":1576834035003},{"_id":"source/_posts/loki-cassandra.md","hash":"465cc00c38f86f95239b41db4809753dce690ffc","modified":1577100263561},{"_id":"source/_posts/microk8.md","hash":"d9b8d6a38dc2344d1312b4a77bdc169f8aa223e1","modified":1577099079980},{"_id":"source/_posts/loki.md","hash":"8fb96cbfce1e811b761ae6727ca4ee8b8e057b20","modified":1573702604384},{"_id":"source/_posts/nginx.md","hash":"a5d5f40a5a02298032125aa8f32f7e84cd5da6d4","modified":1573702408579},{"_id":"source/_posts/prometheus.md","hash":"dc7425ce51e502d574d2280602d3c3c6326e91f9","modified":1573702408579},{"_id":"source/_posts/ubuntu-install.md","hash":"45e1b96490deeebff2eb5db5632748e63bcf450d","modified":1575978371821},{"_id":"source/_posts/tcp.md","hash":"d1cb619b737c280749db9be87ff3d9e65f9f8350","modified":1573702408579},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1573702408591},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1573702408591},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1573702408591},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1573702408591},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1573702408591},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1573702408591},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1573702408591},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573702408591},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573702408591},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1573702408591},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1573702408591},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573702408591},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573702408591},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1573702408591},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573702408591},{"_id":"source/img/clickhouse/1.png","hash":"f76cf8847713817e835856a3f824853d011b3b99","modified":1576478420844},{"_id":"source/img/clickhouse/logo.png","hash":"8fa4420a9948ab6b8eaa01b5ad98dfe8bcce0ddf","modified":1576477977524},{"_id":"source/img/grafana/1.png","hash":"6688d162f54a6b31d8a3f58da4a747e2a90b7e0f","modified":1573702408583},{"_id":"source/img/grafana/4.png","hash":"c5767d6d65f0dfa19776c01bf698aa0a7a21144c","modified":1573702408583},{"_id":"source/img/grafana/5.png","hash":"8eafae501beb11d44f1c1cba33ab5d7be7fb436b","modified":1573702408583},{"_id":"source/img/grafana-alerting/2.png","hash":"40bf8a0133c93d206d3f3d3615d9fce997f0ed3f","modified":1573702408579},{"_id":"source/img/grafana-alerting/3.png","hash":"7445b32c9bc421331dde0efa8eedf8928e5a24b6","modified":1573702408579},{"_id":"source/img/grafana-alerting/4.png","hash":"8e7beab20bf3c2df3e52e45a63e10b4fbac8d750","modified":1573702408579},{"_id":"source/img/grafana-alerting/7.png","hash":"875de873a9eb3b938eaf719dbf96fabcf32fb9a1","modified":1573702408579},{"_id":"source/img/grafana-alerting/5.png","hash":"f3e7ace9feb0d40d49022dd26de062de5f240ffd","modified":1573702408579},{"_id":"source/img/grafana-alerting/6.png","hash":"27515ce8d5f065a40d1139d270941477d5c43045","modified":1573702408579},{"_id":"source/img/k8s/3.jpg","hash":"04222abe2ac1cb68bd21655780e275b94d4b7bb9","modified":1573702408587},{"_id":"source/img/k8s/4.png","hash":"a8ac198596f6cbc2b176f60a3af8ef770ba74986","modified":1573702408587},{"_id":"source/img/loki/logo.png","hash":"d3a1ff513556c5bb1c144b9e7caa96d71acb594b","modified":1573702408591},{"_id":"source/img/loki/3.png","hash":"a853262492ce9cf76df0e0fcad9212c07f712430","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1573702408591},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1573702408591},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1573702408591},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1573702408595},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1573702408591},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573702408595},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1573702408599},{"_id":"source/img/grafana/11.png","hash":"dc22affd7d0954a971c52dd6671b9aea7cc54382","modified":1573734916723},{"_id":"source/img/grafana/122.png","hash":"bb068798fd7cbc5bcbe79d0c0d75827377a3debf","modified":1573789584877},{"_id":"source/img/grafana/2.png","hash":"ffb7d6e0ca4bdbf08813b7fdccd7d90089528aee","modified":1573702408583},{"_id":"source/img/grafana/3.png","hash":"5226ddfc672c157931a1a64d014978105f3e23a1","modified":1573702408583},{"_id":"source/img/grafana-alerting/8.png","hash":"d5b36c2709a622f0b7e3be5be8aa06dfe2b1fb93","modified":1573702408579},{"_id":"source/img/k8s/2.png","hash":"a0cc8e0bc5608f991b98602237ed12b4757e56f2","modified":1573702408587},{"_id":"source/img/k8s/1.png","hash":"aaef20704f36c5cd855b30ffdb370925642b4404","modified":1573702408587},{"_id":"source/img/k8s/6.png","hash":"88cc3026320b900ac1280757e90b8ac9d08504b4","modified":1573702408587},{"_id":"source/img/loki/2.png","hash":"4f40694f5dc0eaf9f4e8df1d2f9b6e2a6fd041b9","modified":1573702408591},{"_id":"source/img/grafana/12.png","hash":"5262aba45625a7ec9b3ec491ed70ed0bdc8f9316","modified":1574051917946},{"_id":"source/img/k8s/5.svg","hash":"d1411cded83856552f37911eb4522d9887ca4e83","modified":1573702408587},{"_id":"source/img/ubuntu/1.png","hash":"bb274baa3a4b15aa31bd67e7203f404f5c132529","modified":1573735907553},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1573702408591},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1573702408591},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1573702408599},{"_id":"source/img/grafana/2.bak.png","hash":"5dded09e9b81014954c28c39cd6bfe326e730fce","modified":1573702408583},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1573702408595},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"e86656f9a24e0d0849aff08aa6490a717e6e1f8d","modified":1573702408595},{"_id":"source/img/loki/1.png","hash":"1698dc20dd0e4e7fccb7ef63b83209a66d784797","modified":1573702408591},{"_id":"themes/landscape/source/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1573702408595},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1573702408595},{"_id":"source/img/hexo/1.png","hash":"63f36a8ef225402464c3551ab53f1906cc92cf62","modified":1573702408587},{"_id":"public/2019/12/loki-cassandra/index.html","hash":"c10e0638b159d30f57d4d54ed1a595b9944fa12c","modified":1578381757993},{"_id":"public/2019/10/grafana-variables/index.html","hash":"af0e8effcc3f06aa87f93a145965bfff1c38c676","modified":1578381757994},{"_id":"public/2019/10/grafana-alerting/index.html","hash":"fda8757d97d15b6702570c71d44b6c91c94936c2","modified":1578381757994},{"_id":"public/2019/02/btree/index.html","hash":"bfe1ee23989585da4ce851bc1f9bd9a05520226c","modified":1578381757995},{"_id":"public/2019/02/nginx/index.html","hash":"6b457807beec7cd5d312d4f1ac1a104518ec694a","modified":1578381757995},{"_id":"public/archives/index.html","hash":"1cfada50bb9ee4f61ed575093f8d3d0e8c3142bd","modified":1578381757995},{"_id":"public/archives/page/2/index.html","hash":"073ea4ae0381d0d5dd55c52a751ea4ae0df68b68","modified":1578381757995},{"_id":"public/archives/page/3/index.html","hash":"6e47856b0a7df9515b5289584e5330066aa126d4","modified":1578381757995},{"_id":"public/archives/2019/index.html","hash":"1a27b263f9e0a607e4eb8daea776e04b8782ffa7","modified":1578381757995},{"_id":"public/archives/2019/page/2/index.html","hash":"d2c254836c01bdc7e3603eba7305d6fa0f5cc491","modified":1578381757995},{"_id":"public/archives/2019/page/3/index.html","hash":"2f5974ca960272ff91dc00e1655998dff4c2f3e0","modified":1578381757996},{"_id":"public/archives/2019/01/index.html","hash":"c99c0ed2187b9623106d0ee1049dd4451e987ff0","modified":1578381757996},{"_id":"public/archives/2019/02/index.html","hash":"c668506f259efaba350f3b7f83a43a48b0fdeb72","modified":1578381757996},{"_id":"public/archives/2019/10/index.html","hash":"9fb1d6eb9d5d57ac896646824f401dd679110ffc","modified":1578381757996},{"_id":"public/archives/2019/11/index.html","hash":"722181cc9cd4b196217d73b42feb4b0b16281a07","modified":1578381757996},{"_id":"public/archives/2019/12/index.html","hash":"8cce75b119ca6bf7ff2aa38b9ad2c9f5a0ba8694","modified":1578381757996},{"_id":"public/archives/2020/index.html","hash":"2a336ba357f91506081cb8ce2fbbec4eb8f65db3","modified":1578381757996},{"_id":"public/archives/2020/01/index.html","hash":"0b75a48c56e910f54777090e944a69dce0c4317c","modified":1578381757996},{"_id":"public/tags/clickhouse/index.html","hash":"4d40a055ec64a27c7e8d932f2d78bf47f60b6e9a","modified":1578381757996},{"_id":"public/tags/b树/index.html","hash":"cc75f7111031fe151135cb9692b757d4064f8680","modified":1578381757997},{"_id":"public/tags/数据结构/index.html","hash":"04fdb0d214765408e6e56d048e333cc289a9ad02","modified":1578381757997},{"_id":"public/tags/coredns/index.html","hash":"d17434f07e44db000d21c622073cc51efc0a01c6","modified":1578381757997},{"_id":"public/tags/etcd/index.html","hash":"a5e45d1376ef336b7c26a11d8c8dcf77ce002199","modified":1578381757997},{"_id":"public/tags/awk/index.html","hash":"c1c233b75068d547e388effc8e5c6a2a525d19d4","modified":1578381757997},{"_id":"public/tags/csv/index.html","hash":"02d496f7f97fa9f6b6945131a01b5e0d523c0214","modified":1578381757997},{"_id":"public/tags/gitrunner/index.html","hash":"cc460aa76c4158142bfc41700b091346202e6021","modified":1578381757997},{"_id":"public/tags/helm/index.html","hash":"972911fc862cf5098de577d0ec8d7aecf1dee205","modified":1578381757997},{"_id":"public/tags/grafana/index.html","hash":"6b1077cca5dbb0c97c827df43765d0fb96189c12","modified":1578381757998},{"_id":"public/tags/prometheus/index.html","hash":"cb441b84dcae53889ecbd528a3bfadf9919f8f60","modified":1578381757998},{"_id":"public/tags/报警/index.html","hash":"be69c8913dafc2544e112b3d106787e1b6b2c2cb","modified":1578381757998},{"_id":"public/tags/loki/index.html","hash":"2d06e0ddd33ee10ebec76b9470c322ed56a65636","modified":1578381757998},{"_id":"public/tags/promtal/index.html","hash":"f23a9057091b6e711ed4ff62e5e211e9af08dd6b","modified":1578381757998},{"_id":"public/tags/hexo/index.html","hash":"5da4b4c8033e485d12b40e38e91e94655926a69f","modified":1578381757998},{"_id":"public/tags/jenkins/index.html","hash":"6291a225412d60a37475d9e012d86b9bb8e23f9f","modified":1578381757998},{"_id":"public/tags/pipeline/index.html","hash":"595f04de220ff03133c4dc62f431b8a7b1b352ac","modified":1578381757998},{"_id":"public/tags/k8s/index.html","hash":"a1aef8bd63f467af7eb1751140fac870f9e26d31","modified":1578381757999},{"_id":"public/tags/charts/index.html","hash":"8d401e8f7d1cdfb184b2069f5dccec04984ea4d3","modified":1578381757999},{"_id":"public/tags/kubernetes/index.html","hash":"a600f6d68c3f7857b082d3fc645060357699bf64","modified":1578381757999},{"_id":"public/tags/kube-adm/index.html","hash":"7242d710db834aab387ec556cd0fa5f8c1e5100a","modified":1578381757999},{"_id":"public/tags/haproxy/index.html","hash":"d0b7d1bb74a57c15b4f9478b3d18051ee2637e01","modified":1578381757999},{"_id":"public/tags/cassandra/index.html","hash":"8e692076dc520491f4c48278e16dad1531d9c28e","modified":1578381757999},{"_id":"public/tags/docker/index.html","hash":"dd90a7fbb4f31207e3e47257e4ba144e7e8a2680","modified":1578381757999},{"_id":"public/tags/microk8s/index.html","hash":"bcb77349b87a8559fe689ecfc9f71dc769f78924","modified":1578381757999},{"_id":"public/tags/日志/index.html","hash":"21782f130e7fdd43a4194dd7d97f0af99db794ec","modified":1578381757999},{"_id":"public/tags/ldap/index.html","hash":"27c69d36c77c870f73ad63ffd1d7990d4a324025","modified":1578381758000},{"_id":"public/tags/openldap/index.html","hash":"adccc37aaa8bd3cd14a6b4679ec4c898ba2e3c87","modified":1578381758000},{"_id":"public/tags/gogs/index.html","hash":"ce91aaa1fa42b65049d67a988d565816faa6b3eb","modified":1578381758000},{"_id":"public/tags/pbkdf2/index.html","hash":"0e4a22fbb7d882cac1df9dfcd2cb38c9761dee02","modified":1578381758000},{"_id":"public/tags/nginx/index.html","hash":"11446405d4d778c3991b232cc7db20b6c83419e5","modified":1578381758000},{"_id":"public/tags/openresty/index.html","hash":"53b071757bc6ad5b54f1781e5d973570845be944","modified":1578381758000},{"_id":"public/tags/ubuntu/index.html","hash":"57681d53c8bd07f9a903bb4e96b8819ea172c3b3","modified":1578381758000},{"_id":"public/tags/监控/index.html","hash":"4c3532c878da566f10ac96a4548d4cf030e3c19d","modified":1578381758000},{"_id":"public/tags/linux/index.html","hash":"a6372583f4fecfbdf4af16bbe51ee5f278e1adf8","modified":1578381758000},{"_id":"public/tags/tcp-ip/index.html","hash":"5bd103680329fb8c059abd727057ad7c4993dc4f","modified":1578381758001},{"_id":"public/2020/01/awk/index.html","hash":"ca967d047f60b15c056ad275b5d1639ffe781234","modified":1578381758001},{"_id":"public/2019/12/clickhouse/index.html","hash":"ec9409e8e698e33c2908b3293cf969958c9d03b4","modified":1578381758001},{"_id":"public/2019/11/ldap-pbkdf2/index.html","hash":"6fc25714d5187d1cd1994b13edd63f23bab2987f","modified":1578381758001},{"_id":"public/2019/11/ubuntu-install/index.html","hash":"78862c2bb35ab7e423172fdf8726e185d390c76b","modified":1578381758001},{"_id":"public/2019/11/grafana-mysql-source/index.html","hash":"81c795ed18185ec17d8ea39eb124e1de91bf0a09","modified":1578381758001},{"_id":"public/2019/11/k8s-migration-1/index.html","hash":"fbe504075791117ea5ad67ad41404dd4269574c6","modified":1578381758001},{"_id":"public/2019/10/hexo/index.html","hash":"ab9e65b691e7021cf05925013309031080c1d2e5","modified":1578381758001},{"_id":"public/2019/10/loki/index.html","hash":"52397beed653dd03d9dbe6253f51646ca0c8cd96","modified":1578381758001},{"_id":"public/2019/10/core-dns/index.html","hash":"87e10d409f461ac7449aedf4a553374e28e72562","modified":1578381758002},{"_id":"public/2019/10/gitrunner-helm-install/index.html","hash":"f24d8005b8c205c6a7a404fc349e63ffd5b9752b","modified":1578381758002},{"_id":"public/2019/10/helm/index.html","hash":"e9d441ad1715f8b7da4afff1b0b89e439d2fbf32","modified":1578381758002},{"_id":"public/2019/02/tcp/index.html","hash":"554839c356d7d8f88028ecfdec41fc207392609a","modified":1578381758002},{"_id":"public/2019/02/jenkins-introduction/index.html","hash":"d6f2a88dfb24b9c9a660e3faa266197edcc7cba0","modified":1578381758002},{"_id":"public/2019/02/prometheus/index.html","hash":"293242d7902f4590257cf75e5d921a9d753e83f9","modified":1578381758002},{"_id":"public/2019/02/microk8/index.html","hash":"57f2ce0578615af2168e89f536af834978b3a759","modified":1578381758002},{"_id":"public/2019/02/k8s-notes/index.html","hash":"a07f55c7e9ac30c756f0b06f12a16d103114e01c","modified":1578381758002},{"_id":"public/2019/01/k8s-introduction/index.html","hash":"b5724e13ce48eceb22abae0d79b8275d1210802f","modified":1578381758003},{"_id":"public/index.html","hash":"ac1a76e6eab192b91199da49fc3fcec6060c5be5","modified":1578381758003},{"_id":"public/page/2/index.html","hash":"a73fab139d76db3d410a5924ba27c72fa1e69fe8","modified":1578381758003},{"_id":"public/page/3/index.html","hash":"e6b9894f54ca306f8c2fe4254d9e303cb1c2de7b","modified":1578381758003},{"_id":"public/img/clickhouse/logo.png","hash":"8fa4420a9948ab6b8eaa01b5ad98dfe8bcce0ddf","modified":1578381758017},{"_id":"public/img/grafana/4.png","hash":"c5767d6d65f0dfa19776c01bf698aa0a7a21144c","modified":1578381758018},{"_id":"public/img/grafana/1.png","hash":"6688d162f54a6b31d8a3f58da4a747e2a90b7e0f","modified":1578381758018},{"_id":"public/img/grafana-alerting/2.png","hash":"40bf8a0133c93d206d3f3d3615d9fce997f0ed3f","modified":1578381758018},{"_id":"public/img/grafana/5.png","hash":"8eafae501beb11d44f1c1cba33ab5d7be7fb436b","modified":1578381758018},{"_id":"public/img/grafana-alerting/3.png","hash":"7445b32c9bc421331dde0efa8eedf8928e5a24b6","modified":1578381758018},{"_id":"public/img/clickhouse/1.png","hash":"f76cf8847713817e835856a3f824853d011b3b99","modified":1578381758018},{"_id":"public/img/grafana-alerting/4.png","hash":"8e7beab20bf3c2df3e52e45a63e10b4fbac8d750","modified":1578381758018},{"_id":"public/img/grafana-alerting/7.png","hash":"875de873a9eb3b938eaf719dbf96fabcf32fb9a1","modified":1578381758018},{"_id":"public/img/grafana-alerting/5.png","hash":"f3e7ace9feb0d40d49022dd26de062de5f240ffd","modified":1578381758018},{"_id":"public/img/grafana-alerting/6.png","hash":"27515ce8d5f065a40d1139d270941477d5c43045","modified":1578381758018},{"_id":"public/img/k8s/4.png","hash":"a8ac198596f6cbc2b176f60a3af8ef770ba74986","modified":1578381758019},{"_id":"public/img/k8s/3.jpg","hash":"04222abe2ac1cb68bd21655780e275b94d4b7bb9","modified":1578381758019},{"_id":"public/img/loki/logo.png","hash":"d3a1ff513556c5bb1c144b9e7caa96d71acb594b","modified":1578381758019},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578381758019},{"_id":"public/img/loki/3.png","hash":"a853262492ce9cf76df0e0fcad9212c07f712430","modified":1578381758019},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578381758019},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578381758019},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578381758019},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578381758019},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578381758020},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1578381758020},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1578381758020},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578381758020},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1578381758020},{"_id":"public/img/grafana/11.png","hash":"dc22affd7d0954a971c52dd6671b9aea7cc54382","modified":1578381758634},{"_id":"public/img/grafana/122.png","hash":"bb068798fd7cbc5bcbe79d0c0d75827377a3debf","modified":1578381758636},{"_id":"public/img/grafana/2.png","hash":"ffb7d6e0ca4bdbf08813b7fdccd7d90089528aee","modified":1578381758636},{"_id":"public/img/grafana/3.png","hash":"5226ddfc672c157931a1a64d014978105f3e23a1","modified":1578381758636},{"_id":"public/img/grafana-alerting/8.png","hash":"d5b36c2709a622f0b7e3be5be8aa06dfe2b1fb93","modified":1578381758636},{"_id":"public/img/k8s/2.png","hash":"a0cc8e0bc5608f991b98602237ed12b4757e56f2","modified":1578381758637},{"_id":"public/img/k8s/1.png","hash":"aaef20704f36c5cd855b30ffdb370925642b4404","modified":1578381758637},{"_id":"public/img/k8s/6.png","hash":"88cc3026320b900ac1280757e90b8ac9d08504b4","modified":1578381758637},{"_id":"public/img/loki/2.png","hash":"4f40694f5dc0eaf9f4e8df1d2f9b6e2a6fd041b9","modified":1578381758637},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1578381758637},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1578381758649},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1578381758649},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578381758649},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1578381758649},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578381758649},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1578381758649},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1578381758649},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1578381758649},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1578381758650},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1578381758650},{"_id":"public/img/grafana/12.png","hash":"5262aba45625a7ec9b3ec491ed70ed0bdc8f9316","modified":1578381758650},{"_id":"public/img/k8s/5.svg","hash":"d1411cded83856552f37911eb4522d9887ca4e83","modified":1578381758650},{"_id":"public/img/ubuntu/1.png","hash":"bb274baa3a4b15aa31bd67e7203f404f5c132529","modified":1578381758650},{"_id":"public/css/images/banner.jpg","hash":"e86656f9a24e0d0849aff08aa6490a717e6e1f8d","modified":1578381758650},{"_id":"public/img/grafana/2.bak.png","hash":"5dded09e9b81014954c28c39cd6bfe326e730fce","modified":1578381758656},{"_id":"public/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1578381758656},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1578381758656},{"_id":"public/img/loki/1.png","hash":"1698dc20dd0e4e7fccb7ef63b83209a66d784797","modified":1578381758664},{"_id":"public/img/hexo/1.png","hash":"63f36a8ef225402464c3551ab53f1906cc92cf62","modified":1578381758675}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ClickHouse 入门笔记","date":"2019-12-16T14:22:10.000Z","share":true,"_content":"\nClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)\n\n**版本**\n\n文章使用版本 `docker pull yandex/clickhouse-server:19.15.3.6`\n\n**SQL支持**\n\n支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。\n\n**支持近似计算**\n\n用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)\n\n**吞吐量**\n\nClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。\n\n**访问控制**\n\nClickHouse包含访问控制配置，它们位于`users.xml`文件中(与'config.xml'同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。\n\n默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：`clickhouse-client --host=example.com`\n\n**时区设置**\n\n```\nsudo vim /etc/clickhouse-server/config.xml\n<timezone>Asia/Shanghai</timezone>\n```\n<!-- more -->\n\n**交互方式**\n\n客户端可以选择使用交互式与非交互式两种\n\n\n```\nCREATE TABLE test (\n         created_date Date DEFAULT today(),  \n         created_at DateTime DEFAULT now(), \n        `id` UInt16,\n        `name` String\n) ENGINE = MergeTree(created_date, created_at, 8192);\n\n\ncat <<_EOF | clickhouse-client --database=default --query=\"INSERT INTO test FORMAT CSV\";\n'2016-08-14','2016-08-14 00:00:00',3, 'some text',\n'2016-08-14','2016-08-14 00:00:01',4, 'some text'\n_EOF\n```\n\n可以指定 `\\G` 来替代分号或者在分号后面，这表示 `Vertical` 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。\n\n**命令行参数**\n\nhttps://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\n\n**输入输出格式**\n\n支持 json、csv 等多种格式 https://clickhouse.yandex/docs/zh/interfaces/formats/\n\n**mysql 引擎**\n\n```\nCREATE DATABASE mysql_db ENGINE = MySQL('172.16.200.10:3306', 'test', 'root', 'passwd')\n```\n\n**mergeTree 引擎**\n\n使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构\n\n```\nCREATE TABLE wikistat\n(\n    id bigint,\n    dt DateTime,\n    project String,\n    subproject String,\n    path String,\n    hits UInt64,\n    size UInt64\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(dt)\nORDER BY dt\n```\n\n**JSON 函数**\n\n```\n#pay_data 是否有 appId 下标\nselect visitParamHas(pay_data,'appId') from `order` limit 1;\n#获取appId值\nselect visitParamExtractRaw(pay_data,'appId') from `order` limit 1;\n#获取值\nSELECT visitParamExtractString(return_data, 'body') FROM order_behavior_log LIMIT 10;\n```\n\nhttps://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\n\n**数据备份**\n\n```\nclickhouse-client -d default --query=\"show create table ontime\"\nclickhouse-client -d default -f CSV --query=\"select * from ontime limit 1\" >/var/lib/clickhouse/a.csv\n```\n\n**使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:**\n![1.png](/img/clickhouse/1.png)\n\n存档到ClickHouse允许您保留旧数据并将其用于报告\n\n\n**LowCardinality 类型** （对字符串做数字字典）\n\n城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。\n\n值得一提的是，还有一种用字典编码字符串的可能性：[Enums](https://clickhouse.yandex/docs/en/data_types/enum/)。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。\n\n**实时试图**\n\n将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存\n\n**命令**\n\n```\ndetach database payemnt #删除mysql引擎库\nalter table cpu update usage_user = 888 where usage_user=18 #update\nalter table cpu delete where usage_user = 888 #delete\n```\n\n**web 客户端tabix**\n\n```\ndocker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client\n```\n\n\n**查询示例**\n\n```\n#执行时间分位数查询\nSELECT\n    created_date,\n    quantile(0.999)(toFloat64(execute_mic_time))\nFROM order_behavior_log\nWHERE (created_date > '2019-11-28 12:00:00') AND (created_date < '2019-11-28 12:01:00')\nGROUP BY created_date\nORDER BY created_date ASC\n\n#最近7天\nSELECT\n    toUnixTimestamp(toStartOfDay(created_date)) AS time,\n    max(created_date),\n    sum(total_fee) / 100\nFROM order_behavior_log\nWHERE (created_date <= now()) AND (created_date >= (toDate(now()) - 7)) AND (state = 3)\nGROUP BY time\nORDER BY time ASC\n\n#10月份销售额\nselect sum(total_fee)/100 from order_behavior_log where toDate(created_date) >= '2019-10-01' and toDate(created_date) <='2019-10-31' and state = 3\n```\n\n**系统查询**\n\n```\n#查看列大小\nSELECT column, any(type), \n        sum(column_data_compressed_bytes) compressed, \n        sum(column_data_uncompressed_bytes) uncompressed, \n        sum(rows)\n    FROM system.parts_columns \n    WHERE (table = 'ontime') AND active AND (column LIKE '%CityName')\n    GROUP BY column\n    ORDER BY column ASC\n    \n#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`\nSELECT \n    table, \n    sum(rows), \n    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, \n    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr\nFROM system.parts\nWHERE active AND (table LIKE 'order_behavior_log')\nGROUP BY table\n```\n\n**产生date_time列**\n\n```\ncat data.csv | awk -F \",\" '{str=substr($NF,0,11);print $0\",\"str}'\n```\n\n**使用 mysql 函数将 mysql 数据导入clickhouse**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\n\nOk.\n\n0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)\n\n┌─count()─┐\n│ 7381387 │\n└─────────┘\n\n┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐\n│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │\n└────────────────────┴───────────┴─────────────────┴───────────┘\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\nWHERE id >\n(\n    SELECT max(id)\n    FROM order_behavior_log\n);\n```\n\n**使用 url 函数 clickhouseA 导入 clickhouseB**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n```\n\n**clickhouse 查询远程数据**\n\n```\n# 从api接口查询\nSELECT *\nFROM url('http://10.2.4.35:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n# 从远端mysql查询\nSELECT \n    data1, \n    COUNT(*)\nFROM mysql('172.16.200.4:3306', 'soa_behavior', 'order_behavior_log', 'root', 'passwd') \nGROUP BY data1\n```\n\n**跳过错误** (忽略csv标题行)\n\n```\nclickhouse-client --input_format_allow_errors_num=1 \\\n--input_format_allow_errors_ratio=0.1 \\\n--query=\"INSERT INTO bill SELECT *\nFROM url('http://payment-hotfix-duizhangdan.t1.nicetuan.net/order/downloadbill?bill_date=20200106&agg_platform=wx', CSV, 'created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String')\"\n```\n\n**分布式**\n\n```\ncreate table on cluster\n```\n\n**ReplicatedMergeTree** (互为主备)，配置：\n\n```\nconfig.xml 添加\n<include_from>/etc/clickhouse-server/metrika.xml</include_from>\n#主\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.34</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-1</replica>\n    </macros>\n</yandex>\n#从\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.34</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-2</replica>\n    </macros>\n</yandex>\n```\n分别创建表\n```\nCREATE TABLE soa_behavior.order_behavior_log\n(\n    `id` Int64,\n    `shop_order_id` Int64,\n    `trade_no` Int64,\n    `shop_id` Int32,\n    `trace_id` String,\n    `agg_platform` String,\n    `deal_handler` String,\n    `parameters` String,\n    `total_fee` Int32,\n    `state` Int8,\n    `return_data` String,\n    `execute_mic_time` String,\n    `error_code` Int32,\n    `error_msg` String,\n    `created_at` Int32,\n    `updated_at` Int32,\n    `deleted_at` Nullable(Int32),\n    `created_date` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/order_behavior_log', '{replica}')\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id\nSETTINGS index_granularity = 8192\n```\n启动脚本（由于容器去zookpeer上注册的是容器名，他们之间不能通过这个来通信，所以采用`host`网络模式）\n```\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse/data:/var/lib/clickhouse \\\n        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\\n        --name clickhouse \\\n        yandex/clickhouse-server:19.15.3.6\n```\nzookeeper 如果有问题表数据会变成只读模式，DML 操作和 DDL 操作也会在副本间同步\n\n**php 客户端**\n\n```\n#composer require smi2/phpclickhouse\n\n<?php\ninclude('./vendor/autoload.php');\n$config = [\n    'host' => '10.0.12.*',\n    'port' => '8123',\n    'username' => 'default',\n    'password' => ''\n];\n$db = new ClickHouseDB\\Client($config);\n$db->database('soa_behavior');\n$statement = $db->select('select * from order_behavior_log where id = 100');\nprint_r($statement->rows());\n\n$statement = $db->write('alter table order_behavior_log update shop_id = 1 where id = 100');\nprint_r($statement->info());\n```\n\n**grafana查询**\n\n```\nSELECT\n    1574058600000 as t,\n    usage_user\nFROM $table\nWHERE $timeFilter\nORDER BY t\n\n#查询最近7天数据\nSELECT\n    t,\n    groupArray((d,s)) AS groupArr\nFROM\n(\n  SELECT \n      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,\n      toDate(created_date) AS d, \n      sum(total_fee) / 100 AS s\n  FROM $table\n  WHERE (created_date < toDateTime($to)) AND (created_date > (toDate($to) - 7)) AND (state = 3)\n  GROUP BY t,d\n  ORDER BY t ASC\n)\nGROUP BY t\nORDER BY t \n\n#七日数据\nSELECT\n    t + 86400000 * 7,\n    st AS `七日`\nFROM\n(\n  SELECT\n     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,\n     sum(total_fee)/100 as st\n  FROM $table\n  WHERE \n      (created_date > toDateTime($from - 86400*7)) AND (created_date < toDateTime($to - 86400*7))\n      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) \n  Group by t\n  ORDER BY t\n)\n\n#世界地图\nCREATE TABLE `worldmap_latlng` (\n   created_date Date DEFAULT today(),  \n   created_at DateTime DEFAULT now(),    \n  `lat` Float32,\n  `lng` Float32,\n  `name` String,\n  `value` Int32\n ) ENGINE = MergeTree(created_date, created_at, 8192);\n \nINSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, '上海', 2)\n```\n\n\n**参考：**\n\nhttps://clickhouse.yandex/docs/zh/\nhttps://www.altinity.com/blog/clickhouse-for-time-series\nhttps://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\nhttps://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\n\n多分片多副本高可用\nhttps://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\nhttp://sineyuan.github.io/post/clickhouse-docker-quick-start/\nhttps://www.cnblogs.com/freeweb/p/9352947.html\n\n","source":"_posts/clickhouse.md","raw":"---\ntitle: \"ClickHouse 入门笔记\"\ndate: 2019-12-16 14:22:10\ntags: [clickhouse]\nshare: true\n---\n\nClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)\n\n**版本**\n\n文章使用版本 `docker pull yandex/clickhouse-server:19.15.3.6`\n\n**SQL支持**\n\n支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。\n\n**支持近似计算**\n\n用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)\n\n**吞吐量**\n\nClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。\n\n**访问控制**\n\nClickHouse包含访问控制配置，它们位于`users.xml`文件中(与'config.xml'同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。\n\n默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：`clickhouse-client --host=example.com`\n\n**时区设置**\n\n```\nsudo vim /etc/clickhouse-server/config.xml\n<timezone>Asia/Shanghai</timezone>\n```\n<!-- more -->\n\n**交互方式**\n\n客户端可以选择使用交互式与非交互式两种\n\n\n```\nCREATE TABLE test (\n         created_date Date DEFAULT today(),  \n         created_at DateTime DEFAULT now(), \n        `id` UInt16,\n        `name` String\n) ENGINE = MergeTree(created_date, created_at, 8192);\n\n\ncat <<_EOF | clickhouse-client --database=default --query=\"INSERT INTO test FORMAT CSV\";\n'2016-08-14','2016-08-14 00:00:00',3, 'some text',\n'2016-08-14','2016-08-14 00:00:01',4, 'some text'\n_EOF\n```\n\n可以指定 `\\G` 来替代分号或者在分号后面，这表示 `Vertical` 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。\n\n**命令行参数**\n\nhttps://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\n\n**输入输出格式**\n\n支持 json、csv 等多种格式 https://clickhouse.yandex/docs/zh/interfaces/formats/\n\n**mysql 引擎**\n\n```\nCREATE DATABASE mysql_db ENGINE = MySQL('172.16.200.10:3306', 'test', 'root', 'passwd')\n```\n\n**mergeTree 引擎**\n\n使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构\n\n```\nCREATE TABLE wikistat\n(\n    id bigint,\n    dt DateTime,\n    project String,\n    subproject String,\n    path String,\n    hits UInt64,\n    size UInt64\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(dt)\nORDER BY dt\n```\n\n**JSON 函数**\n\n```\n#pay_data 是否有 appId 下标\nselect visitParamHas(pay_data,'appId') from `order` limit 1;\n#获取appId值\nselect visitParamExtractRaw(pay_data,'appId') from `order` limit 1;\n#获取值\nSELECT visitParamExtractString(return_data, 'body') FROM order_behavior_log LIMIT 10;\n```\n\nhttps://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\n\n**数据备份**\n\n```\nclickhouse-client -d default --query=\"show create table ontime\"\nclickhouse-client -d default -f CSV --query=\"select * from ontime limit 1\" >/var/lib/clickhouse/a.csv\n```\n\n**使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:**\n![1.png](/img/clickhouse/1.png)\n\n存档到ClickHouse允许您保留旧数据并将其用于报告\n\n\n**LowCardinality 类型** （对字符串做数字字典）\n\n城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。\n\n值得一提的是，还有一种用字典编码字符串的可能性：[Enums](https://clickhouse.yandex/docs/en/data_types/enum/)。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。\n\n**实时试图**\n\n将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存\n\n**命令**\n\n```\ndetach database payemnt #删除mysql引擎库\nalter table cpu update usage_user = 888 where usage_user=18 #update\nalter table cpu delete where usage_user = 888 #delete\n```\n\n**web 客户端tabix**\n\n```\ndocker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client\n```\n\n\n**查询示例**\n\n```\n#执行时间分位数查询\nSELECT\n    created_date,\n    quantile(0.999)(toFloat64(execute_mic_time))\nFROM order_behavior_log\nWHERE (created_date > '2019-11-28 12:00:00') AND (created_date < '2019-11-28 12:01:00')\nGROUP BY created_date\nORDER BY created_date ASC\n\n#最近7天\nSELECT\n    toUnixTimestamp(toStartOfDay(created_date)) AS time,\n    max(created_date),\n    sum(total_fee) / 100\nFROM order_behavior_log\nWHERE (created_date <= now()) AND (created_date >= (toDate(now()) - 7)) AND (state = 3)\nGROUP BY time\nORDER BY time ASC\n\n#10月份销售额\nselect sum(total_fee)/100 from order_behavior_log where toDate(created_date) >= '2019-10-01' and toDate(created_date) <='2019-10-31' and state = 3\n```\n\n**系统查询**\n\n```\n#查看列大小\nSELECT column, any(type), \n        sum(column_data_compressed_bytes) compressed, \n        sum(column_data_uncompressed_bytes) uncompressed, \n        sum(rows)\n    FROM system.parts_columns \n    WHERE (table = 'ontime') AND active AND (column LIKE '%CityName')\n    GROUP BY column\n    ORDER BY column ASC\n    \n#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`\nSELECT \n    table, \n    sum(rows), \n    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, \n    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr\nFROM system.parts\nWHERE active AND (table LIKE 'order_behavior_log')\nGROUP BY table\n```\n\n**产生date_time列**\n\n```\ncat data.csv | awk -F \",\" '{str=substr($NF,0,11);print $0\",\"str}'\n```\n\n**使用 mysql 函数将 mysql 数据导入clickhouse**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\n\nOk.\n\n0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)\n\n┌─count()─┐\n│ 7381387 │\n└─────────┘\n\n┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐\n│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │\n└────────────────────┴───────────┴─────────────────┴───────────┘\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\nWHERE id >\n(\n    SELECT max(id)\n    FROM order_behavior_log\n);\n```\n\n**使用 url 函数 clickhouseA 导入 clickhouseB**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n```\n\n**clickhouse 查询远程数据**\n\n```\n# 从api接口查询\nSELECT *\nFROM url('http://10.2.4.35:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n# 从远端mysql查询\nSELECT \n    data1, \n    COUNT(*)\nFROM mysql('172.16.200.4:3306', 'soa_behavior', 'order_behavior_log', 'root', 'passwd') \nGROUP BY data1\n```\n\n**跳过错误** (忽略csv标题行)\n\n```\nclickhouse-client --input_format_allow_errors_num=1 \\\n--input_format_allow_errors_ratio=0.1 \\\n--query=\"INSERT INTO bill SELECT *\nFROM url('http://payment-hotfix-duizhangdan.t1.nicetuan.net/order/downloadbill?bill_date=20200106&agg_platform=wx', CSV, 'created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String')\"\n```\n\n**分布式**\n\n```\ncreate table on cluster\n```\n\n**ReplicatedMergeTree** (互为主备)，配置：\n\n```\nconfig.xml 添加\n<include_from>/etc/clickhouse-server/metrika.xml</include_from>\n#主\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.34</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-1</replica>\n    </macros>\n</yandex>\n#从\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.34</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-2</replica>\n    </macros>\n</yandex>\n```\n分别创建表\n```\nCREATE TABLE soa_behavior.order_behavior_log\n(\n    `id` Int64,\n    `shop_order_id` Int64,\n    `trade_no` Int64,\n    `shop_id` Int32,\n    `trace_id` String,\n    `agg_platform` String,\n    `deal_handler` String,\n    `parameters` String,\n    `total_fee` Int32,\n    `state` Int8,\n    `return_data` String,\n    `execute_mic_time` String,\n    `error_code` Int32,\n    `error_msg` String,\n    `created_at` Int32,\n    `updated_at` Int32,\n    `deleted_at` Nullable(Int32),\n    `created_date` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/order_behavior_log', '{replica}')\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id\nSETTINGS index_granularity = 8192\n```\n启动脚本（由于容器去zookpeer上注册的是容器名，他们之间不能通过这个来通信，所以采用`host`网络模式）\n```\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse/data:/var/lib/clickhouse \\\n        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\\n        --name clickhouse \\\n        yandex/clickhouse-server:19.15.3.6\n```\nzookeeper 如果有问题表数据会变成只读模式，DML 操作和 DDL 操作也会在副本间同步\n\n**php 客户端**\n\n```\n#composer require smi2/phpclickhouse\n\n<?php\ninclude('./vendor/autoload.php');\n$config = [\n    'host' => '10.0.12.*',\n    'port' => '8123',\n    'username' => 'default',\n    'password' => ''\n];\n$db = new ClickHouseDB\\Client($config);\n$db->database('soa_behavior');\n$statement = $db->select('select * from order_behavior_log where id = 100');\nprint_r($statement->rows());\n\n$statement = $db->write('alter table order_behavior_log update shop_id = 1 where id = 100');\nprint_r($statement->info());\n```\n\n**grafana查询**\n\n```\nSELECT\n    1574058600000 as t,\n    usage_user\nFROM $table\nWHERE $timeFilter\nORDER BY t\n\n#查询最近7天数据\nSELECT\n    t,\n    groupArray((d,s)) AS groupArr\nFROM\n(\n  SELECT \n      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,\n      toDate(created_date) AS d, \n      sum(total_fee) / 100 AS s\n  FROM $table\n  WHERE (created_date < toDateTime($to)) AND (created_date > (toDate($to) - 7)) AND (state = 3)\n  GROUP BY t,d\n  ORDER BY t ASC\n)\nGROUP BY t\nORDER BY t \n\n#七日数据\nSELECT\n    t + 86400000 * 7,\n    st AS `七日`\nFROM\n(\n  SELECT\n     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,\n     sum(total_fee)/100 as st\n  FROM $table\n  WHERE \n      (created_date > toDateTime($from - 86400*7)) AND (created_date < toDateTime($to - 86400*7))\n      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) \n  Group by t\n  ORDER BY t\n)\n\n#世界地图\nCREATE TABLE `worldmap_latlng` (\n   created_date Date DEFAULT today(),  \n   created_at DateTime DEFAULT now(),    \n  `lat` Float32,\n  `lng` Float32,\n  `name` String,\n  `value` Int32\n ) ENGINE = MergeTree(created_date, created_at, 8192);\n \nINSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, '上海', 2)\n```\n\n\n**参考：**\n\nhttps://clickhouse.yandex/docs/zh/\nhttps://www.altinity.com/blog/clickhouse-for-time-series\nhttps://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\nhttps://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\n\n多分片多副本高可用\nhttps://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\nhttp://sineyuan.github.io/post/clickhouse-docker-quick-start/\nhttps://www.cnblogs.com/freeweb/p/9352947.html\n\n","slug":"clickhouse","published":1,"updated":"2020-01-07T07:22:09.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsut00001sl90difb5fw","content":"<p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)</p>\n<p><strong>版本</strong></p>\n<p>文章使用版本 <code>docker pull yandex/clickhouse-server:19.15.3.6</code></p>\n<p><strong>SQL支持</strong></p>\n<p>支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。</p>\n<p><strong>支持近似计算</strong></p>\n<p>用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)</p>\n<p><strong>吞吐量</strong></p>\n<p>ClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。</p>\n<p><strong>访问控制</strong></p>\n<p>ClickHouse包含访问控制配置，它们位于<code>users.xml</code>文件中(与’config.xml’同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。</p>\n<p>默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：<code>clickhouse-client --host=example.com</code></p>\n<p><strong>时区设置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/clickhouse-server/config.xml</span><br><span class=\"line\">&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>交互方式</strong></p>\n<p>客户端可以选择使用交互式与非交互式两种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test (</span><br><span class=\"line\">         created_date Date DEFAULT today(),  </span><br><span class=\"line\">         created_at DateTime DEFAULT now(), </span><br><span class=\"line\">        `id` UInt16,</span><br><span class=\"line\">        `name` String</span><br><span class=\"line\">) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;_EOF | clickhouse-client --database=default --query=&quot;INSERT INTO test FORMAT CSV&quot;;</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:00&apos;,3, &apos;some text&apos;,</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:01&apos;,4, &apos;some text&apos;</span><br><span class=\"line\">_EOF</span><br></pre></td></tr></table></figure>\n<p>可以指定 <code>\\G</code> 来替代分号或者在分号后面，这表示 <code>Vertical</code> 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。</p>\n<p><strong>命令行参数</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu</a></p>\n<p><strong>输入输出格式</strong></p>\n<p>支持 json、csv 等多种格式 <a href=\"https://clickhouse.yandex/docs/zh/interfaces/formats/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/formats/</a></p>\n<p><strong>mysql 引擎</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mysql_db ENGINE = MySQL(&apos;172.16.200.10:3306&apos;, &apos;test&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>mergeTree 引擎</strong></p>\n<p>使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE wikistat</span><br><span class=\"line\">(</span><br><span class=\"line\">    id bigint,</span><br><span class=\"line\">    dt DateTime,</span><br><span class=\"line\">    project String,</span><br><span class=\"line\">    subproject String,</span><br><span class=\"line\">    path String,</span><br><span class=\"line\">    hits UInt64,</span><br><span class=\"line\">    size UInt64</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(dt)</span><br><span class=\"line\">ORDER BY dt</span><br></pre></td></tr></table></figure>\n<p><strong>JSON 函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pay_data 是否有 appId 下标</span><br><span class=\"line\">select visitParamHas(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取appId值</span><br><span class=\"line\">select visitParamExtractRaw(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取值</span><br><span class=\"line\">SELECT visitParamExtractString(return_data, &apos;body&apos;) FROM order_behavior_log LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/</a></p>\n<p><strong>数据备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -d default --query=&quot;show create table ontime&quot;</span><br><span class=\"line\">clickhouse-client -d default -f CSV --query=&quot;select * from ontime limit 1&quot; &gt;/var/lib/clickhouse/a.csv</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:</strong><br><img src=\"/img/clickhouse/1.png\" alt=\"1.png\"></p>\n<p>存档到ClickHouse允许您保留旧数据并将其用于报告</p>\n<p><strong>LowCardinality 类型</strong> （对字符串做数字字典）</p>\n<p>城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。</p>\n<p>值得一提的是，还有一种用字典编码字符串的可能性：<a href=\"https://clickhouse.yandex/docs/en/data_types/enum/\" target=\"_blank\" rel=\"noopener\">Enums</a>。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。</p>\n<p><strong>实时试图</strong></p>\n<p>将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存</p>\n<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detach database payemnt #删除mysql引擎库</span><br><span class=\"line\">alter table cpu update usage_user = 888 where usage_user=18 #update</span><br><span class=\"line\">alter table cpu delete where usage_user = 888 #delete</span><br></pre></td></tr></table></figure>\n<p><strong>web 客户端tabix</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client</span><br></pre></td></tr></table></figure>\n<p><strong>查询示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行时间分位数查询</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    created_date,</span><br><span class=\"line\">    quantile(0.999)(toFloat64(execute_mic_time))</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &gt; &apos;2019-11-28 12:00:00&apos;) AND (created_date &lt; &apos;2019-11-28 12:01:00&apos;)</span><br><span class=\"line\">GROUP BY created_date</span><br><span class=\"line\">ORDER BY created_date ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#最近7天</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toUnixTimestamp(toStartOfDay(created_date)) AS time,</span><br><span class=\"line\">    max(created_date),</span><br><span class=\"line\">    sum(total_fee) / 100</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &lt;= now()) AND (created_date &gt;= (toDate(now()) - 7)) AND (state = 3)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#10月份销售额</span><br><span class=\"line\">select sum(total_fee)/100 from order_behavior_log where toDate(created_date) &gt;= &apos;2019-10-01&apos; and toDate(created_date) &lt;=&apos;2019-10-31&apos; and state = 3</span><br></pre></td></tr></table></figure>\n<p><strong>系统查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看列大小</span><br><span class=\"line\">SELECT column, any(type), </span><br><span class=\"line\">        sum(column_data_compressed_bytes) compressed, </span><br><span class=\"line\">        sum(column_data_uncompressed_bytes) uncompressed, </span><br><span class=\"line\">        sum(rows)</span><br><span class=\"line\">    FROM system.parts_columns </span><br><span class=\"line\">    WHERE (table = &apos;ontime&apos;) AND active AND (column LIKE &apos;%CityName&apos;)</span><br><span class=\"line\">    GROUP BY column</span><br><span class=\"line\">    ORDER BY column ASC</span><br><span class=\"line\">    </span><br><span class=\"line\">#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    table, </span><br><span class=\"line\">    sum(rows), </span><br><span class=\"line\">    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, </span><br><span class=\"line\">    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr</span><br><span class=\"line\">FROM system.parts</span><br><span class=\"line\">WHERE active AND (table LIKE &apos;order_behavior_log&apos;)</span><br><span class=\"line\">GROUP BY table</span><br></pre></td></tr></table></figure>\n<p><strong>产生date_time列</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.csv | awk -F &quot;,&quot; &apos;&#123;str=substr($NF,0,11);print $0&quot;,&quot;str&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 函数将 mysql 数据导入clickhouse</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 7381387 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐</span><br><span class=\"line\">│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │</span><br><span class=\"line\">└────────────────────┴───────────┴─────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\">WHERE id &gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    SELECT max(id)</span><br><span class=\"line\">    FROM order_behavior_log</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>使用 url 函数 clickhouseA 导入 clickhouseB</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 查询远程数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从api接口查询</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.35:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 从远端mysql查询</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    data1, </span><br><span class=\"line\">    COUNT(*)</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.4:3306&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;) </span><br><span class=\"line\">GROUP BY data1</span><br></pre></td></tr></table></figure>\n<p><strong>跳过错误</strong> (忽略csv标题行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --input_format_allow_errors_num=1 \\</span><br><span class=\"line\">--input_format_allow_errors_ratio=0.1 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT *</span><br><span class=\"line\">FROM url(&apos;http://payment-hotfix-duizhangdan.t1.nicetuan.net/order/downloadbill?bill_date=20200106&amp;agg_platform=wx&apos;, CSV, &apos;created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>分布式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table on cluster</span><br></pre></td></tr></table></figure>\n<p><strong>ReplicatedMergeTree</strong> (互为主备)，配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.xml 添加</span><br><span class=\"line\">&lt;include_from&gt;/etc/clickhouse-server/metrika.xml&lt;/include_from&gt;</span><br><span class=\"line\">#主</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.34&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-1&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br><span class=\"line\">#从</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.34&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-2&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>\n<p>分别创建表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE soa_behavior.order_behavior_log</span><br><span class=\"line\">(</span><br><span class=\"line\">    `id` Int64,</span><br><span class=\"line\">    `shop_order_id` Int64,</span><br><span class=\"line\">    `trade_no` Int64,</span><br><span class=\"line\">    `shop_id` Int32,</span><br><span class=\"line\">    `trace_id` String,</span><br><span class=\"line\">    `agg_platform` String,</span><br><span class=\"line\">    `deal_handler` String,</span><br><span class=\"line\">    `parameters` String,</span><br><span class=\"line\">    `total_fee` Int32,</span><br><span class=\"line\">    `state` Int8,</span><br><span class=\"line\">    `return_data` String,</span><br><span class=\"line\">    `execute_mic_time` String,</span><br><span class=\"line\">    `error_code` Int32,</span><br><span class=\"line\">    `error_msg` String,</span><br><span class=\"line\">    `created_at` Int32,</span><br><span class=\"line\">    `updated_at` Int32,</span><br><span class=\"line\">    `deleted_at` Nullable(Int32),</span><br><span class=\"line\">    `created_date` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/order_behavior_log&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure></p>\n<p>启动脚本（由于容器去zookpeer上注册的是容器名，他们之间不能通过这个来通信，所以采用<code>host</code>网络模式）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.15.3.6</span><br></pre></td></tr></table></figure></p>\n<p>zookeeper 如果有问题表数据会变成只读模式，DML 操作和 DDL 操作也会在副本间同步</p>\n<p><strong>php 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#composer require smi2/phpclickhouse</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include(&apos;./vendor/autoload.php&apos;);</span><br><span class=\"line\">$config = [</span><br><span class=\"line\">    &apos;host&apos; =&gt; &apos;10.0.12.*&apos;,</span><br><span class=\"line\">    &apos;port&apos; =&gt; &apos;8123&apos;,</span><br><span class=\"line\">    &apos;username&apos; =&gt; &apos;default&apos;,</span><br><span class=\"line\">    &apos;password&apos; =&gt; &apos;&apos;</span><br><span class=\"line\">];</span><br><span class=\"line\">$db = new ClickHouseDB\\Client($config);</span><br><span class=\"line\">$db-&gt;database(&apos;soa_behavior&apos;);</span><br><span class=\"line\">$statement = $db-&gt;select(&apos;select * from order_behavior_log where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;rows());</span><br><span class=\"line\"></span><br><span class=\"line\">$statement = $db-&gt;write(&apos;alter table order_behavior_log update shop_id = 1 where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;info());</span><br></pre></td></tr></table></figure>\n<p><strong>grafana查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">    1574058600000 as t,</span><br><span class=\"line\">    usage_user</span><br><span class=\"line\">FROM $table</span><br><span class=\"line\">WHERE $timeFilter</span><br><span class=\"line\">ORDER BY t</span><br><span class=\"line\"></span><br><span class=\"line\">#查询最近7天数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t,</span><br><span class=\"line\">    groupArray((d,s)) AS groupArr</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT </span><br><span class=\"line\">      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,</span><br><span class=\"line\">      toDate(created_date) AS d, </span><br><span class=\"line\">      sum(total_fee) / 100 AS s</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE (created_date &lt; toDateTime($to)) AND (created_date &gt; (toDate($to) - 7)) AND (state = 3)</span><br><span class=\"line\">  GROUP BY t,d</span><br><span class=\"line\">  ORDER BY t ASC</span><br><span class=\"line\">)</span><br><span class=\"line\">GROUP BY t</span><br><span class=\"line\">ORDER BY t </span><br><span class=\"line\"></span><br><span class=\"line\">#七日数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t + 86400000 * 7,</span><br><span class=\"line\">    st AS `七日`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,</span><br><span class=\"line\">     sum(total_fee)/100 as st</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE </span><br><span class=\"line\">      (created_date &gt; toDateTime($from - 86400*7)) AND (created_date &lt; toDateTime($to - 86400*7))</span><br><span class=\"line\">      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) </span><br><span class=\"line\">  Group by t</span><br><span class=\"line\">  ORDER BY t</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">#世界地图</span><br><span class=\"line\">CREATE TABLE `worldmap_latlng` (</span><br><span class=\"line\">   created_date Date DEFAULT today(),  </span><br><span class=\"line\">   created_at DateTime DEFAULT now(),    </span><br><span class=\"line\">  `lat` Float32,</span><br><span class=\"line\">  `lng` Float32,</span><br><span class=\"line\">  `name` String,</span><br><span class=\"line\">  `value` Int32</span><br><span class=\"line\"> ) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, &apos;上海&apos;, 2)</span><br></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/</a><br><a href=\"https://www.altinity.com/blog/clickhouse-for-time-series\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/clickhouse-for-time-series</a><br><a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a><br><a href=\"https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse</a></p>\n<p>多分片多副本高可用<br><a href=\"https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a><br><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">http://sineyuan.github.io/post/clickhouse-docker-quick-start/</a><br><a href=\"https://www.cnblogs.com/freeweb/p/9352947.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/freeweb/p/9352947.html</a></p>\n","site":{"data":{}},"excerpt":"<p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)</p>\n<p><strong>版本</strong></p>\n<p>文章使用版本 <code>docker pull yandex/clickhouse-server:19.15.3.6</code></p>\n<p><strong>SQL支持</strong></p>\n<p>支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。</p>\n<p><strong>支持近似计算</strong></p>\n<p>用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)</p>\n<p><strong>吞吐量</strong></p>\n<p>ClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。</p>\n<p><strong>访问控制</strong></p>\n<p>ClickHouse包含访问控制配置，它们位于<code>users.xml</code>文件中(与’config.xml’同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。</p>\n<p>默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：<code>clickhouse-client --host=example.com</code></p>\n<p><strong>时区设置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/clickhouse-server/config.xml</span><br><span class=\"line\">&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;</span><br></pre></td></tr></table></figure>","more":"<p><strong>交互方式</strong></p>\n<p>客户端可以选择使用交互式与非交互式两种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test (</span><br><span class=\"line\">         created_date Date DEFAULT today(),  </span><br><span class=\"line\">         created_at DateTime DEFAULT now(), </span><br><span class=\"line\">        `id` UInt16,</span><br><span class=\"line\">        `name` String</span><br><span class=\"line\">) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;_EOF | clickhouse-client --database=default --query=&quot;INSERT INTO test FORMAT CSV&quot;;</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:00&apos;,3, &apos;some text&apos;,</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:01&apos;,4, &apos;some text&apos;</span><br><span class=\"line\">_EOF</span><br></pre></td></tr></table></figure>\n<p>可以指定 <code>\\G</code> 来替代分号或者在分号后面，这表示 <code>Vertical</code> 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。</p>\n<p><strong>命令行参数</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu</a></p>\n<p><strong>输入输出格式</strong></p>\n<p>支持 json、csv 等多种格式 <a href=\"https://clickhouse.yandex/docs/zh/interfaces/formats/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/formats/</a></p>\n<p><strong>mysql 引擎</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mysql_db ENGINE = MySQL(&apos;172.16.200.10:3306&apos;, &apos;test&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>mergeTree 引擎</strong></p>\n<p>使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE wikistat</span><br><span class=\"line\">(</span><br><span class=\"line\">    id bigint,</span><br><span class=\"line\">    dt DateTime,</span><br><span class=\"line\">    project String,</span><br><span class=\"line\">    subproject String,</span><br><span class=\"line\">    path String,</span><br><span class=\"line\">    hits UInt64,</span><br><span class=\"line\">    size UInt64</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(dt)</span><br><span class=\"line\">ORDER BY dt</span><br></pre></td></tr></table></figure>\n<p><strong>JSON 函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pay_data 是否有 appId 下标</span><br><span class=\"line\">select visitParamHas(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取appId值</span><br><span class=\"line\">select visitParamExtractRaw(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取值</span><br><span class=\"line\">SELECT visitParamExtractString(return_data, &apos;body&apos;) FROM order_behavior_log LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/</a></p>\n<p><strong>数据备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -d default --query=&quot;show create table ontime&quot;</span><br><span class=\"line\">clickhouse-client -d default -f CSV --query=&quot;select * from ontime limit 1&quot; &gt;/var/lib/clickhouse/a.csv</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:</strong><br><img src=\"/img/clickhouse/1.png\" alt=\"1.png\"></p>\n<p>存档到ClickHouse允许您保留旧数据并将其用于报告</p>\n<p><strong>LowCardinality 类型</strong> （对字符串做数字字典）</p>\n<p>城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。</p>\n<p>值得一提的是，还有一种用字典编码字符串的可能性：<a href=\"https://clickhouse.yandex/docs/en/data_types/enum/\" target=\"_blank\" rel=\"noopener\">Enums</a>。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。</p>\n<p><strong>实时试图</strong></p>\n<p>将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存</p>\n<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detach database payemnt #删除mysql引擎库</span><br><span class=\"line\">alter table cpu update usage_user = 888 where usage_user=18 #update</span><br><span class=\"line\">alter table cpu delete where usage_user = 888 #delete</span><br></pre></td></tr></table></figure>\n<p><strong>web 客户端tabix</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client</span><br></pre></td></tr></table></figure>\n<p><strong>查询示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行时间分位数查询</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    created_date,</span><br><span class=\"line\">    quantile(0.999)(toFloat64(execute_mic_time))</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &gt; &apos;2019-11-28 12:00:00&apos;) AND (created_date &lt; &apos;2019-11-28 12:01:00&apos;)</span><br><span class=\"line\">GROUP BY created_date</span><br><span class=\"line\">ORDER BY created_date ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#最近7天</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toUnixTimestamp(toStartOfDay(created_date)) AS time,</span><br><span class=\"line\">    max(created_date),</span><br><span class=\"line\">    sum(total_fee) / 100</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &lt;= now()) AND (created_date &gt;= (toDate(now()) - 7)) AND (state = 3)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#10月份销售额</span><br><span class=\"line\">select sum(total_fee)/100 from order_behavior_log where toDate(created_date) &gt;= &apos;2019-10-01&apos; and toDate(created_date) &lt;=&apos;2019-10-31&apos; and state = 3</span><br></pre></td></tr></table></figure>\n<p><strong>系统查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看列大小</span><br><span class=\"line\">SELECT column, any(type), </span><br><span class=\"line\">        sum(column_data_compressed_bytes) compressed, </span><br><span class=\"line\">        sum(column_data_uncompressed_bytes) uncompressed, </span><br><span class=\"line\">        sum(rows)</span><br><span class=\"line\">    FROM system.parts_columns </span><br><span class=\"line\">    WHERE (table = &apos;ontime&apos;) AND active AND (column LIKE &apos;%CityName&apos;)</span><br><span class=\"line\">    GROUP BY column</span><br><span class=\"line\">    ORDER BY column ASC</span><br><span class=\"line\">    </span><br><span class=\"line\">#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    table, </span><br><span class=\"line\">    sum(rows), </span><br><span class=\"line\">    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, </span><br><span class=\"line\">    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr</span><br><span class=\"line\">FROM system.parts</span><br><span class=\"line\">WHERE active AND (table LIKE &apos;order_behavior_log&apos;)</span><br><span class=\"line\">GROUP BY table</span><br></pre></td></tr></table></figure>\n<p><strong>产生date_time列</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.csv | awk -F &quot;,&quot; &apos;&#123;str=substr($NF,0,11);print $0&quot;,&quot;str&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 函数将 mysql 数据导入clickhouse</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 7381387 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐</span><br><span class=\"line\">│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │</span><br><span class=\"line\">└────────────────────┴───────────┴─────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\">WHERE id &gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    SELECT max(id)</span><br><span class=\"line\">    FROM order_behavior_log</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>使用 url 函数 clickhouseA 导入 clickhouseB</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 查询远程数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从api接口查询</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.35:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 从远端mysql查询</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    data1, </span><br><span class=\"line\">    COUNT(*)</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.4:3306&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;) </span><br><span class=\"line\">GROUP BY data1</span><br></pre></td></tr></table></figure>\n<p><strong>跳过错误</strong> (忽略csv标题行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --input_format_allow_errors_num=1 \\</span><br><span class=\"line\">--input_format_allow_errors_ratio=0.1 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT *</span><br><span class=\"line\">FROM url(&apos;http://payment-hotfix-duizhangdan.t1.nicetuan.net/order/downloadbill?bill_date=20200106&amp;agg_platform=wx&apos;, CSV, &apos;created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>分布式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table on cluster</span><br></pre></td></tr></table></figure>\n<p><strong>ReplicatedMergeTree</strong> (互为主备)，配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.xml 添加</span><br><span class=\"line\">&lt;include_from&gt;/etc/clickhouse-server/metrika.xml&lt;/include_from&gt;</span><br><span class=\"line\">#主</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.34&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-1&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br><span class=\"line\">#从</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.34&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-2&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>\n<p>分别创建表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE soa_behavior.order_behavior_log</span><br><span class=\"line\">(</span><br><span class=\"line\">    `id` Int64,</span><br><span class=\"line\">    `shop_order_id` Int64,</span><br><span class=\"line\">    `trade_no` Int64,</span><br><span class=\"line\">    `shop_id` Int32,</span><br><span class=\"line\">    `trace_id` String,</span><br><span class=\"line\">    `agg_platform` String,</span><br><span class=\"line\">    `deal_handler` String,</span><br><span class=\"line\">    `parameters` String,</span><br><span class=\"line\">    `total_fee` Int32,</span><br><span class=\"line\">    `state` Int8,</span><br><span class=\"line\">    `return_data` String,</span><br><span class=\"line\">    `execute_mic_time` String,</span><br><span class=\"line\">    `error_code` Int32,</span><br><span class=\"line\">    `error_msg` String,</span><br><span class=\"line\">    `created_at` Int32,</span><br><span class=\"line\">    `updated_at` Int32,</span><br><span class=\"line\">    `deleted_at` Nullable(Int32),</span><br><span class=\"line\">    `created_date` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/order_behavior_log&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure></p>\n<p>启动脚本（由于容器去zookpeer上注册的是容器名，他们之间不能通过这个来通信，所以采用<code>host</code>网络模式）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.15.3.6</span><br></pre></td></tr></table></figure></p>\n<p>zookeeper 如果有问题表数据会变成只读模式，DML 操作和 DDL 操作也会在副本间同步</p>\n<p><strong>php 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#composer require smi2/phpclickhouse</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include(&apos;./vendor/autoload.php&apos;);</span><br><span class=\"line\">$config = [</span><br><span class=\"line\">    &apos;host&apos; =&gt; &apos;10.0.12.*&apos;,</span><br><span class=\"line\">    &apos;port&apos; =&gt; &apos;8123&apos;,</span><br><span class=\"line\">    &apos;username&apos; =&gt; &apos;default&apos;,</span><br><span class=\"line\">    &apos;password&apos; =&gt; &apos;&apos;</span><br><span class=\"line\">];</span><br><span class=\"line\">$db = new ClickHouseDB\\Client($config);</span><br><span class=\"line\">$db-&gt;database(&apos;soa_behavior&apos;);</span><br><span class=\"line\">$statement = $db-&gt;select(&apos;select * from order_behavior_log where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;rows());</span><br><span class=\"line\"></span><br><span class=\"line\">$statement = $db-&gt;write(&apos;alter table order_behavior_log update shop_id = 1 where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;info());</span><br></pre></td></tr></table></figure>\n<p><strong>grafana查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">    1574058600000 as t,</span><br><span class=\"line\">    usage_user</span><br><span class=\"line\">FROM $table</span><br><span class=\"line\">WHERE $timeFilter</span><br><span class=\"line\">ORDER BY t</span><br><span class=\"line\"></span><br><span class=\"line\">#查询最近7天数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t,</span><br><span class=\"line\">    groupArray((d,s)) AS groupArr</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT </span><br><span class=\"line\">      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,</span><br><span class=\"line\">      toDate(created_date) AS d, </span><br><span class=\"line\">      sum(total_fee) / 100 AS s</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE (created_date &lt; toDateTime($to)) AND (created_date &gt; (toDate($to) - 7)) AND (state = 3)</span><br><span class=\"line\">  GROUP BY t,d</span><br><span class=\"line\">  ORDER BY t ASC</span><br><span class=\"line\">)</span><br><span class=\"line\">GROUP BY t</span><br><span class=\"line\">ORDER BY t </span><br><span class=\"line\"></span><br><span class=\"line\">#七日数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t + 86400000 * 7,</span><br><span class=\"line\">    st AS `七日`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,</span><br><span class=\"line\">     sum(total_fee)/100 as st</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE </span><br><span class=\"line\">      (created_date &gt; toDateTime($from - 86400*7)) AND (created_date &lt; toDateTime($to - 86400*7))</span><br><span class=\"line\">      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) </span><br><span class=\"line\">  Group by t</span><br><span class=\"line\">  ORDER BY t</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">#世界地图</span><br><span class=\"line\">CREATE TABLE `worldmap_latlng` (</span><br><span class=\"line\">   created_date Date DEFAULT today(),  </span><br><span class=\"line\">   created_at DateTime DEFAULT now(),    </span><br><span class=\"line\">  `lat` Float32,</span><br><span class=\"line\">  `lng` Float32,</span><br><span class=\"line\">  `name` String,</span><br><span class=\"line\">  `value` Int32</span><br><span class=\"line\"> ) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, &apos;上海&apos;, 2)</span><br></pre></td></tr></table></figure>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/</a><br><a href=\"https://www.altinity.com/blog/clickhouse-for-time-series\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/clickhouse-for-time-series</a><br><a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a><br><a href=\"https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse</a></p>\n<p>多分片多副本高可用<br><a href=\"https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a><br><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">http://sineyuan.github.io/post/clickhouse-docker-quick-start/</a><br><a href=\"https://www.cnblogs.com/freeweb/p/9352947.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/freeweb/p/9352947.html</a></p>"},{"layout":"post","title":"B 树","description":"","date":"2019-02-27T00:00:00.000Z","comments":0,"share":true,"_content":"\ngRPC是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers) 序列化协议开发，且支持众多开发语言。 使用 protoc --go_out=. *.proto 把proto文件转成 go 文件，定义格式如下：\n\n```\nmessage HelloRequest {\n  string greeting = 1;\n}\nmessage HelloResponse {\n  string reply = 1;\n}\nservice HelloService {\n  rpc SayHello(HelloRequest) returns (HelloResponse);\n}\n```\n\nhttps://zhuanlan.zhihu.com/p/27700617\n\nB树中每一个内部节点会包含一定数量的键，键将节点的子树分开。例如，如果一个内部节点有3个子节点（子树），那么它就必须有两个键： a1 和 a2 。左边子树的所有值都必须小于 a1 ，中间子树的所有值都必须在 a1 和a2 之间，右边子树的所有值都必须大于 a2 。\n\n规则：\n\n\n（1）所有节点关键字是按递增次序排列，并遵循左小右大原则；\n\n（2）1<子节点数量<=M ，M>=2，空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；\n\n（3）非根节点关键字数量大于等于ceil(m/2)-1且小于等于m-1个；（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)\n\n（4）非叶节点有N个子节点，则该节点的关键字数等于N-1;\n\n（5）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子\n\nB+ 树特点\n\n\n\n1、相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；\n\n2、B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;\n\n3、B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。\n\n4、B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历。\n\n5、B树相对于B+树的优点是，如果经常访问的数据离根节点很近，而B树的非叶子节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比B+树快。\n","source":"_posts/btree.md","raw":"---\nlayout: post\ntitle: \"B 树\"\ndescription: \"\"\ndate: 2019-02-27\ntags: [b树,数据结构]\ncomments: false\nshare: true\n---\n\ngRPC是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers) 序列化协议开发，且支持众多开发语言。 使用 protoc --go_out=. *.proto 把proto文件转成 go 文件，定义格式如下：\n\n```\nmessage HelloRequest {\n  string greeting = 1;\n}\nmessage HelloResponse {\n  string reply = 1;\n}\nservice HelloService {\n  rpc SayHello(HelloRequest) returns (HelloResponse);\n}\n```\n\nhttps://zhuanlan.zhihu.com/p/27700617\n\nB树中每一个内部节点会包含一定数量的键，键将节点的子树分开。例如，如果一个内部节点有3个子节点（子树），那么它就必须有两个键： a1 和 a2 。左边子树的所有值都必须小于 a1 ，中间子树的所有值都必须在 a1 和a2 之间，右边子树的所有值都必须大于 a2 。\n\n规则：\n\n\n（1）所有节点关键字是按递增次序排列，并遵循左小右大原则；\n\n（2）1<子节点数量<=M ，M>=2，空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；\n\n（3）非根节点关键字数量大于等于ceil(m/2)-1且小于等于m-1个；（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)\n\n（4）非叶节点有N个子节点，则该节点的关键字数等于N-1;\n\n（5）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子\n\nB+ 树特点\n\n\n\n1、相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；\n\n2、B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;\n\n3、B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。\n\n4、B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历。\n\n5、B树相对于B+树的优点是，如果经常访问的数据离根节点很近，而B树的非叶子节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比B+树快。\n","slug":"btree","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ck53jqsv100011sl9vxerfyus","content":"<p>gRPC是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers) 序列化协议开发，且支持众多开发语言。 使用 protoc –go_out=. *.proto 把proto文件转成 go 文件，定义格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  string greeting = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloResponse &#123;</span><br><span class=\"line\">  string reply = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service HelloService &#123;</span><br><span class=\"line\">  rpc SayHello(HelloRequest) returns (HelloResponse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27700617\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27700617</a></p>\n<p>B树中每一个内部节点会包含一定数量的键，键将节点的子树分开。例如，如果一个内部节点有3个子节点（子树），那么它就必须有两个键： a1 和 a2 。左边子树的所有值都必须小于 a1 ，中间子树的所有值都必须在 a1 和a2 之间，右边子树的所有值都必须大于 a2 。</p>\n<p>规则：</p>\n<p>（1）所有节点关键字是按递增次序排列，并遵循左小右大原则；</p>\n<p>（2）1&lt;子节点数量&lt;=M ，M&gt;=2，空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；</p>\n<p>（3）非根节点关键字数量大于等于ceil(m/2)-1且小于等于m-1个；（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)</p>\n<p>（4）非叶节点有N个子节点，则该节点的关键字数等于N-1;</p>\n<p>（5）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子</p>\n<p>B+ 树特点</p>\n<p>1、相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；</p>\n<p>2、B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p>\n<p>3、B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</p>\n<p>4、B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历。</p>\n<p>5、B树相对于B+树的优点是，如果经常访问的数据离根节点很近，而B树的非叶子节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比B+树快。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>gRPC是一个高性能、通用的开源 RPC 框架，其由 Google 主要面向移动应用开发并基于HTTP/2协议标准而设计，基于ProtoBuf(Protocol Buffers) 序列化协议开发，且支持众多开发语言。 使用 protoc –go_out=. *.proto 把proto文件转成 go 文件，定义格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  string greeting = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloResponse &#123;</span><br><span class=\"line\">  string reply = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service HelloService &#123;</span><br><span class=\"line\">  rpc SayHello(HelloRequest) returns (HelloResponse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27700617\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27700617</a></p>\n<p>B树中每一个内部节点会包含一定数量的键，键将节点的子树分开。例如，如果一个内部节点有3个子节点（子树），那么它就必须有两个键： a1 和 a2 。左边子树的所有值都必须小于 a1 ，中间子树的所有值都必须在 a1 和a2 之间，右边子树的所有值都必须大于 a2 。</p>\n<p>规则：</p>\n<p>（1）所有节点关键字是按递增次序排列，并遵循左小右大原则；</p>\n<p>（2）1&lt;子节点数量&lt;=M ，M&gt;=2，空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；</p>\n<p>（3）非根节点关键字数量大于等于ceil(m/2)-1且小于等于m-1个；（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)</p>\n<p>（4）非叶节点有N个子节点，则该节点的关键字数等于N-1;</p>\n<p>（5）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子</p>\n<p>B+ 树特点</p>\n<p>1、相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；</p>\n<p>2、B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p>\n<p>3、B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</p>\n<p>4、B+树遍历整棵树只需要遍历所有的叶子节点即可，，而不需要像B树一样需要对每一层进行遍历。</p>\n<p>5、B树相对于B+树的优点是，如果经常访问的数据离根节点很近，而B树的非叶子节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比B+树快。</p>\n"},{"title":"core-dns使用","date":"2019-10-16T17:58:10.000Z","share":true,"_content":"\n**core-dns-conf 配置**\n```\n. {\n    forward . 8.8.8.8\n    log\n    hosts {\n        10.111.8.170 www.sms.service\n        ttl 60\n        reload 1m\n        fallthrough\n    }\n}\n```\n\n**docker 方式启动**\n```shell\nsudo systemctl stop systemd-resolved\ndocker run -d \\\n    --net=\"host\" \\\n    -v /etc/hosts:/etc/hosts \\\n    -v /etc/resolv.conf:/etc/resolv.conf \\\n    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\\n    --name core-dns \\\n    coredns/coredns -conf /etc/core-dns-conf\n```\n\n**使用etcd做服务发现**\n\n```\nhttps://www.cnblogs.com/leffss/p/10148507.html\netcdctl put /coredns/net/nicetuan/t1/a '{\"host\":\"10.111.8.185\",\"ttl\":30}'\n\n$ ETCDCTL_API=3 \n./etcdctl put /skydns/com/example/services/users \\\n'{\"host\": \"192.0.2.10\",\"port \": 20020,\"priority\": 10,\"weight\": 20}'\nOK\n$ ETCDCTL_API=3 \n./etcdctl get /skydns/com/example/services/users\n/skydns/com/example/services/users\n{\"host\": \"192.0.2.10\",\"port\": 20020,\"priority\": 10,\"weight\": 20}\n\n. {\n    etcd {   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com {\n        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成\n        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下\n        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开\n\n        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。\n        upstream 8.8.8.8:53 8.8.4.4:53\n\n        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件\n        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置\n    }\n    prometheus  :9153 # 监控插件\n    cache 160\n    loadbalance   # 负载均衡，开启DNS记录轮询策略\n    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析\n    log # 打印日志\n}\n```\n\n对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。\n\n```\ndocker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\\n    /bin/bash -c \\\n    \"git clone https://github.com/coredns/coredns.git && \\\n    cd coredns && \\\n    git checkout v1.5.0\"\n```\n\n","source":"_posts/core-dns.md","raw":"---\ntitle: \"core-dns使用\"\ndate: 2019-10-16 17:58:10\ntags: [coredns,etcd]\nshare: true\n---\n\n**core-dns-conf 配置**\n```\n. {\n    forward . 8.8.8.8\n    log\n    hosts {\n        10.111.8.170 www.sms.service\n        ttl 60\n        reload 1m\n        fallthrough\n    }\n}\n```\n\n**docker 方式启动**\n```shell\nsudo systemctl stop systemd-resolved\ndocker run -d \\\n    --net=\"host\" \\\n    -v /etc/hosts:/etc/hosts \\\n    -v /etc/resolv.conf:/etc/resolv.conf \\\n    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\\n    --name core-dns \\\n    coredns/coredns -conf /etc/core-dns-conf\n```\n\n**使用etcd做服务发现**\n\n```\nhttps://www.cnblogs.com/leffss/p/10148507.html\netcdctl put /coredns/net/nicetuan/t1/a '{\"host\":\"10.111.8.185\",\"ttl\":30}'\n\n$ ETCDCTL_API=3 \n./etcdctl put /skydns/com/example/services/users \\\n'{\"host\": \"192.0.2.10\",\"port \": 20020,\"priority\": 10,\"weight\": 20}'\nOK\n$ ETCDCTL_API=3 \n./etcdctl get /skydns/com/example/services/users\n/skydns/com/example/services/users\n{\"host\": \"192.0.2.10\",\"port\": 20020,\"priority\": 10,\"weight\": 20}\n\n. {\n    etcd {   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com {\n        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成\n        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下\n        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开\n\n        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。\n        upstream 8.8.8.8:53 8.8.4.4:53\n\n        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件\n        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置\n    }\n    prometheus  :9153 # 监控插件\n    cache 160\n    loadbalance   # 负载均衡，开启DNS记录轮询策略\n    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析\n    log # 打印日志\n}\n```\n\n对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。\n\n```\ndocker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\\n    /bin/bash -c \\\n    \"git clone https://github.com/coredns/coredns.git && \\\n    cd coredns && \\\n    git checkout v1.5.0\"\n```\n\n","slug":"core-dns","published":1,"updated":"2019-11-14T03:33:28.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsv800031sl9n4n6tmww","content":"<p><strong>core-dns-conf 配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. &#123;</span><br><span class=\"line\">    forward . 8.8.8.8</span><br><span class=\"line\">    log</span><br><span class=\"line\">    hosts &#123;</span><br><span class=\"line\">        10.111.8.170 www.sms.service</span><br><span class=\"line\">        ttl 60</span><br><span class=\"line\">        reload 1m</span><br><span class=\"line\">        fallthrough</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>docker 方式启动</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop systemd-resolved</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --net=\"host\" \\</span><br><span class=\"line\">    -v /etc/hosts:/etc/hosts \\</span><br><span class=\"line\">    -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\</span><br><span class=\"line\">    --name core-dns \\</span><br><span class=\"line\">    coredns/coredns -conf /etc/core-dns-conf</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用etcd做服务发现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leffss/p/10148507.html</span><br><span class=\"line\">etcdctl put /coredns/net/nicetuan/t1/a &apos;&#123;&quot;host&quot;:&quot;10.111.8.185&quot;,&quot;ttl&quot;:30&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl put /skydns/com/example/services/users \\</span><br><span class=\"line\">&apos;&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port &quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;&apos;</span><br><span class=\"line\">OK</span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl get /skydns/com/example/services/users</span><br><span class=\"line\">/skydns/com/example/services/users</span><br><span class=\"line\">&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port&quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">. &#123;</span><br><span class=\"line\">    etcd &#123;   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com &#123;</span><br><span class=\"line\">        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成</span><br><span class=\"line\">        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下</span><br><span class=\"line\">        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开</span><br><span class=\"line\"></span><br><span class=\"line\">        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。</span><br><span class=\"line\">        upstream 8.8.8.8:53 8.8.4.4:53</span><br><span class=\"line\"></span><br><span class=\"line\">        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件</span><br><span class=\"line\">        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prometheus  :9153 # 监控插件</span><br><span class=\"line\">    cache 160</span><br><span class=\"line\">    loadbalance   # 负载均衡，开启DNS记录轮询策略</span><br><span class=\"line\">    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析</span><br><span class=\"line\">    log # 打印日志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\</span><br><span class=\"line\">    /bin/bash -c \\</span><br><span class=\"line\">    &quot;git clone https://github.com/coredns/coredns.git &amp;&amp; \\</span><br><span class=\"line\">    cd coredns &amp;&amp; \\</span><br><span class=\"line\">    git checkout v1.5.0&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>core-dns-conf 配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. &#123;</span><br><span class=\"line\">    forward . 8.8.8.8</span><br><span class=\"line\">    log</span><br><span class=\"line\">    hosts &#123;</span><br><span class=\"line\">        10.111.8.170 www.sms.service</span><br><span class=\"line\">        ttl 60</span><br><span class=\"line\">        reload 1m</span><br><span class=\"line\">        fallthrough</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>docker 方式启动</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop systemd-resolved</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --net=\"host\" \\</span><br><span class=\"line\">    -v /etc/hosts:/etc/hosts \\</span><br><span class=\"line\">    -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\</span><br><span class=\"line\">    --name core-dns \\</span><br><span class=\"line\">    coredns/coredns -conf /etc/core-dns-conf</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用etcd做服务发现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leffss/p/10148507.html</span><br><span class=\"line\">etcdctl put /coredns/net/nicetuan/t1/a &apos;&#123;&quot;host&quot;:&quot;10.111.8.185&quot;,&quot;ttl&quot;:30&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl put /skydns/com/example/services/users \\</span><br><span class=\"line\">&apos;&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port &quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;&apos;</span><br><span class=\"line\">OK</span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl get /skydns/com/example/services/users</span><br><span class=\"line\">/skydns/com/example/services/users</span><br><span class=\"line\">&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port&quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">. &#123;</span><br><span class=\"line\">    etcd &#123;   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com &#123;</span><br><span class=\"line\">        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成</span><br><span class=\"line\">        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下</span><br><span class=\"line\">        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开</span><br><span class=\"line\"></span><br><span class=\"line\">        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。</span><br><span class=\"line\">        upstream 8.8.8.8:53 8.8.4.4:53</span><br><span class=\"line\"></span><br><span class=\"line\">        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件</span><br><span class=\"line\">        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prometheus  :9153 # 监控插件</span><br><span class=\"line\">    cache 160</span><br><span class=\"line\">    loadbalance   # 负载均衡，开启DNS记录轮询策略</span><br><span class=\"line\">    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析</span><br><span class=\"line\">    log # 打印日志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\</span><br><span class=\"line\">    /bin/bash -c \\</span><br><span class=\"line\">    &quot;git clone https://github.com/coredns/coredns.git &amp;&amp; \\</span><br><span class=\"line\">    cd coredns &amp;&amp; \\</span><br><span class=\"line\">    git checkout v1.5.0&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用awk处理csv文件","date":"2020-01-06T15:00:00.000Z","share":true,"_content":"\n上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。\n\n首先考虑了 join 命令，实现左连接、内连接都是没有问题的。\n\n```\n$ cat 1.csv \nNo,Con\n1,aaa\n2,bbb\n5,ccc\n\n$ cat 2.csv\nNo,S_id\n1,000555\n5,000111\n3,000333\n8,000111\n\n# 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。\n$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order <(sort -k 1 -n 1.csv) <(sort -k 1 -n 2.csv) \nNo,Con,S_id\n1,aaa,000555\n2,bbb\n5,ccc,000111\n```\n\n上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join\n<!-- more -->\n\n```\nhead 1.csv 2.csv \n==> 1.csv <==\n1,aaa,,\n2,bbb,,\n5,ccc,r1,rrrr\n\n==> 2.csv <==\n1,000111\n5,000555\n3,000333\n8,000111\nr1,XXXR1\n\n# FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\nFNR == NR{\n  \ta[$1] = $2;\n  \tnext \n}\n{\n\tshop_id = $1;\n\trefund_id = $3;\n\tif ($1 in a) {\n\t\tshop_id = a[$1]\n\t};\n\tif ($3 in a) {\n\t\trefund_id=a[$3]\n\t};\n\tprint shop_id\",\"$2\",\"refund_id\",\"$4\n}' 2.csv 1.csv\n```\n\n**生产使用** 其中 {} 里的为 php 变量\n\n```\n#列筛选\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\n{\n    #清除列末尾空格\n    gsub(/[ ]+$/, \"\", $18);\n    #字符串链接\n    $3  = (\"{$date} \"$3);\n    #负数转正\n    $16 = ($16 > 0) ? $16 :(-1) * $16;\n    $26 = ($26 > 0) ? $26 :(-1) * $26;\n    trade_no = $10 ; refund_no = \"\";\n    if ($23 == \"退款\") {\n        #获取对应的支付中心单号\n        refund_no = trade_no;\n        trade_no = \"\";\n        $23 = \"REFUND\";\n        $38 = ($38 == \"S\" ? \"SUCCESS\" : $38);\n    } else {\n        $23 = \"SUCCESS\";\n        $38 = \"\";\n    };\n    #支付中心单号放最后面\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    $3,$4,$5,$8,\"\",\"JSAPI\",$23,$16,$24,\"\",$26,$38,$27,$17,$18,trade_no,refund_no\n}' {$billFile} \\\n| sed '1d;N;\\$d;P;D' > {$tmpFile}\n\n#join 多个文件,通过 FNR==1 第一行时 {f++} 来判断是第几个文件\nawk 'BEGIN {\n    FS = OFS =\",\";\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    \"交易时间\",\"公众账号ID\",\"商户号\",\"招行订单号\",\"商城订单id\",\"交易类型\",\"交易状态\",\"应结订单金额\",\"招行退款单号\",\"商城退单号\",\"退款金额\",\"退款状态\",\"商品名称\",\"手续费\",\"费率\",\"支付中心订单号\",\"支付中心退单号\"\n}\nFNR == 1 { \n    f++\n} \nf == 1 { \n    rno2tno[$1] = $2;\n    next\n}\nf == 2 { \n    no2id[$1] = $2;\n    next\n}\n{    \n    refund_no = $17;\n    #根据refund_no取trade_no做兼容\n    if (refund_no in rno2tno) {\n        $16 = rno2tno[refund_no]\n    }\n    trade_no = $16;\n    if (trade_no in no2id) {\n        $5 = no2id[trade_no]\n    };\n    if (refund_no in no2id) {\n        $10 = no2id[refund_no]\n    };\n    print $0\n}' {$refundTradeMappingFile} {$mappingFile} {$tmpFile} > {$targetFile}\n```\n\n**其他的一些命令**\n\n```\ncut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d\",\" wx-20191221.csv > a.csv #使用cut来选择列\nsed '1d;N;$d;P;D' a.csv #删除第一行和最后两行\n```\n\n**使用 GuzzleHttp\\Client 来存储文件**\n\n```sh\n$client = new \\GuzzleHttp\\Client();\n#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间\n$params['sink'] = '/path/to/file';\n$response = $client->request($method, $url, $params);\n```\n\n\n\n参考:\n\nhttps://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\n\nhttps://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\n\nhttp://docs.guzzlephp.org/en/stable/request-options.html#sink\n\nhttps://github.com/dilshod/xlsx2csv \n\n","source":"_posts/awk.md","raw":"---\ntitle: \"使用awk处理csv文件\"\ndate: 2020-01-06 15:00:00\ntags: [awk,csv]\nshare: true\n---\n\n上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。\n\n首先考虑了 join 命令，实现左连接、内连接都是没有问题的。\n\n```\n$ cat 1.csv \nNo,Con\n1,aaa\n2,bbb\n5,ccc\n\n$ cat 2.csv\nNo,S_id\n1,000555\n5,000111\n3,000333\n8,000111\n\n# 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。\n$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order <(sort -k 1 -n 1.csv) <(sort -k 1 -n 2.csv) \nNo,Con,S_id\n1,aaa,000555\n2,bbb\n5,ccc,000111\n```\n\n上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join\n<!-- more -->\n\n```\nhead 1.csv 2.csv \n==> 1.csv <==\n1,aaa,,\n2,bbb,,\n5,ccc,r1,rrrr\n\n==> 2.csv <==\n1,000111\n5,000555\n3,000333\n8,000111\nr1,XXXR1\n\n# FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\nFNR == NR{\n  \ta[$1] = $2;\n  \tnext \n}\n{\n\tshop_id = $1;\n\trefund_id = $3;\n\tif ($1 in a) {\n\t\tshop_id = a[$1]\n\t};\n\tif ($3 in a) {\n\t\trefund_id=a[$3]\n\t};\n\tprint shop_id\",\"$2\",\"refund_id\",\"$4\n}' 2.csv 1.csv\n```\n\n**生产使用** 其中 {} 里的为 php 变量\n\n```\n#列筛选\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\n{\n    #清除列末尾空格\n    gsub(/[ ]+$/, \"\", $18);\n    #字符串链接\n    $3  = (\"{$date} \"$3);\n    #负数转正\n    $16 = ($16 > 0) ? $16 :(-1) * $16;\n    $26 = ($26 > 0) ? $26 :(-1) * $26;\n    trade_no = $10 ; refund_no = \"\";\n    if ($23 == \"退款\") {\n        #获取对应的支付中心单号\n        refund_no = trade_no;\n        trade_no = \"\";\n        $23 = \"REFUND\";\n        $38 = ($38 == \"S\" ? \"SUCCESS\" : $38);\n    } else {\n        $23 = \"SUCCESS\";\n        $38 = \"\";\n    };\n    #支付中心单号放最后面\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    $3,$4,$5,$8,\"\",\"JSAPI\",$23,$16,$24,\"\",$26,$38,$27,$17,$18,trade_no,refund_no\n}' {$billFile} \\\n| sed '1d;N;\\$d;P;D' > {$tmpFile}\n\n#join 多个文件,通过 FNR==1 第一行时 {f++} 来判断是第几个文件\nawk 'BEGIN {\n    FS = OFS =\",\";\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    \"交易时间\",\"公众账号ID\",\"商户号\",\"招行订单号\",\"商城订单id\",\"交易类型\",\"交易状态\",\"应结订单金额\",\"招行退款单号\",\"商城退单号\",\"退款金额\",\"退款状态\",\"商品名称\",\"手续费\",\"费率\",\"支付中心订单号\",\"支付中心退单号\"\n}\nFNR == 1 { \n    f++\n} \nf == 1 { \n    rno2tno[$1] = $2;\n    next\n}\nf == 2 { \n    no2id[$1] = $2;\n    next\n}\n{    \n    refund_no = $17;\n    #根据refund_no取trade_no做兼容\n    if (refund_no in rno2tno) {\n        $16 = rno2tno[refund_no]\n    }\n    trade_no = $16;\n    if (trade_no in no2id) {\n        $5 = no2id[trade_no]\n    };\n    if (refund_no in no2id) {\n        $10 = no2id[refund_no]\n    };\n    print $0\n}' {$refundTradeMappingFile} {$mappingFile} {$tmpFile} > {$targetFile}\n```\n\n**其他的一些命令**\n\n```\ncut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d\",\" wx-20191221.csv > a.csv #使用cut来选择列\nsed '1d;N;$d;P;D' a.csv #删除第一行和最后两行\n```\n\n**使用 GuzzleHttp\\Client 来存储文件**\n\n```sh\n$client = new \\GuzzleHttp\\Client();\n#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间\n$params['sink'] = '/path/to/file';\n$response = $client->request($method, $url, $params);\n```\n\n\n\n参考:\n\nhttps://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\n\nhttps://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\n\nhttp://docs.guzzlephp.org/en/stable/request-options.html#sink\n\nhttps://github.com/dilshod/xlsx2csv \n\n","slug":"awk","published":1,"updated":"2020-01-06T07:02:38.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsva00041sl9962fv2lm","content":"<p>上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。</p>\n<p>首先考虑了 join 命令，实现左连接、内连接都是没有问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.csv </span><br><span class=\"line\">No,Con</span><br><span class=\"line\">1,aaa</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat 2.csv</span><br><span class=\"line\">No,S_id</span><br><span class=\"line\">1,000555</span><br><span class=\"line\">5,000111</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\"></span><br><span class=\"line\"># 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。</span><br><span class=\"line\">$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order &lt;(sort -k 1 -n 1.csv) &lt;(sort -k 1 -n 2.csv) </span><br><span class=\"line\">No,Con,S_id</span><br><span class=\"line\">1,aaa,000555</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc,000111</span><br></pre></td></tr></table></figure>\n<p>上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head 1.csv 2.csv </span><br><span class=\"line\">==&gt; 1.csv &lt;==</span><br><span class=\"line\">1,aaa,,</span><br><span class=\"line\">2,bbb,,</span><br><span class=\"line\">5,ccc,r1,rrrr</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; 2.csv &lt;==</span><br><span class=\"line\">1,000111</span><br><span class=\"line\">5,000555</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\">r1,XXXR1</span><br><span class=\"line\"></span><br><span class=\"line\"># FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == NR&#123;</span><br><span class=\"line\">  \ta[$1] = $2;</span><br><span class=\"line\">  \tnext </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshop_id = $1;</span><br><span class=\"line\">\trefund_id = $3;</span><br><span class=\"line\">\tif ($1 in a) &#123;</span><br><span class=\"line\">\t\tshop_id = a[$1]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tif ($3 in a) &#123;</span><br><span class=\"line\">\t\trefund_id=a[$3]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tprint shop_id&quot;,&quot;$2&quot;,&quot;refund_id&quot;,&quot;$4</span><br><span class=\"line\">&#125;&apos; 2.csv 1.csv</span><br></pre></td></tr></table></figure>\n<p><strong>生产使用</strong> 其中 {} 里的为 php 变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列筛选</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #清除列末尾空格</span><br><span class=\"line\">    gsub(/[ ]+$/, &quot;&quot;, $18);</span><br><span class=\"line\">    #字符串链接</span><br><span class=\"line\">    $3  = (&quot;&#123;$date&#125; &quot;$3);</span><br><span class=\"line\">    #负数转正</span><br><span class=\"line\">    $16 = ($16 &gt; 0) ? $16 :(-1) * $16;</span><br><span class=\"line\">    $26 = ($26 &gt; 0) ? $26 :(-1) * $26;</span><br><span class=\"line\">    trade_no = $10 ; refund_no = &quot;&quot;;</span><br><span class=\"line\">    if ($23 == &quot;退款&quot;) &#123;</span><br><span class=\"line\">        #获取对应的支付中心单号</span><br><span class=\"line\">        refund_no = trade_no;</span><br><span class=\"line\">        trade_no = &quot;&quot;;</span><br><span class=\"line\">        $23 = &quot;REFUND&quot;;</span><br><span class=\"line\">        $38 = ($38 == &quot;S&quot; ? &quot;SUCCESS&quot; : $38);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $23 = &quot;SUCCESS&quot;;</span><br><span class=\"line\">        $38 = &quot;&quot;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    #支付中心单号放最后面</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    $3,$4,$5,$8,&quot;&quot;,&quot;JSAPI&quot;,$23,$16,$24,&quot;&quot;,$26,$38,$27,$17,$18,trade_no,refund_no</span><br><span class=\"line\">&#125;&apos; &#123;$billFile&#125; \\</span><br><span class=\"line\">| sed &apos;1d;N;\\$d;P;D&apos; &gt; &#123;$tmpFile&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#join 多个文件,通过 FNR==1 第一行时 &#123;f++&#125; 来判断是第几个文件</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS =&quot;,&quot;;</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    &quot;交易时间&quot;,&quot;公众账号ID&quot;,&quot;商户号&quot;,&quot;招行订单号&quot;,&quot;商城订单id&quot;,&quot;交易类型&quot;,&quot;交易状态&quot;,&quot;应结订单金额&quot;,&quot;招行退款单号&quot;,&quot;商城退单号&quot;,&quot;退款金额&quot;,&quot;退款状态&quot;,&quot;商品名称&quot;,&quot;手续费&quot;,&quot;费率&quot;,&quot;支付中心订单号&quot;,&quot;支付中心退单号&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == 1 &#123; </span><br><span class=\"line\">    f++</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">f == 1 &#123; </span><br><span class=\"line\">    rno2tno[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f == 2 &#123; </span><br><span class=\"line\">    no2id[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    refund_no = $17;</span><br><span class=\"line\">    #根据refund_no取trade_no做兼容</span><br><span class=\"line\">    if (refund_no in rno2tno) &#123;</span><br><span class=\"line\">        $16 = rno2tno[refund_no]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trade_no = $16;</span><br><span class=\"line\">    if (trade_no in no2id) &#123;</span><br><span class=\"line\">        $5 = no2id[trade_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (refund_no in no2id) &#123;</span><br><span class=\"line\">        $10 = no2id[refund_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    print $0</span><br><span class=\"line\">&#125;&apos; &#123;$refundTradeMappingFile&#125; &#123;$mappingFile&#125; &#123;$tmpFile&#125; &gt; &#123;$targetFile&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他的一些命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d&quot;,&quot; wx-20191221.csv &gt; a.csv #使用cut来选择列</span><br><span class=\"line\">sed &apos;1d;N;$d;P;D&apos; a.csv #删除第一行和最后两行</span><br></pre></td></tr></table></figure>\n<p><strong>使用 GuzzleHttp\\Client 来存储文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$client</span> = new \\GuzzleHttp\\Client();</span><br><span class=\"line\"><span class=\"comment\">#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间</span></span><br><span class=\"line\"><span class=\"variable\">$params</span>[<span class=\"string\">'sink'</span>] = <span class=\"string\">'/path/to/file'</span>;</span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$client</span>-&gt;request(<span class=\"variable\">$method</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed</a></p>\n<p><a href=\"http://docs.guzzlephp.org/en/stable/request-options.html#sink\" target=\"_blank\" rel=\"noopener\">http://docs.guzzlephp.org/en/stable/request-options.html#sink</a></p>\n<p><a href=\"https://github.com/dilshod/xlsx2csv\" target=\"_blank\" rel=\"noopener\">https://github.com/dilshod/xlsx2csv</a> </p>\n","site":{"data":{}},"excerpt":"<p>上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。</p>\n<p>首先考虑了 join 命令，实现左连接、内连接都是没有问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.csv </span><br><span class=\"line\">No,Con</span><br><span class=\"line\">1,aaa</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat 2.csv</span><br><span class=\"line\">No,S_id</span><br><span class=\"line\">1,000555</span><br><span class=\"line\">5,000111</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\"></span><br><span class=\"line\"># 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。</span><br><span class=\"line\">$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order &lt;(sort -k 1 -n 1.csv) &lt;(sort -k 1 -n 2.csv) </span><br><span class=\"line\">No,Con,S_id</span><br><span class=\"line\">1,aaa,000555</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc,000111</span><br></pre></td></tr></table></figure>\n<p>上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head 1.csv 2.csv </span><br><span class=\"line\">==&gt; 1.csv &lt;==</span><br><span class=\"line\">1,aaa,,</span><br><span class=\"line\">2,bbb,,</span><br><span class=\"line\">5,ccc,r1,rrrr</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; 2.csv &lt;==</span><br><span class=\"line\">1,000111</span><br><span class=\"line\">5,000555</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\">r1,XXXR1</span><br><span class=\"line\"></span><br><span class=\"line\"># FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == NR&#123;</span><br><span class=\"line\">  \ta[$1] = $2;</span><br><span class=\"line\">  \tnext </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshop_id = $1;</span><br><span class=\"line\">\trefund_id = $3;</span><br><span class=\"line\">\tif ($1 in a) &#123;</span><br><span class=\"line\">\t\tshop_id = a[$1]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tif ($3 in a) &#123;</span><br><span class=\"line\">\t\trefund_id=a[$3]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tprint shop_id&quot;,&quot;$2&quot;,&quot;refund_id&quot;,&quot;$4</span><br><span class=\"line\">&#125;&apos; 2.csv 1.csv</span><br></pre></td></tr></table></figure>\n<p><strong>生产使用</strong> 其中 {} 里的为 php 变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列筛选</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #清除列末尾空格</span><br><span class=\"line\">    gsub(/[ ]+$/, &quot;&quot;, $18);</span><br><span class=\"line\">    #字符串链接</span><br><span class=\"line\">    $3  = (&quot;&#123;$date&#125; &quot;$3);</span><br><span class=\"line\">    #负数转正</span><br><span class=\"line\">    $16 = ($16 &gt; 0) ? $16 :(-1) * $16;</span><br><span class=\"line\">    $26 = ($26 &gt; 0) ? $26 :(-1) * $26;</span><br><span class=\"line\">    trade_no = $10 ; refund_no = &quot;&quot;;</span><br><span class=\"line\">    if ($23 == &quot;退款&quot;) &#123;</span><br><span class=\"line\">        #获取对应的支付中心单号</span><br><span class=\"line\">        refund_no = trade_no;</span><br><span class=\"line\">        trade_no = &quot;&quot;;</span><br><span class=\"line\">        $23 = &quot;REFUND&quot;;</span><br><span class=\"line\">        $38 = ($38 == &quot;S&quot; ? &quot;SUCCESS&quot; : $38);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $23 = &quot;SUCCESS&quot;;</span><br><span class=\"line\">        $38 = &quot;&quot;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    #支付中心单号放最后面</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    $3,$4,$5,$8,&quot;&quot;,&quot;JSAPI&quot;,$23,$16,$24,&quot;&quot;,$26,$38,$27,$17,$18,trade_no,refund_no</span><br><span class=\"line\">&#125;&apos; &#123;$billFile&#125; \\</span><br><span class=\"line\">| sed &apos;1d;N;\\$d;P;D&apos; &gt; &#123;$tmpFile&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#join 多个文件,通过 FNR==1 第一行时 &#123;f++&#125; 来判断是第几个文件</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS =&quot;,&quot;;</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    &quot;交易时间&quot;,&quot;公众账号ID&quot;,&quot;商户号&quot;,&quot;招行订单号&quot;,&quot;商城订单id&quot;,&quot;交易类型&quot;,&quot;交易状态&quot;,&quot;应结订单金额&quot;,&quot;招行退款单号&quot;,&quot;商城退单号&quot;,&quot;退款金额&quot;,&quot;退款状态&quot;,&quot;商品名称&quot;,&quot;手续费&quot;,&quot;费率&quot;,&quot;支付中心订单号&quot;,&quot;支付中心退单号&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == 1 &#123; </span><br><span class=\"line\">    f++</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">f == 1 &#123; </span><br><span class=\"line\">    rno2tno[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f == 2 &#123; </span><br><span class=\"line\">    no2id[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    refund_no = $17;</span><br><span class=\"line\">    #根据refund_no取trade_no做兼容</span><br><span class=\"line\">    if (refund_no in rno2tno) &#123;</span><br><span class=\"line\">        $16 = rno2tno[refund_no]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trade_no = $16;</span><br><span class=\"line\">    if (trade_no in no2id) &#123;</span><br><span class=\"line\">        $5 = no2id[trade_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (refund_no in no2id) &#123;</span><br><span class=\"line\">        $10 = no2id[refund_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    print $0</span><br><span class=\"line\">&#125;&apos; &#123;$refundTradeMappingFile&#125; &#123;$mappingFile&#125; &#123;$tmpFile&#125; &gt; &#123;$targetFile&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他的一些命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d&quot;,&quot; wx-20191221.csv &gt; a.csv #使用cut来选择列</span><br><span class=\"line\">sed &apos;1d;N;$d;P;D&apos; a.csv #删除第一行和最后两行</span><br></pre></td></tr></table></figure>\n<p><strong>使用 GuzzleHttp\\Client 来存储文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$client</span> = new \\GuzzleHttp\\Client();</span><br><span class=\"line\"><span class=\"comment\">#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间</span></span><br><span class=\"line\"><span class=\"variable\">$params</span>[<span class=\"string\">'sink'</span>] = <span class=\"string\">'/path/to/file'</span>;</span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$client</span>-&gt;request(<span class=\"variable\">$method</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed</a></p>\n<p><a href=\"http://docs.guzzlephp.org/en/stable/request-options.html#sink\" target=\"_blank\" rel=\"noopener\">http://docs.guzzlephp.org/en/stable/request-options.html#sink</a></p>\n<p><a href=\"https://github.com/dilshod/xlsx2csv\" target=\"_blank\" rel=\"noopener\">https://github.com/dilshod/xlsx2csv</a> </p>"},{"title":"helm安装gitrunner","date":"2019-10-16T17:52:10.000Z","share":true,"_content":"\n**gitrunner**\n\n\n```\nhelm repo add gitlab https://charts.gitlab.io\n\nhelm upgrade git-runner-test --install --namespace gitlab \\\n--set checkInterval=2 \\\n--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present \\\n--set gitlabUrl=https://gitlab.youhaodongxi.com,runnerRegistrationToken=sDz-pAK6qVpYxixxX1dG --set runners.privileged=true \\\ngitlab/gitlab-runner\n```\n\nmount 目录 : 在configmap.yaml 里 entrypoint 最后增加\n\n```\n    cat >>/home/gitlab-runner/.gitlab-runner/config.toml <<EOF\n      [[runners.kubernetes.volumes.host_path]]\n        name = \"docker\"\n        mount_path = \"/volume\"\n        host_path = \"/volume\"\n\n    EOF\n```\n\n提示没有权限创建job\n```\nERROR: Job failed (system failure): pods is forbidden: User \"system:serviceaccount:gitlab:default\" cannot create resource \"pods\" in API group \"\" in the namespace \"gitlab\"\n```\n\n添加权限绑定\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-admin-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-admin-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: gitlab\nroleRef:\n  kind: Role\n  name: gitlab-admin-role\n  apiGroup: rbac.authorization.k8s.io\n```\n指定命名空间和帐号安装tiller，建议开启tls认证\n```\nhelm init --tiller-namespace php-sht --service-account=admin\n```\n\n#跳过fetch \n\n```\ndeploy_all:\n  variables:\n    GIT_STRATEGY: none\n    GIT_CHECKOUT: \"false\"\n  stage: deploy\n```","source":"_posts/gitrunner-helm-install.md","raw":"---\ntitle: \"helm安装gitrunner\"\ndate: 2019-10-16 17:52:10\ntags: [gitrunner,helm]\nshare: true\n---\n\n**gitrunner**\n\n\n```\nhelm repo add gitlab https://charts.gitlab.io\n\nhelm upgrade git-runner-test --install --namespace gitlab \\\n--set checkInterval=2 \\\n--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present \\\n--set gitlabUrl=https://gitlab.youhaodongxi.com,runnerRegistrationToken=sDz-pAK6qVpYxixxX1dG --set runners.privileged=true \\\ngitlab/gitlab-runner\n```\n\nmount 目录 : 在configmap.yaml 里 entrypoint 最后增加\n\n```\n    cat >>/home/gitlab-runner/.gitlab-runner/config.toml <<EOF\n      [[runners.kubernetes.volumes.host_path]]\n        name = \"docker\"\n        mount_path = \"/volume\"\n        host_path = \"/volume\"\n\n    EOF\n```\n\n提示没有权限创建job\n```\nERROR: Job failed (system failure): pods is forbidden: User \"system:serviceaccount:gitlab:default\" cannot create resource \"pods\" in API group \"\" in the namespace \"gitlab\"\n```\n\n添加权限绑定\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-admin-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-admin-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: gitlab\nroleRef:\n  kind: Role\n  name: gitlab-admin-role\n  apiGroup: rbac.authorization.k8s.io\n```\n指定命名空间和帐号安装tiller，建议开启tls认证\n```\nhelm init --tiller-namespace php-sht --service-account=admin\n```\n\n#跳过fetch \n\n```\ndeploy_all:\n  variables:\n    GIT_STRATEGY: none\n    GIT_CHECKOUT: \"false\"\n  stage: deploy\n```","slug":"gitrunner-helm-install","published":1,"updated":"2019-11-14T03:33:28.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvd00051sl9rnll3yex","content":"<p><strong>gitrunner</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add gitlab https://charts.gitlab.io</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade git-runner-test --install --namespace gitlab \\</span><br><span class=\"line\">--set checkInterval=2 \\</span><br><span class=\"line\">--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present \\</span><br><span class=\"line\">--set gitlabUrl=https://gitlab.youhaodongxi.com,runnerRegistrationToken=sDz-pAK6qVpYxixxX1dG --set runners.privileged=true \\</span><br><span class=\"line\">gitlab/gitlab-runner</span><br></pre></td></tr></table></figure>\n<p>mount 目录 : 在configmap.yaml 里 entrypoint 最后增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml &lt;&lt;EOF</span><br><span class=\"line\">  [[runners.kubernetes.volumes.host_path]]</span><br><span class=\"line\">    name = &quot;docker&quot;</span><br><span class=\"line\">    mount_path = &quot;/volume&quot;</span><br><span class=\"line\">    host_path = &quot;/volume&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>提示没有权限创建job<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Job failed (system failure): pods is forbidden: User &quot;system:serviceaccount:gitlab:default&quot; cannot create resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;gitlab&quot;</span><br></pre></td></tr></table></figure></p>\n<p>添加权限绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-admin-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p>\n<p>指定命名空间和帐号安装tiller，建议开启tls认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm init --tiller-namespace php-sht --service-account=admin</span><br></pre></td></tr></table></figure></p>\n<p>#跳过fetch </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy_all:</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    GIT_STRATEGY: none</span><br><span class=\"line\">    GIT_CHECKOUT: &quot;false&quot;</span><br><span class=\"line\">  stage: deploy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>gitrunner</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add gitlab https://charts.gitlab.io</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade git-runner-test --install --namespace gitlab \\</span><br><span class=\"line\">--set checkInterval=2 \\</span><br><span class=\"line\">--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present \\</span><br><span class=\"line\">--set gitlabUrl=https://gitlab.youhaodongxi.com,runnerRegistrationToken=sDz-pAK6qVpYxixxX1dG --set runners.privileged=true \\</span><br><span class=\"line\">gitlab/gitlab-runner</span><br></pre></td></tr></table></figure>\n<p>mount 目录 : 在configmap.yaml 里 entrypoint 最后增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml &lt;&lt;EOF</span><br><span class=\"line\">  [[runners.kubernetes.volumes.host_path]]</span><br><span class=\"line\">    name = &quot;docker&quot;</span><br><span class=\"line\">    mount_path = &quot;/volume&quot;</span><br><span class=\"line\">    host_path = &quot;/volume&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>提示没有权限创建job<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Job failed (system failure): pods is forbidden: User &quot;system:serviceaccount:gitlab:default&quot; cannot create resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;gitlab&quot;</span><br></pre></td></tr></table></figure></p>\n<p>添加权限绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-admin-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p>\n<p>指定命名空间和帐号安装tiller，建议开启tls认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm init --tiller-namespace php-sht --service-account=admin</span><br></pre></td></tr></table></figure></p>\n<p>#跳过fetch </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy_all:</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    GIT_STRATEGY: none</span><br><span class=\"line\">    GIT_CHECKOUT: &quot;false&quot;</span><br><span class=\"line\">  stage: deploy</span><br></pre></td></tr></table></figure>"},{"title":"grafana alerting 报警","date":"2019-10-16T17:20:01.000Z","share":true,"_content":"\n使用工具：[prometheus](https://github.com/prometheus/prometheus)、[grafana](https://github.com/grafana/grafana)、[prometheus_client_php](https://github.com/endclothing/prometheus_client_php)\n\n通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90\n```\n# HELP payment_queue_length it sets\n# TYPE payment_queue_length gauge\npayment_queue_length{name=\"order_notify\"} 90\n```\n\n被 prometheus 采集\n![2](/img/grafana-alerting/2.png)\n<!-- more -->\n\n配置邮件报警规则(间隔5分钟发送一次)\n![8](/img/grafana-alerting/8.png)\n\n配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置`no data`情况下的报警状态，防止当前时间点没有采集到数据报警)\n![7](/img/grafana-alerting/7.png)\n\n在grafana中展示（图中设置了值超过100的报警规则）\n![3](/img/grafana-alerting/3.png)\n\n手动修改队列长度为120,触发报警\n![4](/img/grafana-alerting/4.png)\n\n收到报警邮件\n![5](/img/grafana-alerting/5.png)\n\n解除报警\n![6](/img/grafana-alerting/6.png)\n\n\n钉钉报警api\n```\ncurl 'https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3' \\\n-H 'Content-Type: application/json' \\\n-d '{\"msgtype\": \"text\",\n\"text\": {\n\t\"content\": \"业务报警测试\"\n}\n}\n```\n\n","source":"_posts/grafana-alerting.md","raw":"---\ntitle: \"grafana alerting 报警\"\ndate: 2019-10-16 17:20:01\ntags: [grafana,prometheus,报警]\nshare: true\n---\n\n使用工具：[prometheus](https://github.com/prometheus/prometheus)、[grafana](https://github.com/grafana/grafana)、[prometheus_client_php](https://github.com/endclothing/prometheus_client_php)\n\n通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90\n```\n# HELP payment_queue_length it sets\n# TYPE payment_queue_length gauge\npayment_queue_length{name=\"order_notify\"} 90\n```\n\n被 prometheus 采集\n![2](/img/grafana-alerting/2.png)\n<!-- more -->\n\n配置邮件报警规则(间隔5分钟发送一次)\n![8](/img/grafana-alerting/8.png)\n\n配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置`no data`情况下的报警状态，防止当前时间点没有采集到数据报警)\n![7](/img/grafana-alerting/7.png)\n\n在grafana中展示（图中设置了值超过100的报警规则）\n![3](/img/grafana-alerting/3.png)\n\n手动修改队列长度为120,触发报警\n![4](/img/grafana-alerting/4.png)\n\n收到报警邮件\n![5](/img/grafana-alerting/5.png)\n\n解除报警\n![6](/img/grafana-alerting/6.png)\n\n\n钉钉报警api\n```\ncurl 'https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3' \\\n-H 'Content-Type: application/json' \\\n-d '{\"msgtype\": \"text\",\n\"text\": {\n\t\"content\": \"业务报警测试\"\n}\n}\n```\n\n","slug":"grafana-alerting","published":1,"updated":"2019-12-16T06:14:36.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvg00081sl9xxq4y0vx","content":"<p>使用工具：<a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"noopener\">prometheus</a>、<a href=\"https://github.com/grafana/grafana\" target=\"_blank\" rel=\"noopener\">grafana</a>、<a href=\"https://github.com/endclothing/prometheus_client_php\" target=\"_blank\" rel=\"noopener\">prometheus_client_php</a></p>\n<p>通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HELP payment_queue_length it sets</span><br><span class=\"line\"># TYPE payment_queue_length gauge</span><br><span class=\"line\">payment_queue_length&#123;name=&quot;order_notify&quot;&#125; 90</span><br></pre></td></tr></table></figure></p>\n<p>被 prometheus 采集<br><img src=\"/img/grafana-alerting/2.png\" alt=\"2\"><br><a id=\"more\"></a></p>\n<p>配置邮件报警规则(间隔5分钟发送一次)<br><img src=\"/img/grafana-alerting/8.png\" alt=\"8\"></p>\n<p>配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置<code>no data</code>情况下的报警状态，防止当前时间点没有采集到数据报警)<br><img src=\"/img/grafana-alerting/7.png\" alt=\"7\"></p>\n<p>在grafana中展示（图中设置了值超过100的报警规则）<br><img src=\"/img/grafana-alerting/3.png\" alt=\"3\"></p>\n<p>手动修改队列长度为120,触发报警<br><img src=\"/img/grafana-alerting/4.png\" alt=\"4\"></p>\n<p>收到报警邮件<br><img src=\"/img/grafana-alerting/5.png\" alt=\"5\"></p>\n<p>解除报警<br><img src=\"/img/grafana-alerting/6.png\" alt=\"6\"></p>\n<p>钉钉报警api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3&apos; \\</span><br><span class=\"line\">-H &apos;Content-Type: application/json&apos; \\</span><br><span class=\"line\">-d &apos;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class=\"line\">&quot;text&quot;: &#123;</span><br><span class=\"line\">\t&quot;content&quot;: &quot;业务报警测试&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>使用工具：<a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"noopener\">prometheus</a>、<a href=\"https://github.com/grafana/grafana\" target=\"_blank\" rel=\"noopener\">grafana</a>、<a href=\"https://github.com/endclothing/prometheus_client_php\" target=\"_blank\" rel=\"noopener\">prometheus_client_php</a></p>\n<p>通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HELP payment_queue_length it sets</span><br><span class=\"line\"># TYPE payment_queue_length gauge</span><br><span class=\"line\">payment_queue_length&#123;name=&quot;order_notify&quot;&#125; 90</span><br></pre></td></tr></table></figure></p>\n<p>被 prometheus 采集<br><img src=\"/img/grafana-alerting/2.png\" alt=\"2\"><br>","more":"</p>\n<p>配置邮件报警规则(间隔5分钟发送一次)<br><img src=\"/img/grafana-alerting/8.png\" alt=\"8\"></p>\n<p>配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置<code>no data</code>情况下的报警状态，防止当前时间点没有采集到数据报警)<br><img src=\"/img/grafana-alerting/7.png\" alt=\"7\"></p>\n<p>在grafana中展示（图中设置了值超过100的报警规则）<br><img src=\"/img/grafana-alerting/3.png\" alt=\"3\"></p>\n<p>手动修改队列长度为120,触发报警<br><img src=\"/img/grafana-alerting/4.png\" alt=\"4\"></p>\n<p>收到报警邮件<br><img src=\"/img/grafana-alerting/5.png\" alt=\"5\"></p>\n<p>解除报警<br><img src=\"/img/grafana-alerting/6.png\" alt=\"6\"></p>\n<p>钉钉报警api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3&apos; \\</span><br><span class=\"line\">-H &apos;Content-Type: application/json&apos; \\</span><br><span class=\"line\">-d &apos;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class=\"line\">&quot;text&quot;: &#123;</span><br><span class=\"line\">\t&quot;content&quot;: &quot;业务报警测试&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"grafana使用mysql源做统计","date":"2019-11-14T20:41:01.000Z","share":true,"_content":"\n配置对应的 mysql 数据源，新建面板，查询语句：\n\n```\nSELECT\n  created_at AS \"time\",\n  \"下单金额\" AS metric,\n  total_fee/100\nFROM `order`\nWHERE\n  $__unixEpochFilter(created_at)\nORDER BY created_at\n```\n\nFormat as选择Time series, Unit 选择 Currency\n\n![11.png](/img/grafana/11.png)\n<!-- more -->\n\n**效果图:**\n\n![12.png](/img/grafana/12.png)\n\n**备注:**\n\nhelm版 grafana chart 安装饼装图插件\n\n```\nplugins:\n  - grafana-piechart-panel\n```\n\n开启 plugin alpha 模式\n\n```\ngrafana.ini:\n  paths:\n    data: /var/lib/grafana/data\n    logs: /var/log/grafana\n    plugins: /var/lib/grafana/plugins\n    provisioning: /etc/grafana/provisioning\n  analytics:\n    check_for_updates: true\n  log:\n    mode: console\n  grafana_net:\n    url: https://grafana.net\n  server:\n    root_url: http://grafana.local.com\n  plugins:\n    enable_alpha: true\n```\n**参考查询:**\n```\n#最近七天每日订单金额\nSELECT\n   unix_timestamp(from_unixtime(created_at,'%Y-%m-%d 00:00:00')) as time,\n   from_unixtime(created_at,'%Y-%m-%d') AS metric,\n   sum(total_fee)/100\nFROM `order_log`\nWHERE\n  created_at <= ($__unixEpochTo()) AND created_at >= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in (${agg_platform})\nGROUP BY time\nORDER BY time\n\n#昨日下单数在当前时间轴展示\nSELECT\n    time + 86400 as time, \n    \"昨日下单数\" AS metric,\n    cnt\nFROM\n(\n  SELECT\n     $__unixEpochGroup(created_at,$__interval) as time,\n     count(*) cnt\n  FROM `order_log`\n  WHERE\n    created_at >  ($__unixEpochFrom() - 86400)  AND created_at <  ($__unixEpochTo() - 86400)  AND agg_platform in (${agg_platform})\n  GROUP BY time\n  ORDER BY time\n) obl\n```\n参考链接：\nhttps://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\nhttps://blog.csdn.net/malingyu/article/details/84389113\nhttps://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\n[去除 Data outside time range](https://www.cnblogs.com/michellexiaoqi/p/7274890.html)","source":"_posts/grafana-mysql-source.md","raw":"---\ntitle: \"grafana使用mysql源做统计\"\ndate: 2019-11-14 20:41:01\ntags: [grafana,helm]\nshare: true\n---\n\n配置对应的 mysql 数据源，新建面板，查询语句：\n\n```\nSELECT\n  created_at AS \"time\",\n  \"下单金额\" AS metric,\n  total_fee/100\nFROM `order`\nWHERE\n  $__unixEpochFilter(created_at)\nORDER BY created_at\n```\n\nFormat as选择Time series, Unit 选择 Currency\n\n![11.png](/img/grafana/11.png)\n<!-- more -->\n\n**效果图:**\n\n![12.png](/img/grafana/12.png)\n\n**备注:**\n\nhelm版 grafana chart 安装饼装图插件\n\n```\nplugins:\n  - grafana-piechart-panel\n```\n\n开启 plugin alpha 模式\n\n```\ngrafana.ini:\n  paths:\n    data: /var/lib/grafana/data\n    logs: /var/log/grafana\n    plugins: /var/lib/grafana/plugins\n    provisioning: /etc/grafana/provisioning\n  analytics:\n    check_for_updates: true\n  log:\n    mode: console\n  grafana_net:\n    url: https://grafana.net\n  server:\n    root_url: http://grafana.local.com\n  plugins:\n    enable_alpha: true\n```\n**参考查询:**\n```\n#最近七天每日订单金额\nSELECT\n   unix_timestamp(from_unixtime(created_at,'%Y-%m-%d 00:00:00')) as time,\n   from_unixtime(created_at,'%Y-%m-%d') AS metric,\n   sum(total_fee)/100\nFROM `order_log`\nWHERE\n  created_at <= ($__unixEpochTo()) AND created_at >= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in (${agg_platform})\nGROUP BY time\nORDER BY time\n\n#昨日下单数在当前时间轴展示\nSELECT\n    time + 86400 as time, \n    \"昨日下单数\" AS metric,\n    cnt\nFROM\n(\n  SELECT\n     $__unixEpochGroup(created_at,$__interval) as time,\n     count(*) cnt\n  FROM `order_log`\n  WHERE\n    created_at >  ($__unixEpochFrom() - 86400)  AND created_at <  ($__unixEpochTo() - 86400)  AND agg_platform in (${agg_platform})\n  GROUP BY time\n  ORDER BY time\n) obl\n```\n参考链接：\nhttps://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\nhttps://blog.csdn.net/malingyu/article/details/84389113\nhttps://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\n[去除 Data outside time range](https://www.cnblogs.com/michellexiaoqi/p/7274890.html)","slug":"grafana-mysql-source","published":1,"updated":"2019-12-02T08:50:12.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvj00091sl99wr0oc5g","content":"<p>配置对应的 mysql 数据源，新建面板，查询语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  created_at AS &quot;time&quot;,</span><br><span class=\"line\">  &quot;下单金额&quot; AS metric,</span><br><span class=\"line\">  total_fee/100</span><br><span class=\"line\">FROM `order`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  $__unixEpochFilter(created_at)</span><br><span class=\"line\">ORDER BY created_at</span><br></pre></td></tr></table></figure>\n<p>Format as选择Time series, Unit 选择 Currency</p>\n<p><img src=\"/img/grafana/11.png\" alt=\"11.png\"><br><a id=\"more\"></a></p>\n<p><strong>效果图:</strong></p>\n<p><img src=\"/img/grafana/12.png\" alt=\"12.png\"></p>\n<p><strong>备注:</strong></p>\n<p>helm版 grafana chart 安装饼装图插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - grafana-piechart-panel</span><br></pre></td></tr></table></figure>\n<p>开启 plugin alpha 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana.ini:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    data: /var/lib/grafana/data</span><br><span class=\"line\">    logs: /var/log/grafana</span><br><span class=\"line\">    plugins: /var/lib/grafana/plugins</span><br><span class=\"line\">    provisioning: /etc/grafana/provisioning</span><br><span class=\"line\">  analytics:</span><br><span class=\"line\">    check_for_updates: true</span><br><span class=\"line\">  log:</span><br><span class=\"line\">    mode: console</span><br><span class=\"line\">  grafana_net:</span><br><span class=\"line\">    url: https://grafana.net</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    root_url: http://grafana.local.com</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    enable_alpha: true</span><br></pre></td></tr></table></figure>\n<p><strong>参考查询:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最近七天每日订单金额</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">   unix_timestamp(from_unixtime(created_at,&apos;%Y-%m-%d 00:00:00&apos;)) as time,</span><br><span class=\"line\">   from_unixtime(created_at,&apos;%Y-%m-%d&apos;) AS metric,</span><br><span class=\"line\">   sum(total_fee)/100</span><br><span class=\"line\">FROM `order_log`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  created_at &lt;= ($__unixEpochTo()) AND created_at &gt;= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time</span><br><span class=\"line\"></span><br><span class=\"line\">#昨日下单数在当前时间轴展示</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    time + 86400 as time, </span><br><span class=\"line\">    &quot;昨日下单数&quot; AS metric,</span><br><span class=\"line\">    cnt</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     $__unixEpochGroup(created_at,$__interval) as time,</span><br><span class=\"line\">     count(*) cnt</span><br><span class=\"line\">  FROM `order_log`</span><br><span class=\"line\">  WHERE</span><br><span class=\"line\">    created_at &gt;  ($__unixEpochFrom() - 86400)  AND created_at &lt;  ($__unixEpochTo() - 86400)  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">  GROUP BY time</span><br><span class=\"line\">  ORDER BY time</span><br><span class=\"line\">) obl</span><br></pre></td></tr></table></figure></p>\n<p>参考链接：<br><a href=\"https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\" target=\"_blank\" rel=\"noopener\">https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/</a><br><a href=\"https://blog.csdn.net/malingyu/article/details/84389113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/malingyu/article/details/84389113</a><br><a href=\"https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\" target=\"_blank\" rel=\"noopener\">https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55</a><br><a href=\"https://www.cnblogs.com/michellexiaoqi/p/7274890.html\" target=\"_blank\" rel=\"noopener\">去除 Data outside time range</a></p>\n","site":{"data":{}},"excerpt":"<p>配置对应的 mysql 数据源，新建面板，查询语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  created_at AS &quot;time&quot;,</span><br><span class=\"line\">  &quot;下单金额&quot; AS metric,</span><br><span class=\"line\">  total_fee/100</span><br><span class=\"line\">FROM `order`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  $__unixEpochFilter(created_at)</span><br><span class=\"line\">ORDER BY created_at</span><br></pre></td></tr></table></figure>\n<p>Format as选择Time series, Unit 选择 Currency</p>\n<p><img src=\"/img/grafana/11.png\" alt=\"11.png\"><br>","more":"</p>\n<p><strong>效果图:</strong></p>\n<p><img src=\"/img/grafana/12.png\" alt=\"12.png\"></p>\n<p><strong>备注:</strong></p>\n<p>helm版 grafana chart 安装饼装图插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - grafana-piechart-panel</span><br></pre></td></tr></table></figure>\n<p>开启 plugin alpha 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana.ini:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    data: /var/lib/grafana/data</span><br><span class=\"line\">    logs: /var/log/grafana</span><br><span class=\"line\">    plugins: /var/lib/grafana/plugins</span><br><span class=\"line\">    provisioning: /etc/grafana/provisioning</span><br><span class=\"line\">  analytics:</span><br><span class=\"line\">    check_for_updates: true</span><br><span class=\"line\">  log:</span><br><span class=\"line\">    mode: console</span><br><span class=\"line\">  grafana_net:</span><br><span class=\"line\">    url: https://grafana.net</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    root_url: http://grafana.local.com</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    enable_alpha: true</span><br></pre></td></tr></table></figure>\n<p><strong>参考查询:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最近七天每日订单金额</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">   unix_timestamp(from_unixtime(created_at,&apos;%Y-%m-%d 00:00:00&apos;)) as time,</span><br><span class=\"line\">   from_unixtime(created_at,&apos;%Y-%m-%d&apos;) AS metric,</span><br><span class=\"line\">   sum(total_fee)/100</span><br><span class=\"line\">FROM `order_log`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  created_at &lt;= ($__unixEpochTo()) AND created_at &gt;= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time</span><br><span class=\"line\"></span><br><span class=\"line\">#昨日下单数在当前时间轴展示</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    time + 86400 as time, </span><br><span class=\"line\">    &quot;昨日下单数&quot; AS metric,</span><br><span class=\"line\">    cnt</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     $__unixEpochGroup(created_at,$__interval) as time,</span><br><span class=\"line\">     count(*) cnt</span><br><span class=\"line\">  FROM `order_log`</span><br><span class=\"line\">  WHERE</span><br><span class=\"line\">    created_at &gt;  ($__unixEpochFrom() - 86400)  AND created_at &lt;  ($__unixEpochTo() - 86400)  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">  GROUP BY time</span><br><span class=\"line\">  ORDER BY time</span><br><span class=\"line\">) obl</span><br></pre></td></tr></table></figure></p>\n<p>参考链接：<br><a href=\"https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\" target=\"_blank\" rel=\"noopener\">https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/</a><br><a href=\"https://blog.csdn.net/malingyu/article/details/84389113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/malingyu/article/details/84389113</a><br><a href=\"https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\" target=\"_blank\" rel=\"noopener\">https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55</a><br><a href=\"https://www.cnblogs.com/michellexiaoqi/p/7274890.html\" target=\"_blank\" rel=\"noopener\">去除 Data outside time range</a></p>"},{"title":"grafana 模板变量配置","date":"2019-10-22T20:23:10.000Z","share":true,"_content":"\n重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱\n\n![1.png](/img/grafana/1.png)\n\nprometheus 中按标签查询结果，显示了该标签有多个查询结果\n\n![2.png](/img/grafana/2.png)\n<!-- more -->\n\n现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：\n\n![3.png](/img/grafana/3.png)\n\n重新编辑面板，按日期变量来过滤数据\n\n![4.png](/img/grafana/4.png)\n\n保存，面版按当前日期显示正常：\n\n![5.png](/img/grafana/5.png)\n\n\n日志监控的配置参考上篇文章: {% post_link loki  使用Loki查询日志%}\n\n{% post_link grafana-mysql-source grafana 使用 mysql源%}时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: `select count(*) from t where type in (${source_type})`;","source":"_posts/grafana-variables.md","raw":"---\ntitle: \"grafana 模板变量配置\"\ndate: 2019-10-22 20:23:10\ntags: [loki,promtal,grafana]\nshare: true\n---\n\n重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱\n\n![1.png](/img/grafana/1.png)\n\nprometheus 中按标签查询结果，显示了该标签有多个查询结果\n\n![2.png](/img/grafana/2.png)\n<!-- more -->\n\n现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：\n\n![3.png](/img/grafana/3.png)\n\n重新编辑面板，按日期变量来过滤数据\n\n![4.png](/img/grafana/4.png)\n\n保存，面版按当前日期显示正常：\n\n![5.png](/img/grafana/5.png)\n\n\n日志监控的配置参考上篇文章: {% post_link loki  使用Loki查询日志%}\n\n{% post_link grafana-mysql-source grafana 使用 mysql源%}时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: `select count(*) from t where type in (${source_type})`;","slug":"grafana-variables","published":1,"updated":"2019-12-02T09:00:10.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvl000b1sl9dv4n59us","content":"<p>重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱</p>\n<p><img src=\"/img/grafana/1.png\" alt=\"1.png\"></p>\n<p>prometheus 中按标签查询结果，显示了该标签有多个查询结果</p>\n<p><img src=\"/img/grafana/2.png\" alt=\"2.png\"><br><a id=\"more\"></a></p>\n<p>现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：</p>\n<p><img src=\"/img/grafana/3.png\" alt=\"3.png\"></p>\n<p>重新编辑面板，按日期变量来过滤数据</p>\n<p><img src=\"/img/grafana/4.png\" alt=\"4.png\"></p>\n<p>保存，面版按当前日期显示正常：</p>\n<p><img src=\"/img/grafana/5.png\" alt=\"5.png\"></p>\n<p>日志监控的配置参考上篇文章: <a href=\"/2019/10/loki/\" title=\"使用Loki查询日志\">使用Loki查询日志</a></p>\n<p><a href=\"/2019/11/grafana-mysql-source/\" title=\"grafana 使用 mysql源\">grafana 使用 mysql源</a>时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: <code>select count(*) from t where type in (${source_type})</code>;</p>\n","site":{"data":{}},"excerpt":"<p>重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱</p>\n<p><img src=\"/img/grafana/1.png\" alt=\"1.png\"></p>\n<p>prometheus 中按标签查询结果，显示了该标签有多个查询结果</p>\n<p><img src=\"/img/grafana/2.png\" alt=\"2.png\"><br>","more":"</p>\n<p>现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：</p>\n<p><img src=\"/img/grafana/3.png\" alt=\"3.png\"></p>\n<p>重新编辑面板，按日期变量来过滤数据</p>\n<p><img src=\"/img/grafana/4.png\" alt=\"4.png\"></p>\n<p>保存，面版按当前日期显示正常：</p>\n<p><img src=\"/img/grafana/5.png\" alt=\"5.png\"></p>\n<p>日志监控的配置参考上篇文章: <a href=\"/2019/10/loki/\" title=\"使用Loki查询日志\">使用Loki查询日志</a></p>\n<p><a href=\"/2019/11/grafana-mysql-source/\" title=\"grafana 使用 mysql源\">grafana 使用 mysql源</a>时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: <code>select count(*) from t where type in (${source_type})</code>;</p>"},{"title":"使用hexo管理博客","date":"2019-10-23T16:09:10.000Z","share":true,"_content":"\n下载 hexo 镜像\n```sh\ndocker pull neofelhz/hexo-docker\n```\n\n启动镜像并映射本地目录\n\n```\ndocker run -itd \\\n    -v /home/runner/work/www/blog:/www/blog \\\n    -w=\"/www/blog\" \\\n    -p 4000:4000 \\\n    --name hexo-test \\\n    neofelhz/hexo-docker \\\n    /bin/sh\n```\n\n进入容器\n\n```\ndocker exec -it hexo-test /bin/sh\n```\n\n执行 `hexo init`，初始化时间较长，应该和网络有关\n\n```\n/www/blog # hexo init \nINFO  Cloning hexo-starter to /www/blog\nCloning into '/www/blog'...\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131\nReceiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.\nResolving deltas: 100% (64/64), done.\nSubmodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'\nCloning into '/www/blog/themes/landscape'...\n......\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nwarning Your current version of Yarn is out of date. The latest version is \"1.19.1\" while you're on \"1.3.2\".\ninfo To upgrade, run the following command:\n$ curl -o- -L https://yarnpkg.com/install.sh | bash\nDone in 112.25s.\nINFO  Start blogging with Hexo!\n```\n<!-- more -->\n\n初始化完成生成目录如下：\n\n```\n/www/blog/source/_posts # ls -la\ntotal 132\ndrwxr-xr-x   6 runner runner  4096 10月 23 14:33 .\ndrwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..\n-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml\n-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp\n-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore\ndrwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules\n-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json\ndrwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:18 source\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes\n-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock\n\n```\n\n修改` _config.yml` ，title 改为自己的网站标题，拷贝一个新的 md 文件到 `source/_posts`目录\n\n```\n/www/blog/source/_posts # ls\nhello-world.md  microk8.md\n```\n\n执行`hexo s`启动服务:\n\n```\n/www/blog/source # hexo s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n访问 `http://localhost:4000`，我们的 markdown 文章就以 html 格式展示出来了\n\n![1.png](/img/hexo/1.png)\n\n\n\n**上传到 github.io **\n\n1.修改_config.yaml，采用 git 方式部署到自己的 github.io\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/airzhe/airzhe.github.io \n```\n\n2.安装 `hexo-deploy-git` 模块，执行:  `npm install hexo-deployer-git --save`，之后执行 `hexo` 如果报错 `ERROR Local hexo not found *** `, 删除 `node_modules` 目录后，执行 `npm install`\n\n3.执行 `hexo clean && hexo deploy` 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！\n\n\n\n**小技巧**:\n\n1.文章注释信息定义：\n\n```\n---\ntitle: \"MicroK8s\"\ndate: 2019-10-23 20:23:10\ntags: [microk8s,k8s]\nshare: true\n---\n```\n\n2.插入图片:  在 source 目录下新建 img 目录，markdown 中以`/img` 为根路径引入对应图片\n\n3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}\n4.更多: `<!-- more -->`\n\n\n\n**文档**\n[hexo中文](https://hexo.io/zh-cn/docs/index.html)\n[hexo特殊符号转义](https://wxnacy.com/2018/01/12/hexo-specific-symbol/)\n\n\n\n**排错**\n\n1. 今天遇到部署时总提示hexo 源码分支指向master分支错误\n```\nBranch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.\n```\n或者以下报错，删除 `.deploy_git` 目录，重试解决\n```\nError: Spawn failed\n\nat ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n```\n参考： https://www.cnblogs.com/hushuangpu/p/10316560.html\n\n2. 切换网络hexo容器提示 github.com 无法访问，容器重启后正常","source":"_posts/hexo.md","raw":"---\ntitle: \"使用hexo管理博客\"\ndate: 2019-10-23 16:09:10\ntags: [hexo]\nshare: true\n---\n\n下载 hexo 镜像\n```sh\ndocker pull neofelhz/hexo-docker\n```\n\n启动镜像并映射本地目录\n\n```\ndocker run -itd \\\n    -v /home/runner/work/www/blog:/www/blog \\\n    -w=\"/www/blog\" \\\n    -p 4000:4000 \\\n    --name hexo-test \\\n    neofelhz/hexo-docker \\\n    /bin/sh\n```\n\n进入容器\n\n```\ndocker exec -it hexo-test /bin/sh\n```\n\n执行 `hexo init`，初始化时间较长，应该和网络有关\n\n```\n/www/blog # hexo init \nINFO  Cloning hexo-starter to /www/blog\nCloning into '/www/blog'...\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131\nReceiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.\nResolving deltas: 100% (64/64), done.\nSubmodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'\nCloning into '/www/blog/themes/landscape'...\n......\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nwarning Your current version of Yarn is out of date. The latest version is \"1.19.1\" while you're on \"1.3.2\".\ninfo To upgrade, run the following command:\n$ curl -o- -L https://yarnpkg.com/install.sh | bash\nDone in 112.25s.\nINFO  Start blogging with Hexo!\n```\n<!-- more -->\n\n初始化完成生成目录如下：\n\n```\n/www/blog/source/_posts # ls -la\ntotal 132\ndrwxr-xr-x   6 runner runner  4096 10月 23 14:33 .\ndrwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..\n-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml\n-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp\n-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore\ndrwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules\n-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json\ndrwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:18 source\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes\n-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock\n\n```\n\n修改` _config.yml` ，title 改为自己的网站标题，拷贝一个新的 md 文件到 `source/_posts`目录\n\n```\n/www/blog/source/_posts # ls\nhello-world.md  microk8.md\n```\n\n执行`hexo s`启动服务:\n\n```\n/www/blog/source # hexo s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n访问 `http://localhost:4000`，我们的 markdown 文章就以 html 格式展示出来了\n\n![1.png](/img/hexo/1.png)\n\n\n\n**上传到 github.io **\n\n1.修改_config.yaml，采用 git 方式部署到自己的 github.io\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/airzhe/airzhe.github.io \n```\n\n2.安装 `hexo-deploy-git` 模块，执行:  `npm install hexo-deployer-git --save`，之后执行 `hexo` 如果报错 `ERROR Local hexo not found *** `, 删除 `node_modules` 目录后，执行 `npm install`\n\n3.执行 `hexo clean && hexo deploy` 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！\n\n\n\n**小技巧**:\n\n1.文章注释信息定义：\n\n```\n---\ntitle: \"MicroK8s\"\ndate: 2019-10-23 20:23:10\ntags: [microk8s,k8s]\nshare: true\n---\n```\n\n2.插入图片:  在 source 目录下新建 img 目录，markdown 中以`/img` 为根路径引入对应图片\n\n3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}\n4.更多: `<!-- more -->`\n\n\n\n**文档**\n[hexo中文](https://hexo.io/zh-cn/docs/index.html)\n[hexo特殊符号转义](https://wxnacy.com/2018/01/12/hexo-specific-symbol/)\n\n\n\n**排错**\n\n1. 今天遇到部署时总提示hexo 源码分支指向master分支错误\n```\nBranch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.\n```\n或者以下报错，删除 `.deploy_git` 目录，重试解决\n```\nError: Spawn failed\n\nat ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n```\n参考： https://www.cnblogs.com/hushuangpu/p/10316560.html\n\n2. 切换网络hexo容器提示 github.com 无法访问，容器重启后正常","slug":"hexo","published":1,"updated":"2020-01-06T06:59:38.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvn000c1sl9fbq7zt4b","content":"<p>下载 hexo 镜像<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull neofelhz/hexo-docker</span><br></pre></td></tr></table></figure></p>\n<p>启动镜像并映射本地目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">    -v /home/runner/work/www/blog:/www/blog \\</span><br><span class=\"line\">    -w=&quot;/www/blog&quot; \\</span><br><span class=\"line\">    -p 4000:4000 \\</span><br><span class=\"line\">    --name hexo-test \\</span><br><span class=\"line\">    neofelhz/hexo-docker \\</span><br><span class=\"line\">    /bin/sh</span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it hexo-test /bin/sh</span><br></pre></td></tr></table></figure>\n<p>执行 <code>hexo init</code>，初始化时间较长，应该和网络有关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog # hexo init </span><br><span class=\"line\">INFO  Cloning hexo-starter to /www/blog</span><br><span class=\"line\">Cloning into &apos;/www/blog&apos;...</span><br><span class=\"line\">remote: Enumerating objects: 8, done.</span><br><span class=\"line\">remote: Counting objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131</span><br><span class=\"line\">Receiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (64/64), done.</span><br><span class=\"line\">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class=\"line\">Cloning into &apos;/www/blog/themes/landscape&apos;...</span><br><span class=\"line\">......</span><br><span class=\"line\">[3/4] Linking dependencies...</span><br><span class=\"line\">[4/4] Building fresh packages...</span><br><span class=\"line\">success Saved lockfile.</span><br><span class=\"line\">warning Your current version of Yarn is out of date. The latest version is &quot;1.19.1&quot; while you&apos;re on &quot;1.3.2&quot;.</span><br><span class=\"line\">info To upgrade, run the following command:</span><br><span class=\"line\">$ curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class=\"line\">Done in 112.25s.</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>初始化完成生成目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls -la</span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x   6 runner runner  4096 10月 23 14:33 .</span><br><span class=\"line\">drwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..</span><br><span class=\"line\">-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml</span><br><span class=\"line\">-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp</span><br><span class=\"line\">-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore</span><br><span class=\"line\">drwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules</span><br><span class=\"line\">-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json</span><br><span class=\"line\">drwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:18 source</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes</span><br><span class=\"line\">-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock</span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code> ，title 改为自己的网站标题，拷贝一个新的 md 文件到 <code>source/_posts</code>目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls</span><br><span class=\"line\">hello-world.md  microk8.md</span><br></pre></td></tr></table></figure>\n<p>执行<code>hexo s</code>启动服务:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source # hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:4000</code>，我们的 markdown 文章就以 html 格式展示出来了</p>\n<p><img src=\"/img/hexo/1.png\" alt=\"1.png\"></p>\n<p><strong>上传到 github.io </strong></p>\n<p>1.修改_config.yaml，采用 git 方式部署到自己的 github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/airzhe/airzhe.github.io</span><br></pre></td></tr></table></figure>\n<p>2.安装 <code>hexo-deploy-git</code> 模块，执行:  <code>npm install hexo-deployer-git --save</code>，之后执行 <code>hexo</code> 如果报错 <code>ERROR Local hexo not found ***</code>, 删除 <code>node_modules</code> 目录后，执行 <code>npm install</code></p>\n<p>3.执行 <code>hexo clean &amp;&amp; hexo deploy</code> 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！</p>\n<p><strong>小技巧</strong>:</p>\n<p>1.文章注释信息定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;MicroK8s&quot;</span><br><span class=\"line\">date: 2019-10-23 20:23:10</span><br><span class=\"line\">tags: [microk8s,k8s]</span><br><span class=\"line\">share: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>2.插入图片:  在 source 目录下新建 img 目录，markdown 中以<code>/img</code> 为根路径引入对应图片</p>\n<p>3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}<br>4.更多: <code>&lt;!-- more --&gt;</code></p>\n<p><strong>文档</strong><br><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo中文</a><br><a href=\"https://wxnacy.com/2018/01/12/hexo-specific-symbol/\" target=\"_blank\" rel=\"noopener\">hexo特殊符号转义</a></p>\n<p><strong>排错</strong></p>\n<ol>\n<li>今天遇到部署时总提示hexo 源码分支指向master分支错误<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者以下报错，删除 <code>.deploy_git</code> 目录，重试解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br></pre></td></tr></table></figure></p>\n<p>参考： <a href=\"https://www.cnblogs.com/hushuangpu/p/10316560.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hushuangpu/p/10316560.html</a></p>\n<ol start=\"2\">\n<li>切换网络hexo容器提示 github.com 无法访问，容器重启后正常</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>下载 hexo 镜像<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull neofelhz/hexo-docker</span><br></pre></td></tr></table></figure></p>\n<p>启动镜像并映射本地目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">    -v /home/runner/work/www/blog:/www/blog \\</span><br><span class=\"line\">    -w=&quot;/www/blog&quot; \\</span><br><span class=\"line\">    -p 4000:4000 \\</span><br><span class=\"line\">    --name hexo-test \\</span><br><span class=\"line\">    neofelhz/hexo-docker \\</span><br><span class=\"line\">    /bin/sh</span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it hexo-test /bin/sh</span><br></pre></td></tr></table></figure>\n<p>执行 <code>hexo init</code>，初始化时间较长，应该和网络有关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog # hexo init </span><br><span class=\"line\">INFO  Cloning hexo-starter to /www/blog</span><br><span class=\"line\">Cloning into &apos;/www/blog&apos;...</span><br><span class=\"line\">remote: Enumerating objects: 8, done.</span><br><span class=\"line\">remote: Counting objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131</span><br><span class=\"line\">Receiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (64/64), done.</span><br><span class=\"line\">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class=\"line\">Cloning into &apos;/www/blog/themes/landscape&apos;...</span><br><span class=\"line\">......</span><br><span class=\"line\">[3/4] Linking dependencies...</span><br><span class=\"line\">[4/4] Building fresh packages...</span><br><span class=\"line\">success Saved lockfile.</span><br><span class=\"line\">warning Your current version of Yarn is out of date. The latest version is &quot;1.19.1&quot; while you&apos;re on &quot;1.3.2&quot;.</span><br><span class=\"line\">info To upgrade, run the following command:</span><br><span class=\"line\">$ curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class=\"line\">Done in 112.25s.</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>","more":"<p>初始化完成生成目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls -la</span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x   6 runner runner  4096 10月 23 14:33 .</span><br><span class=\"line\">drwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..</span><br><span class=\"line\">-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml</span><br><span class=\"line\">-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp</span><br><span class=\"line\">-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore</span><br><span class=\"line\">drwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules</span><br><span class=\"line\">-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json</span><br><span class=\"line\">drwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:18 source</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes</span><br><span class=\"line\">-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock</span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code> ，title 改为自己的网站标题，拷贝一个新的 md 文件到 <code>source/_posts</code>目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls</span><br><span class=\"line\">hello-world.md  microk8.md</span><br></pre></td></tr></table></figure>\n<p>执行<code>hexo s</code>启动服务:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source # hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:4000</code>，我们的 markdown 文章就以 html 格式展示出来了</p>\n<p><img src=\"/img/hexo/1.png\" alt=\"1.png\"></p>\n<p><strong>上传到 github.io </strong></p>\n<p>1.修改_config.yaml，采用 git 方式部署到自己的 github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/airzhe/airzhe.github.io</span><br></pre></td></tr></table></figure>\n<p>2.安装 <code>hexo-deploy-git</code> 模块，执行:  <code>npm install hexo-deployer-git --save</code>，之后执行 <code>hexo</code> 如果报错 <code>ERROR Local hexo not found ***</code>, 删除 <code>node_modules</code> 目录后，执行 <code>npm install</code></p>\n<p>3.执行 <code>hexo clean &amp;&amp; hexo deploy</code> 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！</p>\n<p><strong>小技巧</strong>:</p>\n<p>1.文章注释信息定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;MicroK8s&quot;</span><br><span class=\"line\">date: 2019-10-23 20:23:10</span><br><span class=\"line\">tags: [microk8s,k8s]</span><br><span class=\"line\">share: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>2.插入图片:  在 source 目录下新建 img 目录，markdown 中以<code>/img</code> 为根路径引入对应图片</p>\n<p>3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}<br>4.更多: <code>&lt;!-- more --&gt;</code></p>\n<p><strong>文档</strong><br><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo中文</a><br><a href=\"https://wxnacy.com/2018/01/12/hexo-specific-symbol/\" target=\"_blank\" rel=\"noopener\">hexo特殊符号转义</a></p>\n<p><strong>排错</strong></p>\n<ol>\n<li>今天遇到部署时总提示hexo 源码分支指向master分支错误<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者以下报错，删除 <code>.deploy_git</code> 目录，重试解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br></pre></td></tr></table></figure></p>\n<p>参考： <a href=\"https://www.cnblogs.com/hushuangpu/p/10316560.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hushuangpu/p/10316560.html</a></p>\n<ol start=\"2\">\n<li>切换网络hexo容器提示 github.com 无法访问，容器重启后正常</li>\n</ol>"},{"layout":"post","title":"jenkins pipeline 入门","description":"","date":"2019-02-12T00:00:00.000Z","comments":0,"share":true,"_content":"### Jenkins 特点：\n\n开源免费；\n跨平台，支持所有的平台；\nmaster/slave 支持分布式的 build；\nweb 形式的可视化的管理页面；\n\n\n\n### 安装\n```\ndocker pull jenkins/jenkins:2.138.2\ndocker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins\n\ndocker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2\n  \n```\n\n### 插件\n\n```\nGo\n\nCloudBees Docker Build and Publish:\n\n```\n\n### 全局工具配置\n\n```\nGo 安装\n安装目录：/var/jenkins_home/go\n```\n\n### 证书\n\n```\n配置访问git证书 SSH Username with private key\nharbor jenkins  密码\n```\n\n\n### 项目配置\n```\n构建环境\nSet up Go programming language tools\n构建：\nDocker Build and Publish\nDocker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375\n```\n\n\n### Pipeline\n\nPipeline的几个基本概念：\n\n- Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。\n- Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。\n- Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。\n\n```\npipeline {\n    agent { label 'master' }\n    tools {\n       maven 'maven_1'\n    }\n     stages {\n        stage('Build') {\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '*/master']], \n                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], \n                userRemoteConfigs: [[url: 'https://github.com/airzhe/demo-junit']]])\n                sh 'mvn -version'\n                sh 'mvn package -DskipTests'\n            }             \n        }\n        stage('Build docker image') {\n            steps {\n                //sh 'docker login --username airzhe  --password ×××'\n                sh 'docker build -t airzhe/test:${imageversion} .'\n                sh 'docker push airzhe/test:${imageversion}'\n            }             \n        }\n    }\n    post { \n            failure { \n                echo 'fail !'\n            }\n            success{\n                echo 'success !'\n            }\n    }\n}\n```\n\n### 参考\n\ngo 插件安装：  \nhttps://blog.csdn.net/aixiaoyang168/article/details/82965854\n\n","source":"_posts/jenkins-introduction.md","raw":"---\nlayout: post\ntitle: \"jenkins pipeline 入门\"\ndescription: \"\"\ndate: 2019-02-12\ntags: [jenkins,pipeline]\ncomments: false\nshare: true\n---\n### Jenkins 特点：\n\n开源免费；\n跨平台，支持所有的平台；\nmaster/slave 支持分布式的 build；\nweb 形式的可视化的管理页面；\n\n\n\n### 安装\n```\ndocker pull jenkins/jenkins:2.138.2\ndocker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins\n\ndocker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2\n  \n```\n\n### 插件\n\n```\nGo\n\nCloudBees Docker Build and Publish:\n\n```\n\n### 全局工具配置\n\n```\nGo 安装\n安装目录：/var/jenkins_home/go\n```\n\n### 证书\n\n```\n配置访问git证书 SSH Username with private key\nharbor jenkins  密码\n```\n\n\n### 项目配置\n```\n构建环境\nSet up Go programming language tools\n构建：\nDocker Build and Publish\nDocker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375\n```\n\n\n### Pipeline\n\nPipeline的几个基本概念：\n\n- Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。\n- Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。\n- Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。\n\n```\npipeline {\n    agent { label 'master' }\n    tools {\n       maven 'maven_1'\n    }\n     stages {\n        stage('Build') {\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '*/master']], \n                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], \n                userRemoteConfigs: [[url: 'https://github.com/airzhe/demo-junit']]])\n                sh 'mvn -version'\n                sh 'mvn package -DskipTests'\n            }             \n        }\n        stage('Build docker image') {\n            steps {\n                //sh 'docker login --username airzhe  --password ×××'\n                sh 'docker build -t airzhe/test:${imageversion} .'\n                sh 'docker push airzhe/test:${imageversion}'\n            }             \n        }\n    }\n    post { \n            failure { \n                echo 'fail !'\n            }\n            success{\n                echo 'success !'\n            }\n    }\n}\n```\n\n### 参考\n\ngo 插件安装：  \nhttps://blog.csdn.net/aixiaoyang168/article/details/82965854\n\n","slug":"jenkins-introduction","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ck53jqsvr000e1sl9a3sowucd","content":"<h3 id=\"Jenkins-特点：\"><a href=\"#Jenkins-特点：\" class=\"headerlink\" title=\"Jenkins 特点：\"></a>Jenkins 特点：</h3><p>开源免费；<br>跨平台，支持所有的平台；<br>master/slave 支持分布式的 build；<br>web 形式的可视化的管理页面；</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:2.138.2</span><br><span class=\"line\">docker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go</span><br><span class=\"line\"></span><br><span class=\"line\">CloudBees Docker Build and Publish:</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a>全局工具配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go 安装</span><br><span class=\"line\">安装目录：/var/jenkins_home/go</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置访问git证书 SSH Username with private key</span><br><span class=\"line\">harbor jenkins  密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建环境</span><br><span class=\"line\">Set up Go programming language tools</span><br><span class=\"line\">构建：</span><br><span class=\"line\">Docker Build and Publish</span><br><span class=\"line\">Docker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>Pipeline的几个基本概念：</p>\n<ul>\n<li>Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。</li>\n<li>Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。</li>\n<li>Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label &apos;master&apos; &#125;</span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">       maven &apos;maven_1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     stages &#123;</span><br><span class=\"line\">        stage(&apos;Build&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], </span><br><span class=\"line\">                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], </span><br><span class=\"line\">                userRemoteConfigs: [[url: &apos;https://github.com/airzhe/demo-junit&apos;]]])</span><br><span class=\"line\">                sh &apos;mvn -version&apos;</span><br><span class=\"line\">                sh &apos;mvn package -DskipTests&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(&apos;Build docker image&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                //sh &apos;docker login --username airzhe  --password ×××&apos;</span><br><span class=\"line\">                sh &apos;docker build -t airzhe/test:$&#123;imageversion&#125; .&apos;</span><br><span class=\"line\">                sh &apos;docker push airzhe/test:$&#123;imageversion&#125;&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123; </span><br><span class=\"line\">            failure &#123; </span><br><span class=\"line\">                echo &apos;fail !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            success&#123;</span><br><span class=\"line\">                echo &apos;success !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>go 插件安装：<br><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/82965854\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aixiaoyang168/article/details/82965854</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Jenkins-特点：\"><a href=\"#Jenkins-特点：\" class=\"headerlink\" title=\"Jenkins 特点：\"></a>Jenkins 特点：</h3><p>开源免费；<br>跨平台，支持所有的平台；<br>master/slave 支持分布式的 build；<br>web 形式的可视化的管理页面；</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:2.138.2</span><br><span class=\"line\">docker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go</span><br><span class=\"line\"></span><br><span class=\"line\">CloudBees Docker Build and Publish:</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a>全局工具配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go 安装</span><br><span class=\"line\">安装目录：/var/jenkins_home/go</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置访问git证书 SSH Username with private key</span><br><span class=\"line\">harbor jenkins  密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建环境</span><br><span class=\"line\">Set up Go programming language tools</span><br><span class=\"line\">构建：</span><br><span class=\"line\">Docker Build and Publish</span><br><span class=\"line\">Docker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>Pipeline的几个基本概念：</p>\n<ul>\n<li>Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。</li>\n<li>Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。</li>\n<li>Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label &apos;master&apos; &#125;</span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">       maven &apos;maven_1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     stages &#123;</span><br><span class=\"line\">        stage(&apos;Build&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], </span><br><span class=\"line\">                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], </span><br><span class=\"line\">                userRemoteConfigs: [[url: &apos;https://github.com/airzhe/demo-junit&apos;]]])</span><br><span class=\"line\">                sh &apos;mvn -version&apos;</span><br><span class=\"line\">                sh &apos;mvn package -DskipTests&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(&apos;Build docker image&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                //sh &apos;docker login --username airzhe  --password ×××&apos;</span><br><span class=\"line\">                sh &apos;docker build -t airzhe/test:$&#123;imageversion&#125; .&apos;</span><br><span class=\"line\">                sh &apos;docker push airzhe/test:$&#123;imageversion&#125;&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123; </span><br><span class=\"line\">            failure &#123; </span><br><span class=\"line\">                echo &apos;fail !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            success&#123;</span><br><span class=\"line\">                echo &apos;success !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>go 插件安装：<br><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/82965854\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aixiaoyang168/article/details/82965854</a></p>\n"},{"title":"helm 命令介绍及使用","date":"2019-10-16T17:35:10.000Z","share":true,"_content":"\n**命令**\n\n```\nhelm repo list\nhelm search \nhelm list #列出已经按照项目\nhelm del --purge istio-init #删除\nhelm fetch stable/grafana #下载到本地\nhelm push mysql-0.3.5.tgz myrepo\nhelm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库\nhelm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库\n\nhelm list --deleted\nhelm rollback nginx-ingress 1\n\nhelm create hello_test\nhelm package ./hello_test/ #打包\nhelm install ./hello_test-0.1.0.tgz --debug --dry-run #调试\nhelm get manifest #这条命令可以通过 release 名来打印其相关yaml信息\nhelm status wintering-rodent\n\nhelm plugin install https://github.com/chartmuseum/helm-push #安装push插件\nhelm repo add mylibrary http://harbor.local.com:8082/chartrepo/library\nhelm push --username=runner --password=745632Bn hello_test mylibrary\n\nhelm fetch stable/redis\nhelm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0\n\n\ndocker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0\nexport HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134\nhelm list\nhelm init --client-only\n\nhelm upgrade -f panda.yaml happpy-panda stable/mariadb #更新\nhelm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml > my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。\nhelm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f\n\nhelm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中\nhelm status \n\nhelm inspect values . #查看charts的配置选项\nhelm inspect values yhdx/community --version 0.2.0\nhelm get values zeroed-gnat -a #查看 release 的配置值\n\nhelm --set a=b,c=d \nhelm --set name={a,b,c} \nhelm --set server[0].port = 80\n\n--timeout\n--wait\n\nhelm init --service-account \nhelm install . --debug --dry-run --set favoriteDrink=tea #set 替换\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\nhelm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . \nhelm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress\n\n#启动本地 chartmuseum 仓库\ndocker run --rm -itd \\\n  -p 8089:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/charts \\\n  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\\n --name my_chartmuseum  chartmuseum/chartmuseum:latest\nhelm repo add myChartMuseum http://172.16.101.197:8089\n\nhelm upgrade install --force\n```\n<!-- more -->\n\n**helm Values Files 值来源**\n\n```\n前面讲了内置对像 Values，它的值有四个来源：\n\nvalues.yaml 文件\n如果这是个子 chart，其父 chart 的 Values.yaml 文件\n在 helm install 或 helm upgrade 时，通过 -f 指定的文件\n通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）\n```\n\n\n\n**helm template**\n\n```\nRelease：该对象描述了发布本身。它里面有几个对象：\nRelease.Name：发布名称\nRelease.Time：发布的时间\nRelease.Namespace：要释放到的命名空间（如果清单未覆盖）\nRelease.Service：发布服务的名称（始终Tiller）。\nRelease.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。\nRelease.IsUpgrade：true如果当前操作是升级或回滚，则设置为。\nRelease.IsInstall：true如果当前操作是安装，则设置为。\n\nChart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如{{.Chart.Name}}-{{.Chart.Version}}将打印出来mychart-0.1.0。\n\"图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file\n\n.Files.Get config.ini\n\nTemplate：包含有关正在执行的当前模板的信息\nName：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）\nBasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。\n\n内置值始终以大写字母开头,本地名称以小写开头\n\ndrink: {{ quote .Values.favorite.drink }} #值加引号\nfood: {{ .Values.favorite.food | upper | quote }} #管道\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }} #默认值\n\nif/ else用于创建条件块\nwith 指定范围\nrange，它提供了“for each”式循环\n\n{{- if eq .Values.favorite.drink \"coffee\"}}\nmug: true\n{{- end}}\n\n#with\n{{- with .Values.favorite }}\ndrink: {{ .drink | default \"tea\" | quote }}\nfood: {{ .food | upper | quote }}\n{{- end }}\n\n|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用\ntoppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }\ntoppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n\n有一个变量始终是全局$变量 - 该变量将始终指向根上下文\n\n\n#模板\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\n  \n当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：{{- template \"mychart.labels\" }} 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：{{- template \"mychart.labels\" . }}\n\n最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。\nlabels:\n    {{- include \"mychart.app\" . | nindent 4 }}\n    \n    \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range list \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n\n#生成 nginx.conf 配置\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n    \n{{ .Release.Name }} 随机生产的单词\n{{ include \"community.fullname\" . }} 和项目有关的名称\n```\n\n\n\n**tiller**\n\n```\ntiller 可以安两个一个集群内，一个集群外\n```\n\n\n\n**docker 客户端**\n\n```\ndocker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl\n```\n\n**依赖管理**\n\n-  直接把依赖的 package 放在 charts / 目录中\n- 使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages\n\n\n\nGrafana 安装\n\n```\nhttps://grafana.com/grafana/dashboards/7249\n\nhelm upgrade --install loki loki/loki-stack --namespace monitoring\n\nhelm install  stable/grafana -n grafana --namespace=monitoring\nhelm upgrade grafana  stable/grafana  --set adminPassword=745632Bn123\nhelm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com\n```\n\n","source":"_posts/helm.md","raw":"---\ntitle: \"helm 命令介绍及使用\"\ndate: 2019-10-16 17:35:10\ntags: [k8s,helm,charts]\nshare: true\n---\n\n**命令**\n\n```\nhelm repo list\nhelm search \nhelm list #列出已经按照项目\nhelm del --purge istio-init #删除\nhelm fetch stable/grafana #下载到本地\nhelm push mysql-0.3.5.tgz myrepo\nhelm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库\nhelm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库\n\nhelm list --deleted\nhelm rollback nginx-ingress 1\n\nhelm create hello_test\nhelm package ./hello_test/ #打包\nhelm install ./hello_test-0.1.0.tgz --debug --dry-run #调试\nhelm get manifest #这条命令可以通过 release 名来打印其相关yaml信息\nhelm status wintering-rodent\n\nhelm plugin install https://github.com/chartmuseum/helm-push #安装push插件\nhelm repo add mylibrary http://harbor.local.com:8082/chartrepo/library\nhelm push --username=runner --password=745632Bn hello_test mylibrary\n\nhelm fetch stable/redis\nhelm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0\n\n\ndocker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0\nexport HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134\nhelm list\nhelm init --client-only\n\nhelm upgrade -f panda.yaml happpy-panda stable/mariadb #更新\nhelm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml > my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。\nhelm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f\n\nhelm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中\nhelm status \n\nhelm inspect values . #查看charts的配置选项\nhelm inspect values yhdx/community --version 0.2.0\nhelm get values zeroed-gnat -a #查看 release 的配置值\n\nhelm --set a=b,c=d \nhelm --set name={a,b,c} \nhelm --set server[0].port = 80\n\n--timeout\n--wait\n\nhelm init --service-account \nhelm install . --debug --dry-run --set favoriteDrink=tea #set 替换\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\nhelm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . \nhelm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress\n\n#启动本地 chartmuseum 仓库\ndocker run --rm -itd \\\n  -p 8089:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/charts \\\n  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\\n --name my_chartmuseum  chartmuseum/chartmuseum:latest\nhelm repo add myChartMuseum http://172.16.101.197:8089\n\nhelm upgrade install --force\n```\n<!-- more -->\n\n**helm Values Files 值来源**\n\n```\n前面讲了内置对像 Values，它的值有四个来源：\n\nvalues.yaml 文件\n如果这是个子 chart，其父 chart 的 Values.yaml 文件\n在 helm install 或 helm upgrade 时，通过 -f 指定的文件\n通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）\n```\n\n\n\n**helm template**\n\n```\nRelease：该对象描述了发布本身。它里面有几个对象：\nRelease.Name：发布名称\nRelease.Time：发布的时间\nRelease.Namespace：要释放到的命名空间（如果清单未覆盖）\nRelease.Service：发布服务的名称（始终Tiller）。\nRelease.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。\nRelease.IsUpgrade：true如果当前操作是升级或回滚，则设置为。\nRelease.IsInstall：true如果当前操作是安装，则设置为。\n\nChart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如{{.Chart.Name}}-{{.Chart.Version}}将打印出来mychart-0.1.0。\n\"图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file\n\n.Files.Get config.ini\n\nTemplate：包含有关正在执行的当前模板的信息\nName：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）\nBasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。\n\n内置值始终以大写字母开头,本地名称以小写开头\n\ndrink: {{ quote .Values.favorite.drink }} #值加引号\nfood: {{ .Values.favorite.food | upper | quote }} #管道\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }} #默认值\n\nif/ else用于创建条件块\nwith 指定范围\nrange，它提供了“for each”式循环\n\n{{- if eq .Values.favorite.drink \"coffee\"}}\nmug: true\n{{- end}}\n\n#with\n{{- with .Values.favorite }}\ndrink: {{ .drink | default \"tea\" | quote }}\nfood: {{ .food | upper | quote }}\n{{- end }}\n\n|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用\ntoppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }\ntoppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n\n有一个变量始终是全局$变量 - 该变量将始终指向根上下文\n\n\n#模板\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\n  \n当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：{{- template \"mychart.labels\" }} 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：{{- template \"mychart.labels\" . }}\n\n最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。\nlabels:\n    {{- include \"mychart.app\" . | nindent 4 }}\n    \n    \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range list \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n\n#生成 nginx.conf 配置\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n    \n{{ .Release.Name }} 随机生产的单词\n{{ include \"community.fullname\" . }} 和项目有关的名称\n```\n\n\n\n**tiller**\n\n```\ntiller 可以安两个一个集群内，一个集群外\n```\n\n\n\n**docker 客户端**\n\n```\ndocker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl\n```\n\n**依赖管理**\n\n-  直接把依赖的 package 放在 charts / 目录中\n- 使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages\n\n\n\nGrafana 安装\n\n```\nhttps://grafana.com/grafana/dashboards/7249\n\nhelm upgrade --install loki loki/loki-stack --namespace monitoring\n\nhelm install  stable/grafana -n grafana --namespace=monitoring\nhelm upgrade grafana  stable/grafana  --set adminPassword=745632Bn123\nhelm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com\n```\n\n","slug":"helm","published":1,"updated":"2019-11-14T03:33:28.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvu000g1sl9z9392o5z","content":"<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo list</span><br><span class=\"line\">helm search </span><br><span class=\"line\">helm list #列出已经按照项目</span><br><span class=\"line\">helm del --purge istio-init #删除</span><br><span class=\"line\">helm fetch stable/grafana #下载到本地</span><br><span class=\"line\">helm push mysql-0.3.5.tgz myrepo</span><br><span class=\"line\">helm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库</span><br><span class=\"line\"></span><br><span class=\"line\">helm list --deleted</span><br><span class=\"line\">helm rollback nginx-ingress 1</span><br><span class=\"line\"></span><br><span class=\"line\">helm create hello_test</span><br><span class=\"line\">helm package ./hello_test/ #打包</span><br><span class=\"line\">helm install ./hello_test-0.1.0.tgz --debug --dry-run #调试</span><br><span class=\"line\">helm get manifest #这条命令可以通过 release 名来打印其相关yaml信息</span><br><span class=\"line\">helm status wintering-rodent</span><br><span class=\"line\"></span><br><span class=\"line\">helm plugin install https://github.com/chartmuseum/helm-push #安装push插件</span><br><span class=\"line\">helm repo add mylibrary http://harbor.local.com:8082/chartrepo/library</span><br><span class=\"line\">helm push --username=runner --password=745632Bn hello_test mylibrary</span><br><span class=\"line\"></span><br><span class=\"line\">helm fetch stable/redis</span><br><span class=\"line\">helm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0</span><br><span class=\"line\">export HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134</span><br><span class=\"line\">helm list</span><br><span class=\"line\">helm init --client-only</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade -f panda.yaml happpy-panda stable/mariadb #更新</span><br><span class=\"line\">helm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml &gt; my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。</span><br><span class=\"line\">helm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f</span><br><span class=\"line\"></span><br><span class=\"line\">helm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中</span><br><span class=\"line\">helm status </span><br><span class=\"line\"></span><br><span class=\"line\">helm inspect values . #查看charts的配置选项</span><br><span class=\"line\">helm inspect values yhdx/community --version 0.2.0</span><br><span class=\"line\">helm get values zeroed-gnat -a #查看 release 的配置值</span><br><span class=\"line\"></span><br><span class=\"line\">helm --set a=b,c=d </span><br><span class=\"line\">helm --set name=&#123;a,b,c&#125; </span><br><span class=\"line\">helm --set server[0].port = 80</span><br><span class=\"line\"></span><br><span class=\"line\">--timeout</span><br><span class=\"line\">--wait</span><br><span class=\"line\"></span><br><span class=\"line\">helm init --service-account </span><br><span class=\"line\">helm install . --debug --dry-run --set favoriteDrink=tea #set 替换</span><br><span class=\"line\">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null</span><br><span class=\"line\">helm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . </span><br><span class=\"line\">helm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress</span><br><span class=\"line\"></span><br><span class=\"line\">#启动本地 chartmuseum 仓库</span><br><span class=\"line\">docker run --rm -itd \\</span><br><span class=\"line\">  -p 8089:8080 \\</span><br><span class=\"line\">  -e DEBUG=1 \\</span><br><span class=\"line\">  -e STORAGE=local \\</span><br><span class=\"line\">  -e STORAGE_LOCAL_ROOTDIR=/charts \\</span><br><span class=\"line\">  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\</span><br><span class=\"line\"> --name my_chartmuseum  chartmuseum/chartmuseum:latest</span><br><span class=\"line\">helm repo add myChartMuseum http://172.16.101.197:8089</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade install --force</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>helm Values Files 值来源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前面讲了内置对像 Values，它的值有四个来源：</span><br><span class=\"line\"></span><br><span class=\"line\">values.yaml 文件</span><br><span class=\"line\">如果这是个子 chart，其父 chart 的 Values.yaml 文件</span><br><span class=\"line\">在 helm install 或 helm upgrade 时，通过 -f 指定的文件</span><br><span class=\"line\">通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）</span><br></pre></td></tr></table></figure>\n<p><strong>helm template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release：该对象描述了发布本身。它里面有几个对象：</span><br><span class=\"line\">Release.Name：发布名称</span><br><span class=\"line\">Release.Time：发布的时间</span><br><span class=\"line\">Release.Namespace：要释放到的命名空间（如果清单未覆盖）</span><br><span class=\"line\">Release.Service：发布服务的名称（始终Tiller）。</span><br><span class=\"line\">Release.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。</span><br><span class=\"line\">Release.IsUpgrade：true如果当前操作是升级或回滚，则设置为。</span><br><span class=\"line\">Release.IsInstall：true如果当前操作是安装，则设置为。</span><br><span class=\"line\"></span><br><span class=\"line\">Chart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如&#123;&#123;.Chart.Name&#125;&#125;-&#123;&#123;.Chart.Version&#125;&#125;将打印出来mychart-0.1.0。</span><br><span class=\"line\">&quot;图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file</span><br><span class=\"line\"></span><br><span class=\"line\">.Files.Get config.ini</span><br><span class=\"line\"></span><br><span class=\"line\">Template：包含有关正在执行的当前模板的信息</span><br><span class=\"line\">Name：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）</span><br><span class=\"line\">BasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。</span><br><span class=\"line\"></span><br><span class=\"line\">内置值始终以大写字母开头,本地名称以小写开头</span><br><span class=\"line\"></span><br><span class=\"line\">drink: &#123;&#123; quote .Values.favorite.drink &#125;&#125; #值加引号</span><br><span class=\"line\">food: &#123;&#123; .Values.favorite.food | upper | quote &#125;&#125; #管道</span><br><span class=\"line\">drink: &#123;&#123; .Values.favorite.drink | default &quot;tea&quot; | quote &#125;&#125; #默认值</span><br><span class=\"line\"></span><br><span class=\"line\">if/ else用于创建条件块</span><br><span class=\"line\">with 指定范围</span><br><span class=\"line\">range，它提供了“for each”式循环</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- if eq .Values.favorite.drink &quot;coffee&quot;&#125;&#125;</span><br><span class=\"line\">mug: true</span><br><span class=\"line\">&#123;&#123;- end&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#with</span><br><span class=\"line\">&#123;&#123;- with .Values.favorite &#125;&#125;</span><br><span class=\"line\">drink: &#123;&#123; .drink | default &quot;tea&quot; | quote &#125;&#125;</span><br><span class=\"line\">food: &#123;&#123; .food | upper | quote &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">    - &#123;&#123; . | title | quote &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range $index, $topping := .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">      &#123;&#123; $index &#125;&#125;: &#123;&#123; $topping &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">有一个变量始终是全局$变量 - 该变量将始终指向根上下文</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#模板</span><br><span class=\"line\">&#123;&#123;/* Generate basic labels */&#125;&#125;</span><br><span class=\"line\">&#123;&#123;- define &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    generator: helm</span><br><span class=\"line\">    date: &#123;&#123; now | htmlDate &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">  &#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：&#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125; 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：&#123;&#123;- template &quot;mychart.labels&quot; . &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。</span><br><span class=\"line\">labels:</span><br><span class=\"line\">    &#123;&#123;- include &quot;mychart.app&quot; . | nindent 4 &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">data:</span><br><span class=\"line\">  &#123;&#123;- $files := .Files &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- range list &quot;config1.toml&quot; &quot;config2.toml&quot; &quot;config3.toml&quot; &#125;&#125;</span><br><span class=\"line\">  &#123;&#123; . &#125;&#125;: |-</span><br><span class=\"line\">    &#123;&#123; $files.Get . &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#生成 nginx.conf 配置</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-secret</span><br><span class=\"line\">type: Opaque</span><br><span class=\"line\">data:</span><br><span class=\"line\">  token: |-</span><br><span class=\"line\">    &#123;&#123; .Files.Get &quot;config1.toml&quot; | b64enc &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#123;&#123; .Release.Name &#125;&#125; 随机生产的单词</span><br><span class=\"line\">&#123;&#123; include &quot;community.fullname&quot; . &#125;&#125; 和项目有关的名称</span><br></pre></td></tr></table></figure>\n<p><strong>tiller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiller 可以安两个一个集群内，一个集群外</span><br></pre></td></tr></table></figure>\n<p><strong>docker 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl</span><br></pre></td></tr></table></figure>\n<p><strong>依赖管理</strong></p>\n<ul>\n<li>直接把依赖的 package 放在 charts / 目录中</li>\n<li>使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages</li>\n</ul>\n<p>Grafana 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://grafana.com/grafana/dashboards/7249</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --install loki loki/loki-stack --namespace monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">helm install  stable/grafana -n grafana --namespace=monitoring</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set adminPassword=745632Bn123</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo list</span><br><span class=\"line\">helm search </span><br><span class=\"line\">helm list #列出已经按照项目</span><br><span class=\"line\">helm del --purge istio-init #删除</span><br><span class=\"line\">helm fetch stable/grafana #下载到本地</span><br><span class=\"line\">helm push mysql-0.3.5.tgz myrepo</span><br><span class=\"line\">helm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库</span><br><span class=\"line\"></span><br><span class=\"line\">helm list --deleted</span><br><span class=\"line\">helm rollback nginx-ingress 1</span><br><span class=\"line\"></span><br><span class=\"line\">helm create hello_test</span><br><span class=\"line\">helm package ./hello_test/ #打包</span><br><span class=\"line\">helm install ./hello_test-0.1.0.tgz --debug --dry-run #调试</span><br><span class=\"line\">helm get manifest #这条命令可以通过 release 名来打印其相关yaml信息</span><br><span class=\"line\">helm status wintering-rodent</span><br><span class=\"line\"></span><br><span class=\"line\">helm plugin install https://github.com/chartmuseum/helm-push #安装push插件</span><br><span class=\"line\">helm repo add mylibrary http://harbor.local.com:8082/chartrepo/library</span><br><span class=\"line\">helm push --username=runner --password=745632Bn hello_test mylibrary</span><br><span class=\"line\"></span><br><span class=\"line\">helm fetch stable/redis</span><br><span class=\"line\">helm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0</span><br><span class=\"line\">export HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134</span><br><span class=\"line\">helm list</span><br><span class=\"line\">helm init --client-only</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade -f panda.yaml happpy-panda stable/mariadb #更新</span><br><span class=\"line\">helm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml &gt; my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。</span><br><span class=\"line\">helm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f</span><br><span class=\"line\"></span><br><span class=\"line\">helm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中</span><br><span class=\"line\">helm status </span><br><span class=\"line\"></span><br><span class=\"line\">helm inspect values . #查看charts的配置选项</span><br><span class=\"line\">helm inspect values yhdx/community --version 0.2.0</span><br><span class=\"line\">helm get values zeroed-gnat -a #查看 release 的配置值</span><br><span class=\"line\"></span><br><span class=\"line\">helm --set a=b,c=d </span><br><span class=\"line\">helm --set name=&#123;a,b,c&#125; </span><br><span class=\"line\">helm --set server[0].port = 80</span><br><span class=\"line\"></span><br><span class=\"line\">--timeout</span><br><span class=\"line\">--wait</span><br><span class=\"line\"></span><br><span class=\"line\">helm init --service-account </span><br><span class=\"line\">helm install . --debug --dry-run --set favoriteDrink=tea #set 替换</span><br><span class=\"line\">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null</span><br><span class=\"line\">helm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . </span><br><span class=\"line\">helm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress</span><br><span class=\"line\"></span><br><span class=\"line\">#启动本地 chartmuseum 仓库</span><br><span class=\"line\">docker run --rm -itd \\</span><br><span class=\"line\">  -p 8089:8080 \\</span><br><span class=\"line\">  -e DEBUG=1 \\</span><br><span class=\"line\">  -e STORAGE=local \\</span><br><span class=\"line\">  -e STORAGE_LOCAL_ROOTDIR=/charts \\</span><br><span class=\"line\">  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\</span><br><span class=\"line\"> --name my_chartmuseum  chartmuseum/chartmuseum:latest</span><br><span class=\"line\">helm repo add myChartMuseum http://172.16.101.197:8089</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade install --force</span><br></pre></td></tr></table></figure>","more":"<p><strong>helm Values Files 值来源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前面讲了内置对像 Values，它的值有四个来源：</span><br><span class=\"line\"></span><br><span class=\"line\">values.yaml 文件</span><br><span class=\"line\">如果这是个子 chart，其父 chart 的 Values.yaml 文件</span><br><span class=\"line\">在 helm install 或 helm upgrade 时，通过 -f 指定的文件</span><br><span class=\"line\">通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）</span><br></pre></td></tr></table></figure>\n<p><strong>helm template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release：该对象描述了发布本身。它里面有几个对象：</span><br><span class=\"line\">Release.Name：发布名称</span><br><span class=\"line\">Release.Time：发布的时间</span><br><span class=\"line\">Release.Namespace：要释放到的命名空间（如果清单未覆盖）</span><br><span class=\"line\">Release.Service：发布服务的名称（始终Tiller）。</span><br><span class=\"line\">Release.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。</span><br><span class=\"line\">Release.IsUpgrade：true如果当前操作是升级或回滚，则设置为。</span><br><span class=\"line\">Release.IsInstall：true如果当前操作是安装，则设置为。</span><br><span class=\"line\"></span><br><span class=\"line\">Chart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如&#123;&#123;.Chart.Name&#125;&#125;-&#123;&#123;.Chart.Version&#125;&#125;将打印出来mychart-0.1.0。</span><br><span class=\"line\">&quot;图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file</span><br><span class=\"line\"></span><br><span class=\"line\">.Files.Get config.ini</span><br><span class=\"line\"></span><br><span class=\"line\">Template：包含有关正在执行的当前模板的信息</span><br><span class=\"line\">Name：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）</span><br><span class=\"line\">BasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。</span><br><span class=\"line\"></span><br><span class=\"line\">内置值始终以大写字母开头,本地名称以小写开头</span><br><span class=\"line\"></span><br><span class=\"line\">drink: &#123;&#123; quote .Values.favorite.drink &#125;&#125; #值加引号</span><br><span class=\"line\">food: &#123;&#123; .Values.favorite.food | upper | quote &#125;&#125; #管道</span><br><span class=\"line\">drink: &#123;&#123; .Values.favorite.drink | default &quot;tea&quot; | quote &#125;&#125; #默认值</span><br><span class=\"line\"></span><br><span class=\"line\">if/ else用于创建条件块</span><br><span class=\"line\">with 指定范围</span><br><span class=\"line\">range，它提供了“for each”式循环</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- if eq .Values.favorite.drink &quot;coffee&quot;&#125;&#125;</span><br><span class=\"line\">mug: true</span><br><span class=\"line\">&#123;&#123;- end&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#with</span><br><span class=\"line\">&#123;&#123;- with .Values.favorite &#125;&#125;</span><br><span class=\"line\">drink: &#123;&#123; .drink | default &quot;tea&quot; | quote &#125;&#125;</span><br><span class=\"line\">food: &#123;&#123; .food | upper | quote &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">    - &#123;&#123; . | title | quote &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range $index, $topping := .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">      &#123;&#123; $index &#125;&#125;: &#123;&#123; $topping &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">有一个变量始终是全局$变量 - 该变量将始终指向根上下文</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#模板</span><br><span class=\"line\">&#123;&#123;/* Generate basic labels */&#125;&#125;</span><br><span class=\"line\">&#123;&#123;- define &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    generator: helm</span><br><span class=\"line\">    date: &#123;&#123; now | htmlDate &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">  &#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：&#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125; 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：&#123;&#123;- template &quot;mychart.labels&quot; . &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。</span><br><span class=\"line\">labels:</span><br><span class=\"line\">    &#123;&#123;- include &quot;mychart.app&quot; . | nindent 4 &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">data:</span><br><span class=\"line\">  &#123;&#123;- $files := .Files &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- range list &quot;config1.toml&quot; &quot;config2.toml&quot; &quot;config3.toml&quot; &#125;&#125;</span><br><span class=\"line\">  &#123;&#123; . &#125;&#125;: |-</span><br><span class=\"line\">    &#123;&#123; $files.Get . &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#生成 nginx.conf 配置</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-secret</span><br><span class=\"line\">type: Opaque</span><br><span class=\"line\">data:</span><br><span class=\"line\">  token: |-</span><br><span class=\"line\">    &#123;&#123; .Files.Get &quot;config1.toml&quot; | b64enc &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#123;&#123; .Release.Name &#125;&#125; 随机生产的单词</span><br><span class=\"line\">&#123;&#123; include &quot;community.fullname&quot; . &#125;&#125; 和项目有关的名称</span><br></pre></td></tr></table></figure>\n<p><strong>tiller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiller 可以安两个一个集群内，一个集群外</span><br></pre></td></tr></table></figure>\n<p><strong>docker 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl</span><br></pre></td></tr></table></figure>\n<p><strong>依赖管理</strong></p>\n<ul>\n<li>直接把依赖的 package 放在 charts / 目录中</li>\n<li>使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages</li>\n</ul>\n<p>Grafana 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://grafana.com/grafana/dashboards/7249</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --install loki loki/loki-stack --namespace monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">helm install  stable/grafana -n grafana --namespace=monitoring</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set adminPassword=745632Bn123</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com</span><br></pre></td></tr></table></figure>"},{"title":" 测试服务迁移k8s集群记录 (一)","date":"2019-11-08T18:40:10.000Z","share":true,"_content":"\n前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。\n\n已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。\n\n### k8s 集群搭建\n\n因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。\n\n| 主机名        | IP        | 角色     | 服务        |\n| ------------- | --------- | -------- | ----------- |\n| soa-test-a001 | 10.2.4.34 | master01 | 监控、日志  |\n| soa-test-a002 | 10.2.4.35 | master02 | CI、Ingress |\n| soa-test-a003 | 10.2.4.36 | node01   | 业务服务    |\n\n只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：\n\n![kubeadm-ha-topology-stacked-etcd](/img/k8s/5.svg)机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s \n<!-- more -->\n\n**安装 kubeadm**\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\n\nname=Kubernetes\n\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\n\nenabled=1\n\ngpgcheck=1\n\nrepo_gpgcheck=1\n\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\nEOF\n\nsetenforce 0\nyum install -y kubelet kubeadm kubectl\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n**生成初始化 kubeadm 配置文件**\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n使用 master01: 6444 做 api负载，修改如下：\n\n```\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.2.4.34 #master01机器ip\n  bindPort: 6443 #apiServer运行的端口\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: soa-test-a001\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 10.244.0.0/16 #pod网络配置\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2\n\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log\n```\n\n**calico 网络：**\n\n```\nkubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml\n```\n\n**master02加入集群**\n\n```\nkubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\\n    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897\n```\n\n测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。\n\n**haproxy 做负载**\n\n```\nfrontend kube-api-balance\n    bind *:6444\n    maxconn 30000                    #定义此端口上的maxconn\n    default_backend default_servers  #请求定向至后端服务群default_servers\n\nbackend default_servers    #定义后端服务群default_servers\n    balance roundrobin\n    server def.srv1 10.2.4.34:6443\n    server def.srv2 10.2.4.35:6443\n```\n\n运行haproxy\n\n```\ndocker run -d \\\n    --network=host \\\n    --restart=always \\\n    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\\n    --name haproxy \\\n    haproxy -f /etc/haproxy/haproxy.cfg\n```\n\n顺便贴下使用 nginx 转发配置\n\n```\nstream {\n        server {\n                listen     6444;\n                proxy_pass stream_backend;\n        }\n        upstream stream_backend {\n                server 10.2.4.34:6443;\n                server 10.2.4.35:6443;\n        }\n\n}\n```\n遗憾的是这里并没有使用 keepalived 对ip做高可用 :( \n\n\n### Dashboard 安装\n\n主要参考[安装dashboard](https://www.cnblogs.com/bluersw/p/11747161.html )，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 `kube-config` 的生成，我们用这个文件来登录 dashboard\n\n```\nkubectl config view --raw=true > kube-config\n```\n\n使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行\n\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: lGSUNBVE******UtLS0tLQo=\n    server: https://10.2.4.34:6444\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: dashboard-admin  #改为serviceAccount\n  name: kubernetes-admin@kubernetes\ncurrent-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: dashboard-admin  #改为serviceAccount\n  user:  #使用token 认证\n    token: eyJhbGciOiJSUzI******LdK0kpfSw\n```\n\n截图：\n\n![6.png](/img/k8s/6.png)\n\n**遇到的问题：**\n\n遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-\n\n\n\n本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.\n\n\n\n**参考：**\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\nhttps://blog.csdn.net/networken/article/details/89599004\nhttps://www.kubernetes.org.cn/5551.html\n安装dashboard:\nhttps://www.cnblogs.com/bluersw/p/11747161.html \nscp 信任:\nhttps://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html \nkubeadm join 使用的 token 过期之后，如何加入集群:\nhttps://blog.csdn.net/wo18237095579/article/details/89884369 \n\n","source":"_posts/k8s-migration-1.md","raw":"---\ntitle: \" 测试服务迁移k8s集群记录 (一)\"\ndate: 2019-11-08 18:40:10\ntags: [k8s,kubernetes,kube-adm,haproxy]\nshare: true\n---\n\n前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。\n\n已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。\n\n### k8s 集群搭建\n\n因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。\n\n| 主机名        | IP        | 角色     | 服务        |\n| ------------- | --------- | -------- | ----------- |\n| soa-test-a001 | 10.2.4.34 | master01 | 监控、日志  |\n| soa-test-a002 | 10.2.4.35 | master02 | CI、Ingress |\n| soa-test-a003 | 10.2.4.36 | node01   | 业务服务    |\n\n只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：\n\n![kubeadm-ha-topology-stacked-etcd](/img/k8s/5.svg)机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s \n<!-- more -->\n\n**安装 kubeadm**\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\n\nname=Kubernetes\n\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\n\nenabled=1\n\ngpgcheck=1\n\nrepo_gpgcheck=1\n\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\nEOF\n\nsetenforce 0\nyum install -y kubelet kubeadm kubectl\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n**生成初始化 kubeadm 配置文件**\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n使用 master01: 6444 做 api负载，修改如下：\n\n```\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.2.4.34 #master01机器ip\n  bindPort: 6443 #apiServer运行的端口\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: soa-test-a001\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 10.244.0.0/16 #pod网络配置\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2\n\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log\n```\n\n**calico 网络：**\n\n```\nkubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml\n```\n\n**master02加入集群**\n\n```\nkubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\\n    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897\n```\n\n测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。\n\n**haproxy 做负载**\n\n```\nfrontend kube-api-balance\n    bind *:6444\n    maxconn 30000                    #定义此端口上的maxconn\n    default_backend default_servers  #请求定向至后端服务群default_servers\n\nbackend default_servers    #定义后端服务群default_servers\n    balance roundrobin\n    server def.srv1 10.2.4.34:6443\n    server def.srv2 10.2.4.35:6443\n```\n\n运行haproxy\n\n```\ndocker run -d \\\n    --network=host \\\n    --restart=always \\\n    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\\n    --name haproxy \\\n    haproxy -f /etc/haproxy/haproxy.cfg\n```\n\n顺便贴下使用 nginx 转发配置\n\n```\nstream {\n        server {\n                listen     6444;\n                proxy_pass stream_backend;\n        }\n        upstream stream_backend {\n                server 10.2.4.34:6443;\n                server 10.2.4.35:6443;\n        }\n\n}\n```\n遗憾的是这里并没有使用 keepalived 对ip做高可用 :( \n\n\n### Dashboard 安装\n\n主要参考[安装dashboard](https://www.cnblogs.com/bluersw/p/11747161.html )，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 `kube-config` 的生成，我们用这个文件来登录 dashboard\n\n```\nkubectl config view --raw=true > kube-config\n```\n\n使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行\n\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: lGSUNBVE******UtLS0tLQo=\n    server: https://10.2.4.34:6444\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: dashboard-admin  #改为serviceAccount\n  name: kubernetes-admin@kubernetes\ncurrent-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: dashboard-admin  #改为serviceAccount\n  user:  #使用token 认证\n    token: eyJhbGciOiJSUzI******LdK0kpfSw\n```\n\n截图：\n\n![6.png](/img/k8s/6.png)\n\n**遇到的问题：**\n\n遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-\n\n\n\n本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.\n\n\n\n**参考：**\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\nhttps://blog.csdn.net/networken/article/details/89599004\nhttps://www.kubernetes.org.cn/5551.html\n安装dashboard:\nhttps://www.cnblogs.com/bluersw/p/11747161.html \nscp 信任:\nhttps://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html \nkubeadm join 使用的 token 过期之后，如何加入集群:\nhttps://blog.csdn.net/wo18237095579/article/details/89884369 \n\n","slug":"k8s-migration-1","published":1,"updated":"2019-11-14T03:42:22.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvw000j1sl9jxvsc2wn","content":"<p>前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。</p>\n<p>已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。</p>\n<h3 id=\"k8s-集群搭建\"><a href=\"#k8s-集群搭建\" class=\"headerlink\" title=\"k8s 集群搭建\"></a>k8s 集群搭建</h3><p>因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n<th>服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>soa-test-a001</td>\n<td>10.2.4.34</td>\n<td>master01</td>\n<td>监控、日志</td>\n</tr>\n<tr>\n<td>soa-test-a002</td>\n<td>10.2.4.35</td>\n<td>master02</td>\n<td>CI、Ingress</td>\n</tr>\n<tr>\n<td>soa-test-a003</td>\n<td>10.2.4.36</td>\n<td>node01</td>\n<td>业务服务</td>\n</tr>\n</tbody>\n</table>\n<p>只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：</p>\n<p><img src=\"/img/k8s/5.svg\" alt=\"kubeadm-ha-topology-stacked-etcd\">机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s<br><a id=\"more\"></a></p>\n<p><strong>安装 kubeadm</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\"></span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\"></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n<p><strong>生成初始化 kubeadm 配置文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n<p>使用 master01: 6444 做 api负载，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 10.2.4.34 #master01机器ip</span><br><span class=\"line\">  bindPort: 6443 #apiServer运行的端口</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: soa-test-a001</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controlPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 #pod网络配置</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure>\n<p><strong>calico 网络：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml</span><br></pre></td></tr></table></figure>\n<p><strong>master02加入集群</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\</span><br><span class=\"line\">    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897</span><br></pre></td></tr></table></figure>\n<p>测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。</p>\n<p><strong>haproxy 做负载</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontend kube-api-balance</span><br><span class=\"line\">    bind *:6444</span><br><span class=\"line\">    maxconn 30000                    #定义此端口上的maxconn</span><br><span class=\"line\">    default_backend default_servers  #请求定向至后端服务群default_servers</span><br><span class=\"line\"></span><br><span class=\"line\">backend default_servers    #定义后端服务群default_servers</span><br><span class=\"line\">    balance roundrobin</span><br><span class=\"line\">    server def.srv1 10.2.4.34:6443</span><br><span class=\"line\">    server def.srv2 10.2.4.35:6443</span><br></pre></td></tr></table></figure>\n<p>运行haproxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\</span><br><span class=\"line\">    --name haproxy \\</span><br><span class=\"line\">    haproxy -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>顺便贴下使用 nginx 转发配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen     6444;</span><br><span class=\"line\">                proxy_pass stream_backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        upstream stream_backend &#123;</span><br><span class=\"line\">                server 10.2.4.34:6443;</span><br><span class=\"line\">                server 10.2.4.35:6443;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遗憾的是这里并没有使用 keepalived 对ip做高可用 :( </p>\n<h3 id=\"Dashboard-安装\"><a href=\"#Dashboard-安装\" class=\"headerlink\" title=\"Dashboard 安装\"></a>Dashboard 安装</h3><p>主要参考<a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">安装dashboard</a>，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 <code>kube-config</code> 的生成，我们用这个文件来登录 dashboard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config view --raw=true &gt; kube-config</span><br></pre></td></tr></table></figure>\n<p>使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: lGSUNBVE******UtLS0tLQo=</span><br><span class=\"line\">    server: https://10.2.4.34:6444</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  name: kubernetes-admin@kubernetes</span><br><span class=\"line\">current-context: kubernetes-admin@kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  user:  #使用token 认证</span><br><span class=\"line\">    token: eyJhbGciOiJSUzI******LdK0kpfSw</span><br></pre></td></tr></table></figure>\n<p>截图：</p>\n<p><img src=\"/img/k8s/6.png\" alt=\"6.png\"></p>\n<p><strong>遇到的问题：</strong></p>\n<p>遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-</p>\n<p>本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.</p>\n<p><strong>参考：</strong><br><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/</a><br><a href=\"https://blog.csdn.net/networken/article/details/89599004\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/networken/article/details/89599004</a><br><a href=\"https://www.kubernetes.org.cn/5551.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/5551.html</a><br>安装dashboard:<br><a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bluersw/p/11747161.html</a><br>scp 信任:<br><a href=\"https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html</a><br>kubeadm join 使用的 token 过期之后，如何加入集群:<br><a href=\"https://blog.csdn.net/wo18237095579/article/details/89884369\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wo18237095579/article/details/89884369</a> </p>\n","site":{"data":{}},"excerpt":"<p>前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。</p>\n<p>已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。</p>\n<h3 id=\"k8s-集群搭建\"><a href=\"#k8s-集群搭建\" class=\"headerlink\" title=\"k8s 集群搭建\"></a>k8s 集群搭建</h3><p>因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n<th>服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>soa-test-a001</td>\n<td>10.2.4.34</td>\n<td>master01</td>\n<td>监控、日志</td>\n</tr>\n<tr>\n<td>soa-test-a002</td>\n<td>10.2.4.35</td>\n<td>master02</td>\n<td>CI、Ingress</td>\n</tr>\n<tr>\n<td>soa-test-a003</td>\n<td>10.2.4.36</td>\n<td>node01</td>\n<td>业务服务</td>\n</tr>\n</tbody>\n</table>\n<p>只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：</p>\n<p><img src=\"/img/k8s/5.svg\" alt=\"kubeadm-ha-topology-stacked-etcd\">机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s<br>","more":"</p>\n<p><strong>安装 kubeadm</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\"></span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\"></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n<p><strong>生成初始化 kubeadm 配置文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n<p>使用 master01: 6444 做 api负载，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 10.2.4.34 #master01机器ip</span><br><span class=\"line\">  bindPort: 6443 #apiServer运行的端口</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: soa-test-a001</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controlPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 #pod网络配置</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure>\n<p><strong>calico 网络：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml</span><br></pre></td></tr></table></figure>\n<p><strong>master02加入集群</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\</span><br><span class=\"line\">    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897</span><br></pre></td></tr></table></figure>\n<p>测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。</p>\n<p><strong>haproxy 做负载</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontend kube-api-balance</span><br><span class=\"line\">    bind *:6444</span><br><span class=\"line\">    maxconn 30000                    #定义此端口上的maxconn</span><br><span class=\"line\">    default_backend default_servers  #请求定向至后端服务群default_servers</span><br><span class=\"line\"></span><br><span class=\"line\">backend default_servers    #定义后端服务群default_servers</span><br><span class=\"line\">    balance roundrobin</span><br><span class=\"line\">    server def.srv1 10.2.4.34:6443</span><br><span class=\"line\">    server def.srv2 10.2.4.35:6443</span><br></pre></td></tr></table></figure>\n<p>运行haproxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\</span><br><span class=\"line\">    --name haproxy \\</span><br><span class=\"line\">    haproxy -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>顺便贴下使用 nginx 转发配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen     6444;</span><br><span class=\"line\">                proxy_pass stream_backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        upstream stream_backend &#123;</span><br><span class=\"line\">                server 10.2.4.34:6443;</span><br><span class=\"line\">                server 10.2.4.35:6443;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遗憾的是这里并没有使用 keepalived 对ip做高可用 :( </p>\n<h3 id=\"Dashboard-安装\"><a href=\"#Dashboard-安装\" class=\"headerlink\" title=\"Dashboard 安装\"></a>Dashboard 安装</h3><p>主要参考<a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">安装dashboard</a>，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 <code>kube-config</code> 的生成，我们用这个文件来登录 dashboard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config view --raw=true &gt; kube-config</span><br></pre></td></tr></table></figure>\n<p>使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: lGSUNBVE******UtLS0tLQo=</span><br><span class=\"line\">    server: https://10.2.4.34:6444</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  name: kubernetes-admin@kubernetes</span><br><span class=\"line\">current-context: kubernetes-admin@kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  user:  #使用token 认证</span><br><span class=\"line\">    token: eyJhbGciOiJSUzI******LdK0kpfSw</span><br></pre></td></tr></table></figure>\n<p>截图：</p>\n<p><img src=\"/img/k8s/6.png\" alt=\"6.png\"></p>\n<p><strong>遇到的问题：</strong></p>\n<p>遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-</p>\n<p>本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.</p>\n<p><strong>参考：</strong><br><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/</a><br><a href=\"https://blog.csdn.net/networken/article/details/89599004\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/networken/article/details/89599004</a><br><a href=\"https://www.kubernetes.org.cn/5551.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/5551.html</a><br>安装dashboard:<br><a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bluersw/p/11747161.html</a><br>scp 信任:<br><a href=\"https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html</a><br>kubeadm join 使用的 token 过期之后，如何加入集群:<br><a href=\"https://blog.csdn.net/wo18237095579/article/details/89884369\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wo18237095579/article/details/89884369</a> </p>"},{"title":"loki使用cassandra作存储","date":"2019-12-23T19:24:10.000Z","share":true,"_content":"\n\n**cassandra 配置开启帐号密码认证**\n\n打开 `cassandra.yaml` 文件并且搜索 `authenticator` 关键词，将 `authenticator:AllowAllAuthenticator`，改成 `authenticator:PasswordAuthenticator`。测试默认帐号密码认证：\n\n```\ncqlsh –u cassandra –p cassandra\n```\n\n**修改loki配置**\n\n```\n  schema_config:\n    configs:\n    - from: 2018-04-15\n      store: cassandra\n      object_store: filesystem\n      schema: v9\n      index:\n        prefix: cassandra_table\n        period: 168h\n  storage_config:\n    cassandra:\n      username: cassandra\n      password: cassandra\n      addresses: cassandra.kube-public #不需要配置端口，日志显示链接9042端口\n      auth: true\n      keyspace: lokiindex\n    filesystem:\n      directory: /data/loki/chunks #注意此处的数据也要保持，重启loki加载历史数据时会用到\n```\n\n**启动服务，cqlsh 查询**\n\n```\ndescribe tables;\nuse lokiindex;\ndescribe table cassandra_table2589;\n```\n\n\n\n参考资料：\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html\n\nhttps://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md","source":"_posts/loki-cassandra.md","raw":"---\ntitle: \"loki使用cassandra作存储\"\ndate: 2019-12-23 19:24:10\ntags: [loki,cassandra]\nshare: true\n---\n\n\n**cassandra 配置开启帐号密码认证**\n\n打开 `cassandra.yaml` 文件并且搜索 `authenticator` 关键词，将 `authenticator:AllowAllAuthenticator`，改成 `authenticator:PasswordAuthenticator`。测试默认帐号密码认证：\n\n```\ncqlsh –u cassandra –p cassandra\n```\n\n**修改loki配置**\n\n```\n  schema_config:\n    configs:\n    - from: 2018-04-15\n      store: cassandra\n      object_store: filesystem\n      schema: v9\n      index:\n        prefix: cassandra_table\n        period: 168h\n  storage_config:\n    cassandra:\n      username: cassandra\n      password: cassandra\n      addresses: cassandra.kube-public #不需要配置端口，日志显示链接9042端口\n      auth: true\n      keyspace: lokiindex\n    filesystem:\n      directory: /data/loki/chunks #注意此处的数据也要保持，重启loki加载历史数据时会用到\n```\n\n**启动服务，cqlsh 查询**\n\n```\ndescribe tables;\nuse lokiindex;\ndescribe table cassandra_table2589;\n```\n\n\n\n参考资料：\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html\n\nhttps://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md","slug":"loki-cassandra","published":1,"updated":"2019-12-23T11:24:23.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsvy000k1sl9g0lce533","content":"<p><strong>cassandra 配置开启帐号密码认证</strong></p>\n<p>打开 <code>cassandra.yaml</code> 文件并且搜索 <code>authenticator</code> 关键词，将 <code>authenticator:AllowAllAuthenticator</code>，改成 <code>authenticator:PasswordAuthenticator</code>。测试默认帐号密码认证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cqlsh –u cassandra –p cassandra</span><br></pre></td></tr></table></figure>\n<p><strong>修改loki配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema_config:</span><br><span class=\"line\">  configs:</span><br><span class=\"line\">  - from: 2018-04-15</span><br><span class=\"line\">    store: cassandra</span><br><span class=\"line\">    object_store: filesystem</span><br><span class=\"line\">    schema: v9</span><br><span class=\"line\">    index:</span><br><span class=\"line\">      prefix: cassandra_table</span><br><span class=\"line\">      period: 168h</span><br><span class=\"line\">storage_config:</span><br><span class=\"line\">  cassandra:</span><br><span class=\"line\">    username: cassandra</span><br><span class=\"line\">    password: cassandra</span><br><span class=\"line\">    addresses: cassandra.kube-public #不需要配置端口，日志显示链接9042端口</span><br><span class=\"line\">    auth: true</span><br><span class=\"line\">    keyspace: lokiindex</span><br><span class=\"line\">  filesystem:</span><br><span class=\"line\">    directory: /data/loki/chunks #注意此处的数据也要保持，重启loki加载历史数据时会用到</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务，cqlsh 查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe tables;</span><br><span class=\"line\">use lokiindex;</span><br><span class=\"line\">describe table cassandra_table2589;</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html</a></p>\n<p><a href=\"https://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md\" target=\"_blank\" rel=\"noopener\">https://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>cassandra 配置开启帐号密码认证</strong></p>\n<p>打开 <code>cassandra.yaml</code> 文件并且搜索 <code>authenticator</code> 关键词，将 <code>authenticator:AllowAllAuthenticator</code>，改成 <code>authenticator:PasswordAuthenticator</code>。测试默认帐号密码认证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cqlsh –u cassandra –p cassandra</span><br></pre></td></tr></table></figure>\n<p><strong>修改loki配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema_config:</span><br><span class=\"line\">  configs:</span><br><span class=\"line\">  - from: 2018-04-15</span><br><span class=\"line\">    store: cassandra</span><br><span class=\"line\">    object_store: filesystem</span><br><span class=\"line\">    schema: v9</span><br><span class=\"line\">    index:</span><br><span class=\"line\">      prefix: cassandra_table</span><br><span class=\"line\">      period: 168h</span><br><span class=\"line\">storage_config:</span><br><span class=\"line\">  cassandra:</span><br><span class=\"line\">    username: cassandra</span><br><span class=\"line\">    password: cassandra</span><br><span class=\"line\">    addresses: cassandra.kube-public #不需要配置端口，日志显示链接9042端口</span><br><span class=\"line\">    auth: true</span><br><span class=\"line\">    keyspace: lokiindex</span><br><span class=\"line\">  filesystem:</span><br><span class=\"line\">    directory: /data/loki/chunks #注意此处的数据也要保持，重启loki加载历史数据时会用到</span><br></pre></td></tr></table></figure>\n<p><strong>启动服务，cqlsh 查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe tables;</span><br><span class=\"line\">use lokiindex;</span><br><span class=\"line\">describe table cassandra_table2589;</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-cassandra3x5/index.html</a></p>\n<p><a href=\"https://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md\" target=\"_blank\" rel=\"noopener\">https://github.com/grafana/loki/blob/904bf2fcc9a0357c961893b72c2e28f3aa2146a9/docs/configuration/examples.md</a></p>\n"},{"layout":"post","title":"k8s 介绍","description":"","date":"2019-01-31T00:00:00.000Z","comments":0,"share":true,"_content":"## Kubernetes\n\nKubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效_powerful__Kubernetes提供了应用部署_规划_更新_维护的一种机制\n\n\n## 架构\n![image](/img/k8s/1.png)\n\n\n集群中的机器划分为一个Master 节点和一群工作节点(Node)\n\nMaster 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 **kube-apiserver**、负责调度的 **kube-scheduler**，以及负责容器编排的 **kube-controller-manager**。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 **Ectd** 中。\n\nnode上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。\n\n在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 **CRI** 接入到 Kubernetes 项目当中。(比如 rkt)\n\n而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。\n<!-- more -->\n\n#### kubernetes 核心概念\n![image](/img/k8s/2.png)\n\n\n\n## 概念\n\n\n## Namespace\n\nNamespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理\n\n**ResourceQuota**\n\nResource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.\n\n| 字符串                      | API对象                  |\n| ------------------------ | ---------------------- |\n| \"pods\"                   | Pod                    |\n| \"services                | Service                |\n| \"replicationcontrollers\" | ReplicationController  |\n| \"resourcequotas\"         | ResourceQuota          |\n| \"secrets\"                | Secret                 |\n| \"configmaps\"             | ConfigMap              |\n| \"persistentvolumeclaims\" | PersistentVolumeClaim  |\n| \"services.nodeports\"     | NodePort类型的Service     |\n| \"services.loadbalancers\" | LoadBalancer类型的Service |\n\n\n## label\n\nlabel 和 labelSelctor 是 k8s 中的只要分组机制\n\nKubernetes目前支持两种类型的Label Selector：\n\n- 基于等式的Selector（Equality-based）\n- 基于集合的Selector（Set-based）\n\n\n## Pod\n\nPod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。\n\n为什么k8s使用Pod在容器之上再封装一层呢？\n\n#### Pod 中几个重要字段的含义和用法\n\n1. NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段\n2. NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度\n3. HostAliases：定义了 Pod 的 hosts\n4. ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。\n5. Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。\n\n\n\n#### Pod 具体的创建步骤包括：\n\n![images](/img/k8s/3.jpg)\n\n1. 客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。\n2. API Server处理用户请求，存储Pod数据到etcd。\n3. 调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。\n4. 过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。\n5. 主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。\n6. 选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。\n7. kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。\n   ​\n\n\nPod模板是pod规范，包含在其他对象中，例如 [Replication Controllers](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/)，[Jobs](https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/)和 [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)\n\n\npod 也支持host网络的设置，如spec->hostNetwork=true\n\n\n\n**Pause Container**\n\n每个pod 里运行着一个特殊的被称为\nPause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。\n\n\n可以通过api手动管理pod，也可以委托给控制器来管理pod。\n\n\n\n**Init Container**\n\n在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。\n\n比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色\n\n\n\n## Service\n\n一个service 对象拥有如下关键特征\n拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号\n\n通过 label selector 筛选关联 pod\n\n创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了\n\n\n\nspec \ntype=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式\n\nport\ntargetPort 默认与pord 相同\n\n\n\n## API Server\n\nkubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.\n\n组件之间的所有操作和通信均由API Server处理的REST API调用.\n\nAPI Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：\n\n- 整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行\n- 集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作\n- 集群安全控制：API Server 提供的验证和授权保证了整个集群的安全\n\n**kubectl客户端**\n\n命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。\n\n\n\n**kubelet与API Server交互**\n\n每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。\n\n| 监听信息             | kubelet动作          | 备注   |\n| ---------------- | ------------------ | ---- |\n| 新的POD副本被调度绑定到本节点 | 执行POD对应的容器的创建和启动逻辑 | -    |\n| POD对象被删除         | 删除本节点上相应的POD容器     | -    |\n| 修改POD信息          | 修改本节点的POD容器        | -    |\n\n**kube-controller-manager与API Server交互**\n\nkube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。\n\n**kube-scheduler与API Server交互**\n\nScheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上\n\n**Watch API**\n\nWatch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event\n\n\n\n## Controller Manager\n\ncontroller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。\ncontroller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token \ncontroller，service controller，endpoint controller，serviceaccount controller。\n\n控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”\n\n\n\n#### k8s RC(Replication Controller)\n\nRC 的定义包含如下几个部分：\npod 期待的副本数\n用于筛选目标pod的 Label Selector\n当pod副本数小于预期时，用于创建新pod的pod模板\n\n Replica Set\n\n官方解释为“下一代的RC”\n唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的\n\nReplica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用\n\nReplica Set 和 Deployment 逐步替换了之前RC 的作用\n\n\n\n#### Deployment Controller\n\n扩容:\n\n**使用场景**：\n\n1. 重新调度\n2. 弹性伸缩\n3. 滚动更新\n\n使用场景有以下几个：\n创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程\n检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)\n更新Deployment 以创建新pod 比如镜像升级\n回滚早先 Deployment 版本\n暂停修改 \n查看Deployment的状态，以此作为发布是否成功的指标\n\n\n#### ResourceQuota Controller\n\n目前 k8s 支持 三个层次的资源配额管理\n\n1. 容器级别 ，可以对 cpu ，memory 进行限制\n\n2. Pod 级别，对pod内所有容器进行资源限制\n\n3. Namespace 级别，对Namespace(多租户)级别的资源限制，包括：\n   - pod 数量\n   - service 数量\n   - resourceQuota 数量 等\n\n**Endpoints Controller** 检测到pod的事件，则会更新对应Service 的Endpoints\n\n#### Job Controller && CronJob Controller\n\nJob Controller 控制的对象，直接就是 Pod。\n\n#### DeamonSet controller\n\n\n\n## Scheduler\n\n\nscheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。\n\n整个过程涉及三个对象：**待调度pod列表**(podQueue)，**可用node列表**，以及**调度算法和调度策略**.\n\n![image](/img/k8s/4.png)\n\n\n1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中\n\n2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。\n\n\n\n#### 调度资源监听\n\n`kube-apiserver` 提供了一套 `Watch` 机制给 `kubelet`、`kube-controller-manager`、 `kube-scheduler` 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， `kube-apiserver` 能够**主动通知**这些组件。\n\n\n\n#### 调度节点分配：\n\n调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。\n\npredicate 有一系列的算法可以使用：\n\n- `PodFitsResources`：节点上剩余的资源是否大于 pod 请求的资源\n- `PodFitsHost`：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配\n- `PodFitsHostPorts`：节点上已经使用的 port 是否和 pod 申请的 port 冲突\n- `PodSelectorMatches`：过滤掉和 pod 指定的 label 不匹配的节点\n- `NoDiskConflict`：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读\n\n如果在 predicate 过程中没有合适的节点，pod 会一直在 `pending` 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：\n按照优先级大小对节点排序。\n\n优选（ priority)\n\n优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：\n\n- `LeastRequestedPriority`：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点\n- `ImageLocalityPriority`：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高\n\n通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 `kube-apiserver` 写入 `etcd`；\n\n\n\n#### 调度策略\n\n**NodeSelector**\n\n`nodeSelector` 是最简单的控制方式。 `nodeSelector` 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。\n\n列出 node 的时候指定 `--show-labels` 参数就能查看 node 都添加了哪些 label：\n\n\n除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：\n\n- `kubernetes.io/hostname`：节点的 hostname 名称\n- `beta.kubernetes.io/os`： 节点安装的操作系统\n- `beta.kubernetes.io/arch`：节点的架构类型\n\n除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是**建议使用Node Selector**，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。\n\n\n\n**亲和性**特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。\n\n\n\n**亲和性调度（Affinity）**\n\nNode Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution\n- 软亲和性：preferredDuringSchedulingIgnoredDuringExecution \n   - 如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。\n\n\nPod Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution \n- preferredDuringSchedulingIgnoredDuringExecution\n\n**反亲和性（Anti-affinity）**\n\n\n\n**Taint 和 toleration** （比如label idc=idc1,比如GPU资源）\n\n```\n#添加一个 taint\nkubectl taint nodes node1 key=value:NoSchedule\n#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule\n```\n\nPodSpec 指定一个 toleration\n\n```\ntolerations: \n- key: key\n  operator: Exists\n  value: value\n  effect: NoSchedule\n```\n\nPreferNoSchedule （软亲和性）\n\n\n\n## kubelet\n\n在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。\n\n**容器健康检查**\n\n提供Probe 机制，以更精确的判断Pod和容器：\n**Liveness Prode** ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。\n**Readiness Probe** ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。\n\n目前有三种类型检查方式\nHttp 健康检查 ：返回200～399认为成功\nContainer Exec：容器内执行命令，状态0退出，则视为成功\nTcp：如果可以建立连接则认为成功，否则失败。\n\n\n\n**资源上报**\n\n继承 cAdvisor 定时上报节点信息\n\n健康检查监视器由kubelet 代理\n\n\n\n#### kube-proxy\n\nService 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。\n\n在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。\n\n由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。\n\nkube-proxy  更新iptables 会在本机的 **Iptables** 的NAT表中添加4条规则链路。\n\n1. 从容器中通过 serviceClusterIp 和端口访问Service 的请求\n2. 从主机中通过ServiceClusterIp和端口访问Service的请求\n3. 从容器中通过 Service 的NodePort 端口访问Service的请求\n4. 从主机中通过Service 的NodePort 端口号访问Service的请求\n\n\n运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。\n\n简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。\n\n采用 iptables 来实现LB\n实现方式：\nkube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。\n\n默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。\n\n\n\n## yaml配置\n\nDeployment yaml\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80\n        resources:\n           requests:\n             cpu: 0.05\n             memory: 16Mi\n```\n\nService yaml\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\nspec:\n  type: NodePort\n  selector:\n      app: nginx\n  ports:\n      - protocol: TCP\n        port: 8881\n        targetPort: 80\n```\n\n#### 部分命令\n\n```\nkubectl get  all  --all-namespaces=true\nkubectl describe ***\nkubectl get pods -n kube-system\nkubectl apply -f  *.yaml\nkubectl get *** -o yaml\nkubectl edit deployment.apps/nginx-deployment\nkubectl exec ${POD_NAME} -c ${CONTAINER_NAME} -- ${CMD} ${ARG1} ${ARG2} ... ${ARGN}\n```\n\n\n","source":"_posts/k8s-introduction.md","raw":"---\nlayout: post\ntitle: \"k8s 介绍\"\ndescription: \"\"\ndate: 2019-01-31\ntags: [docker,k8s,kubernetes]\ncomments: false\nshare: true\n---\n## Kubernetes\n\nKubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效_powerful__Kubernetes提供了应用部署_规划_更新_维护的一种机制\n\n\n## 架构\n![image](/img/k8s/1.png)\n\n\n集群中的机器划分为一个Master 节点和一群工作节点(Node)\n\nMaster 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 **kube-apiserver**、负责调度的 **kube-scheduler**，以及负责容器编排的 **kube-controller-manager**。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 **Ectd** 中。\n\nnode上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。\n\n在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 **CRI** 接入到 Kubernetes 项目当中。(比如 rkt)\n\n而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。\n<!-- more -->\n\n#### kubernetes 核心概念\n![image](/img/k8s/2.png)\n\n\n\n## 概念\n\n\n## Namespace\n\nNamespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理\n\n**ResourceQuota**\n\nResource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.\n\n| 字符串                      | API对象                  |\n| ------------------------ | ---------------------- |\n| \"pods\"                   | Pod                    |\n| \"services                | Service                |\n| \"replicationcontrollers\" | ReplicationController  |\n| \"resourcequotas\"         | ResourceQuota          |\n| \"secrets\"                | Secret                 |\n| \"configmaps\"             | ConfigMap              |\n| \"persistentvolumeclaims\" | PersistentVolumeClaim  |\n| \"services.nodeports\"     | NodePort类型的Service     |\n| \"services.loadbalancers\" | LoadBalancer类型的Service |\n\n\n## label\n\nlabel 和 labelSelctor 是 k8s 中的只要分组机制\n\nKubernetes目前支持两种类型的Label Selector：\n\n- 基于等式的Selector（Equality-based）\n- 基于集合的Selector（Set-based）\n\n\n## Pod\n\nPod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。\n\n为什么k8s使用Pod在容器之上再封装一层呢？\n\n#### Pod 中几个重要字段的含义和用法\n\n1. NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段\n2. NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度\n3. HostAliases：定义了 Pod 的 hosts\n4. ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。\n5. Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。\n\n\n\n#### Pod 具体的创建步骤包括：\n\n![images](/img/k8s/3.jpg)\n\n1. 客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。\n2. API Server处理用户请求，存储Pod数据到etcd。\n3. 调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。\n4. 过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。\n5. 主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。\n6. 选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。\n7. kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。\n   ​\n\n\nPod模板是pod规范，包含在其他对象中，例如 [Replication Controllers](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/)，[Jobs](https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/)和 [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)\n\n\npod 也支持host网络的设置，如spec->hostNetwork=true\n\n\n\n**Pause Container**\n\n每个pod 里运行着一个特殊的被称为\nPause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。\n\n\n可以通过api手动管理pod，也可以委托给控制器来管理pod。\n\n\n\n**Init Container**\n\n在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。\n\n比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色\n\n\n\n## Service\n\n一个service 对象拥有如下关键特征\n拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号\n\n通过 label selector 筛选关联 pod\n\n创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了\n\n\n\nspec \ntype=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式\n\nport\ntargetPort 默认与pord 相同\n\n\n\n## API Server\n\nkubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.\n\n组件之间的所有操作和通信均由API Server处理的REST API调用.\n\nAPI Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：\n\n- 整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行\n- 集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作\n- 集群安全控制：API Server 提供的验证和授权保证了整个集群的安全\n\n**kubectl客户端**\n\n命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。\n\n\n\n**kubelet与API Server交互**\n\n每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。\n\n| 监听信息             | kubelet动作          | 备注   |\n| ---------------- | ------------------ | ---- |\n| 新的POD副本被调度绑定到本节点 | 执行POD对应的容器的创建和启动逻辑 | -    |\n| POD对象被删除         | 删除本节点上相应的POD容器     | -    |\n| 修改POD信息          | 修改本节点的POD容器        | -    |\n\n**kube-controller-manager与API Server交互**\n\nkube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。\n\n**kube-scheduler与API Server交互**\n\nScheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上\n\n**Watch API**\n\nWatch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event\n\n\n\n## Controller Manager\n\ncontroller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。\ncontroller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token \ncontroller，service controller，endpoint controller，serviceaccount controller。\n\n控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”\n\n\n\n#### k8s RC(Replication Controller)\n\nRC 的定义包含如下几个部分：\npod 期待的副本数\n用于筛选目标pod的 Label Selector\n当pod副本数小于预期时，用于创建新pod的pod模板\n\n Replica Set\n\n官方解释为“下一代的RC”\n唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的\n\nReplica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用\n\nReplica Set 和 Deployment 逐步替换了之前RC 的作用\n\n\n\n#### Deployment Controller\n\n扩容:\n\n**使用场景**：\n\n1. 重新调度\n2. 弹性伸缩\n3. 滚动更新\n\n使用场景有以下几个：\n创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程\n检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)\n更新Deployment 以创建新pod 比如镜像升级\n回滚早先 Deployment 版本\n暂停修改 \n查看Deployment的状态，以此作为发布是否成功的指标\n\n\n#### ResourceQuota Controller\n\n目前 k8s 支持 三个层次的资源配额管理\n\n1. 容器级别 ，可以对 cpu ，memory 进行限制\n\n2. Pod 级别，对pod内所有容器进行资源限制\n\n3. Namespace 级别，对Namespace(多租户)级别的资源限制，包括：\n   - pod 数量\n   - service 数量\n   - resourceQuota 数量 等\n\n**Endpoints Controller** 检测到pod的事件，则会更新对应Service 的Endpoints\n\n#### Job Controller && CronJob Controller\n\nJob Controller 控制的对象，直接就是 Pod。\n\n#### DeamonSet controller\n\n\n\n## Scheduler\n\n\nscheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。\n\n整个过程涉及三个对象：**待调度pod列表**(podQueue)，**可用node列表**，以及**调度算法和调度策略**.\n\n![image](/img/k8s/4.png)\n\n\n1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中\n\n2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。\n\n\n\n#### 调度资源监听\n\n`kube-apiserver` 提供了一套 `Watch` 机制给 `kubelet`、`kube-controller-manager`、 `kube-scheduler` 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， `kube-apiserver` 能够**主动通知**这些组件。\n\n\n\n#### 调度节点分配：\n\n调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。\n\npredicate 有一系列的算法可以使用：\n\n- `PodFitsResources`：节点上剩余的资源是否大于 pod 请求的资源\n- `PodFitsHost`：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配\n- `PodFitsHostPorts`：节点上已经使用的 port 是否和 pod 申请的 port 冲突\n- `PodSelectorMatches`：过滤掉和 pod 指定的 label 不匹配的节点\n- `NoDiskConflict`：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读\n\n如果在 predicate 过程中没有合适的节点，pod 会一直在 `pending` 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：\n按照优先级大小对节点排序。\n\n优选（ priority)\n\n优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：\n\n- `LeastRequestedPriority`：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点\n- `ImageLocalityPriority`：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高\n\n通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 `kube-apiserver` 写入 `etcd`；\n\n\n\n#### 调度策略\n\n**NodeSelector**\n\n`nodeSelector` 是最简单的控制方式。 `nodeSelector` 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。\n\n列出 node 的时候指定 `--show-labels` 参数就能查看 node 都添加了哪些 label：\n\n\n除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：\n\n- `kubernetes.io/hostname`：节点的 hostname 名称\n- `beta.kubernetes.io/os`： 节点安装的操作系统\n- `beta.kubernetes.io/arch`：节点的架构类型\n\n除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是**建议使用Node Selector**，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。\n\n\n\n**亲和性**特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。\n\n\n\n**亲和性调度（Affinity）**\n\nNode Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution\n- 软亲和性：preferredDuringSchedulingIgnoredDuringExecution \n   - 如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。\n\n\nPod Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution \n- preferredDuringSchedulingIgnoredDuringExecution\n\n**反亲和性（Anti-affinity）**\n\n\n\n**Taint 和 toleration** （比如label idc=idc1,比如GPU资源）\n\n```\n#添加一个 taint\nkubectl taint nodes node1 key=value:NoSchedule\n#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule\n```\n\nPodSpec 指定一个 toleration\n\n```\ntolerations: \n- key: key\n  operator: Exists\n  value: value\n  effect: NoSchedule\n```\n\nPreferNoSchedule （软亲和性）\n\n\n\n## kubelet\n\n在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。\n\n**容器健康检查**\n\n提供Probe 机制，以更精确的判断Pod和容器：\n**Liveness Prode** ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。\n**Readiness Probe** ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。\n\n目前有三种类型检查方式\nHttp 健康检查 ：返回200～399认为成功\nContainer Exec：容器内执行命令，状态0退出，则视为成功\nTcp：如果可以建立连接则认为成功，否则失败。\n\n\n\n**资源上报**\n\n继承 cAdvisor 定时上报节点信息\n\n健康检查监视器由kubelet 代理\n\n\n\n#### kube-proxy\n\nService 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。\n\n在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。\n\n由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。\n\nkube-proxy  更新iptables 会在本机的 **Iptables** 的NAT表中添加4条规则链路。\n\n1. 从容器中通过 serviceClusterIp 和端口访问Service 的请求\n2. 从主机中通过ServiceClusterIp和端口访问Service的请求\n3. 从容器中通过 Service 的NodePort 端口访问Service的请求\n4. 从主机中通过Service 的NodePort 端口号访问Service的请求\n\n\n运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。\n\n简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。\n\n采用 iptables 来实现LB\n实现方式：\nkube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。\n\n默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。\n\n\n\n## yaml配置\n\nDeployment yaml\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80\n        resources:\n           requests:\n             cpu: 0.05\n             memory: 16Mi\n```\n\nService yaml\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\nspec:\n  type: NodePort\n  selector:\n      app: nginx\n  ports:\n      - protocol: TCP\n        port: 8881\n        targetPort: 80\n```\n\n#### 部分命令\n\n```\nkubectl get  all  --all-namespaces=true\nkubectl describe ***\nkubectl get pods -n kube-system\nkubectl apply -f  *.yaml\nkubectl get *** -o yaml\nkubectl edit deployment.apps/nginx-deployment\nkubectl exec ${POD_NAME} -c ${CONTAINER_NAME} -- ${CMD} ${ARG1} ${ARG2} ... ${ARGN}\n```\n\n\n","slug":"k8s-introduction","published":1,"updated":"2019-11-14T03:42:28.626Z","photos":[],"link":"","_id":"ck53jqsw0000l1sl951vf1i6l","content":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>Kubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效<em>powerful__Kubernetes提供了应用部署</em>规划_更新_维护的一种机制</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p><img src=\"/img/k8s/1.png\" alt=\"image\"></p>\n<p>集群中的机器划分为一个Master 节点和一群工作节点(Node)</p>\n<p>Master 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 <strong>kube-apiserver</strong>、负责调度的 <strong>kube-scheduler</strong>，以及负责容器编排的 <strong>kube-controller-manager</strong>。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 <strong>Ectd</strong> 中。</p>\n<p>node上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。</p>\n<p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 <strong>CRI</strong> 接入到 Kubernetes 项目当中。(比如 rkt)</p>\n<p>而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。<br><a id=\"more\"></a></p>\n<h4 id=\"kubernetes-核心概念\"><a href=\"#kubernetes-核心概念\" class=\"headerlink\" title=\"kubernetes 核心概念\"></a>kubernetes 核心概念</h4><p><img src=\"/img/k8s/2.png\" alt=\"image\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><p>Namespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理</p>\n<p><strong>ResourceQuota</strong></p>\n<p>Resource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.</p>\n<table>\n<thead>\n<tr>\n<th>字符串</th>\n<th>API对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“pods”</td>\n<td>Pod</td>\n</tr>\n<tr>\n<td>“services</td>\n<td>Service</td>\n</tr>\n<tr>\n<td>“replicationcontrollers”</td>\n<td>ReplicationController</td>\n</tr>\n<tr>\n<td>“resourcequotas”</td>\n<td>ResourceQuota</td>\n</tr>\n<tr>\n<td>“secrets”</td>\n<td>Secret</td>\n</tr>\n<tr>\n<td>“configmaps”</td>\n<td>ConfigMap</td>\n</tr>\n<tr>\n<td>“persistentvolumeclaims”</td>\n<td>PersistentVolumeClaim</td>\n</tr>\n<tr>\n<td>“services.nodeports”</td>\n<td>NodePort类型的Service</td>\n</tr>\n<tr>\n<td>“services.loadbalancers”</td>\n<td>LoadBalancer类型的Service</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h2><p>label 和 labelSelctor 是 k8s 中的只要分组机制</p>\n<p>Kubernetes目前支持两种类型的Label Selector：</p>\n<ul>\n<li>基于等式的Selector（Equality-based）</li>\n<li>基于集合的Selector（Set-based）</li>\n</ul>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。</p>\n<p>为什么k8s使用Pod在容器之上再封装一层呢？</p>\n<h4 id=\"Pod-中几个重要字段的含义和用法\"><a href=\"#Pod-中几个重要字段的含义和用法\" class=\"headerlink\" title=\"Pod 中几个重要字段的含义和用法\"></a>Pod 中几个重要字段的含义和用法</h4><ol>\n<li>NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段</li>\n<li>NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度</li>\n<li>HostAliases：定义了 Pod 的 hosts</li>\n<li>ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。</li>\n<li>Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。</li>\n</ol>\n<h4 id=\"Pod-具体的创建步骤包括：\"><a href=\"#Pod-具体的创建步骤包括：\" class=\"headerlink\" title=\"Pod 具体的创建步骤包括：\"></a>Pod 具体的创建步骤包括：</h4><p><img src=\"/img/k8s/3.jpg\" alt=\"images\"></p>\n<ol>\n<li>客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。</li>\n<li>API Server处理用户请求，存储Pod数据到etcd。</li>\n<li>调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。</li>\n<li>过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。</li>\n<li>主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。</li>\n<li>选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。</li>\n<li>kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。<br>​</li>\n</ol>\n<p>Pod模板是pod规范，包含在其他对象中，例如 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/\" target=\"_blank\" rel=\"noopener\">Replication Controllers</a>，<a href=\"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/\" target=\"_blank\" rel=\"noopener\">Jobs</a>和 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\" target=\"_blank\" rel=\"noopener\">DaemonSet</a></p>\n<p>pod 也支持host网络的设置，如spec-&gt;hostNetwork=true</p>\n<p><strong>Pause Container</strong></p>\n<p>每个pod 里运行着一个特殊的被称为<br>Pause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。</p>\n<p>可以通过api手动管理pod，也可以委托给控制器来管理pod。</p>\n<p><strong>Init Container</strong></p>\n<p>在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。</p>\n<p>比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>一个service 对象拥有如下关键特征<br>拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号</p>\n<p>通过 label selector 筛选关联 pod</p>\n<p>创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了</p>\n<p>spec<br>type=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式</p>\n<p>port<br>targetPort 默认与pord 相同</p>\n<h2 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h2><p>kubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.</p>\n<p>组件之间的所有操作和通信均由API Server处理的REST API调用.</p>\n<p>API Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：</p>\n<ul>\n<li>整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行</li>\n<li>集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作</li>\n<li>集群安全控制：API Server 提供的验证和授权保证了整个集群的安全</li>\n</ul>\n<p><strong>kubectl客户端</strong></p>\n<p>命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。</p>\n<p><strong>kubelet与API Server交互</strong></p>\n<p>每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。</p>\n<table>\n<thead>\n<tr>\n<th>监听信息</th>\n<th>kubelet动作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新的POD副本被调度绑定到本节点</td>\n<td>执行POD对应的容器的创建和启动逻辑</td>\n<td>-</td>\n</tr>\n<tr>\n<td>POD对象被删除</td>\n<td>删除本节点上相应的POD容器</td>\n<td>-</td>\n</tr>\n<tr>\n<td>修改POD信息</td>\n<td>修改本节点的POD容器</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><strong>kube-controller-manager与API Server交互</strong></p>\n<p>kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。</p>\n<p><strong>kube-scheduler与API Server交互</strong></p>\n<p>Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上</p>\n<p><strong>Watch API</strong></p>\n<p>Watch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event</p>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><p>controller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。<br>controller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token<br>controller，service controller，endpoint controller，serviceaccount controller。</p>\n<p>控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”</p>\n<h4 id=\"k8s-RC-Replication-Controller\"><a href=\"#k8s-RC-Replication-Controller\" class=\"headerlink\" title=\"k8s RC(Replication Controller)\"></a>k8s RC(Replication Controller)</h4><p>RC 的定义包含如下几个部分：<br>pod 期待的副本数<br>用于筛选目标pod的 Label Selector<br>当pod副本数小于预期时，用于创建新pod的pod模板</p>\n<p> Replica Set</p>\n<p>官方解释为“下一代的RC”<br>唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的</p>\n<p>Replica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用</p>\n<p>Replica Set 和 Deployment 逐步替换了之前RC 的作用</p>\n<h4 id=\"Deployment-Controller\"><a href=\"#Deployment-Controller\" class=\"headerlink\" title=\"Deployment Controller\"></a>Deployment Controller</h4><p>扩容:</p>\n<p><strong>使用场景</strong>：</p>\n<ol>\n<li>重新调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n</ol>\n<p>使用场景有以下几个：<br>创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程<br>检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)<br>更新Deployment 以创建新pod 比如镜像升级<br>回滚早先 Deployment 版本<br>暂停修改<br>查看Deployment的状态，以此作为发布是否成功的指标</p>\n<h4 id=\"ResourceQuota-Controller\"><a href=\"#ResourceQuota-Controller\" class=\"headerlink\" title=\"ResourceQuota Controller\"></a>ResourceQuota Controller</h4><p>目前 k8s 支持 三个层次的资源配额管理</p>\n<ol>\n<li><p>容器级别 ，可以对 cpu ，memory 进行限制</p>\n</li>\n<li><p>Pod 级别，对pod内所有容器进行资源限制</p>\n</li>\n<li><p>Namespace 级别，对Namespace(多租户)级别的资源限制，包括：</p>\n<ul>\n<li>pod 数量</li>\n<li>service 数量</li>\n<li>resourceQuota 数量 等</li>\n</ul>\n</li>\n</ol>\n<p><strong>Endpoints Controller</strong> 检测到pod的事件，则会更新对应Service 的Endpoints</p>\n<h4 id=\"Job-Controller-amp-amp-CronJob-Controller\"><a href=\"#Job-Controller-amp-amp-CronJob-Controller\" class=\"headerlink\" title=\"Job Controller &amp;&amp; CronJob Controller\"></a>Job Controller &amp;&amp; CronJob Controller</h4><p>Job Controller 控制的对象，直接就是 Pod。</p>\n<h4 id=\"DeamonSet-controller\"><a href=\"#DeamonSet-controller\" class=\"headerlink\" title=\"DeamonSet controller\"></a>DeamonSet controller</h4><h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>scheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。</p>\n<p>整个过程涉及三个对象：<strong>待调度pod列表</strong>(podQueue)，<strong>可用node列表</strong>，以及<strong>调度算法和调度策略</strong>.</p>\n<p><img src=\"/img/k8s/4.png\" alt=\"image\"></p>\n<p>1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中</p>\n<p>2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。</p>\n<h4 id=\"调度资源监听\"><a href=\"#调度资源监听\" class=\"headerlink\" title=\"调度资源监听\"></a>调度资源监听</h4><p><code>kube-apiserver</code> 提供了一套 <code>Watch</code> 机制给 <code>kubelet</code>、<code>kube-controller-manager</code>、 <code>kube-scheduler</code> 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， <code>kube-apiserver</code> 能够<strong>主动通知</strong>这些组件。</p>\n<h4 id=\"调度节点分配：\"><a href=\"#调度节点分配：\" class=\"headerlink\" title=\"调度节点分配：\"></a>调度节点分配：</h4><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p>\n<p>predicate 有一系列的算法可以使用：</p>\n<ul>\n<li><code>PodFitsResources</code>：节点上剩余的资源是否大于 pod 请求的资源</li>\n<li><code>PodFitsHost</code>：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li>\n<li><code>PodFitsHostPorts</code>：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li>\n<li><code>PodSelectorMatches</code>：过滤掉和 pod 指定的 label 不匹配的节点</li>\n<li><code>NoDiskConflict</code>：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li>\n</ul>\n<p>如果在 predicate 过程中没有合适的节点，pod 会一直在 <code>pending</code> 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：<br>按照优先级大小对节点排序。</p>\n<p>优选（ priority)</p>\n<p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p>\n<ul>\n<li><code>LeastRequestedPriority</code>：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li>\n<li><code>ImageLocalityPriority</code>：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li>\n</ul>\n<p>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 <code>kube-apiserver</code> 写入 <code>etcd</code>；</p>\n<h4 id=\"调度策略\"><a href=\"#调度策略\" class=\"headerlink\" title=\"调度策略\"></a>调度策略</h4><p><strong>NodeSelector</strong></p>\n<p><code>nodeSelector</code> 是最简单的控制方式。 <code>nodeSelector</code> 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。</p>\n<p>列出 node 的时候指定 <code>--show-labels</code> 参数就能查看 node 都添加了哪些 label：</p>\n<p>除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：</p>\n<ul>\n<li><code>kubernetes.io/hostname</code>：节点的 hostname 名称</li>\n<li><code>beta.kubernetes.io/os</code>： 节点安装的操作系统</li>\n<li><code>beta.kubernetes.io/arch</code>：节点的架构类型</li>\n</ul>\n<p>除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是<strong>建议使用Node Selector</strong>，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。</p>\n<p><strong>亲和性</strong>特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。</p>\n<p><strong>亲和性调度（Affinity）</strong></p>\n<p>Node Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution</li>\n<li>软亲和性：preferredDuringSchedulingIgnoredDuringExecution <ul>\n<li>如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。</li>\n</ul>\n</li>\n</ul>\n<p>Pod Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution </li>\n<li>preferredDuringSchedulingIgnoredDuringExecution</li>\n</ul>\n<p><strong>反亲和性（Anti-affinity）</strong></p>\n<p><strong>Taint 和 toleration</strong> （比如label idc=idc1,比如GPU资源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加一个 taint</span><br><span class=\"line\">kubectl taint nodes node1 key=value:NoSchedule</span><br><span class=\"line\">#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PodSpec 指定一个 toleration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tolerations: </span><br><span class=\"line\">- key: key</span><br><span class=\"line\">  operator: Exists</span><br><span class=\"line\">  value: value</span><br><span class=\"line\">  effect: NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PreferNoSchedule （软亲和性）</p>\n<h2 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h2><p>在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。</p>\n<p><strong>容器健康检查</strong></p>\n<p>提供Probe 机制，以更精确的判断Pod和容器：<br><strong>Liveness Prode</strong> ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。<br><strong>Readiness Probe</strong> ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。</p>\n<p>目前有三种类型检查方式<br>Http 健康检查 ：返回200～399认为成功<br>Container Exec：容器内执行命令，状态0退出，则视为成功<br>Tcp：如果可以建立连接则认为成功，否则失败。</p>\n<p><strong>资源上报</strong></p>\n<p>继承 cAdvisor 定时上报节点信息</p>\n<p>健康检查监视器由kubelet 代理</p>\n<h4 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h4><p>Service 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。</p>\n<p>在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。</p>\n<p>由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。</p>\n<p>kube-proxy  更新iptables 会在本机的 <strong>Iptables</strong> 的NAT表中添加4条规则链路。</p>\n<ol>\n<li>从容器中通过 serviceClusterIp 和端口访问Service 的请求</li>\n<li>从主机中通过ServiceClusterIp和端口访问Service的请求</li>\n<li>从容器中通过 Service 的NodePort 端口访问Service的请求</li>\n<li>从主机中通过Service 的NodePort 端口号访问Service的请求</li>\n</ol>\n<p>运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。</p>\n<p>简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。</p>\n<p>采用 iptables 来实现LB<br>实现方式：<br>kube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。</p>\n<p>默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。</p>\n<h2 id=\"yaml配置\"><a href=\"#yaml配置\" class=\"headerlink\" title=\"yaml配置\"></a>yaml配置</h2><p>Deployment yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-deployment</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx</span><br><span class=\"line\">        image: nginx:1.7.9</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">           requests:</span><br><span class=\"line\">             cpu: 0.05</span><br><span class=\"line\">             memory: 16Mi</span><br></pre></td></tr></table></figure>\n<p>Service yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-svc</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">      - protocol: TCP</span><br><span class=\"line\">        port: 8881</span><br><span class=\"line\">        targetPort: 80</span><br></pre></td></tr></table></figure>\n<h4 id=\"部分命令\"><a href=\"#部分命令\" class=\"headerlink\" title=\"部分命令\"></a>部分命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get  all  --all-namespaces=true</span><br><span class=\"line\">kubectl describe ***</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br><span class=\"line\">kubectl apply -f  *.yaml</span><br><span class=\"line\">kubectl get *** -o yaml</span><br><span class=\"line\">kubectl edit deployment.apps/nginx-deployment</span><br><span class=\"line\">kubectl exec $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125; -- $&#123;CMD&#125; $&#123;ARG1&#125; $&#123;ARG2&#125; ... $&#123;ARGN&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>Kubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效<em>powerful__Kubernetes提供了应用部署</em>规划_更新_维护的一种机制</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p><img src=\"/img/k8s/1.png\" alt=\"image\"></p>\n<p>集群中的机器划分为一个Master 节点和一群工作节点(Node)</p>\n<p>Master 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 <strong>kube-apiserver</strong>、负责调度的 <strong>kube-scheduler</strong>，以及负责容器编排的 <strong>kube-controller-manager</strong>。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 <strong>Ectd</strong> 中。</p>\n<p>node上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。</p>\n<p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 <strong>CRI</strong> 接入到 Kubernetes 项目当中。(比如 rkt)</p>\n<p>而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。<br>","more":"</p>\n<h4 id=\"kubernetes-核心概念\"><a href=\"#kubernetes-核心概念\" class=\"headerlink\" title=\"kubernetes 核心概念\"></a>kubernetes 核心概念</h4><p><img src=\"/img/k8s/2.png\" alt=\"image\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><p>Namespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理</p>\n<p><strong>ResourceQuota</strong></p>\n<p>Resource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.</p>\n<table>\n<thead>\n<tr>\n<th>字符串</th>\n<th>API对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“pods”</td>\n<td>Pod</td>\n</tr>\n<tr>\n<td>“services</td>\n<td>Service</td>\n</tr>\n<tr>\n<td>“replicationcontrollers”</td>\n<td>ReplicationController</td>\n</tr>\n<tr>\n<td>“resourcequotas”</td>\n<td>ResourceQuota</td>\n</tr>\n<tr>\n<td>“secrets”</td>\n<td>Secret</td>\n</tr>\n<tr>\n<td>“configmaps”</td>\n<td>ConfigMap</td>\n</tr>\n<tr>\n<td>“persistentvolumeclaims”</td>\n<td>PersistentVolumeClaim</td>\n</tr>\n<tr>\n<td>“services.nodeports”</td>\n<td>NodePort类型的Service</td>\n</tr>\n<tr>\n<td>“services.loadbalancers”</td>\n<td>LoadBalancer类型的Service</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h2><p>label 和 labelSelctor 是 k8s 中的只要分组机制</p>\n<p>Kubernetes目前支持两种类型的Label Selector：</p>\n<ul>\n<li>基于等式的Selector（Equality-based）</li>\n<li>基于集合的Selector（Set-based）</li>\n</ul>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。</p>\n<p>为什么k8s使用Pod在容器之上再封装一层呢？</p>\n<h4 id=\"Pod-中几个重要字段的含义和用法\"><a href=\"#Pod-中几个重要字段的含义和用法\" class=\"headerlink\" title=\"Pod 中几个重要字段的含义和用法\"></a>Pod 中几个重要字段的含义和用法</h4><ol>\n<li>NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段</li>\n<li>NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度</li>\n<li>HostAliases：定义了 Pod 的 hosts</li>\n<li>ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。</li>\n<li>Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。</li>\n</ol>\n<h4 id=\"Pod-具体的创建步骤包括：\"><a href=\"#Pod-具体的创建步骤包括：\" class=\"headerlink\" title=\"Pod 具体的创建步骤包括：\"></a>Pod 具体的创建步骤包括：</h4><p><img src=\"/img/k8s/3.jpg\" alt=\"images\"></p>\n<ol>\n<li>客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。</li>\n<li>API Server处理用户请求，存储Pod数据到etcd。</li>\n<li>调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。</li>\n<li>过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。</li>\n<li>主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。</li>\n<li>选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。</li>\n<li>kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。<br>​</li>\n</ol>\n<p>Pod模板是pod规范，包含在其他对象中，例如 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/\" target=\"_blank\" rel=\"noopener\">Replication Controllers</a>，<a href=\"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/\" target=\"_blank\" rel=\"noopener\">Jobs</a>和 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\" target=\"_blank\" rel=\"noopener\">DaemonSet</a></p>\n<p>pod 也支持host网络的设置，如spec-&gt;hostNetwork=true</p>\n<p><strong>Pause Container</strong></p>\n<p>每个pod 里运行着一个特殊的被称为<br>Pause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。</p>\n<p>可以通过api手动管理pod，也可以委托给控制器来管理pod。</p>\n<p><strong>Init Container</strong></p>\n<p>在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。</p>\n<p>比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>一个service 对象拥有如下关键特征<br>拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号</p>\n<p>通过 label selector 筛选关联 pod</p>\n<p>创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了</p>\n<p>spec<br>type=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式</p>\n<p>port<br>targetPort 默认与pord 相同</p>\n<h2 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h2><p>kubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.</p>\n<p>组件之间的所有操作和通信均由API Server处理的REST API调用.</p>\n<p>API Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：</p>\n<ul>\n<li>整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行</li>\n<li>集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作</li>\n<li>集群安全控制：API Server 提供的验证和授权保证了整个集群的安全</li>\n</ul>\n<p><strong>kubectl客户端</strong></p>\n<p>命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。</p>\n<p><strong>kubelet与API Server交互</strong></p>\n<p>每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。</p>\n<table>\n<thead>\n<tr>\n<th>监听信息</th>\n<th>kubelet动作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新的POD副本被调度绑定到本节点</td>\n<td>执行POD对应的容器的创建和启动逻辑</td>\n<td>-</td>\n</tr>\n<tr>\n<td>POD对象被删除</td>\n<td>删除本节点上相应的POD容器</td>\n<td>-</td>\n</tr>\n<tr>\n<td>修改POD信息</td>\n<td>修改本节点的POD容器</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><strong>kube-controller-manager与API Server交互</strong></p>\n<p>kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。</p>\n<p><strong>kube-scheduler与API Server交互</strong></p>\n<p>Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上</p>\n<p><strong>Watch API</strong></p>\n<p>Watch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event</p>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><p>controller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。<br>controller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token<br>controller，service controller，endpoint controller，serviceaccount controller。</p>\n<p>控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”</p>\n<h4 id=\"k8s-RC-Replication-Controller\"><a href=\"#k8s-RC-Replication-Controller\" class=\"headerlink\" title=\"k8s RC(Replication Controller)\"></a>k8s RC(Replication Controller)</h4><p>RC 的定义包含如下几个部分：<br>pod 期待的副本数<br>用于筛选目标pod的 Label Selector<br>当pod副本数小于预期时，用于创建新pod的pod模板</p>\n<p> Replica Set</p>\n<p>官方解释为“下一代的RC”<br>唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的</p>\n<p>Replica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用</p>\n<p>Replica Set 和 Deployment 逐步替换了之前RC 的作用</p>\n<h4 id=\"Deployment-Controller\"><a href=\"#Deployment-Controller\" class=\"headerlink\" title=\"Deployment Controller\"></a>Deployment Controller</h4><p>扩容:</p>\n<p><strong>使用场景</strong>：</p>\n<ol>\n<li>重新调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n</ol>\n<p>使用场景有以下几个：<br>创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程<br>检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)<br>更新Deployment 以创建新pod 比如镜像升级<br>回滚早先 Deployment 版本<br>暂停修改<br>查看Deployment的状态，以此作为发布是否成功的指标</p>\n<h4 id=\"ResourceQuota-Controller\"><a href=\"#ResourceQuota-Controller\" class=\"headerlink\" title=\"ResourceQuota Controller\"></a>ResourceQuota Controller</h4><p>目前 k8s 支持 三个层次的资源配额管理</p>\n<ol>\n<li><p>容器级别 ，可以对 cpu ，memory 进行限制</p>\n</li>\n<li><p>Pod 级别，对pod内所有容器进行资源限制</p>\n</li>\n<li><p>Namespace 级别，对Namespace(多租户)级别的资源限制，包括：</p>\n<ul>\n<li>pod 数量</li>\n<li>service 数量</li>\n<li>resourceQuota 数量 等</li>\n</ul>\n</li>\n</ol>\n<p><strong>Endpoints Controller</strong> 检测到pod的事件，则会更新对应Service 的Endpoints</p>\n<h4 id=\"Job-Controller-amp-amp-CronJob-Controller\"><a href=\"#Job-Controller-amp-amp-CronJob-Controller\" class=\"headerlink\" title=\"Job Controller &amp;&amp; CronJob Controller\"></a>Job Controller &amp;&amp; CronJob Controller</h4><p>Job Controller 控制的对象，直接就是 Pod。</p>\n<h4 id=\"DeamonSet-controller\"><a href=\"#DeamonSet-controller\" class=\"headerlink\" title=\"DeamonSet controller\"></a>DeamonSet controller</h4><h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>scheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。</p>\n<p>整个过程涉及三个对象：<strong>待调度pod列表</strong>(podQueue)，<strong>可用node列表</strong>，以及<strong>调度算法和调度策略</strong>.</p>\n<p><img src=\"/img/k8s/4.png\" alt=\"image\"></p>\n<p>1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中</p>\n<p>2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。</p>\n<h4 id=\"调度资源监听\"><a href=\"#调度资源监听\" class=\"headerlink\" title=\"调度资源监听\"></a>调度资源监听</h4><p><code>kube-apiserver</code> 提供了一套 <code>Watch</code> 机制给 <code>kubelet</code>、<code>kube-controller-manager</code>、 <code>kube-scheduler</code> 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， <code>kube-apiserver</code> 能够<strong>主动通知</strong>这些组件。</p>\n<h4 id=\"调度节点分配：\"><a href=\"#调度节点分配：\" class=\"headerlink\" title=\"调度节点分配：\"></a>调度节点分配：</h4><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p>\n<p>predicate 有一系列的算法可以使用：</p>\n<ul>\n<li><code>PodFitsResources</code>：节点上剩余的资源是否大于 pod 请求的资源</li>\n<li><code>PodFitsHost</code>：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li>\n<li><code>PodFitsHostPorts</code>：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li>\n<li><code>PodSelectorMatches</code>：过滤掉和 pod 指定的 label 不匹配的节点</li>\n<li><code>NoDiskConflict</code>：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li>\n</ul>\n<p>如果在 predicate 过程中没有合适的节点，pod 会一直在 <code>pending</code> 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：<br>按照优先级大小对节点排序。</p>\n<p>优选（ priority)</p>\n<p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p>\n<ul>\n<li><code>LeastRequestedPriority</code>：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li>\n<li><code>ImageLocalityPriority</code>：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li>\n</ul>\n<p>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 <code>kube-apiserver</code> 写入 <code>etcd</code>；</p>\n<h4 id=\"调度策略\"><a href=\"#调度策略\" class=\"headerlink\" title=\"调度策略\"></a>调度策略</h4><p><strong>NodeSelector</strong></p>\n<p><code>nodeSelector</code> 是最简单的控制方式。 <code>nodeSelector</code> 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。</p>\n<p>列出 node 的时候指定 <code>--show-labels</code> 参数就能查看 node 都添加了哪些 label：</p>\n<p>除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：</p>\n<ul>\n<li><code>kubernetes.io/hostname</code>：节点的 hostname 名称</li>\n<li><code>beta.kubernetes.io/os</code>： 节点安装的操作系统</li>\n<li><code>beta.kubernetes.io/arch</code>：节点的架构类型</li>\n</ul>\n<p>除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是<strong>建议使用Node Selector</strong>，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。</p>\n<p><strong>亲和性</strong>特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。</p>\n<p><strong>亲和性调度（Affinity）</strong></p>\n<p>Node Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution</li>\n<li>软亲和性：preferredDuringSchedulingIgnoredDuringExecution <ul>\n<li>如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。</li>\n</ul>\n</li>\n</ul>\n<p>Pod Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution </li>\n<li>preferredDuringSchedulingIgnoredDuringExecution</li>\n</ul>\n<p><strong>反亲和性（Anti-affinity）</strong></p>\n<p><strong>Taint 和 toleration</strong> （比如label idc=idc1,比如GPU资源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加一个 taint</span><br><span class=\"line\">kubectl taint nodes node1 key=value:NoSchedule</span><br><span class=\"line\">#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PodSpec 指定一个 toleration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tolerations: </span><br><span class=\"line\">- key: key</span><br><span class=\"line\">  operator: Exists</span><br><span class=\"line\">  value: value</span><br><span class=\"line\">  effect: NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PreferNoSchedule （软亲和性）</p>\n<h2 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h2><p>在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。</p>\n<p><strong>容器健康检查</strong></p>\n<p>提供Probe 机制，以更精确的判断Pod和容器：<br><strong>Liveness Prode</strong> ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。<br><strong>Readiness Probe</strong> ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。</p>\n<p>目前有三种类型检查方式<br>Http 健康检查 ：返回200～399认为成功<br>Container Exec：容器内执行命令，状态0退出，则视为成功<br>Tcp：如果可以建立连接则认为成功，否则失败。</p>\n<p><strong>资源上报</strong></p>\n<p>继承 cAdvisor 定时上报节点信息</p>\n<p>健康检查监视器由kubelet 代理</p>\n<h4 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h4><p>Service 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。</p>\n<p>在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。</p>\n<p>由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。</p>\n<p>kube-proxy  更新iptables 会在本机的 <strong>Iptables</strong> 的NAT表中添加4条规则链路。</p>\n<ol>\n<li>从容器中通过 serviceClusterIp 和端口访问Service 的请求</li>\n<li>从主机中通过ServiceClusterIp和端口访问Service的请求</li>\n<li>从容器中通过 Service 的NodePort 端口访问Service的请求</li>\n<li>从主机中通过Service 的NodePort 端口号访问Service的请求</li>\n</ol>\n<p>运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。</p>\n<p>简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。</p>\n<p>采用 iptables 来实现LB<br>实现方式：<br>kube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。</p>\n<p>默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。</p>\n<h2 id=\"yaml配置\"><a href=\"#yaml配置\" class=\"headerlink\" title=\"yaml配置\"></a>yaml配置</h2><p>Deployment yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-deployment</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx</span><br><span class=\"line\">        image: nginx:1.7.9</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">           requests:</span><br><span class=\"line\">             cpu: 0.05</span><br><span class=\"line\">             memory: 16Mi</span><br></pre></td></tr></table></figure>\n<p>Service yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-svc</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">      - protocol: TCP</span><br><span class=\"line\">        port: 8881</span><br><span class=\"line\">        targetPort: 80</span><br></pre></td></tr></table></figure>\n<h4 id=\"部分命令\"><a href=\"#部分命令\" class=\"headerlink\" title=\"部分命令\"></a>部分命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get  all  --all-namespaces=true</span><br><span class=\"line\">kubectl describe ***</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br><span class=\"line\">kubectl apply -f  *.yaml</span><br><span class=\"line\">kubectl get *** -o yaml</span><br><span class=\"line\">kubectl edit deployment.apps/nginx-deployment</span><br><span class=\"line\">kubectl exec $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125; -- $&#123;CMD&#125; $&#123;ARG1&#125; $&#123;ARG2&#125; ... $&#123;ARGN&#125;</span><br></pre></td></tr></table></figure>"},{"title":"k8s 笔记","description":"","date":"2019-02-01T19:38:10.000Z","comments":0,"share":true,"_content":"\n**k8s 容器出现大量 Evicted**\n\n```\n$kubectl describe node/runner-e480\n\nNormal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure\n\ndf -h 系统盘使用85%\n\n修改了docker 镜像存储路径\nhttps://blog.csdn.net/glongljl/article/details/80158297\n\n参考:\nhttps://blog.csdn.net/qq_21816375/article/details/82905660\n```\n\n### k8s 命令\n\n```\n#命令行自动补全\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\nkubectl get sa --all-namespaces=true\nkubectl get roles --all-namespaces=true\nkubectl get RoleBinding  --all-namespaces=true\nkubectl get secrets --all-namespaces=true\nkubectl describe  ClusterRole/cluster-admin\n\n\n#端口转发 本地2000端口映射到容器3000端口 &……& 目前只能用localhost访问\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=grafana,release=willing-lamb\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000\n\n\nkubectl get secrets -o json | kubectl update -f -\n\nkubectl exec POD_NAME -c CONTAINER_NAME reboot\nkubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c \"kill 1\"\n\nkubectl explain namespace\n\nkubectl get ns default --show-labels\nkubectl completion -h\n\nkubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force\n\ndocker images | grep '<none>'| awk '{print $3}' | xargs docker rmi\nkubectl -n kube-system get endpoints -o wide\n\n#dns 验证\nkubectl run curl --image=radial/busyboxplus:curl -it\nnslookup docker-dind-svc.gitlab-managed-apps\n\n\n#使用命令快速创建 deployment 和 service\nkubectl run nginx --image=nginx --replicas=2\nkubectl expose deployment nginx --port 80 --external-ip 172.17.8.201\n\nnode 上使用 k8s 的core-dns 服务\ndig @10.152.183.10 grafana.istio-system.svc.cluster.local\n\n```\n\n\n**RBAC**\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  namespace: default\n  name: example-sa\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: example-rolebinding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n  \n---\n#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n  \nserviceAccountName\nserviceAccount #pod请求别的命名空间时的帐号\n\nError: release community-feature-haozhe-wei failed: namespaces \"php-sht\" is forbidden: User \"system:serviceaccount:gitlab-managed-apps:default\" cannot get resource \"namespaces\" in API group \"\" in the namespace \"php-sht\"\n\n更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account\n```\n\n**跨namespace授权 **\n\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-view-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-view-php-sht-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: php-sht\nroleRef:\n  kind: Role\n  name: gitlab-view-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n**角色**\n\n```\nadmin\nmaintainer\ndeveloper\nguest/reporter\n```\n\n### Pod\n\n```\n每个 pod 都以mount形式挂载这个 默认的Servcice Account，\n如：mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\"\n\n单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。\n\n可以通过restartPolicy，改变pod的恢复策略\n\nselector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有\"role:frontend\"标签的Pod对象\n\ncommand: [\"sh\",\"-c\",\"mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g 'daemon off;'\"]\n\n#多行配置\nenv:\n    - name: COMMAND_SCRIPT\n      value: |-\n        set -xeo pipefail\n        helm init --upgrade\n        for i in $(seq 1 30); do helm version && break; sleep 1s; echo \"Retrying ($i)...\"; done\n        helm repo add runner https://charts.gitlab.io\n        helm repo update\n        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privileged\nspec:\n  containers:\n    - name: nginx-privileged\n      image: nginx:1.14.2\n      securityContext:\n        privileged: true\n        runAsUser: 1000 #指定容器运行账户\n      \n      \n\npod 的操作只有创建删除\n\n\"hostAliases\": [\n          {\n            \"ip\": \"172.16.101.197\",\n            \"hostnames\": [\n              \"prometheus.local.com\"\n            ]\n          }\n]\n\npod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.\n```\n\n**TLS**\n\n```\ncurl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem\nkubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key\n```\n\n**Namspace**\n\n```\npv 不属于 namespace \npvc 属于\n```\n\n**Label** and Annotations 注释 可以用来检索\n\n```\n#标签一定要有 key 可以没有 value\nkubectl label/annotate <resource> foo=bar\nkubectl label/annotate <resource> foo-\n```\n\n### 健康检查\n\n```\nlivenessProbe:\n  - initialDelaySeconds:5 #容器启动5s后开始执行\n    periodSeconds:5 #每5s执行一次\n\nreadlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期\n```\n\n### ConfigMap Secret Downard Api\n\n```\n\n这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。\n\nprojected volume可以映射很多volume源到相同的目录下\n\n#从配置文件生成 configmap\n<?php\n$c=file_get_contents(\"conf.php\");\necho json_encode($c,JSON_UNESCAPED_UNICODE).\"\\n\";\n```\n\n### k8s  node 节点加入集群\n\n```\nkubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd\n\n节点需要关闭 swap 启动docker服务\n\n\n还需要下载\nk8s.gcr.io/pause:3.1 镜像\nk8s.gcr.io/kube-proxy 镜像\n\n在 master节点观察子节点pod创建情况\n\n移除节点:\nkubectl delete node node-1\n```\n\n### PV\n\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: es-local-pv0\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: local-storage\n  local:\n    path: /data\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - php-cd-node\n```\n\n**redis**\n\n```\n   kubectl run --namespace kube-public redis-client --rm --tty -i --restart='Never' \\\n    --env REDIS_PASSWORD=$REDIS_PASSWORD \\\n   --image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash\n```\n\n### 映射外部服务\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n\n---\n\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nsubsets:\n  - addresses:\n    - ip: 10.111.8.166\n    ports:\n    - port: 8080\n      protocol: TCP\n\n---\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: uic\n  namespace: kube-system\nspec:\n  rules:\n  - host: uic.t1.youhaodongxi.com\n    http:\n      paths:\n      - backend:\n          serviceName: ldap-chang-password\n          servicePort: 80\n        path: /\n```\n\n\n\n**API权限**\n\n```\nhttps://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/\n\nAPISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')\nTOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode )\ncurl $APISERVER/api --header \"Authorization: Bearer $TOKEN\" --insecure\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"10.0.1.149:443\"\n    }\n  ]\n}\n\n```\n\n\n\n**how-to-create-a-kubectl-config-file-for-serviceaccount**\n\n```\nhttps://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount\n```\n\n\n\n**create-kubectl-by-user**\n\n```\nhttps://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/\n```\n\n\n\n**同一个service开2个端口**\n\n一般我们只有一个端口的时候，在service的yaml文件：\n\n```\nports:\n  - nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n\n而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：\n\n```\nports:\n  - name: http\n    nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n","source":"_posts/k8s-notes.md","raw":"---\ntitle: \"k8s 笔记\"\ndescription: \"\"\ndate: 2019-02-01 19:38:10\ntags: [k8s,kubernetes]\ncomments: false\nshare: true\n---\n\n**k8s 容器出现大量 Evicted**\n\n```\n$kubectl describe node/runner-e480\n\nNormal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure\n\ndf -h 系统盘使用85%\n\n修改了docker 镜像存储路径\nhttps://blog.csdn.net/glongljl/article/details/80158297\n\n参考:\nhttps://blog.csdn.net/qq_21816375/article/details/82905660\n```\n\n### k8s 命令\n\n```\n#命令行自动补全\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\nkubectl get sa --all-namespaces=true\nkubectl get roles --all-namespaces=true\nkubectl get RoleBinding  --all-namespaces=true\nkubectl get secrets --all-namespaces=true\nkubectl describe  ClusterRole/cluster-admin\n\n\n#端口转发 本地2000端口映射到容器3000端口 &……& 目前只能用localhost访问\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=grafana,release=willing-lamb\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000\n\n\nkubectl get secrets -o json | kubectl update -f -\n\nkubectl exec POD_NAME -c CONTAINER_NAME reboot\nkubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c \"kill 1\"\n\nkubectl explain namespace\n\nkubectl get ns default --show-labels\nkubectl completion -h\n\nkubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force\n\ndocker images | grep '<none>'| awk '{print $3}' | xargs docker rmi\nkubectl -n kube-system get endpoints -o wide\n\n#dns 验证\nkubectl run curl --image=radial/busyboxplus:curl -it\nnslookup docker-dind-svc.gitlab-managed-apps\n\n\n#使用命令快速创建 deployment 和 service\nkubectl run nginx --image=nginx --replicas=2\nkubectl expose deployment nginx --port 80 --external-ip 172.17.8.201\n\nnode 上使用 k8s 的core-dns 服务\ndig @10.152.183.10 grafana.istio-system.svc.cluster.local\n\n```\n\n\n**RBAC**\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  namespace: default\n  name: example-sa\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: example-rolebinding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n  \n---\n#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n  \nserviceAccountName\nserviceAccount #pod请求别的命名空间时的帐号\n\nError: release community-feature-haozhe-wei failed: namespaces \"php-sht\" is forbidden: User \"system:serviceaccount:gitlab-managed-apps:default\" cannot get resource \"namespaces\" in API group \"\" in the namespace \"php-sht\"\n\n更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account\n```\n\n**跨namespace授权 **\n\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-view-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-view-php-sht-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: php-sht\nroleRef:\n  kind: Role\n  name: gitlab-view-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n**角色**\n\n```\nadmin\nmaintainer\ndeveloper\nguest/reporter\n```\n\n### Pod\n\n```\n每个 pod 都以mount形式挂载这个 默认的Servcice Account，\n如：mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\"\n\n单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。\n\n可以通过restartPolicy，改变pod的恢复策略\n\nselector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有\"role:frontend\"标签的Pod对象\n\ncommand: [\"sh\",\"-c\",\"mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g 'daemon off;'\"]\n\n#多行配置\nenv:\n    - name: COMMAND_SCRIPT\n      value: |-\n        set -xeo pipefail\n        helm init --upgrade\n        for i in $(seq 1 30); do helm version && break; sleep 1s; echo \"Retrying ($i)...\"; done\n        helm repo add runner https://charts.gitlab.io\n        helm repo update\n        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privileged\nspec:\n  containers:\n    - name: nginx-privileged\n      image: nginx:1.14.2\n      securityContext:\n        privileged: true\n        runAsUser: 1000 #指定容器运行账户\n      \n      \n\npod 的操作只有创建删除\n\n\"hostAliases\": [\n          {\n            \"ip\": \"172.16.101.197\",\n            \"hostnames\": [\n              \"prometheus.local.com\"\n            ]\n          }\n]\n\npod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.\n```\n\n**TLS**\n\n```\ncurl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem\nkubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key\n```\n\n**Namspace**\n\n```\npv 不属于 namespace \npvc 属于\n```\n\n**Label** and Annotations 注释 可以用来检索\n\n```\n#标签一定要有 key 可以没有 value\nkubectl label/annotate <resource> foo=bar\nkubectl label/annotate <resource> foo-\n```\n\n### 健康检查\n\n```\nlivenessProbe:\n  - initialDelaySeconds:5 #容器启动5s后开始执行\n    periodSeconds:5 #每5s执行一次\n\nreadlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期\n```\n\n### ConfigMap Secret Downard Api\n\n```\n\n这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。\n\nprojected volume可以映射很多volume源到相同的目录下\n\n#从配置文件生成 configmap\n<?php\n$c=file_get_contents(\"conf.php\");\necho json_encode($c,JSON_UNESCAPED_UNICODE).\"\\n\";\n```\n\n### k8s  node 节点加入集群\n\n```\nkubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd\n\n节点需要关闭 swap 启动docker服务\n\n\n还需要下载\nk8s.gcr.io/pause:3.1 镜像\nk8s.gcr.io/kube-proxy 镜像\n\n在 master节点观察子节点pod创建情况\n\n移除节点:\nkubectl delete node node-1\n```\n\n### PV\n\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: es-local-pv0\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: local-storage\n  local:\n    path: /data\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - php-cd-node\n```\n\n**redis**\n\n```\n   kubectl run --namespace kube-public redis-client --rm --tty -i --restart='Never' \\\n    --env REDIS_PASSWORD=$REDIS_PASSWORD \\\n   --image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash\n```\n\n### 映射外部服务\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n\n---\n\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nsubsets:\n  - addresses:\n    - ip: 10.111.8.166\n    ports:\n    - port: 8080\n      protocol: TCP\n\n---\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: uic\n  namespace: kube-system\nspec:\n  rules:\n  - host: uic.t1.youhaodongxi.com\n    http:\n      paths:\n      - backend:\n          serviceName: ldap-chang-password\n          servicePort: 80\n        path: /\n```\n\n\n\n**API权限**\n\n```\nhttps://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/\n\nAPISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')\nTOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode )\ncurl $APISERVER/api --header \"Authorization: Bearer $TOKEN\" --insecure\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"10.0.1.149:443\"\n    }\n  ]\n}\n\n```\n\n\n\n**how-to-create-a-kubectl-config-file-for-serviceaccount**\n\n```\nhttps://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount\n```\n\n\n\n**create-kubectl-by-user**\n\n```\nhttps://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/\n```\n\n\n\n**同一个service开2个端口**\n\n一般我们只有一个端口的时候，在service的yaml文件：\n\n```\nports:\n  - nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n\n而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：\n\n```\nports:\n  - name: http\n    nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n","slug":"k8s-notes","published":1,"updated":"2019-12-17T07:36:17.737Z","layout":"post","photos":[],"link":"","_id":"ck53jqsw2000o1sl9yw3ptg6r","content":"<p><strong>k8s 容器出现大量 Evicted</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$kubectl describe node/runner-e480</span><br><span class=\"line\"></span><br><span class=\"line\">Normal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure</span><br><span class=\"line\"></span><br><span class=\"line\">df -h 系统盘使用85%</span><br><span class=\"line\"></span><br><span class=\"line\">修改了docker 镜像存储路径</span><br><span class=\"line\">https://blog.csdn.net/glongljl/article/details/80158297</span><br><span class=\"line\"></span><br><span class=\"line\">参考:</span><br><span class=\"line\">https://blog.csdn.net/qq_21816375/article/details/82905660</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-命令\"><a href=\"#k8s-命令\" class=\"headerlink\" title=\"k8s 命令\"></a>k8s 命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#命令行自动补全</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get sa --all-namespaces=true</span><br><span class=\"line\">kubectl get roles --all-namespaces=true</span><br><span class=\"line\">kubectl get RoleBinding  --all-namespaces=true</span><br><span class=\"line\">kubectl get secrets --all-namespaces=true</span><br><span class=\"line\">kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#端口转发 本地2000端口映射到容器3000端口 &amp;……&amp; 目前只能用localhost访问</span><br><span class=\"line\">export POD_NAME=$(kubectl get pods --namespace default -l &quot;app=grafana,release=willing-lamb&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get secrets -o json | kubectl update -f -</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec POD_NAME -c CONTAINER_NAME reboot</span><br><span class=\"line\">kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c &quot;kill 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl explain namespace</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get ns default --show-labels</span><br><span class=\"line\">kubectl completion -h</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force</span><br><span class=\"line\"></span><br><span class=\"line\">docker images | grep &apos;&lt;none&gt;&apos;| awk &apos;&#123;print $3&#125;&apos; | xargs docker rmi</span><br><span class=\"line\">kubectl -n kube-system get endpoints -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">#dns 验证</span><br><span class=\"line\">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class=\"line\">nslookup docker-dind-svc.gitlab-managed-apps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#使用命令快速创建 deployment 和 service</span><br><span class=\"line\">kubectl run nginx --image=nginx --replicas=2</span><br><span class=\"line\">kubectl expose deployment nginx --port 80 --external-ip 172.17.8.201</span><br><span class=\"line\"></span><br><span class=\"line\">node 上使用 k8s 的core-dns 服务</span><br><span class=\"line\">dig @10.152.183.10 grafana.istio-system.svc.cluster.local</span><br></pre></td></tr></table></figure>\n<p><strong>RBAC</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources: [&quot;pods&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-rolebinding</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">serviceAccountName</span><br><span class=\"line\">serviceAccount #pod请求别的命名空间时的帐号</span><br><span class=\"line\"></span><br><span class=\"line\">Error: release community-feature-haozhe-wei failed: namespaces &quot;php-sht&quot; is forbidden: User &quot;system:serviceaccount:gitlab-managed-apps:default&quot; cannot get resource &quot;namespaces&quot; in API group &quot;&quot; in the namespace &quot;php-sht&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account</span><br></pre></td></tr></table></figure>\n<p><strong>跨namespace授权 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-view-php-sht-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: php-sht</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p><strong>角色</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin</span><br><span class=\"line\">maintainer</span><br><span class=\"line\">developer</span><br><span class=\"line\">guest/reporter</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每个 pod 都以mount形式挂载这个 默认的Servcice Account，</span><br><span class=\"line\">如：mountPath&quot;: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过restartPolicy，改变pod的恢复策略</span><br><span class=\"line\"></span><br><span class=\"line\">selector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有&quot;role:frontend&quot;标签的Pod对象</span><br><span class=\"line\"></span><br><span class=\"line\">command: [&quot;sh&quot;,&quot;-c&quot;,&quot;mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g &apos;daemon off;&apos;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#多行配置</span><br><span class=\"line\">env:</span><br><span class=\"line\">    - name: COMMAND_SCRIPT</span><br><span class=\"line\">      value: |-</span><br><span class=\"line\">        set -xeo pipefail</span><br><span class=\"line\">        helm init --upgrade</span><br><span class=\"line\">        for i in $(seq 1 30); do helm version &amp;&amp; break; sleep 1s; echo &quot;Retrying ($i)...&quot;; done</span><br><span class=\"line\">        helm repo add runner https://charts.gitlab.io</span><br><span class=\"line\">        helm repo update</span><br><span class=\"line\">        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-privileged</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: nginx-privileged</span><br><span class=\"line\">      image: nginx:1.14.2</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        runAsUser: 1000 #指定容器运行账户</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">pod 的操作只有创建删除</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;hostAliases&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;ip&quot;: &quot;172.16.101.197&quot;,</span><br><span class=\"line\">            &quot;hostnames&quot;: [</span><br><span class=\"line\">              &quot;prometheus.local.com&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">pod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.</span><br></pre></td></tr></table></figure>\n<p><strong>TLS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem</span><br><span class=\"line\">kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</span><br></pre></td></tr></table></figure>\n<p><strong>Namspace</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pv 不属于 namespace </span><br><span class=\"line\">pvc 属于</span><br></pre></td></tr></table></figure>\n<p><strong>Label</strong> and Annotations 注释 可以用来检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标签一定要有 key 可以没有 value</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo=bar</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo-</span><br></pre></td></tr></table></figure>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  - initialDelaySeconds:5 #容器启动5s后开始执行</span><br><span class=\"line\">    periodSeconds:5 #每5s执行一次</span><br><span class=\"line\"></span><br><span class=\"line\">readlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期</span><br></pre></td></tr></table></figure>\n<h3 id=\"ConfigMap-Secret-Downard-Api\"><a href=\"#ConfigMap-Secret-Downard-Api\" class=\"headerlink\" title=\"ConfigMap Secret Downard Api\"></a>ConfigMap Secret Downard Api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。</span><br><span class=\"line\"></span><br><span class=\"line\">projected volume可以映射很多volume源到相同的目录下</span><br><span class=\"line\"></span><br><span class=\"line\">#从配置文件生成 configmap</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$c=file_get_contents(&quot;conf.php&quot;);</span><br><span class=\"line\">echo json_encode($c,JSON_UNESCAPED_UNICODE).&quot;\\n&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-node-节点加入集群\"><a href=\"#k8s-node-节点加入集群\" class=\"headerlink\" title=\"k8s  node 节点加入集群\"></a>k8s  node 节点加入集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd</span><br><span class=\"line\"></span><br><span class=\"line\">节点需要关闭 swap 启动docker服务</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还需要下载</span><br><span class=\"line\">k8s.gcr.io/pause:3.1 镜像</span><br><span class=\"line\">k8s.gcr.io/kube-proxy 镜像</span><br><span class=\"line\"></span><br><span class=\"line\">在 master节点观察子节点pod创建情况</span><br><span class=\"line\"></span><br><span class=\"line\">移除节点:</span><br><span class=\"line\">kubectl delete node node-1</span><br></pre></td></tr></table></figure>\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es-local-pv0</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 10Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteOnce</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Retain</span><br><span class=\"line\">  storageClassName: local-storage</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    path: /data</span><br><span class=\"line\">  nodeAffinity:</span><br><span class=\"line\">    required:</span><br><span class=\"line\">      nodeSelectorTerms:</span><br><span class=\"line\">      - matchExpressions:</span><br><span class=\"line\">        - key: kubernetes.io/hostname</span><br><span class=\"line\">          operator: In</span><br><span class=\"line\">          values:</span><br><span class=\"line\">          - php-cd-node</span><br></pre></td></tr></table></figure>\n<p><strong>redis</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl run --namespace kube-public redis-client --rm --tty -i --restart=&apos;Never&apos; \\</span><br><span class=\"line\"> --env REDIS_PASSWORD=$REDIS_PASSWORD \\</span><br><span class=\"line\">--image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射外部服务\"><a href=\"#映射外部服务\" class=\"headerlink\" title=\"映射外部服务\"></a>映射外部服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 10.111.8.166</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - port: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: uic</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: uic.t1.youhaodongxi.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: ldap-chang-password</span><br><span class=\"line\">          servicePort: 80</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n<p><strong>API权限</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/</span><br><span class=\"line\"></span><br><span class=\"line\">APISERVER=$(kubectl config view --minify -o jsonpath=&apos;&#123;.clusters[0].cluster.server&#125;&apos;)</span><br><span class=\"line\">TOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath=&apos;&#123;.secrets[0].name&#125;&apos;) -o jsonpath=&apos;&#123;.data.token&#125;&apos; | base64 --decode )</span><br><span class=\"line\">curl $APISERVER/api --header &quot;Authorization: Bearer $TOKEN&quot; --insecure</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class=\"line\">  &quot;versions&quot;: [</span><br><span class=\"line\">    &quot;v1&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class=\"line\">      &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>how-to-create-a-kubectl-config-file-for-serviceaccount</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount</span><br></pre></td></tr></table></figure>\n<p><strong>create-kubectl-by-user</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/</span><br></pre></td></tr></table></figure>\n<p><strong>同一个service开2个端口</strong></p>\n<p>一般我们只有一个端口的时候，在service的yaml文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n<p>而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>k8s 容器出现大量 Evicted</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$kubectl describe node/runner-e480</span><br><span class=\"line\"></span><br><span class=\"line\">Normal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure</span><br><span class=\"line\"></span><br><span class=\"line\">df -h 系统盘使用85%</span><br><span class=\"line\"></span><br><span class=\"line\">修改了docker 镜像存储路径</span><br><span class=\"line\">https://blog.csdn.net/glongljl/article/details/80158297</span><br><span class=\"line\"></span><br><span class=\"line\">参考:</span><br><span class=\"line\">https://blog.csdn.net/qq_21816375/article/details/82905660</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-命令\"><a href=\"#k8s-命令\" class=\"headerlink\" title=\"k8s 命令\"></a>k8s 命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#命令行自动补全</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get sa --all-namespaces=true</span><br><span class=\"line\">kubectl get roles --all-namespaces=true</span><br><span class=\"line\">kubectl get RoleBinding  --all-namespaces=true</span><br><span class=\"line\">kubectl get secrets --all-namespaces=true</span><br><span class=\"line\">kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#端口转发 本地2000端口映射到容器3000端口 &amp;……&amp; 目前只能用localhost访问</span><br><span class=\"line\">export POD_NAME=$(kubectl get pods --namespace default -l &quot;app=grafana,release=willing-lamb&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get secrets -o json | kubectl update -f -</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec POD_NAME -c CONTAINER_NAME reboot</span><br><span class=\"line\">kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c &quot;kill 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl explain namespace</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get ns default --show-labels</span><br><span class=\"line\">kubectl completion -h</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force</span><br><span class=\"line\"></span><br><span class=\"line\">docker images | grep &apos;&lt;none&gt;&apos;| awk &apos;&#123;print $3&#125;&apos; | xargs docker rmi</span><br><span class=\"line\">kubectl -n kube-system get endpoints -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">#dns 验证</span><br><span class=\"line\">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class=\"line\">nslookup docker-dind-svc.gitlab-managed-apps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#使用命令快速创建 deployment 和 service</span><br><span class=\"line\">kubectl run nginx --image=nginx --replicas=2</span><br><span class=\"line\">kubectl expose deployment nginx --port 80 --external-ip 172.17.8.201</span><br><span class=\"line\"></span><br><span class=\"line\">node 上使用 k8s 的core-dns 服务</span><br><span class=\"line\">dig @10.152.183.10 grafana.istio-system.svc.cluster.local</span><br></pre></td></tr></table></figure>\n<p><strong>RBAC</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources: [&quot;pods&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-rolebinding</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">serviceAccountName</span><br><span class=\"line\">serviceAccount #pod请求别的命名空间时的帐号</span><br><span class=\"line\"></span><br><span class=\"line\">Error: release community-feature-haozhe-wei failed: namespaces &quot;php-sht&quot; is forbidden: User &quot;system:serviceaccount:gitlab-managed-apps:default&quot; cannot get resource &quot;namespaces&quot; in API group &quot;&quot; in the namespace &quot;php-sht&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account</span><br></pre></td></tr></table></figure>\n<p><strong>跨namespace授权 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-view-php-sht-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: php-sht</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p><strong>角色</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin</span><br><span class=\"line\">maintainer</span><br><span class=\"line\">developer</span><br><span class=\"line\">guest/reporter</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每个 pod 都以mount形式挂载这个 默认的Servcice Account，</span><br><span class=\"line\">如：mountPath&quot;: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过restartPolicy，改变pod的恢复策略</span><br><span class=\"line\"></span><br><span class=\"line\">selector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有&quot;role:frontend&quot;标签的Pod对象</span><br><span class=\"line\"></span><br><span class=\"line\">command: [&quot;sh&quot;,&quot;-c&quot;,&quot;mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g &apos;daemon off;&apos;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#多行配置</span><br><span class=\"line\">env:</span><br><span class=\"line\">    - name: COMMAND_SCRIPT</span><br><span class=\"line\">      value: |-</span><br><span class=\"line\">        set -xeo pipefail</span><br><span class=\"line\">        helm init --upgrade</span><br><span class=\"line\">        for i in $(seq 1 30); do helm version &amp;&amp; break; sleep 1s; echo &quot;Retrying ($i)...&quot;; done</span><br><span class=\"line\">        helm repo add runner https://charts.gitlab.io</span><br><span class=\"line\">        helm repo update</span><br><span class=\"line\">        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-privileged</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: nginx-privileged</span><br><span class=\"line\">      image: nginx:1.14.2</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        runAsUser: 1000 #指定容器运行账户</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">pod 的操作只有创建删除</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;hostAliases&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;ip&quot;: &quot;172.16.101.197&quot;,</span><br><span class=\"line\">            &quot;hostnames&quot;: [</span><br><span class=\"line\">              &quot;prometheus.local.com&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">pod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.</span><br></pre></td></tr></table></figure>\n<p><strong>TLS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem</span><br><span class=\"line\">kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</span><br></pre></td></tr></table></figure>\n<p><strong>Namspace</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pv 不属于 namespace </span><br><span class=\"line\">pvc 属于</span><br></pre></td></tr></table></figure>\n<p><strong>Label</strong> and Annotations 注释 可以用来检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标签一定要有 key 可以没有 value</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo=bar</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo-</span><br></pre></td></tr></table></figure>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  - initialDelaySeconds:5 #容器启动5s后开始执行</span><br><span class=\"line\">    periodSeconds:5 #每5s执行一次</span><br><span class=\"line\"></span><br><span class=\"line\">readlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期</span><br></pre></td></tr></table></figure>\n<h3 id=\"ConfigMap-Secret-Downard-Api\"><a href=\"#ConfigMap-Secret-Downard-Api\" class=\"headerlink\" title=\"ConfigMap Secret Downard Api\"></a>ConfigMap Secret Downard Api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。</span><br><span class=\"line\"></span><br><span class=\"line\">projected volume可以映射很多volume源到相同的目录下</span><br><span class=\"line\"></span><br><span class=\"line\">#从配置文件生成 configmap</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$c=file_get_contents(&quot;conf.php&quot;);</span><br><span class=\"line\">echo json_encode($c,JSON_UNESCAPED_UNICODE).&quot;\\n&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-node-节点加入集群\"><a href=\"#k8s-node-节点加入集群\" class=\"headerlink\" title=\"k8s  node 节点加入集群\"></a>k8s  node 节点加入集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd</span><br><span class=\"line\"></span><br><span class=\"line\">节点需要关闭 swap 启动docker服务</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还需要下载</span><br><span class=\"line\">k8s.gcr.io/pause:3.1 镜像</span><br><span class=\"line\">k8s.gcr.io/kube-proxy 镜像</span><br><span class=\"line\"></span><br><span class=\"line\">在 master节点观察子节点pod创建情况</span><br><span class=\"line\"></span><br><span class=\"line\">移除节点:</span><br><span class=\"line\">kubectl delete node node-1</span><br></pre></td></tr></table></figure>\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es-local-pv0</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 10Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteOnce</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Retain</span><br><span class=\"line\">  storageClassName: local-storage</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    path: /data</span><br><span class=\"line\">  nodeAffinity:</span><br><span class=\"line\">    required:</span><br><span class=\"line\">      nodeSelectorTerms:</span><br><span class=\"line\">      - matchExpressions:</span><br><span class=\"line\">        - key: kubernetes.io/hostname</span><br><span class=\"line\">          operator: In</span><br><span class=\"line\">          values:</span><br><span class=\"line\">          - php-cd-node</span><br></pre></td></tr></table></figure>\n<p><strong>redis</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl run --namespace kube-public redis-client --rm --tty -i --restart=&apos;Never&apos; \\</span><br><span class=\"line\"> --env REDIS_PASSWORD=$REDIS_PASSWORD \\</span><br><span class=\"line\">--image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射外部服务\"><a href=\"#映射外部服务\" class=\"headerlink\" title=\"映射外部服务\"></a>映射外部服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 10.111.8.166</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - port: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: uic</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: uic.t1.youhaodongxi.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: ldap-chang-password</span><br><span class=\"line\">          servicePort: 80</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n<p><strong>API权限</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/</span><br><span class=\"line\"></span><br><span class=\"line\">APISERVER=$(kubectl config view --minify -o jsonpath=&apos;&#123;.clusters[0].cluster.server&#125;&apos;)</span><br><span class=\"line\">TOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath=&apos;&#123;.secrets[0].name&#125;&apos;) -o jsonpath=&apos;&#123;.data.token&#125;&apos; | base64 --decode )</span><br><span class=\"line\">curl $APISERVER/api --header &quot;Authorization: Bearer $TOKEN&quot; --insecure</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class=\"line\">  &quot;versions&quot;: [</span><br><span class=\"line\">    &quot;v1&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class=\"line\">      &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>how-to-create-a-kubectl-config-file-for-serviceaccount</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount</span><br></pre></td></tr></table></figure>\n<p><strong>create-kubectl-by-user</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/</span><br></pre></td></tr></table></figure>\n<p><strong>同一个service开2个端口</strong></p>\n<p>一般我们只有一个端口的时候，在service的yaml文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n<p>而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n"},{"title":"MicroK8s 笔记","description":"","date":"2019-02-01T19:38:10.000Z","comments":0,"share":true,"_content":"\nMicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。\n\n**修改默认镜像**\n\n- 修改`/var/snap/microk8s/current/args/kubelet`。 添加`--pod-infra-container-image=s7799653/pause:3.1`\n- 修改`/var/snap/microk8s/current/args/containerd-template.toml`的`plugins -> plugins.cri -> sandbox_image`为`s7799653/pause:3.1`\n- 重启服务 `microk8s.stop`,`microk8s.start`\n\n**dashboard**\n\n```\ntoken=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d \" \" -f1)\nmicrok8s.kubectl -n kube-system describe secret $token\n```\nPs：heapster已经被 metrics-server取代，所以仅开启`dashboard-metrics-scraper` 就可以图形化显示 cpu 、内存信息了\n\n**端口转发**\n\n```\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000 #pod 2000转到主机3000\n```\n\n**配置./kube/config**\n\n```\nmicrok8s.config\nkubectl config view\n修改 user,name 为kubernetes-dashboard\n修改 username,passwod 为token\n```\n\n**helm3**\n\n```\nhelm install nginx bitnami/nginx\n```\n\n**prometheus**\n\n```\n* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.\n\npersistentVolume\n```\n\n**常用命令**\n\n```\n$ microk8s.enable dashboard dns metrics-server registry istio\n$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest\n$ microk8s.ctr -n k8s.io images rm docker.io/kubernetesui/dashboard:v2.0.0-beta4 --sync\n$ microk8s.ctr -n k8s.io images ls | grep -v @sha256 | awk '{print $1,$4$5}'\n```\n\n**nginx-ingress 部署的两种方式**\n\n```\nexternalIPs: \n  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听\n或者\nhostNetwork: true\n```\n\n","source":"_posts/microk8.md","raw":"---\ntitle: \"MicroK8s 笔记\"\ndescription: \"\"\ndate: 2019-02-01 19:38:10\ntags: [k8s,microk8s]\ncomments: false\nshare: true\n---\n\nMicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。\n\n**修改默认镜像**\n\n- 修改`/var/snap/microk8s/current/args/kubelet`。 添加`--pod-infra-container-image=s7799653/pause:3.1`\n- 修改`/var/snap/microk8s/current/args/containerd-template.toml`的`plugins -> plugins.cri -> sandbox_image`为`s7799653/pause:3.1`\n- 重启服务 `microk8s.stop`,`microk8s.start`\n\n**dashboard**\n\n```\ntoken=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d \" \" -f1)\nmicrok8s.kubectl -n kube-system describe secret $token\n```\nPs：heapster已经被 metrics-server取代，所以仅开启`dashboard-metrics-scraper` 就可以图形化显示 cpu 、内存信息了\n\n**端口转发**\n\n```\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000 #pod 2000转到主机3000\n```\n\n**配置./kube/config**\n\n```\nmicrok8s.config\nkubectl config view\n修改 user,name 为kubernetes-dashboard\n修改 username,passwod 为token\n```\n\n**helm3**\n\n```\nhelm install nginx bitnami/nginx\n```\n\n**prometheus**\n\n```\n* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.\n\npersistentVolume\n```\n\n**常用命令**\n\n```\n$ microk8s.enable dashboard dns metrics-server registry istio\n$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest\n$ microk8s.ctr -n k8s.io images rm docker.io/kubernetesui/dashboard:v2.0.0-beta4 --sync\n$ microk8s.ctr -n k8s.io images ls | grep -v @sha256 | awk '{print $1,$4$5}'\n```\n\n**nginx-ingress 部署的两种方式**\n\n```\nexternalIPs: \n  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听\n或者\nhostNetwork: true\n```\n\n","slug":"microk8","published":1,"updated":"2019-12-23T11:04:39.980Z","layout":"post","photos":[],"link":"","_id":"ck53jqsw5000q1sl9wc5lrmjd","content":"<p>MicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。</p>\n<p><strong>修改默认镜像</strong></p>\n<ul>\n<li>修改<code>/var/snap/microk8s/current/args/kubelet</code>。 添加<code>--pod-infra-container-image=s7799653/pause:3.1</code></li>\n<li>修改<code>/var/snap/microk8s/current/args/containerd-template.toml</code>的<code>plugins -&gt; plugins.cri -&gt; sandbox_image</code>为<code>s7799653/pause:3.1</code></li>\n<li>重启服务 <code>microk8s.stop</code>,<code>microk8s.start</code></li>\n</ul>\n<p><strong>dashboard</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d &quot; &quot; -f1)</span><br><span class=\"line\">microk8s.kubectl -n kube-system describe secret $token</span><br></pre></td></tr></table></figure>\n<p>Ps：heapster已经被 metrics-server取代，所以仅开启<code>dashboard-metrics-scraper</code> 就可以图形化显示 cpu 、内存信息了</p>\n<p><strong>端口转发</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000 #pod 2000转到主机3000</span><br></pre></td></tr></table></figure>\n<p><strong>配置./kube/config</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.config</span><br><span class=\"line\">kubectl config view</span><br><span class=\"line\">修改 user,name 为kubernetes-dashboard</span><br><span class=\"line\">修改 username,passwod 为token</span><br></pre></td></tr></table></figure>\n<p><strong>helm3</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nginx bitnami/nginx</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.</span><br><span class=\"line\"></span><br><span class=\"line\">persistentVolume</span><br></pre></td></tr></table></figure>\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ microk8s.enable dashboard dns metrics-server registry istio</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images rm docker.io/kubernetesui/dashboard:v2.0.0-beta4 --sync</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images ls | grep -v @sha256 | awk &apos;&#123;print $1,$4$5&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>nginx-ingress 部署的两种方式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externalIPs: </span><br><span class=\"line\">  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听</span><br><span class=\"line\">或者</span><br><span class=\"line\">hostNetwork: true</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>MicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。</p>\n<p><strong>修改默认镜像</strong></p>\n<ul>\n<li>修改<code>/var/snap/microk8s/current/args/kubelet</code>。 添加<code>--pod-infra-container-image=s7799653/pause:3.1</code></li>\n<li>修改<code>/var/snap/microk8s/current/args/containerd-template.toml</code>的<code>plugins -&gt; plugins.cri -&gt; sandbox_image</code>为<code>s7799653/pause:3.1</code></li>\n<li>重启服务 <code>microk8s.stop</code>,<code>microk8s.start</code></li>\n</ul>\n<p><strong>dashboard</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d &quot; &quot; -f1)</span><br><span class=\"line\">microk8s.kubectl -n kube-system describe secret $token</span><br></pre></td></tr></table></figure>\n<p>Ps：heapster已经被 metrics-server取代，所以仅开启<code>dashboard-metrics-scraper</code> 就可以图形化显示 cpu 、内存信息了</p>\n<p><strong>端口转发</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000 #pod 2000转到主机3000</span><br></pre></td></tr></table></figure>\n<p><strong>配置./kube/config</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.config</span><br><span class=\"line\">kubectl config view</span><br><span class=\"line\">修改 user,name 为kubernetes-dashboard</span><br><span class=\"line\">修改 username,passwod 为token</span><br></pre></td></tr></table></figure>\n<p><strong>helm3</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nginx bitnami/nginx</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.</span><br><span class=\"line\"></span><br><span class=\"line\">persistentVolume</span><br></pre></td></tr></table></figure>\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ microk8s.enable dashboard dns metrics-server registry istio</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images rm docker.io/kubernetesui/dashboard:v2.0.0-beta4 --sync</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images ls | grep -v @sha256 | awk &apos;&#123;print $1,$4$5&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>nginx-ingress 部署的两种方式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externalIPs: </span><br><span class=\"line\">  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听</span><br><span class=\"line\">或者</span><br><span class=\"line\">hostNetwork: true</span><br></pre></td></tr></table></figure>\n"},{"title":"使用Loki查询日志","date":"2019-10-17T19:25:10.000Z","share":true,"_content":"![1.png](/img/loki/logo.png)\n\nloki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。\n\n![1.png](/img/loki/1.png)\n\nhelm 源\n\n```helm repo add loki https://grafana.github.io/loki/charts\nhelm repo update\n```\n\n[查询语句](https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md)：\n\n```\n{job=\"ingress-nginx/nginx-ingress\"} |=\"php-sht-payment-develop-http\" |=\"refund/create\"\n{job=\"php-sht/payment-develop\",stream=\"neo-log\"} !=\"ShopNotifyJob\" \n{job=~\"php-sht/payment-develop.*\"} |~\"shop_refund\" !~\"15712\" #正则\n```\n\n**promtail** 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.\n\npromtail.yaml 普通配置\n```\nserver:\n  http_listen_port: 3101\nscrape_configs:\n  - job_name: payment-develop\n    entry_parser: raw\n    static_configs:\n      - targets:\n         - localhost\n        labels:\n          job: php-sht/payment-develop\n          stream: neo-log\n          __path__: /var/www/payment/runtime/logs/*.log\n```\n<!-- more -->\n自定义metrics [pipeline 配置](https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics)\n\n```\nserver:\n  http_listen_port: 3101\nclient:\n  url: http://172.16.101.117:3100/api/prom/push\nscrape_configs:\n- job_name: payment-develop #不参与查询\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: php-sht/payment-develop #生成查询标签\n      stream: neo-log\n      __path__: /var/www/payment/runtime/logs/*.log\n  pipeline_stages:\n  - match:\n      selector: '{stream=\"neo-log\"}'\n      stages:\n       - regex:\n          expression: \"^(?P<message>.*)$\" \n       - regex:\n          expression: \"^.*(?P<warning_msg>(warning|WARNING)).*$\" \n       - regex:\n          expression: \"^.*(?P<error_msg>(error|ERROR)).*$\" \n       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job\n           log_lines_total:\n             type: Counter\n             description: \"log total\"\n             source: message\n             config:\n               action: inc\n           error_log_total:  #统计错误日志总数\n             type: Counter\n             description: \"error message total\"\n             source: error_msg\n             config:\n               action: inc \n           warning_log_total:  #统计warning日志总数\n             type: Counter\n             description: \"warning message total\"\n             source: warning_msg\n             config:\n               action: inc \n```\n服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total\n\nk8s中配置prometheus服务发现，在service 中配置：\n```\nannotations:\n  prometheus.io/port: \"3101\"\n  prometheus.io/scrape: \"true\"\n```\n\n在 grafana 新建监控指标:\n\n![2.png](/img/loki/2.png)\n\n监控日志总数，warning日志、error日志增长速率:\n\n![3.png](/img/loki/3.png)","source":"_posts/loki.md","raw":"---\ntitle: \"使用Loki查询日志\"\ndate: 2019-10-17 19:25:10\ntags: [loki,promtal,grafana,日志]\nshare: true\n---\n![1.png](/img/loki/logo.png)\n\nloki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。\n\n![1.png](/img/loki/1.png)\n\nhelm 源\n\n```helm repo add loki https://grafana.github.io/loki/charts\nhelm repo update\n```\n\n[查询语句](https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md)：\n\n```\n{job=\"ingress-nginx/nginx-ingress\"} |=\"php-sht-payment-develop-http\" |=\"refund/create\"\n{job=\"php-sht/payment-develop\",stream=\"neo-log\"} !=\"ShopNotifyJob\" \n{job=~\"php-sht/payment-develop.*\"} |~\"shop_refund\" !~\"15712\" #正则\n```\n\n**promtail** 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.\n\npromtail.yaml 普通配置\n```\nserver:\n  http_listen_port: 3101\nscrape_configs:\n  - job_name: payment-develop\n    entry_parser: raw\n    static_configs:\n      - targets:\n         - localhost\n        labels:\n          job: php-sht/payment-develop\n          stream: neo-log\n          __path__: /var/www/payment/runtime/logs/*.log\n```\n<!-- more -->\n自定义metrics [pipeline 配置](https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics)\n\n```\nserver:\n  http_listen_port: 3101\nclient:\n  url: http://172.16.101.117:3100/api/prom/push\nscrape_configs:\n- job_name: payment-develop #不参与查询\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: php-sht/payment-develop #生成查询标签\n      stream: neo-log\n      __path__: /var/www/payment/runtime/logs/*.log\n  pipeline_stages:\n  - match:\n      selector: '{stream=\"neo-log\"}'\n      stages:\n       - regex:\n          expression: \"^(?P<message>.*)$\" \n       - regex:\n          expression: \"^.*(?P<warning_msg>(warning|WARNING)).*$\" \n       - regex:\n          expression: \"^.*(?P<error_msg>(error|ERROR)).*$\" \n       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job\n           log_lines_total:\n             type: Counter\n             description: \"log total\"\n             source: message\n             config:\n               action: inc\n           error_log_total:  #统计错误日志总数\n             type: Counter\n             description: \"error message total\"\n             source: error_msg\n             config:\n               action: inc \n           warning_log_total:  #统计warning日志总数\n             type: Counter\n             description: \"warning message total\"\n             source: warning_msg\n             config:\n               action: inc \n```\n服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total\n\nk8s中配置prometheus服务发现，在service 中配置：\n```\nannotations:\n  prometheus.io/port: \"3101\"\n  prometheus.io/scrape: \"true\"\n```\n\n在 grafana 新建监控指标:\n\n![2.png](/img/loki/2.png)\n\n监控日志总数，warning日志、error日志增长速率:\n\n![3.png](/img/loki/3.png)","slug":"loki","published":1,"updated":"2019-11-14T03:36:44.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck53jqsw6000s1sl9pqdeiuh9","content":"<p><img src=\"/img/loki/logo.png\" alt=\"1.png\"></p>\n<p>loki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。</p>\n<p><img src=\"/img/loki/1.png\" alt=\"1.png\"></p>\n<p>helm 源</p>\n<figure class=\"highlight plain\"><figcaption><span>repo add loki</span><a href=\"https://grafana.github.io/loki/charts\" target=\"_blank\" rel=\"noopener\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md\" target=\"_blank\" rel=\"noopener\">查询语句</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;job=&quot;ingress-nginx/nginx-ingress&quot;&#125; |=&quot;php-sht-payment-develop-http&quot; |=&quot;refund/create&quot;</span><br><span class=\"line\">&#123;job=&quot;php-sht/payment-develop&quot;,stream=&quot;neo-log&quot;&#125; !=&quot;ShopNotifyJob&quot; </span><br><span class=\"line\">&#123;job=~&quot;php-sht/payment-develop.*&quot;&#125; |~&quot;shop_refund&quot; !~&quot;15712&quot; #正则</span><br></pre></td></tr></table></figure>\n<p><strong>promtail</strong> 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.</p>\n<p>promtail.yaml 普通配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: payment-develop</span><br><span class=\"line\">    entry_parser: raw</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets:</span><br><span class=\"line\">         - localhost</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          job: php-sht/payment-develop</span><br><span class=\"line\">          stream: neo-log</span><br><span class=\"line\">          __path__: /var/www/payment/runtime/logs/*.log</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>自定义metrics <a href=\"https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics\" target=\"_blank\" rel=\"noopener\">pipeline 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">client:</span><br><span class=\"line\">  url: http://172.16.101.117:3100/api/prom/push</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">- job_name: payment-develop #不参与查询</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets:</span><br><span class=\"line\">      - localhost</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      job: php-sht/payment-develop #生成查询标签</span><br><span class=\"line\">      stream: neo-log</span><br><span class=\"line\">      __path__: /var/www/payment/runtime/logs/*.log</span><br><span class=\"line\">  pipeline_stages:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      selector: &apos;&#123;stream=&quot;neo-log&quot;&#125;&apos;</span><br><span class=\"line\">      stages:</span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^(?P&lt;message&gt;.*)$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;warning_msg&gt;(warning|WARNING)).*$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;error_msg&gt;(error|ERROR)).*$&quot; </span><br><span class=\"line\">       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job</span><br><span class=\"line\">           log_lines_total:</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;log total&quot;</span><br><span class=\"line\">             source: message</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br><span class=\"line\">           error_log_total:  #统计错误日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;error message total&quot;</span><br><span class=\"line\">             source: error_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc </span><br><span class=\"line\">           warning_log_total:  #统计warning日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;warning message total&quot;</span><br><span class=\"line\">             source: warning_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br></pre></td></tr></table></figure>\n<p>服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total</p>\n<p>k8s中配置prometheus服务发现，在service 中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotations:</span><br><span class=\"line\">  prometheus.io/port: &quot;3101&quot;</span><br><span class=\"line\">  prometheus.io/scrape: &quot;true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>在 grafana 新建监控指标:</p>\n<p><img src=\"/img/loki/2.png\" alt=\"2.png\"></p>\n<p>监控日志总数，warning日志、error日志增长速率:</p>\n<p><img src=\"/img/loki/3.png\" alt=\"3.png\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/loki/logo.png\" alt=\"1.png\"></p>\n<p>loki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。</p>\n<p><img src=\"/img/loki/1.png\" alt=\"1.png\"></p>\n<p>helm 源</p>\n<figure class=\"highlight plain\"><figcaption><span>repo add loki</span><a href=\"https://grafana.github.io/loki/charts\" target=\"_blank\" rel=\"noopener\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md\" target=\"_blank\" rel=\"noopener\">查询语句</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;job=&quot;ingress-nginx/nginx-ingress&quot;&#125; |=&quot;php-sht-payment-develop-http&quot; |=&quot;refund/create&quot;</span><br><span class=\"line\">&#123;job=&quot;php-sht/payment-develop&quot;,stream=&quot;neo-log&quot;&#125; !=&quot;ShopNotifyJob&quot; </span><br><span class=\"line\">&#123;job=~&quot;php-sht/payment-develop.*&quot;&#125; |~&quot;shop_refund&quot; !~&quot;15712&quot; #正则</span><br></pre></td></tr></table></figure>\n<p><strong>promtail</strong> 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.</p>\n<p>promtail.yaml 普通配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: payment-develop</span><br><span class=\"line\">    entry_parser: raw</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets:</span><br><span class=\"line\">         - localhost</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          job: php-sht/payment-develop</span><br><span class=\"line\">          stream: neo-log</span><br><span class=\"line\">          __path__: /var/www/payment/runtime/logs/*.log</span><br></pre></td></tr></table></figure></p>","more":"<p>自定义metrics <a href=\"https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics\" target=\"_blank\" rel=\"noopener\">pipeline 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">client:</span><br><span class=\"line\">  url: http://172.16.101.117:3100/api/prom/push</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">- job_name: payment-develop #不参与查询</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets:</span><br><span class=\"line\">      - localhost</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      job: php-sht/payment-develop #生成查询标签</span><br><span class=\"line\">      stream: neo-log</span><br><span class=\"line\">      __path__: /var/www/payment/runtime/logs/*.log</span><br><span class=\"line\">  pipeline_stages:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      selector: &apos;&#123;stream=&quot;neo-log&quot;&#125;&apos;</span><br><span class=\"line\">      stages:</span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^(?P&lt;message&gt;.*)$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;warning_msg&gt;(warning|WARNING)).*$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;error_msg&gt;(error|ERROR)).*$&quot; </span><br><span class=\"line\">       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job</span><br><span class=\"line\">           log_lines_total:</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;log total&quot;</span><br><span class=\"line\">             source: message</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br><span class=\"line\">           error_log_total:  #统计错误日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;error message total&quot;</span><br><span class=\"line\">             source: error_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc </span><br><span class=\"line\">           warning_log_total:  #统计warning日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;warning message total&quot;</span><br><span class=\"line\">             source: warning_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br></pre></td></tr></table></figure>\n<p>服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total</p>\n<p>k8s中配置prometheus服务发现，在service 中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotations:</span><br><span class=\"line\">  prometheus.io/port: &quot;3101&quot;</span><br><span class=\"line\">  prometheus.io/scrape: &quot;true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>在 grafana 新建监控指标:</p>\n<p><img src=\"/img/loki/2.png\" alt=\"2.png\"></p>\n<p>监控日志总数，warning日志、error日志增长速率:</p>\n<p><img src=\"/img/loki/3.png\" alt=\"3.png\"></p>"},{"layout":"post","title":"迁移gogs用户到openldap","description":"","date":"2019-11-25T20:19:00.000Z","comments":0,"share":true,"_content":"\n公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题\n\n**搭建 openldap 服务器**\n\n查看 [gogs 代码](https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324)，使用的是 [pbkdf2](https://www.php.net/manual/zh/function.hash-pbkdf2.php) 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：\n\n```在\n// EncodePasswd encodes password to safe format.\nfunc (u *User) EncodePasswd() {\n\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)\n\tu.Passwd = fmt.Sprintf(\"%x\", newPasswd)\n}\n```\nopenldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.\n\n按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致\n\n\n```\nFROM ubuntu:18.04\nWORKDIR /root\nENV SALT_SIZE=10 DK_SIZE=50\nRUN apt-get -y update \\\n    && apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\\n    && git clone https://github.com/openldap/openldap.git \\\n    && cd openldap \\\n    && ./configure --enable-modules \\\n    && make \\\n    && make install \\\n    && cd ./contrib/slapd-modules/passwd/pbkdf2 \\\n    && sed -i \"s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE ${SALT_SIZE}/g\" pw-pbkdf2.c \\\n    && sed -i \"s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE ${DK_SIZE}/g\" pw-pbkdf2.c \\\n    && sed '19 a#define HAVE_OPENSSL' -i pw-pbkdf2.c \\\n    && make \\\n    && mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                \n    && make install \\\n    && sed '19 a# moduleload\\tpw-pbkdf2.la' -i /usr/local/etc/openldap/slapd.conf\nCMD [\"sh\", \"-c\", \"/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;\"]\n```\n<!-- more -->\n\n拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：\n\n```\n# Load dynamic backend modules:\nmodulepath\t/usr/local/libexec/openldap\nmoduleload\tpw-pbkdf2.la\n```\n\n启动镜像\n\n```\ndocker run -d \\\n\t--name openldap \\\n\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\\n\tairzhe/openldap:pbkdf2 \\\n\t/bin/bash -c \\\n\t\"mkdir -p /usr/local/var/openldap-data \\\n\t&& /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\\n\t&& tail -f /dev/null\"\n```\n\n生成管理员密码\n\n```\n$ docker exec -it openldap /bin/bash\n$ slappasswd -o module-load=pw-pbkdf2.la -h {PBKDF2-SHA256} -s secret123\n{PBKDF2-SHA256}10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y\n```\n\n改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。\n\n执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)\n\n```\n$ ldapsearch -x -D 'cn=root,dc=youhaodongxi,dc=com' -w 'secret123'\n# extended LDIF\n#\n# LDAPv3\n# base <> (default) with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 32 No such object\n\n# numResponses: 1\n```\n\n**gogs 密码转换**\n\n接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/base64\"\n    \"strings\"\n    _\"strconv\"\n    \"encoding/hex\"\n)\n\nfunc main() {\n    salt    := []byte(\"58R38iUGs7\") #\n    pwd_hex := \"8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7\"\n    pwd_str,_:= hex.DecodeString(pwd_hex)\n    fmt.Printf(\"{PBKDF2-SHA256}10000$%s$%s\",ab64_encode(salt),ab64_encode(pwd_str))\n    fmt.Println()\n}\n\nfunc ab64_encode(pwd_str []byte) string{\n    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))\n    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,\"=\"),\"+\",\".\")\n    return encod\n}\n```\n\n到此，已经解决大多数 gogs 迁移的技术问题了.\n\n\n\n踩坑：\n\n1. github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)\n2. 要修改 [pbkdf2](https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf)  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE\n\n体会：\n\n1. 新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(\n2. ldap 用着真的很爽，可以关联一切系统\n\n\n\n参考：\n\n https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\n https://github.com/osixia/docker-openldap/issues/235\n","source":"_posts/ldap-pbkdf2.md","raw":"---\nlayout: post\ntitle: \"迁移gogs用户到openldap\"\ndescription: \"\"\ndate: 2019-11-25 20:19:00\ntags: [ldap,openldap,gogs,pbkdf2]\ncomments: false\nshare: true\n---\n\n公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题\n\n**搭建 openldap 服务器**\n\n查看 [gogs 代码](https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324)，使用的是 [pbkdf2](https://www.php.net/manual/zh/function.hash-pbkdf2.php) 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：\n\n```在\n// EncodePasswd encodes password to safe format.\nfunc (u *User) EncodePasswd() {\n\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)\n\tu.Passwd = fmt.Sprintf(\"%x\", newPasswd)\n}\n```\nopenldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.\n\n按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致\n\n\n```\nFROM ubuntu:18.04\nWORKDIR /root\nENV SALT_SIZE=10 DK_SIZE=50\nRUN apt-get -y update \\\n    && apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\\n    && git clone https://github.com/openldap/openldap.git \\\n    && cd openldap \\\n    && ./configure --enable-modules \\\n    && make \\\n    && make install \\\n    && cd ./contrib/slapd-modules/passwd/pbkdf2 \\\n    && sed -i \"s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE ${SALT_SIZE}/g\" pw-pbkdf2.c \\\n    && sed -i \"s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE ${DK_SIZE}/g\" pw-pbkdf2.c \\\n    && sed '19 a#define HAVE_OPENSSL' -i pw-pbkdf2.c \\\n    && make \\\n    && mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                \n    && make install \\\n    && sed '19 a# moduleload\\tpw-pbkdf2.la' -i /usr/local/etc/openldap/slapd.conf\nCMD [\"sh\", \"-c\", \"/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;\"]\n```\n<!-- more -->\n\n拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：\n\n```\n# Load dynamic backend modules:\nmodulepath\t/usr/local/libexec/openldap\nmoduleload\tpw-pbkdf2.la\n```\n\n启动镜像\n\n```\ndocker run -d \\\n\t--name openldap \\\n\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\\n\tairzhe/openldap:pbkdf2 \\\n\t/bin/bash -c \\\n\t\"mkdir -p /usr/local/var/openldap-data \\\n\t&& /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\\n\t&& tail -f /dev/null\"\n```\n\n生成管理员密码\n\n```\n$ docker exec -it openldap /bin/bash\n$ slappasswd -o module-load=pw-pbkdf2.la -h {PBKDF2-SHA256} -s secret123\n{PBKDF2-SHA256}10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y\n```\n\n改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。\n\n执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)\n\n```\n$ ldapsearch -x -D 'cn=root,dc=youhaodongxi,dc=com' -w 'secret123'\n# extended LDIF\n#\n# LDAPv3\n# base <> (default) with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 32 No such object\n\n# numResponses: 1\n```\n\n**gogs 密码转换**\n\n接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/base64\"\n    \"strings\"\n    _\"strconv\"\n    \"encoding/hex\"\n)\n\nfunc main() {\n    salt    := []byte(\"58R38iUGs7\") #\n    pwd_hex := \"8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7\"\n    pwd_str,_:= hex.DecodeString(pwd_hex)\n    fmt.Printf(\"{PBKDF2-SHA256}10000$%s$%s\",ab64_encode(salt),ab64_encode(pwd_str))\n    fmt.Println()\n}\n\nfunc ab64_encode(pwd_str []byte) string{\n    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))\n    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,\"=\"),\"+\",\".\")\n    return encod\n}\n```\n\n到此，已经解决大多数 gogs 迁移的技术问题了.\n\n\n\n踩坑：\n\n1. github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)\n2. 要修改 [pbkdf2](https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf)  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE\n\n体会：\n\n1. 新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(\n2. ldap 用着真的很爽，可以关联一切系统\n\n\n\n参考：\n\n https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\n https://github.com/osixia/docker-openldap/issues/235\n","slug":"ldap-pbkdf2","published":1,"updated":"2019-12-20T09:27:15.003Z","photos":[],"link":"","_id":"ck53jqsw8000t1sl9tn5wlwr8","content":"<p>公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题</p>\n<p><strong>搭建 openldap 服务器</strong></p>\n<p>查看 <a href=\"https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324\" target=\"_blank\" rel=\"noopener\">gogs 代码</a>，使用的是 <a href=\"https://www.php.net/manual/zh/function.hash-pbkdf2.php\" target=\"_blank\" rel=\"noopener\">pbkdf2</a> 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// EncodePasswd encodes password to safe format.</span><br><span class=\"line\">func (u *User) EncodePasswd() &#123;</span><br><span class=\"line\">\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)</span><br><span class=\"line\">\tu.Passwd = fmt.Sprintf(&quot;%x&quot;, newPasswd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>openldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.</p>\n<p>按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ENV SALT_SIZE=10 DK_SIZE=50</span><br><span class=\"line\">RUN apt-get -y update \\</span><br><span class=\"line\">    &amp;&amp; apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\</span><br><span class=\"line\">    &amp;&amp; git clone https://github.com/openldap/openldap.git \\</span><br><span class=\"line\">    &amp;&amp; cd openldap \\</span><br><span class=\"line\">    &amp;&amp; ./configure --enable-modules \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; cd ./contrib/slapd-modules/passwd/pbkdf2 \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE $&#123;SALT_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE $&#123;DK_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a#define HAVE_OPENSSL&apos; -i pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                </span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a# moduleload\\tpw-pbkdf2.la&apos; -i /usr/local/etc/openldap/slapd.conf</span><br><span class=\"line\">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;&quot;]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Load dynamic backend modules:</span><br><span class=\"line\">modulepath\t/usr/local/libexec/openldap</span><br><span class=\"line\">moduleload\tpw-pbkdf2.la</span><br></pre></td></tr></table></figure>\n<p>启动镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">\t--name openldap \\</span><br><span class=\"line\">\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\tairzhe/openldap:pbkdf2 \\</span><br><span class=\"line\">\t/bin/bash -c \\</span><br><span class=\"line\">\t&quot;mkdir -p /usr/local/var/openldap-data \\</span><br><span class=\"line\">\t&amp;&amp; /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\t&amp;&amp; tail -f /dev/null&quot;</span><br></pre></td></tr></table></figure>\n<p>生成管理员密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it openldap /bin/bash</span><br><span class=\"line\">$ slappasswd -o module-load=pw-pbkdf2.la -h &#123;PBKDF2-SHA256&#125; -s secret123</span><br><span class=\"line\">&#123;PBKDF2-SHA256&#125;10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y</span><br></pre></td></tr></table></figure>\n<p>改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。</p>\n<p>执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldapsearch -x -D &apos;cn=root,dc=youhaodongxi,dc=com&apos; -w &apos;secret123&apos;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;&gt; (default) with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 32 No such object</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n<p><strong>gogs 密码转换</strong></p>\n<p>接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;encoding/base64&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">    _&quot;strconv&quot;</span><br><span class=\"line\">    &quot;encoding/hex&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    salt    := []byte(&quot;58R38iUGs7&quot;) #</span><br><span class=\"line\">    pwd_hex := &quot;8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7&quot;</span><br><span class=\"line\">    pwd_str,_:= hex.DecodeString(pwd_hex)</span><br><span class=\"line\">    fmt.Printf(&quot;&#123;PBKDF2-SHA256&#125;10000$%s$%s&quot;,ab64_encode(salt),ab64_encode(pwd_str))</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func ab64_encode(pwd_str []byte) string&#123;</span><br><span class=\"line\">    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))</span><br><span class=\"line\">    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,&quot;=&quot;),&quot;+&quot;,&quot;.&quot;)</span><br><span class=\"line\">    return encod</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，已经解决大多数 gogs 迁移的技术问题了.</p>\n<p>踩坑：</p>\n<ol>\n<li>github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)</li>\n<li>要修改 <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">pbkdf2</a>  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE</li>\n</ol>\n<p>体会：</p>\n<ol>\n<li>新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(</li>\n<li>ldap 用着真的很爽，可以关联一切系统</li>\n</ol>\n<p>参考：</p>\n<p> <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf</a><br> <a href=\"https://github.com/osixia/docker-openldap/issues/235\" target=\"_blank\" rel=\"noopener\">https://github.com/osixia/docker-openldap/issues/235</a></p>\n","site":{"data":{}},"excerpt":"<p>公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题</p>\n<p><strong>搭建 openldap 服务器</strong></p>\n<p>查看 <a href=\"https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324\" target=\"_blank\" rel=\"noopener\">gogs 代码</a>，使用的是 <a href=\"https://www.php.net/manual/zh/function.hash-pbkdf2.php\" target=\"_blank\" rel=\"noopener\">pbkdf2</a> 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// EncodePasswd encodes password to safe format.</span><br><span class=\"line\">func (u *User) EncodePasswd() &#123;</span><br><span class=\"line\">\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)</span><br><span class=\"line\">\tu.Passwd = fmt.Sprintf(&quot;%x&quot;, newPasswd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>openldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.</p>\n<p>按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ENV SALT_SIZE=10 DK_SIZE=50</span><br><span class=\"line\">RUN apt-get -y update \\</span><br><span class=\"line\">    &amp;&amp; apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\</span><br><span class=\"line\">    &amp;&amp; git clone https://github.com/openldap/openldap.git \\</span><br><span class=\"line\">    &amp;&amp; cd openldap \\</span><br><span class=\"line\">    &amp;&amp; ./configure --enable-modules \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; cd ./contrib/slapd-modules/passwd/pbkdf2 \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE $&#123;SALT_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE $&#123;DK_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a#define HAVE_OPENSSL&apos; -i pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                </span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a# moduleload\\tpw-pbkdf2.la&apos; -i /usr/local/etc/openldap/slapd.conf</span><br><span class=\"line\">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;&quot;]</span><br></pre></td></tr></table></figure>","more":"<p>拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Load dynamic backend modules:</span><br><span class=\"line\">modulepath\t/usr/local/libexec/openldap</span><br><span class=\"line\">moduleload\tpw-pbkdf2.la</span><br></pre></td></tr></table></figure>\n<p>启动镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">\t--name openldap \\</span><br><span class=\"line\">\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\tairzhe/openldap:pbkdf2 \\</span><br><span class=\"line\">\t/bin/bash -c \\</span><br><span class=\"line\">\t&quot;mkdir -p /usr/local/var/openldap-data \\</span><br><span class=\"line\">\t&amp;&amp; /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\t&amp;&amp; tail -f /dev/null&quot;</span><br></pre></td></tr></table></figure>\n<p>生成管理员密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it openldap /bin/bash</span><br><span class=\"line\">$ slappasswd -o module-load=pw-pbkdf2.la -h &#123;PBKDF2-SHA256&#125; -s secret123</span><br><span class=\"line\">&#123;PBKDF2-SHA256&#125;10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y</span><br></pre></td></tr></table></figure>\n<p>改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。</p>\n<p>执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldapsearch -x -D &apos;cn=root,dc=youhaodongxi,dc=com&apos; -w &apos;secret123&apos;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;&gt; (default) with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 32 No such object</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n<p><strong>gogs 密码转换</strong></p>\n<p>接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;encoding/base64&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">    _&quot;strconv&quot;</span><br><span class=\"line\">    &quot;encoding/hex&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    salt    := []byte(&quot;58R38iUGs7&quot;) #</span><br><span class=\"line\">    pwd_hex := &quot;8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7&quot;</span><br><span class=\"line\">    pwd_str,_:= hex.DecodeString(pwd_hex)</span><br><span class=\"line\">    fmt.Printf(&quot;&#123;PBKDF2-SHA256&#125;10000$%s$%s&quot;,ab64_encode(salt),ab64_encode(pwd_str))</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func ab64_encode(pwd_str []byte) string&#123;</span><br><span class=\"line\">    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))</span><br><span class=\"line\">    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,&quot;=&quot;),&quot;+&quot;,&quot;.&quot;)</span><br><span class=\"line\">    return encod</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，已经解决大多数 gogs 迁移的技术问题了.</p>\n<p>踩坑：</p>\n<ol>\n<li>github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)</li>\n<li>要修改 <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">pbkdf2</a>  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE</li>\n</ol>\n<p>体会：</p>\n<ol>\n<li>新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(</li>\n<li>ldap 用着真的很爽，可以关联一切系统</li>\n</ol>\n<p>参考：</p>\n<p> <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf</a><br> <a href=\"https://github.com/osixia/docker-openldap/issues/235\" target=\"_blank\" rel=\"noopener\">https://github.com/osixia/docker-openldap/issues/235</a></p>"},{"layout":"post","title":"nginx 学习","description":"","date":"2019-02-27T00:00:00.000Z","comments":0,"share":true,"_content":"\nPOST_READ 阶段：\n\nx-forwarded-for x-real-ip \n\nrealip 模块启用 \n\nreturn 302 /a.html\n\n302 浏览器缓存\n\nerror_page 404=/404.php\n\nrewrite regex replacement\n\n如果 replacement 是以http开头，直接返回302\n\nlast 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301\n\nhttp permanent 同时出现返回301\n\nrewrite log 指令 开启rewrite 日志\n\n\n**if 使用场景**\n\n1. 检查变量为空或者值是否为0，直接使用\n2. 将变量和字符串做匹配，使用=或者!=\n3. 将变量与正则表达式做匹配 ~ 或~*\n4. 检查文件是否存在 -f\n5. 检查目录是否存在 -d\n6. 检查文件、目录、软连是否存在 -e \n7. 检查是否为可执行文件 -x\n\n- 忽略大小写\n- ^~ 禁止正则表达式匹配\n---\n- limit_conn 限制并发连接数以ip为单位\n- limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前\n- mirror 流量拷贝\n- sub 替换\n- sub_filter \n- additon 模块在响应前或后添加 自请求的内容\n- referer 模块 对于大多数网站来说都是有效的\n- valid_referers  if($invalid_referer){return 403}\n- secure_link\n- rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url\n- mirror_request body off\n- map 模块\n---\n\n- nginx  Upstream Consistent Hash\n- proxy_cache_use_state\n- strace -p\n- ngx_http_cache_purge_module 清除nginx缓存\n\n\n","source":"_posts/nginx.md","raw":"---\nlayout: post\ntitle: \"nginx 学习\"\ndescription: \"\"\ndate: 2019-02-27\ntags: [nginx,openresty]\ncomments: false\nshare: true\n---\n\nPOST_READ 阶段：\n\nx-forwarded-for x-real-ip \n\nrealip 模块启用 \n\nreturn 302 /a.html\n\n302 浏览器缓存\n\nerror_page 404=/404.php\n\nrewrite regex replacement\n\n如果 replacement 是以http开头，直接返回302\n\nlast 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301\n\nhttp permanent 同时出现返回301\n\nrewrite log 指令 开启rewrite 日志\n\n\n**if 使用场景**\n\n1. 检查变量为空或者值是否为0，直接使用\n2. 将变量和字符串做匹配，使用=或者!=\n3. 将变量与正则表达式做匹配 ~ 或~*\n4. 检查文件是否存在 -f\n5. 检查目录是否存在 -d\n6. 检查文件、目录、软连是否存在 -e \n7. 检查是否为可执行文件 -x\n\n- 忽略大小写\n- ^~ 禁止正则表达式匹配\n---\n- limit_conn 限制并发连接数以ip为单位\n- limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前\n- mirror 流量拷贝\n- sub 替换\n- sub_filter \n- additon 模块在响应前或后添加 自请求的内容\n- referer 模块 对于大多数网站来说都是有效的\n- valid_referers  if($invalid_referer){return 403}\n- secure_link\n- rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url\n- mirror_request body off\n- map 模块\n---\n\n- nginx  Upstream Consistent Hash\n- proxy_cache_use_state\n- strace -p\n- ngx_http_cache_purge_module 清除nginx缓存\n\n\n","slug":"nginx","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ck53jqswa000v1sl934guncjg","content":"<p>POST_READ 阶段：</p>\n<p>x-forwarded-for x-real-ip </p>\n<p>realip 模块启用 </p>\n<p>return 302 /a.html</p>\n<p>302 浏览器缓存</p>\n<p>error_page 404=/404.php</p>\n<p>rewrite regex replacement</p>\n<p>如果 replacement 是以http开头，直接返回302</p>\n<p>last 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301</p>\n<p>http permanent 同时出现返回301</p>\n<p>rewrite log 指令 开启rewrite 日志</p>\n<p><strong>if 使用场景</strong></p>\n<ol>\n<li>检查变量为空或者值是否为0，直接使用</li>\n<li>将变量和字符串做匹配，使用=或者!=</li>\n<li>将变量与正则表达式做匹配 ~ 或~*</li>\n<li>检查文件是否存在 -f</li>\n<li>检查目录是否存在 -d</li>\n<li>检查文件、目录、软连是否存在 -e </li>\n<li>检查是否为可执行文件 -x</li>\n</ol>\n<ul>\n<li>忽略大小写</li>\n<li>^~ 禁止正则表达式匹配</li>\n</ul>\n<hr>\n<ul>\n<li>limit_conn 限制并发连接数以ip为单位</li>\n<li>limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前</li>\n<li>mirror 流量拷贝</li>\n<li>sub 替换</li>\n<li>sub_filter </li>\n<li>additon 模块在响应前或后添加 自请求的内容</li>\n<li>referer 模块 对于大多数网站来说都是有效的</li>\n<li>valid_referers  if($invalid_referer){return 403}</li>\n<li>secure_link</li>\n<li>rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url</li>\n<li>mirror_request body off</li>\n<li>map 模块</li>\n</ul>\n<hr>\n<ul>\n<li>nginx  Upstream Consistent Hash</li>\n<li>proxy_cache_use_state</li>\n<li>strace -p</li>\n<li>ngx_http_cache_purge_module 清除nginx缓存</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>POST_READ 阶段：</p>\n<p>x-forwarded-for x-real-ip </p>\n<p>realip 模块启用 </p>\n<p>return 302 /a.html</p>\n<p>302 浏览器缓存</p>\n<p>error_page 404=/404.php</p>\n<p>rewrite regex replacement</p>\n<p>如果 replacement 是以http开头，直接返回302</p>\n<p>last 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301</p>\n<p>http permanent 同时出现返回301</p>\n<p>rewrite log 指令 开启rewrite 日志</p>\n<p><strong>if 使用场景</strong></p>\n<ol>\n<li>检查变量为空或者值是否为0，直接使用</li>\n<li>将变量和字符串做匹配，使用=或者!=</li>\n<li>将变量与正则表达式做匹配 ~ 或~*</li>\n<li>检查文件是否存在 -f</li>\n<li>检查目录是否存在 -d</li>\n<li>检查文件、目录、软连是否存在 -e </li>\n<li>检查是否为可执行文件 -x</li>\n</ol>\n<ul>\n<li>忽略大小写</li>\n<li>^~ 禁止正则表达式匹配</li>\n</ul>\n<hr>\n<ul>\n<li>limit_conn 限制并发连接数以ip为单位</li>\n<li>limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前</li>\n<li>mirror 流量拷贝</li>\n<li>sub 替换</li>\n<li>sub_filter </li>\n<li>additon 模块在响应前或后添加 自请求的内容</li>\n<li>referer 模块 对于大多数网站来说都是有效的</li>\n<li>valid_referers  if($invalid_referer){return 403}</li>\n<li>secure_link</li>\n<li>rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url</li>\n<li>mirror_request body off</li>\n<li>map 模块</li>\n</ul>\n<hr>\n<ul>\n<li>nginx  Upstream Consistent Hash</li>\n<li>proxy_cache_use_state</li>\n<li>strace -p</li>\n<li>ngx_http_cache_purge_module 清除nginx缓存</li>\n</ul>\n"},{"title":"ubuntu18.04安装","description":"","date":"2019-11-14T20:53:10.000Z","comments":0,"share":true,"_content":"\n**镜像制作**\n\n工具：https://rufus.ie/ \n\n**分区：**\n\n```\n/ 50G 根分区(一般分配30G就可以)\n/boot 500MB 引导分区\nefi 500MB\nswap 4G 交换分区\n/home 个人数据分区\n```\n\n安装完成重启\n\n**修改163源并更新**\n\n```\n$ cat /etc/apt/sources.list\ndeb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n**安装网卡驱动 :(**\n\n```\nhttps://github.com/tomaspinho/rtl8821ce\n```\n\n**常用软件**\n\n- chrome\n- [Nutstore](https://www.jianguoyun.com/)  #坚果网盘 导入备份数据\n- [google 拼音](https://ywnz.com/linuxjc/2891.html) \n- sublime\n- vim\n- git 别名设置\n- [typora](http://typora.io/) #markdown工具\n- docker.io\n- postman\n- gimp\n- bleachbit\n- vsCode\n\n![1.png](/img/ubuntu/1.png)\n\n\n总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。","source":"_posts/ubuntu-install.md","raw":"---\ntitle: \"ubuntu18.04安装\"\ndescription: \"\"\ndate: 2019-11-14 20:53:10\ntags: [ubuntu]\ncomments: false\nshare: true\n---\n\n**镜像制作**\n\n工具：https://rufus.ie/ \n\n**分区：**\n\n```\n/ 50G 根分区(一般分配30G就可以)\n/boot 500MB 引导分区\nefi 500MB\nswap 4G 交换分区\n/home 个人数据分区\n```\n\n安装完成重启\n\n**修改163源并更新**\n\n```\n$ cat /etc/apt/sources.list\ndeb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n**安装网卡驱动 :(**\n\n```\nhttps://github.com/tomaspinho/rtl8821ce\n```\n\n**常用软件**\n\n- chrome\n- [Nutstore](https://www.jianguoyun.com/)  #坚果网盘 导入备份数据\n- [google 拼音](https://ywnz.com/linuxjc/2891.html) \n- sublime\n- vim\n- git 别名设置\n- [typora](http://typora.io/) #markdown工具\n- docker.io\n- postman\n- gimp\n- bleachbit\n- vsCode\n\n![1.png](/img/ubuntu/1.png)\n\n\n总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。","slug":"ubuntu-install","published":1,"updated":"2019-12-10T11:46:11.821Z","layout":"post","photos":[],"link":"","_id":"ck53jqswc000x1sl99hqkmm73","content":"<p><strong>镜像制作</strong></p>\n<p>工具：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">https://rufus.ie/</a> </p>\n<p><strong>分区：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 50G 根分区(一般分配30G就可以)</span><br><span class=\"line\">/boot 500MB 引导分区</span><br><span class=\"line\">efi 500MB</span><br><span class=\"line\">swap 4G 交换分区</span><br><span class=\"line\">/home 个人数据分区</span><br></pre></td></tr></table></figure>\n<p>安装完成重启</p>\n<p><strong>修改163源并更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/apt/sources.list</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">$ sudo apt update</span><br><span class=\"line\">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<p><strong>安装网卡驱动 :(</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tomaspinho/rtl8821ce</span><br></pre></td></tr></table></figure>\n<p><strong>常用软件</strong></p>\n<ul>\n<li>chrome</li>\n<li><a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"noopener\">Nutstore</a>  #坚果网盘 导入备份数据</li>\n<li><a href=\"https://ywnz.com/linuxjc/2891.html\" target=\"_blank\" rel=\"noopener\">google 拼音</a> </li>\n<li>sublime</li>\n<li>vim</li>\n<li>git 别名设置</li>\n<li><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">typora</a> #markdown工具</li>\n<li>docker.io</li>\n<li>postman</li>\n<li>gimp</li>\n<li>bleachbit</li>\n<li>vsCode</li>\n</ul>\n<p><img src=\"/img/ubuntu/1.png\" alt=\"1.png\"></p>\n<p>总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>镜像制作</strong></p>\n<p>工具：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">https://rufus.ie/</a> </p>\n<p><strong>分区：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 50G 根分区(一般分配30G就可以)</span><br><span class=\"line\">/boot 500MB 引导分区</span><br><span class=\"line\">efi 500MB</span><br><span class=\"line\">swap 4G 交换分区</span><br><span class=\"line\">/home 个人数据分区</span><br></pre></td></tr></table></figure>\n<p>安装完成重启</p>\n<p><strong>修改163源并更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/apt/sources.list</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">$ sudo apt update</span><br><span class=\"line\">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<p><strong>安装网卡驱动 :(</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tomaspinho/rtl8821ce</span><br></pre></td></tr></table></figure>\n<p><strong>常用软件</strong></p>\n<ul>\n<li>chrome</li>\n<li><a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"noopener\">Nutstore</a>  #坚果网盘 导入备份数据</li>\n<li><a href=\"https://ywnz.com/linuxjc/2891.html\" target=\"_blank\" rel=\"noopener\">google 拼音</a> </li>\n<li>sublime</li>\n<li>vim</li>\n<li>git 别名设置</li>\n<li><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">typora</a> #markdown工具</li>\n<li>docker.io</li>\n<li>postman</li>\n<li>gimp</li>\n<li>bleachbit</li>\n<li>vsCode</li>\n</ul>\n<p><img src=\"/img/ubuntu/1.png\" alt=\"1.png\"></p>\n<p>总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。</p>\n"},{"title":"Prometheus入门","description":"","date":"2019-02-01T19:46:10.000Z","comments":0,"share":true,"_content":"\n### 数据模型\n\n**时序索引 ** 名称+标签\n\n**时序样本**  float64 值\n\n**格式**: \n\n```\n<metric name>{<label name>=<label value>, ...}\n```\n\nPrometheus 时序数据分为 [Counter](https://prometheus.io/docs/concepts/metric_types/#counter), [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge), [Histogram](https://prometheus.io/docs/concepts/metric_types/#histogram), [Summary](https://prometheus.io/docs/concepts/metric_types/#summary) 四种类型。\n\n```\nmetric_name [\n  \"{\" label_name \"=\" `\"` label_value `\"` { \",\" label_name \"=\" `\"` label_value `\"` } [ \",\" ] \"}\"\n] value [ timestamp ]\n```\n\n\n\ncontab 每天凌晨清空\n\n统计：下单总数、成功支付总数\n\n\n\n每秒总数 counter\n\n**Counter**\n\n```\n# 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -\n# HELP sample_http_requests_total The total number of HTTP requests.\n# TYPE sample_http_requests_total counter\nsample_http_requests_total{method=\"post\",code=\"200\"} 1027 1568018567000\nsample_http_requests_total{method=\"post\",code=\"400\"}    3 1568018567000\nidelta(sample_http_requests_total[1m]) 获取和一分钟前的差距\n```\n\n\n\n**Gauge**\n\nGauge不能解决并发问题\n\n\n\n\n\n**向量**\n\n一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：\n\n![img](https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp)\n\n我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。\n\n\n\n时间戳根据时区不同，会转换成不同的日期时间.\n\n\n\n**PromQL**\n\n```\n#CPU 个数\ncount(count(node_cpu_seconds_total{instance=\"172.16.101.209:9100\",mode=\"system\"}) by (cpu))\n#内存使用率\n(1 - (node_memory_MemAvailable_bytes{instance=~\"$node\"} / (node_memory_MemTotal_bytes{instance=~\"$node\"})))* 100\n#cpu空闲率\navg(rate(node_cpu_seconds_total{mode=\"idle\"}[2m])) by (instance)\n#offset25 一分钟前后值差异\ndelta(sample_http_requests_total{code=\"200\"} [1m] offset 25m ) \n\ngauge\nsum without(device, fstype, mountpoint)(node_filesystem_size_bytes)\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\navg without(instance, job)(process_open_fds)\n\ncounter\n#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值\nrate(node_network_receive_bytes_total[5m])\nThe output of rate is a gauge, so the same aggregations apply as for gauges.\nsum without(device)(rate(node_network_receive_bytes_total[5m]))\n\n//通过rate()函数获取HTTP请求量的增长率\nrate(http_requests_total[5m])\n//查询当前系统中，访问量前10的HTTP地址\ntopk(10, http_requests_total)\n\ncount without(instance)(process_open_fds > 10)\n```\n\n\n\n**CPU 参数**\n\n```\ntype就是CPU的不同状态值\nidle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal\n其中idle表示空闲，user表示用户使用\n```\n\n\n\n**prometheus rules**\n\n```\ngroups:\n- name: container-restart\n  rules:\n  - alert: Containers Restarts (Last 30 Minutes)\n    expr: |\n      delta(kube_pod_container_status_restarts_total{}[30m])>0  \n    for: 5m\n    labels:\n      severity: warning\n      team: DevOps\n    annotations:\n      summary: \"Instance {{ $labels.instance }} down\"\n      description: \"{{$labels.namespace}}/{{$labels.pod}} has many containers restarts in last 30 minutes\"\n```\n\n\n\n**alertManager**\n\n```\nglobal:\n  smtp_smarthost: 'smtp.qq.com:465'\n  smtp_from: '532499602@qq.com'\n  smtp_auth_username: 'weihaozhe@nicetuan.net'\n  smtp_auth_password: '745632Bn123'\n  smtp_require_tls: false\nroute:\n  group_by: ['alertname']\n  group_wait: 1m\n  group_interval: 10m\n  repeat_interval: 10m\n  receiver: default-receiver\nreceivers:\n- name: 'default-receiver'\n  email_configs:\n  - to: 'air_zhe@163.com'\n\n```\n\n**configMap reload**\n\n```\nhttps://github.com/jimmidyson/configmap-reload/tree/v0.2.2\n```\n\n\n一台Prometheus服务器每秒可以摄取数百万个样本.\n\n\nPrometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。\n\n\n\n官方对非官方\n不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。\n作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。\n\n\n\n存储\n\n建议使用SSD，但并非严格要求。\n\n\n\n计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是`rate`函数的作用。该`rate`函数计算计数器每秒增加的速度。将表达式调整为 **rate(prometheus_tsdb_head_samples_appended_total[1m])**，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本\n\n\n\n量具有三种主要方法 使用：`inc`，`dec`和`set`\n\n量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。\n\n\n\n```\nLAST.set(time.time())\nPromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。\n```\n\n请求进来inc ,结束des 计算请求数\n\n\n\n**摘要**\n\n摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。\n\n```\nhello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。\n\nhello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。\n\n如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：\nrate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）\n```\n\n\n\n**直方图**\n\n直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。\n\n直方图指标还包括`_sum`和`_count`指标，它们的工作原理与摘要指标完全相同。\n\n摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。\n\n在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。\n\n\n\n默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。\n\n\n\n\n\nSummary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。\n\n同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0<= 分位数Quantiles <= 1.0。\n\n不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。\n\n\n\n\n\n**标签**\n\n对于HTTP状态代码，而不是`code~=\"4..\"`捕获401s，404s，405s等，您可以将它们组合为标签值`4xx`并使用相等匹配器`code=\"4xx\"`。\n\n\n\n**聚合运算符**\n\n```\nsum without()(node_filesystem_size_bytes)\nsum by(job, instance, device)(node_filesystem_size_bytes)\nsum without(fstype, mountpoint, device)(node_filesystem_size_bytes)\ncount without(device)(node_disk_read_bytes_total)\navg without(cpu)(rate(node_cpu_seconds_total[5m]))\n等于\n  sum without(cpu)(rate(node_cpu_seconds_total[5m]))\n/\n  count without(cpu)(rate(node_cpu_seconds_total[5m]))\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\n\ntopk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)\n分位数\nquantile without(cpu)(0.9, rate(node_cpu_seconds_total{mode=\"system\"}[5m]))\n```\n\n\n\n","source":"_posts/prometheus.md","raw":"---\ntitle: \"Prometheus入门\"\ndescription: \"\"\ndate: 2019-02-01 19:46:10\ntags: [prometheus,监控]\ncomments: false\nshare: true\n---\n\n### 数据模型\n\n**时序索引 ** 名称+标签\n\n**时序样本**  float64 值\n\n**格式**: \n\n```\n<metric name>{<label name>=<label value>, ...}\n```\n\nPrometheus 时序数据分为 [Counter](https://prometheus.io/docs/concepts/metric_types/#counter), [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge), [Histogram](https://prometheus.io/docs/concepts/metric_types/#histogram), [Summary](https://prometheus.io/docs/concepts/metric_types/#summary) 四种类型。\n\n```\nmetric_name [\n  \"{\" label_name \"=\" `\"` label_value `\"` { \",\" label_name \"=\" `\"` label_value `\"` } [ \",\" ] \"}\"\n] value [ timestamp ]\n```\n\n\n\ncontab 每天凌晨清空\n\n统计：下单总数、成功支付总数\n\n\n\n每秒总数 counter\n\n**Counter**\n\n```\n# 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -\n# HELP sample_http_requests_total The total number of HTTP requests.\n# TYPE sample_http_requests_total counter\nsample_http_requests_total{method=\"post\",code=\"200\"} 1027 1568018567000\nsample_http_requests_total{method=\"post\",code=\"400\"}    3 1568018567000\nidelta(sample_http_requests_total[1m]) 获取和一分钟前的差距\n```\n\n\n\n**Gauge**\n\nGauge不能解决并发问题\n\n\n\n\n\n**向量**\n\n一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：\n\n![img](https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp)\n\n我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。\n\n\n\n时间戳根据时区不同，会转换成不同的日期时间.\n\n\n\n**PromQL**\n\n```\n#CPU 个数\ncount(count(node_cpu_seconds_total{instance=\"172.16.101.209:9100\",mode=\"system\"}) by (cpu))\n#内存使用率\n(1 - (node_memory_MemAvailable_bytes{instance=~\"$node\"} / (node_memory_MemTotal_bytes{instance=~\"$node\"})))* 100\n#cpu空闲率\navg(rate(node_cpu_seconds_total{mode=\"idle\"}[2m])) by (instance)\n#offset25 一分钟前后值差异\ndelta(sample_http_requests_total{code=\"200\"} [1m] offset 25m ) \n\ngauge\nsum without(device, fstype, mountpoint)(node_filesystem_size_bytes)\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\navg without(instance, job)(process_open_fds)\n\ncounter\n#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值\nrate(node_network_receive_bytes_total[5m])\nThe output of rate is a gauge, so the same aggregations apply as for gauges.\nsum without(device)(rate(node_network_receive_bytes_total[5m]))\n\n//通过rate()函数获取HTTP请求量的增长率\nrate(http_requests_total[5m])\n//查询当前系统中，访问量前10的HTTP地址\ntopk(10, http_requests_total)\n\ncount without(instance)(process_open_fds > 10)\n```\n\n\n\n**CPU 参数**\n\n```\ntype就是CPU的不同状态值\nidle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal\n其中idle表示空闲，user表示用户使用\n```\n\n\n\n**prometheus rules**\n\n```\ngroups:\n- name: container-restart\n  rules:\n  - alert: Containers Restarts (Last 30 Minutes)\n    expr: |\n      delta(kube_pod_container_status_restarts_total{}[30m])>0  \n    for: 5m\n    labels:\n      severity: warning\n      team: DevOps\n    annotations:\n      summary: \"Instance {{ $labels.instance }} down\"\n      description: \"{{$labels.namespace}}/{{$labels.pod}} has many containers restarts in last 30 minutes\"\n```\n\n\n\n**alertManager**\n\n```\nglobal:\n  smtp_smarthost: 'smtp.qq.com:465'\n  smtp_from: '532499602@qq.com'\n  smtp_auth_username: 'weihaozhe@nicetuan.net'\n  smtp_auth_password: '745632Bn123'\n  smtp_require_tls: false\nroute:\n  group_by: ['alertname']\n  group_wait: 1m\n  group_interval: 10m\n  repeat_interval: 10m\n  receiver: default-receiver\nreceivers:\n- name: 'default-receiver'\n  email_configs:\n  - to: 'air_zhe@163.com'\n\n```\n\n**configMap reload**\n\n```\nhttps://github.com/jimmidyson/configmap-reload/tree/v0.2.2\n```\n\n\n一台Prometheus服务器每秒可以摄取数百万个样本.\n\n\nPrometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。\n\n\n\n官方对非官方\n不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。\n作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。\n\n\n\n存储\n\n建议使用SSD，但并非严格要求。\n\n\n\n计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是`rate`函数的作用。该`rate`函数计算计数器每秒增加的速度。将表达式调整为 **rate(prometheus_tsdb_head_samples_appended_total[1m])**，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本\n\n\n\n量具有三种主要方法 使用：`inc`，`dec`和`set`\n\n量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。\n\n\n\n```\nLAST.set(time.time())\nPromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。\n```\n\n请求进来inc ,结束des 计算请求数\n\n\n\n**摘要**\n\n摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。\n\n```\nhello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。\n\nhello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。\n\n如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：\nrate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）\n```\n\n\n\n**直方图**\n\n直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。\n\n直方图指标还包括`_sum`和`_count`指标，它们的工作原理与摘要指标完全相同。\n\n摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。\n\n在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。\n\n\n\n默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。\n\n\n\n\n\nSummary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。\n\n同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0<= 分位数Quantiles <= 1.0。\n\n不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。\n\n\n\n\n\n**标签**\n\n对于HTTP状态代码，而不是`code~=\"4..\"`捕获401s，404s，405s等，您可以将它们组合为标签值`4xx`并使用相等匹配器`code=\"4xx\"`。\n\n\n\n**聚合运算符**\n\n```\nsum without()(node_filesystem_size_bytes)\nsum by(job, instance, device)(node_filesystem_size_bytes)\nsum without(fstype, mountpoint, device)(node_filesystem_size_bytes)\ncount without(device)(node_disk_read_bytes_total)\navg without(cpu)(rate(node_cpu_seconds_total[5m]))\n等于\n  sum without(cpu)(rate(node_cpu_seconds_total[5m]))\n/\n  count without(cpu)(rate(node_cpu_seconds_total[5m]))\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\n\ntopk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)\n分位数\nquantile without(cpu)(0.9, rate(node_cpu_seconds_total{mode=\"system\"}[5m]))\n```\n\n\n\n","slug":"prometheus","published":1,"updated":"2019-11-14T03:33:28.579Z","layout":"post","photos":[],"link":"","_id":"ck53jqswe00101sl9tr9aw8mr","content":"<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p><strong>时序索引 </strong> 名称+标签</p>\n<p><strong>时序样本</strong>  float64 值</p>\n<p><strong>格式</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>\n<p>Prometheus 时序数据分为 <a href=\"https://prometheus.io/docs/concepts/metric_types/#counter\" target=\"_blank\" rel=\"noopener\">Counter</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#gauge\" target=\"_blank\" rel=\"noopener\">Gauge</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#histogram\" target=\"_blank\" rel=\"noopener\">Histogram</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#summary\" target=\"_blank\" rel=\"noopener\">Summary</a> 四种类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metric_name [</span><br><span class=\"line\">  &quot;&#123;&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#123; &quot;,&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#125; [ &quot;,&quot; ] &quot;&#125;&quot;</span><br><span class=\"line\">] value [ timestamp ]</span><br></pre></td></tr></table></figure>\n<p>contab 每天凌晨清空</p>\n<p>统计：下单总数、成功支付总数</p>\n<p>每秒总数 counter</p>\n<p><strong>Counter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -</span><br><span class=\"line\"># HELP sample_http_requests_total The total number of HTTP requests.</span><br><span class=\"line\"># TYPE sample_http_requests_total counter</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;200&quot;&#125; 1027 1568018567000</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;400&quot;&#125;    3 1568018567000</span><br><span class=\"line\">idelta(sample_http_requests_total[1m]) 获取和一分钟前的差距</span><br></pre></td></tr></table></figure>\n<p><strong>Gauge</strong></p>\n<p>Gauge不能解决并发问题</p>\n<p><strong>向量</strong></p>\n<p>一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp\" alt=\"img\"></p>\n<p>我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。</p>\n<p>时间戳根据时区不同，会转换成不同的日期时间.</p>\n<p><strong>PromQL</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#CPU 个数</span><br><span class=\"line\">count(count(node_cpu_seconds_total&#123;instance=&quot;172.16.101.209:9100&quot;,mode=&quot;system&quot;&#125;) by (cpu))</span><br><span class=\"line\">#内存使用率</span><br><span class=\"line\">(1 - (node_memory_MemAvailable_bytes&#123;instance=~&quot;$node&quot;&#125; / (node_memory_MemTotal_bytes&#123;instance=~&quot;$node&quot;&#125;)))* 100</span><br><span class=\"line\">#cpu空闲率</span><br><span class=\"line\">avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) by (instance)</span><br><span class=\"line\">#offset25 一分钟前后值差异</span><br><span class=\"line\">delta(sample_http_requests_total&#123;code=&quot;200&quot;&#125; [1m] offset 25m ) </span><br><span class=\"line\"></span><br><span class=\"line\">gauge</span><br><span class=\"line\">sum without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">avg without(instance, job)(process_open_fds)</span><br><span class=\"line\"></span><br><span class=\"line\">counter</span><br><span class=\"line\">#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值</span><br><span class=\"line\">rate(node_network_receive_bytes_total[5m])</span><br><span class=\"line\">The output of rate is a gauge, so the same aggregations apply as for gauges.</span><br><span class=\"line\">sum without(device)(rate(node_network_receive_bytes_total[5m]))</span><br><span class=\"line\"></span><br><span class=\"line\">//通过rate()函数获取HTTP请求量的增长率</span><br><span class=\"line\">rate(http_requests_total[5m])</span><br><span class=\"line\">//查询当前系统中，访问量前10的HTTP地址</span><br><span class=\"line\">topk(10, http_requests_total)</span><br><span class=\"line\"></span><br><span class=\"line\">count without(instance)(process_open_fds &gt; 10)</span><br></pre></td></tr></table></figure>\n<p><strong>CPU 参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type就是CPU的不同状态值</span><br><span class=\"line\">idle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal</span><br><span class=\"line\">其中idle表示空闲，user表示用户使用</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus rules</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups:</span><br><span class=\"line\">- name: container-restart</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: Containers Restarts (Last 30 Minutes)</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      delta(kube_pod_container_status_restarts_total&#123;&#125;[30m])&gt;0  </span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: warning</span><br><span class=\"line\">      team: DevOps</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.namespace&#125;&#125;/&#123;&#123;$labels.pod&#125;&#125; has many containers restarts in last 30 minutes&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>alertManager</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  smtp_smarthost: &apos;smtp.qq.com:465&apos;</span><br><span class=\"line\">  smtp_from: &apos;532499602@qq.com&apos;</span><br><span class=\"line\">  smtp_auth_username: &apos;weihaozhe@nicetuan.net&apos;</span><br><span class=\"line\">  smtp_auth_password: &apos;745632Bn123&apos;</span><br><span class=\"line\">  smtp_require_tls: false</span><br><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&apos;alertname&apos;]</span><br><span class=\"line\">  group_wait: 1m</span><br><span class=\"line\">  group_interval: 10m</span><br><span class=\"line\">  repeat_interval: 10m</span><br><span class=\"line\">  receiver: default-receiver</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &apos;default-receiver&apos;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &apos;air_zhe@163.com&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>configMap reload</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/jimmidyson/configmap-reload/tree/v0.2.2</span><br></pre></td></tr></table></figure>\n<p>一台Prometheus服务器每秒可以摄取数百万个样本.</p>\n<p>Prometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。</p>\n<p>官方对非官方<br>不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。<br>作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。</p>\n<p>存储</p>\n<p>建议使用SSD，但并非严格要求。</p>\n<p>计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是<code>rate</code>函数的作用。该<code>rate</code>函数计算计数器每秒增加的速度。将表达式调整为 <strong>rate(prometheus_tsdb_head_samples_appended_total[1m])</strong>，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本</p>\n<p>量具有三种主要方法 使用：<code>inc</code>，<code>dec</code>和<code>set</code></p>\n<p>量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LAST.set(time.time())</span><br><span class=\"line\">PromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。</span><br></pre></td></tr></table></figure>\n<p>请求进来inc ,结束des 计算请求数</p>\n<p><strong>摘要</strong></p>\n<p>摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。</span><br><span class=\"line\"></span><br><span class=\"line\">hello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。</span><br><span class=\"line\"></span><br><span class=\"line\">如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：</span><br><span class=\"line\">rate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）</span><br></pre></td></tr></table></figure>\n<p><strong>直方图</strong></p>\n<p>直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。</p>\n<p>直方图指标还包括<code>_sum</code>和<code>_count</code>指标，它们的工作原理与摘要指标完全相同。</p>\n<p>摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。</p>\n<p>在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。</p>\n<p>默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。</p>\n<p>Summary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。</p>\n<p>同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0&lt;= 分位数Quantiles &lt;= 1.0。</p>\n<p>不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。</p>\n<p><strong>标签</strong></p>\n<p>对于HTTP状态代码，而不是<code>code~=&quot;4..&quot;</code>捕获401s，404s，405s等，您可以将它们组合为标签值<code>4xx</code>并使用相等匹配器<code>code=&quot;4xx&quot;</code>。</p>\n<p><strong>聚合运算符</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum without()(node_filesystem_size_bytes)</span><br><span class=\"line\">sum by(job, instance, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">sum without(fstype, mountpoint, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">count without(device)(node_disk_read_bytes_total)</span><br><span class=\"line\">avg without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">等于</span><br><span class=\"line\">  sum without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">/</span><br><span class=\"line\">  count without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">topk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)</span><br><span class=\"line\">分位数</span><br><span class=\"line\">quantile without(cpu)(0.9, rate(node_cpu_seconds_total&#123;mode=&quot;system&quot;&#125;[5m]))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p><strong>时序索引 </strong> 名称+标签</p>\n<p><strong>时序样本</strong>  float64 值</p>\n<p><strong>格式</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>\n<p>Prometheus 时序数据分为 <a href=\"https://prometheus.io/docs/concepts/metric_types/#counter\" target=\"_blank\" rel=\"noopener\">Counter</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#gauge\" target=\"_blank\" rel=\"noopener\">Gauge</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#histogram\" target=\"_blank\" rel=\"noopener\">Histogram</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#summary\" target=\"_blank\" rel=\"noopener\">Summary</a> 四种类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metric_name [</span><br><span class=\"line\">  &quot;&#123;&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#123; &quot;,&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#125; [ &quot;,&quot; ] &quot;&#125;&quot;</span><br><span class=\"line\">] value [ timestamp ]</span><br></pre></td></tr></table></figure>\n<p>contab 每天凌晨清空</p>\n<p>统计：下单总数、成功支付总数</p>\n<p>每秒总数 counter</p>\n<p><strong>Counter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -</span><br><span class=\"line\"># HELP sample_http_requests_total The total number of HTTP requests.</span><br><span class=\"line\"># TYPE sample_http_requests_total counter</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;200&quot;&#125; 1027 1568018567000</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;400&quot;&#125;    3 1568018567000</span><br><span class=\"line\">idelta(sample_http_requests_total[1m]) 获取和一分钟前的差距</span><br></pre></td></tr></table></figure>\n<p><strong>Gauge</strong></p>\n<p>Gauge不能解决并发问题</p>\n<p><strong>向量</strong></p>\n<p>一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp\" alt=\"img\"></p>\n<p>我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。</p>\n<p>时间戳根据时区不同，会转换成不同的日期时间.</p>\n<p><strong>PromQL</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#CPU 个数</span><br><span class=\"line\">count(count(node_cpu_seconds_total&#123;instance=&quot;172.16.101.209:9100&quot;,mode=&quot;system&quot;&#125;) by (cpu))</span><br><span class=\"line\">#内存使用率</span><br><span class=\"line\">(1 - (node_memory_MemAvailable_bytes&#123;instance=~&quot;$node&quot;&#125; / (node_memory_MemTotal_bytes&#123;instance=~&quot;$node&quot;&#125;)))* 100</span><br><span class=\"line\">#cpu空闲率</span><br><span class=\"line\">avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) by (instance)</span><br><span class=\"line\">#offset25 一分钟前后值差异</span><br><span class=\"line\">delta(sample_http_requests_total&#123;code=&quot;200&quot;&#125; [1m] offset 25m ) </span><br><span class=\"line\"></span><br><span class=\"line\">gauge</span><br><span class=\"line\">sum without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">avg without(instance, job)(process_open_fds)</span><br><span class=\"line\"></span><br><span class=\"line\">counter</span><br><span class=\"line\">#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值</span><br><span class=\"line\">rate(node_network_receive_bytes_total[5m])</span><br><span class=\"line\">The output of rate is a gauge, so the same aggregations apply as for gauges.</span><br><span class=\"line\">sum without(device)(rate(node_network_receive_bytes_total[5m]))</span><br><span class=\"line\"></span><br><span class=\"line\">//通过rate()函数获取HTTP请求量的增长率</span><br><span class=\"line\">rate(http_requests_total[5m])</span><br><span class=\"line\">//查询当前系统中，访问量前10的HTTP地址</span><br><span class=\"line\">topk(10, http_requests_total)</span><br><span class=\"line\"></span><br><span class=\"line\">count without(instance)(process_open_fds &gt; 10)</span><br></pre></td></tr></table></figure>\n<p><strong>CPU 参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type就是CPU的不同状态值</span><br><span class=\"line\">idle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal</span><br><span class=\"line\">其中idle表示空闲，user表示用户使用</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus rules</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups:</span><br><span class=\"line\">- name: container-restart</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: Containers Restarts (Last 30 Minutes)</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      delta(kube_pod_container_status_restarts_total&#123;&#125;[30m])&gt;0  </span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: warning</span><br><span class=\"line\">      team: DevOps</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.namespace&#125;&#125;/&#123;&#123;$labels.pod&#125;&#125; has many containers restarts in last 30 minutes&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>alertManager</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  smtp_smarthost: &apos;smtp.qq.com:465&apos;</span><br><span class=\"line\">  smtp_from: &apos;532499602@qq.com&apos;</span><br><span class=\"line\">  smtp_auth_username: &apos;weihaozhe@nicetuan.net&apos;</span><br><span class=\"line\">  smtp_auth_password: &apos;745632Bn123&apos;</span><br><span class=\"line\">  smtp_require_tls: false</span><br><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&apos;alertname&apos;]</span><br><span class=\"line\">  group_wait: 1m</span><br><span class=\"line\">  group_interval: 10m</span><br><span class=\"line\">  repeat_interval: 10m</span><br><span class=\"line\">  receiver: default-receiver</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &apos;default-receiver&apos;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &apos;air_zhe@163.com&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>configMap reload</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/jimmidyson/configmap-reload/tree/v0.2.2</span><br></pre></td></tr></table></figure>\n<p>一台Prometheus服务器每秒可以摄取数百万个样本.</p>\n<p>Prometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。</p>\n<p>官方对非官方<br>不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。<br>作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。</p>\n<p>存储</p>\n<p>建议使用SSD，但并非严格要求。</p>\n<p>计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是<code>rate</code>函数的作用。该<code>rate</code>函数计算计数器每秒增加的速度。将表达式调整为 <strong>rate(prometheus_tsdb_head_samples_appended_total[1m])</strong>，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本</p>\n<p>量具有三种主要方法 使用：<code>inc</code>，<code>dec</code>和<code>set</code></p>\n<p>量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LAST.set(time.time())</span><br><span class=\"line\">PromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。</span><br></pre></td></tr></table></figure>\n<p>请求进来inc ,结束des 计算请求数</p>\n<p><strong>摘要</strong></p>\n<p>摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。</span><br><span class=\"line\"></span><br><span class=\"line\">hello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。</span><br><span class=\"line\"></span><br><span class=\"line\">如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：</span><br><span class=\"line\">rate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）</span><br></pre></td></tr></table></figure>\n<p><strong>直方图</strong></p>\n<p>直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。</p>\n<p>直方图指标还包括<code>_sum</code>和<code>_count</code>指标，它们的工作原理与摘要指标完全相同。</p>\n<p>摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。</p>\n<p>在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。</p>\n<p>默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。</p>\n<p>Summary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。</p>\n<p>同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0&lt;= 分位数Quantiles &lt;= 1.0。</p>\n<p>不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。</p>\n<p><strong>标签</strong></p>\n<p>对于HTTP状态代码，而不是<code>code~=&quot;4..&quot;</code>捕获401s，404s，405s等，您可以将它们组合为标签值<code>4xx</code>并使用相等匹配器<code>code=&quot;4xx&quot;</code>。</p>\n<p><strong>聚合运算符</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum without()(node_filesystem_size_bytes)</span><br><span class=\"line\">sum by(job, instance, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">sum without(fstype, mountpoint, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">count without(device)(node_disk_read_bytes_total)</span><br><span class=\"line\">avg without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">等于</span><br><span class=\"line\">  sum without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">/</span><br><span class=\"line\">  count without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">topk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)</span><br><span class=\"line\">分位数</span><br><span class=\"line\">quantile without(cpu)(0.9, rate(node_cpu_seconds_total&#123;mode=&quot;system&quot;&#125;[5m]))</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Linux高性能服务器编程","description":"","date":"2019-02-27T00:00:00.000Z","comments":0,"share":true,"_content":"## Linux高性能服务器编程\n\n网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。\n\n封装和分用\n\n\n经过TCP封装后的数据称为TCP报文段(TCP message segment)\n\nUDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。\n\n经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。\n\n经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。\n\n帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。\n\n以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。\n\n因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。\n\nTCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用\n\n帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。\n\narp -a  查看 arp 缓存\n\n即使是同一台机器上的两个进程通信，也要考虑字节序的问题\n\ninet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反\n\npipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1\n\n自linux2.6.11内核起，管道容量的大小默认是 65536 字节\n\nsendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。\n\n大部分后台进程都在 /var/log 目录下用于自己的目录日志\n\nlsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符\n\n\n字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。\n\n当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。\n\n当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。\n\n发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。\n\nTCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。\n\n**TCP头部结构如下：**\n\n16位源端口号、16位目的端口号\n\n32位序号\n\n32位确认号\n\n4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小\n\n16位校验和、16位紧急指针\n\n选项，最多40字节\n\n16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\n\n我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s\n\n服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。\n当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。\n\n**扩大因子**\n\nTCP 紧急数据成为带外数据，仅支持一个字节。\n\n在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。\n\n由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 \n\n带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。\n\n发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。\n\nftp命令用使带 外 数据 来中断一个件文的输传。\n\n16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。\n","source":"_posts/tcp.md","raw":"---\nlayout: post\ntitle: \"Linux高性能服务器编程\"\ndescription: \"\"\ndate: 2019-02-27\ntags: [linux,tcp/ip]\ncomments: false\nshare: true\n---\n## Linux高性能服务器编程\n\n网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。\n\n封装和分用\n\n\n经过TCP封装后的数据称为TCP报文段(TCP message segment)\n\nUDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。\n\n经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。\n\n经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。\n\n帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。\n\n以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。\n\n因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。\n\nTCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用\n\n帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。\n\narp -a  查看 arp 缓存\n\n即使是同一台机器上的两个进程通信，也要考虑字节序的问题\n\ninet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反\n\npipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1\n\n自linux2.6.11内核起，管道容量的大小默认是 65536 字节\n\nsendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。\n\n大部分后台进程都在 /var/log 目录下用于自己的目录日志\n\nlsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符\n\n\n字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。\n\n当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。\n\n当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。\n\n发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。\n\nTCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。\n\n**TCP头部结构如下：**\n\n16位源端口号、16位目的端口号\n\n32位序号\n\n32位确认号\n\n4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小\n\n16位校验和、16位紧急指针\n\n选项，最多40字节\n\n16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\n\n我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s\n\n服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。\n当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。\n\n**扩大因子**\n\nTCP 紧急数据成为带外数据，仅支持一个字节。\n\n在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。\n\n由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 \n\n带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。\n\n发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。\n\nftp命令用使带 外 数据 来中断一个件文的输传。\n\n16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。\n","slug":"tcp","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ck53jqswg00111sl9k2z009zt","content":"<h2 id=\"Linux高性能服务器编程\"><a href=\"#Linux高性能服务器编程\" class=\"headerlink\" title=\"Linux高性能服务器编程\"></a>Linux高性能服务器编程</h2><p>网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。</p>\n<p>封装和分用</p>\n<p>经过TCP封装后的数据称为TCP报文段(TCP message segment)</p>\n<p>UDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。</p>\n<p>经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。</p>\n<p>经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。</p>\n<p>帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。</p>\n<p>以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。</p>\n<p>因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。</p>\n<p>TCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用</p>\n<p>帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。</p>\n<p>arp -a  查看 arp 缓存</p>\n<p>即使是同一台机器上的两个进程通信，也要考虑字节序的问题</p>\n<p>inet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反</p>\n<p>pipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1</p>\n<p>自linux2.6.11内核起，管道容量的大小默认是 65536 字节</p>\n<p>sendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。</p>\n<p>大部分后台进程都在 /var/log 目录下用于自己的目录日志</p>\n<p>lsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符</p>\n<p>字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。</p>\n<p>当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。</p>\n<p>当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。</p>\n<p>发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。</p>\n<p>TCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。</p>\n<p><strong>TCP头部结构如下：</strong></p>\n<p>16位源端口号、16位目的端口号</p>\n<p>32位序号</p>\n<p>32位确认号</p>\n<p>4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小</p>\n<p>16位校验和、16位紧急指针</p>\n<p>选项，最多40字节</p>\n<p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>\n<p>我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s</p>\n<p>服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。<br>当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。</p>\n<p><strong>扩大因子</strong></p>\n<p>TCP 紧急数据成为带外数据，仅支持一个字节。</p>\n<p>在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。</p>\n<p>由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 </p>\n<p>带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。</p>\n<p>发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。</p>\n<p>ftp命令用使带 外 数据 来中断一个件文的输传。</p>\n<p>16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux高性能服务器编程\"><a href=\"#Linux高性能服务器编程\" class=\"headerlink\" title=\"Linux高性能服务器编程\"></a>Linux高性能服务器编程</h2><p>网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。</p>\n<p>封装和分用</p>\n<p>经过TCP封装后的数据称为TCP报文段(TCP message segment)</p>\n<p>UDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。</p>\n<p>经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。</p>\n<p>经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。</p>\n<p>帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。</p>\n<p>以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。</p>\n<p>因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。</p>\n<p>TCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用</p>\n<p>帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。</p>\n<p>arp -a  查看 arp 缓存</p>\n<p>即使是同一台机器上的两个进程通信，也要考虑字节序的问题</p>\n<p>inet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反</p>\n<p>pipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1</p>\n<p>自linux2.6.11内核起，管道容量的大小默认是 65536 字节</p>\n<p>sendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。</p>\n<p>大部分后台进程都在 /var/log 目录下用于自己的目录日志</p>\n<p>lsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符</p>\n<p>字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。</p>\n<p>当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。</p>\n<p>当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。</p>\n<p>发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。</p>\n<p>TCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。</p>\n<p><strong>TCP头部结构如下：</strong></p>\n<p>16位源端口号、16位目的端口号</p>\n<p>32位序号</p>\n<p>32位确认号</p>\n<p>4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小</p>\n<p>16位校验和、16位紧急指针</p>\n<p>选项，最多40字节</p>\n<p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>\n<p>我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s</p>\n<p>服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。<br>当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。</p>\n<p><strong>扩大因子</strong></p>\n<p>TCP 紧急数据成为带外数据，仅支持一个字节。</p>\n<p>在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。</p>\n<p>由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 </p>\n<p>带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。</p>\n<p>发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。</p>\n<p>ftp命令用使带 外 数据 来中断一个件文的输传。</p>\n<p>16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck53jqsut00001sl90difb5fw","tag_id":"ck53jqsv400021sl9apnp5955","_id":"ck53jqsvg00071sl91v12zu98"},{"post_id":"ck53jqsv100011sl9vxerfyus","tag_id":"ck53jqsve00061sl9ei1xebcs","_id":"ck53jqsvt000f1sl9nqm4dm8b"},{"post_id":"ck53jqsv100011sl9vxerfyus","tag_id":"ck53jqsvl000a1sl99vmtzjoj","_id":"ck53jqsvv000h1sl9dgcso04c"},{"post_id":"ck53jqsv800031sl9n4n6tmww","tag_id":"ck53jqsvq000d1sl985r9gtdx","_id":"ck53jqsw2000n1sl9i66fatci"},{"post_id":"ck53jqsv800031sl9n4n6tmww","tag_id":"ck53jqsvw000i1sl9ipx251ks","_id":"ck53jqsw4000p1sl91tsh44o0"},{"post_id":"ck53jqsva00041sl9962fv2lm","tag_id":"ck53jqsw1000m1sl9lflhu7ra","_id":"ck53jqswc000w1sl9z60zp6yz"},{"post_id":"ck53jqsva00041sl9962fv2lm","tag_id":"ck53jqsw6000r1sl9w0yrdy7f","_id":"ck53jqswe000y1sl9ynxgjsu5"},{"post_id":"ck53jqsvd00051sl9rnll3yex","tag_id":"ck53jqsw9000u1sl9y1bscdpc","_id":"ck53jqswi00131sl9q9ho2sxl"},{"post_id":"ck53jqsvd00051sl9rnll3yex","tag_id":"ck53jqswe000z1sl9bnrq5leb","_id":"ck53jqswi00141sl94bxas7f1"},{"post_id":"ck53jqsvg00081sl9xxq4y0vx","tag_id":"ck53jqswi00121sl9uvb4g8qa","_id":"ck53jqswn00181sl97cq4k2fe"},{"post_id":"ck53jqsvg00081sl9xxq4y0vx","tag_id":"ck53jqswj00151sl95m79pcd9","_id":"ck53jqswo00191sl9hpax64gm"},{"post_id":"ck53jqsvg00081sl9xxq4y0vx","tag_id":"ck53jqswk00161sl9evtroun4","_id":"ck53jqswo001b1sl9dpobxb66"},{"post_id":"ck53jqsvj00091sl99wr0oc5g","tag_id":"ck53jqswi00121sl9uvb4g8qa","_id":"ck53jqswp001d1sl9kr2usue5"},{"post_id":"ck53jqsvj00091sl99wr0oc5g","tag_id":"ck53jqswe000z1sl9bnrq5leb","_id":"ck53jqswp001e1sl9z7t6htwe"},{"post_id":"ck53jqsvl000b1sl9dv4n59us","tag_id":"ck53jqswp001c1sl9pb2hx79z","_id":"ck53jqswr001i1sl9jzx25ew4"},{"post_id":"ck53jqsvl000b1sl9dv4n59us","tag_id":"ck53jqswp001f1sl9nwlpjtj3","_id":"ck53jqswr001j1sl9qvyfv7rx"},{"post_id":"ck53jqsvl000b1sl9dv4n59us","tag_id":"ck53jqswi00121sl9uvb4g8qa","_id":"ck53jqswr001l1sl9nzy53zyw"},{"post_id":"ck53jqsvn000c1sl9fbq7zt4b","tag_id":"ck53jqswq001h1sl9fy1d2kis","_id":"ck53jqsws001m1sl9gyigqpq8"},{"post_id":"ck53jqsvr000e1sl9a3sowucd","tag_id":"ck53jqswr001k1sl9zf6lkgng","_id":"ck53jqsws001p1sl99xww75pz"},{"post_id":"ck53jqsvr000e1sl9a3sowucd","tag_id":"ck53jqsws001n1sl9at2i7nto","_id":"ck53jqswt001q1sl9549gwkno"},{"post_id":"ck53jqsvu000g1sl9z9392o5z","tag_id":"ck53jqsws001o1sl912xdyqjs","_id":"ck53jqswv001u1sl941pvp31o"},{"post_id":"ck53jqsvu000g1sl9z9392o5z","tag_id":"ck53jqswe000z1sl9bnrq5leb","_id":"ck53jqswv001v1sl9x57ismeg"},{"post_id":"ck53jqsvu000g1sl9z9392o5z","tag_id":"ck53jqswt001s1sl90dzby1fr","_id":"ck53jqswv001x1sl9wq2n9rv7"},{"post_id":"ck53jqsvw000j1sl9jxvsc2wn","tag_id":"ck53jqsws001o1sl912xdyqjs","_id":"ck53jqswx00211sl9rx5pyu29"},{"post_id":"ck53jqsvw000j1sl9jxvsc2wn","tag_id":"ck53jqswv001w1sl9jwuklo5h","_id":"ck53jqswx00221sl9duawqy5v"},{"post_id":"ck53jqsvw000j1sl9jxvsc2wn","tag_id":"ck53jqswv001y1sl9jsq11ewp","_id":"ck53jqswy00241sl9b7iue2j2"},{"post_id":"ck53jqsvw000j1sl9jxvsc2wn","tag_id":"ck53jqsww001z1sl9zu2kynf8","_id":"ck53jqswy00251sl9tac8vmto"},{"post_id":"ck53jqsvy000k1sl9g0lce533","tag_id":"ck53jqswp001c1sl9pb2hx79z","_id":"ck53jqswy00271sl9ggxi3yr6"},{"post_id":"ck53jqsvy000k1sl9g0lce533","tag_id":"ck53jqswx00231sl91shh5qlw","_id":"ck53jqswz00281sl9ppycf7m7"},{"post_id":"ck53jqsw0000l1sl951vf1i6l","tag_id":"ck53jqswy00261sl9yxsuyevl","_id":"ck53jqsx0002c1sl9ssk18cey"},{"post_id":"ck53jqsw0000l1sl951vf1i6l","tag_id":"ck53jqsws001o1sl912xdyqjs","_id":"ck53jqsx0002d1sl9j3v0t3bv"},{"post_id":"ck53jqsw0000l1sl951vf1i6l","tag_id":"ck53jqswv001w1sl9jwuklo5h","_id":"ck53jqsx1002f1sl95v0ge45y"},{"post_id":"ck53jqsw2000o1sl9yw3ptg6r","tag_id":"ck53jqsws001o1sl912xdyqjs","_id":"ck53jqsx2002h1sl9q3eyeh21"},{"post_id":"ck53jqsw2000o1sl9yw3ptg6r","tag_id":"ck53jqswv001w1sl9jwuklo5h","_id":"ck53jqsx2002i1sl9ih94bqwt"},{"post_id":"ck53jqsw5000q1sl9wc5lrmjd","tag_id":"ck53jqsws001o1sl912xdyqjs","_id":"ck53jqsx3002l1sl9n7kfwcxi"},{"post_id":"ck53jqsw5000q1sl9wc5lrmjd","tag_id":"ck53jqsx2002j1sl9yjbloeh1","_id":"ck53jqsx3002m1sl980vju21h"},{"post_id":"ck53jqsw6000s1sl9pqdeiuh9","tag_id":"ck53jqswp001c1sl9pb2hx79z","_id":"ck53jqsx5002r1sl9qkn340e6"},{"post_id":"ck53jqsw6000s1sl9pqdeiuh9","tag_id":"ck53jqswp001f1sl9nwlpjtj3","_id":"ck53jqsx5002s1sl999uo7kkb"},{"post_id":"ck53jqsw6000s1sl9pqdeiuh9","tag_id":"ck53jqswi00121sl9uvb4g8qa","_id":"ck53jqsx5002u1sl9hlb9oc4x"},{"post_id":"ck53jqsw6000s1sl9pqdeiuh9","tag_id":"ck53jqsx4002p1sl9945uqvvw","_id":"ck53jqsx5002v1sl9v6f8um7n"},{"post_id":"ck53jqsw8000t1sl9tn5wlwr8","tag_id":"ck53jqsx4002q1sl93c1si6f7","_id":"ck53jqsx7002z1sl93o9pn62a"},{"post_id":"ck53jqsw8000t1sl9tn5wlwr8","tag_id":"ck53jqsx5002t1sl9g16kxkkl","_id":"ck53jqsx700301sl9tkti9ccd"},{"post_id":"ck53jqsw8000t1sl9tn5wlwr8","tag_id":"ck53jqsx6002w1sl9eb3aq4rq","_id":"ck53jqsx700321sl9zjc5a2y6"},{"post_id":"ck53jqsw8000t1sl9tn5wlwr8","tag_id":"ck53jqsx6002x1sl9my33tyax","_id":"ck53jqsx700331sl967ncinri"},{"post_id":"ck53jqswa000v1sl934guncjg","tag_id":"ck53jqsx6002y1sl969rtryy6","_id":"ck53jqsx900351sl96hvu5glx"},{"post_id":"ck53jqswa000v1sl934guncjg","tag_id":"ck53jqsx700311sl9ztrj7zzf","_id":"ck53jqsx900361sl9zh037hjk"},{"post_id":"ck53jqswc000x1sl99hqkmm73","tag_id":"ck53jqsx800341sl9qgxszvd5","_id":"ck53jqsxa00381sl9h5rmri71"},{"post_id":"ck53jqswe00101sl9tr9aw8mr","tag_id":"ck53jqswj00151sl95m79pcd9","_id":"ck53jqsxc003b1sl9hmoqaans"},{"post_id":"ck53jqswe00101sl9tr9aw8mr","tag_id":"ck53jqsxb00391sl9jl0dgj0i","_id":"ck53jqsxc003c1sl9ggiyjorv"},{"post_id":"ck53jqswg00111sl9k2z009zt","tag_id":"ck53jqsxb003a1sl9z735j6gn","_id":"ck53jqsxd003e1sl9y7a1st88"},{"post_id":"ck53jqswg00111sl9k2z009zt","tag_id":"ck53jqsxc003d1sl9lvkr4dmy","_id":"ck53jqsxd003f1sl9hfg6yl2h"}],"Tag":[{"name":"clickhouse","_id":"ck53jqsv400021sl9apnp5955"},{"name":"b树","_id":"ck53jqsve00061sl9ei1xebcs"},{"name":"数据结构","_id":"ck53jqsvl000a1sl99vmtzjoj"},{"name":"coredns","_id":"ck53jqsvq000d1sl985r9gtdx"},{"name":"etcd","_id":"ck53jqsvw000i1sl9ipx251ks"},{"name":"awk","_id":"ck53jqsw1000m1sl9lflhu7ra"},{"name":"csv","_id":"ck53jqsw6000r1sl9w0yrdy7f"},{"name":"gitrunner","_id":"ck53jqsw9000u1sl9y1bscdpc"},{"name":"helm","_id":"ck53jqswe000z1sl9bnrq5leb"},{"name":"grafana","_id":"ck53jqswi00121sl9uvb4g8qa"},{"name":"prometheus","_id":"ck53jqswj00151sl95m79pcd9"},{"name":"报警","_id":"ck53jqswk00161sl9evtroun4"},{"name":"loki","_id":"ck53jqswp001c1sl9pb2hx79z"},{"name":"promtal","_id":"ck53jqswp001f1sl9nwlpjtj3"},{"name":"hexo","_id":"ck53jqswq001h1sl9fy1d2kis"},{"name":"jenkins","_id":"ck53jqswr001k1sl9zf6lkgng"},{"name":"pipeline","_id":"ck53jqsws001n1sl9at2i7nto"},{"name":"k8s","_id":"ck53jqsws001o1sl912xdyqjs"},{"name":"charts","_id":"ck53jqswt001s1sl90dzby1fr"},{"name":"kubernetes","_id":"ck53jqswv001w1sl9jwuklo5h"},{"name":"kube-adm","_id":"ck53jqswv001y1sl9jsq11ewp"},{"name":"haproxy","_id":"ck53jqsww001z1sl9zu2kynf8"},{"name":"cassandra","_id":"ck53jqswx00231sl91shh5qlw"},{"name":"docker","_id":"ck53jqswy00261sl9yxsuyevl"},{"name":"microk8s","_id":"ck53jqsx2002j1sl9yjbloeh1"},{"name":"日志","_id":"ck53jqsx4002p1sl9945uqvvw"},{"name":"ldap","_id":"ck53jqsx4002q1sl93c1si6f7"},{"name":"openldap","_id":"ck53jqsx5002t1sl9g16kxkkl"},{"name":"gogs","_id":"ck53jqsx6002w1sl9eb3aq4rq"},{"name":"pbkdf2","_id":"ck53jqsx6002x1sl9my33tyax"},{"name":"nginx","_id":"ck53jqsx6002y1sl969rtryy6"},{"name":"openresty","_id":"ck53jqsx700311sl9ztrj7zzf"},{"name":"ubuntu","_id":"ck53jqsx800341sl9qgxszvd5"},{"name":"监控","_id":"ck53jqsxb00391sl9jl0dgj0i"},{"name":"linux","_id":"ck53jqsxb003a1sl9z735j6gn"},{"name":"tcp/ip","_id":"ck53jqsxc003d1sl9lvkr4dmy"}]}}
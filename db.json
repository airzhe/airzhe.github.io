{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/clickhouse/1.png","path":"img/clickhouse/1.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/6.png","path":"img/clickhouse/6.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/7.png","path":"img/clickhouse/7.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/5.png","path":"img/clickhouse/5.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/logo.png","path":"img/clickhouse/logo.png","modified":1,"renderable":0},{"_id":"source/img/clickhouse/4.png","path":"img/clickhouse/4.png","modified":1,"renderable":0},{"_id":"source/img/2020/flowchart.png","path":"img/2020/flowchart.png","modified":1,"renderable":0},{"_id":"source/img/docker/ws3.png","path":"img/docker/ws3.png","modified":1,"renderable":0},{"_id":"source/img/grafana/1.png","path":"img/grafana/1.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/3.png","path":"img/grafana-alerting/3.png","modified":1,"renderable":0},{"_id":"source/img/grafana/4.png","path":"img/grafana/4.png","modified":1,"renderable":0},{"_id":"source/img/grafana/5.png","path":"img/grafana/5.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/2.png","path":"img/grafana-alerting/2.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/6.png","path":"img/grafana-alerting/6.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/5.png","path":"img/grafana-alerting/5.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/4.png","path":"img/grafana-alerting/4.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/7.png","path":"img/grafana-alerting/7.png","modified":1,"renderable":0},{"_id":"source/img/k8s/4.png","path":"img/k8s/4.png","modified":1,"renderable":0},{"_id":"source/img/k8s/3.jpg","path":"img/k8s/3.jpg","modified":1,"renderable":0},{"_id":"source/img/loki/3.png","path":"img/loki/3.png","modified":1,"renderable":0},{"_id":"source/img/loki/logo.png","path":"img/loki/logo.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"source/img/docker/ws1.png","path":"img/docker/ws1.png","modified":1,"renderable":0},{"_id":"source/img/grafana/122.png","path":"img/grafana/122.png","modified":1,"renderable":0},{"_id":"source/img/grafana/11.png","path":"img/grafana/11.png","modified":1,"renderable":0},{"_id":"source/img/grafana/3.png","path":"img/grafana/3.png","modified":1,"renderable":0},{"_id":"source/img/grafana/2.png","path":"img/grafana/2.png","modified":1,"renderable":0},{"_id":"source/img/k8s/2.png","path":"img/k8s/2.png","modified":1,"renderable":0},{"_id":"source/img/k8s/6.png","path":"img/k8s/6.png","modified":1,"renderable":0},{"_id":"source/img/grafana-alerting/8.png","path":"img/grafana-alerting/8.png","modified":1,"renderable":0},{"_id":"source/img/k8s/1.png","path":"img/k8s/1.png","modified":1,"renderable":0},{"_id":"source/img/loki/2.png","path":"img/loki/2.png","modified":1,"renderable":0},{"_id":"source/img/docker/ws2.png","path":"img/docker/ws2.png","modified":1,"renderable":0},{"_id":"source/img/grafana/12.png","path":"img/grafana/12.png","modified":1,"renderable":0},{"_id":"source/img/k8s/5.svg","path":"img/k8s/5.svg","modified":1,"renderable":0},{"_id":"source/img/ubuntu/1.png","path":"img/ubuntu/1.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"source/img/grafana/2.bak.png","path":"img/grafana/2.bak.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/img/loki/1.png","path":"img/loki/1.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner_org.jpg","path":"css/images/banner_org.jpg","modified":1,"renderable":1},{"_id":"source/img/hexo/1.png","path":"img/hexo/1.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1573702408591},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1573702408591},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1573702408591},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1573702408591},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1573702408591},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1573702408591},{"_id":"source/_posts/angular-js.md","hash":"4c82133a6430593cf65d8f7bf54360eb0c6042cd","modified":1592465576977},{"_id":"source/_posts/awk.md","hash":"8388e5a0aebe4dbb862016f204931ceb7dd99387","modified":1579419820188},{"_id":"source/_posts/btree.md","hash":"20163b97ecca7688995fff29fa8b8c1a57b322ae","modified":1573702408579},{"_id":"source/_posts/clickhouse-ha.md","hash":"3257a12693179ff3279f909dfba9dc72e143f9a3","modified":1597823074760},{"_id":"source/_posts/clickhouse-3shard.md","hash":"ec7212640a139904d4f5297a1a8dfed63d7e0121","modified":1598414099013},{"_id":"source/_posts/core-dns.md","hash":"496f6e44284a39dea988a0d5a8e909b07ffb9cb3","modified":1573702408579},{"_id":"source/_posts/docker-web-shell-1.md","hash":"c64e4efa12230158d79acf8a7905885db07ec284","modified":1580701507052},{"_id":"source/_posts/gitrunner-helm-install.md","hash":"6510541adeb721a5ad8eff65cb595faa2f4e867b","modified":1608349509117},{"_id":"source/_posts/grafana-mysql-source.md","hash":"d9711c46097eae328b5bfe9abd3a16c29ce16326","modified":1575276612601},{"_id":"source/_posts/clickhouse.md","hash":"1539dbefe10c1f94ce4b18644d0fbbf85b22ffab","modified":1598339958060},{"_id":"source/_posts/docker-web-shell-2.md","hash":"ea3f9906340192e4cdac720f96336fc0fe27713f","modified":1580706106950},{"_id":"source/_posts/grafana-variables.md","hash":"bc94b22009fb78926a59c1d8ecf23aac88715a99","modified":1575277210803},{"_id":"source/_posts/go-mysql-elasticsearch.md","hash":"57d509f27f15bb21b2db5d97974c8cb3a9e25806","modified":1608781078098},{"_id":"source/_posts/grafana-alerting.md","hash":"0f464c06b53f93aec82d623946c6fc100d6ec761","modified":1603275756361},{"_id":"source/_posts/helm.md","hash":"453b0d8b36c719c6b3fae96112e63e56a5ca172a","modified":1603529039367},{"_id":"source/_posts/hexo.md","hash":"a334047af3470b9f667e9d0076370edc70fa77bf","modified":1594814340433},{"_id":"source/_posts/jenkins-introduction.md","hash":"464df297713d0f726a33d7e2a1529e7553c73abf","modified":1573702408579},{"_id":"source/_posts/jenkins-pipeline.md","hash":"3ab6d8fe7046171ea309f630fb3c14087393d628","modified":1604632039265},{"_id":"source/_posts/k3s.md","hash":"1a3ddc4ff97482a30232f79c5b4f41fa22e84ef0","modified":1602667205101},{"_id":"source/_posts/k8s-migration-1.md","hash":"f77c8e5b37e5b47c34d5a7ea6cc4ef0bf9cd74ee","modified":1573702942170},{"_id":"source/_posts/k8s-notes.md","hash":"ff9a2018f39897a4225a639ddd892d67bd1f3c92","modified":1594781272827},{"_id":"source/_posts/ldap-pbkdf2.md","hash":"4b9d4cb66f20ba841014205d0e226d9e8030e3a8","modified":1579419872609},{"_id":"source/_posts/microk8s.md","hash":"8f039a7e2671eaf276cd924b3a1ab932f5ee729d","modified":1581666210534},{"_id":"source/_posts/ldap.md","hash":"57b15f03f15f56874a820eb66b9a0061f8a366f2","modified":1602656726666},{"_id":"source/_posts/loki.md","hash":"31e665a9fa59305412cbbd93c349cde381eeaf06","modified":1606480381429},{"_id":"source/_posts/k8s-introduction.md","hash":"b733e25731b2e663929fb43fc0caa46c1583fd16","modified":1573702948626},{"_id":"source/_posts/nginx.md","hash":"a5d5f40a5a02298032125aa8f32f7e84cd5da6d4","modified":1573702408579},{"_id":"source/_posts/shazam.md","hash":"84e29d212dfff1502c6216353e0c46f41304b2a5","modified":1595904144059},{"_id":"source/_posts/tcp.md","hash":"d1cb619b737c280749db9be87ff3d9e65f9f8350","modified":1573702408579},{"_id":"source/_posts/shazam_source_code.md","hash":"838b4af15b8f5d875a977c065b94b872fdb538fd","modified":1597999241973},{"_id":"source/_posts/ubuntu-install.md","hash":"5c3057d8406240d2e47be7597e8fff069325be4d","modified":1596526510985},{"_id":"source/_posts/xorm_traceid.md","hash":"7379afb1a459115a9c612fad84e4d7f952d9291b","modified":1586431038365},{"_id":"source/_posts/vue.md","hash":"e50bca22c92e88dd5d82d2df0788b638cb8f7986","modified":1602647188557},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1573702408591},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1573702408591},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1573702408591},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1573702408591},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1573702408591},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1573702408591},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1573702408591},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573702408591},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573702408591},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1573702408591},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1573702408591},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573702408591},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1573702408591},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573702408591},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573702408591},{"_id":"source/_posts/prometheus.md","hash":"97807ea7c6abfb2cd744269d653f33719ed49c0d","modified":1609237386973},{"_id":"source/img/clickhouse/1.png","hash":"f76cf8847713817e835856a3f824853d011b3b99","modified":1576478420844},{"_id":"source/img/clickhouse/6.png","hash":"c0cee8a66c3b8afe13edc66ff00fb48e152e2abf","modified":1598411199037},{"_id":"source/img/clickhouse/7.png","hash":"fe69af6ce4dc2eebea6c2e21e54a2e80114b4b0d","modified":1598410779878},{"_id":"source/img/clickhouse/5.png","hash":"35498ac9c772019db55711b341812687b4761438","modified":1598410729692},{"_id":"source/img/clickhouse/logo.png","hash":"8fa4420a9948ab6b8eaa01b5ad98dfe8bcce0ddf","modified":1576477977524},{"_id":"source/img/clickhouse/4.png","hash":"64050d16edfabd690dbd2bf8b49160877da5344d","modified":1598410705996},{"_id":"source/img/2020/flowchart.png","hash":"e26c3dd1fbb54e74f27983a151c8578a0c3372ec","modified":1608693604055},{"_id":"source/img/docker/ws3.png","hash":"7d7a838210b065a7edda576aa4dc2257cbc0136c","modified":1579505145062},{"_id":"source/img/grafana/1.png","hash":"6688d162f54a6b31d8a3f58da4a747e2a90b7e0f","modified":1573702408583},{"_id":"source/img/grafana-alerting/3.png","hash":"7445b32c9bc421331dde0efa8eedf8928e5a24b6","modified":1573702408579},{"_id":"source/img/grafana/4.png","hash":"c5767d6d65f0dfa19776c01bf698aa0a7a21144c","modified":1573702408583},{"_id":"source/img/grafana/5.png","hash":"8eafae501beb11d44f1c1cba33ab5d7be7fb436b","modified":1573702408583},{"_id":"source/img/grafana-alerting/2.png","hash":"40bf8a0133c93d206d3f3d3615d9fce997f0ed3f","modified":1573702408579},{"_id":"source/img/grafana-alerting/6.png","hash":"27515ce8d5f065a40d1139d270941477d5c43045","modified":1573702408579},{"_id":"source/img/grafana-alerting/5.png","hash":"f3e7ace9feb0d40d49022dd26de062de5f240ffd","modified":1573702408579},{"_id":"source/img/grafana-alerting/4.png","hash":"8e7beab20bf3c2df3e52e45a63e10b4fbac8d750","modified":1573702408579},{"_id":"source/img/grafana-alerting/7.png","hash":"875de873a9eb3b938eaf719dbf96fabcf32fb9a1","modified":1573702408579},{"_id":"source/img/k8s/4.png","hash":"a8ac198596f6cbc2b176f60a3af8ef770ba74986","modified":1573702408587},{"_id":"source/img/k8s/3.jpg","hash":"04222abe2ac1cb68bd21655780e275b94d4b7bb9","modified":1573702408587},{"_id":"source/img/loki/3.png","hash":"a853262492ce9cf76df0e0fcad9212c07f712430","modified":1573702408591},{"_id":"source/img/loki/logo.png","hash":"d3a1ff513556c5bb1c144b9e7caa96d71acb594b","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1573702408591},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1573702408591},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1573702408591},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1573702408591},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573702408595},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1573702408599},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1573702408599},{"_id":"source/img/docker/ws1.png","hash":"e0da467851439d0b1da3ba4fe7e4ab4dbe0e9058","modified":1579432140499},{"_id":"source/img/grafana/122.png","hash":"bb068798fd7cbc5bcbe79d0c0d75827377a3debf","modified":1573789584877},{"_id":"source/img/grafana/11.png","hash":"dc22affd7d0954a971c52dd6671b9aea7cc54382","modified":1573734916723},{"_id":"source/img/grafana/3.png","hash":"5226ddfc672c157931a1a64d014978105f3e23a1","modified":1573702408583},{"_id":"source/img/grafana/2.png","hash":"ffb7d6e0ca4bdbf08813b7fdccd7d90089528aee","modified":1573702408583},{"_id":"source/img/k8s/2.png","hash":"a0cc8e0bc5608f991b98602237ed12b4757e56f2","modified":1573702408587},{"_id":"source/img/k8s/6.png","hash":"88cc3026320b900ac1280757e90b8ac9d08504b4","modified":1573702408587},{"_id":"source/img/grafana-alerting/8.png","hash":"d5b36c2709a622f0b7e3be5be8aa06dfe2b1fb93","modified":1573702408579},{"_id":"source/img/k8s/1.png","hash":"aaef20704f36c5cd855b30ffdb370925642b4404","modified":1573702408587},{"_id":"source/img/loki/2.png","hash":"4f40694f5dc0eaf9f4e8df1d2f9b6e2a6fd041b9","modified":1573702408591},{"_id":"source/img/docker/ws2.png","hash":"7a26aa3829b6691d0464fe0d63a67e9bb405f5fc","modified":1579507086667},{"_id":"source/img/grafana/12.png","hash":"5262aba45625a7ec9b3ec491ed70ed0bdc8f9316","modified":1574051917946},{"_id":"source/img/k8s/5.svg","hash":"d1411cded83856552f37911eb4522d9887ca4e83","modified":1573702408587},{"_id":"source/img/ubuntu/1.png","hash":"bb274baa3a4b15aa31bd67e7203f404f5c132529","modified":1573735907553},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1573702408591},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1573702408591},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1573702408591},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1573702408591},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1573702408595},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1573702408591},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1573702408595},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1573702408599},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573702408599},{"_id":"source/img/grafana/2.bak.png","hash":"5dded09e9b81014954c28c39cd6bfe326e730fce","modified":1573702408583},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1573702408595},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"e86656f9a24e0d0849aff08aa6490a717e6e1f8d","modified":1573702408595},{"_id":"source/img/loki/1.png","hash":"1698dc20dd0e4e7fccb7ef63b83209a66d784797","modified":1573702408591},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1573702408595},{"_id":"themes/landscape/source/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1573702408595},{"_id":"source/img/hexo/1.png","hash":"63f36a8ef225402464c3551ab53f1906cc92cf62","modified":1573702408587},{"_id":"public/archives/page/4/index.html","hash":"6d3d4c637d1326145e846c45f267fadf1b19c746","modified":1609237417155},{"_id":"public/archives/2019/01/index.html","hash":"1e15316551524ea415fd4a91d9ce238909d2599e","modified":1609237417155},{"_id":"public/archives/2019/02/index.html","hash":"cf80110ae786c2b8db00bad21f5aa66c6f1ef858","modified":1609237417155},{"_id":"public/archives/2019/11/index.html","hash":"85b32226eb71abec0b6bc637b3b7d6fa6c7ce151","modified":1609237417155},{"_id":"public/archives/2019/12/index.html","hash":"15e3dac0e4b3e2ff0d89185fbc6daae9a7a18c75","modified":1609237417155},{"_id":"public/archives/2020/page/2/index.html","hash":"6b369509aff409dbaf551c6b9653a78af2f298eb","modified":1609237417156},{"_id":"public/archives/2020/01/index.html","hash":"d7ef3a58d7499d0c17d93a7518a273be3cdf277d","modified":1609237417156},{"_id":"public/archives/2020/02/index.html","hash":"bda5a446d321a0e7e3999a907dfdf9525f25f792","modified":1609237417156},{"_id":"public/archives/2020/04/index.html","hash":"34a8f5c1f3ba1a64a45911be33a9355d561e23aa","modified":1609237417156},{"_id":"public/archives/2020/06/index.html","hash":"ef9ad9d8f84ce41e862bc4cc6f441f169a785536","modified":1609237417156},{"_id":"public/archives/2020/07/index.html","hash":"526f0aa3edcca2e6a6f61fba100e48b9315ca470","modified":1609237417156},{"_id":"public/archives/2020/08/index.html","hash":"26a65657d0048fee68dde68097533487f1bf5ff2","modified":1609237417156},{"_id":"public/archives/2020/10/index.html","hash":"aed0fd06eced5f9a2f5a844b651d2616d751a364","modified":1609237417156},{"_id":"public/archives/2020/12/index.html","hash":"5fa8ffa1f36dcc76117ed9f4de5b60773bc153ca","modified":1609237417156},{"_id":"public/tags/awk/index.html","hash":"5984e300169f4d2b6c4a3097016c0628f19b5452","modified":1609237417156},{"_id":"public/tags/clickhouse-高可用/index.html","hash":"f6d703dfa7fc50241808576fa9a102c6712480d0","modified":1609237417156},{"_id":"public/tags/angular-js/index.html","hash":"3f8f81e1f5229fdf8ce91096ec5b9b6aad7ae1d0","modified":1609237417156},{"_id":"public/tags/coredns/index.html","hash":"20116bb076fa74c4f1b87646af34e5c5acdb6cdb","modified":1609237417156},{"_id":"public/tags/etcd/index.html","hash":"25687d2bd9152df4961fb7835f4a1b1ecef8415d","modified":1609237417156},{"_id":"public/tags/clickhouse/index.html","hash":"2ef180ace49f4375d993c0241c0e376a7a78a201","modified":1609237417157},{"_id":"public/tags/docker/index.html","hash":"49d6eb6923f384438ecea0ec3a502856ad9d1f37","modified":1609237417157},{"_id":"public/tags/webshell/index.html","hash":"a30759420c20aa57caa26eb37de88a364cc39dfb","modified":1609237417157},{"_id":"public/tags/gitrunner/index.html","hash":"b9bb98c7bfcf2c869437edf619f06beca37e4876","modified":1609237417157},{"_id":"public/tags/helm/index.html","hash":"9d4fb3beeb3150e22e43fa993d853dd7e5bffc06","modified":1609237417157},{"_id":"public/tags/grafana/index.html","hash":"74ad69e39fd62665d01b6a9bb9314c3c612363db","modified":1609237417157},{"_id":"public/tags/OLAP/index.html","hash":"1cbfe78edd82c20773680557fbab1d7861f27837","modified":1609237417157},{"_id":"public/tags/prometheus/index.html","hash":"81510f857778cc58b420af4ccb4b9cb1a3584820","modified":1609237417157},{"_id":"public/tags/报警/index.html","hash":"6daaabc904925e34b884d9664309b3b9abe16a4b","modified":1609237417157},{"_id":"public/tags/loki/index.html","hash":"c2f1ec250c1aa686fd621f24c7ffce0095c680e9","modified":1609237417157},{"_id":"public/tags/promtal/index.html","hash":"f4c984d350892f8504b5a5a89757eeb755ef00a1","modified":1609237417157},{"_id":"public/tags/go-mysql-elasticsearch/index.html","hash":"8c713241399587b4258f3e3832acafd1e389ff20","modified":1609237417157},{"_id":"public/tags/中间件/index.html","hash":"8b8a71bf55af07ec9a04c9d81f0625ebe8e48d39","modified":1609237417157},{"_id":"public/tags/k8s/index.html","hash":"0c69f5a68f887beb7472fe8e149b23cf49e91378","modified":1609237417157},{"_id":"public/tags/hexo/index.html","hash":"332848ffa05479626bbd244f4f454bff76d1801c","modified":1609237417158},{"_id":"public/tags/jenkins/index.html","hash":"2887731e4b929de802ae2b556b10fbb4b61090de","modified":1609237417158},{"_id":"public/tags/pipeline/index.html","hash":"f7cd66efce3aa0ac6cabb331514ca077fe91d69d","modified":1609237417158},{"_id":"public/tags/containerd/index.html","hash":"804481f910ba0e4ae91ba39d39b0affda128d066","modified":1609237417158},{"_id":"public/tags/k3s/index.html","hash":"a4e4a85d05d03c97c17c093a1f00c785d9cb37d1","modified":1609237417158},{"_id":"public/tags/kubernetes/index.html","hash":"ec5c038bbc15176911fc155c29ee2d4d874a3680","modified":1609237417158},{"_id":"public/tags/kube-adm/index.html","hash":"e42600c11ad378f68b2153ab63067ec6f32c5074","modified":1609237417158},{"_id":"public/tags/haproxy/index.html","hash":"ae4beee4a8364f12f03b16a60817d3a9b280b61a","modified":1609237417158},{"_id":"public/tags/openldap/index.html","hash":"f051a72c2a1c3663f8017a53a9041c6b7590d591","modified":1609237417158},{"_id":"public/tags/gogs/index.html","hash":"6f2f9e3704f045917a95fb29176d546e2c4d568e","modified":1609237417158},{"_id":"public/tags/pbkdf2/index.html","hash":"7b6e587bcebdf3761af7c0368914ebb059c78c4e","modified":1609237417158},{"_id":"public/tags/ldap/index.html","hash":"166826132abc13fe66cb5c3fdf1e0d24ef1b9604","modified":1609237417158},{"_id":"public/tags/microk8s/index.html","hash":"5682eba2ad8269fdc6bee697e3b80c87119e6b68","modified":1609237417158},{"_id":"public/tags/nginx/index.html","hash":"2409d04b0bbb46a38ca970999fd98a5e5475cce2","modified":1609237417158},{"_id":"public/tags/openresty/index.html","hash":"83d9fc025730a2e783435f4ce63d818878577cb1","modified":1609237417159},{"_id":"public/tags/日志/index.html","hash":"d163f2b3cb7d9af63f73eec726852713918cf1cd","modified":1609237417159},{"_id":"public/tags/linux/index.html","hash":"99e76be4170fdd1ffbc700a5f26664b96e6515dc","modified":1609237417159},{"_id":"public/tags/tcp-ip/index.html","hash":"217b1bf667cdf188a575503463edaf6b3b7d2bc5","modified":1609237417159},{"_id":"public/tags/shazam/index.html","hash":"eba7e69e8559c2a5269572647413b6bf3559ddfa","modified":1609237417159},{"_id":"public/tags/gaea/index.html","hash":"35795413204adafeac92468bc7c074bdde4c47b3","modified":1609237417159},{"_id":"public/tags/ubuntu/index.html","hash":"da959836cfa7a48dea4a7d598e8666db7ee350f8","modified":1609237417159},{"_id":"public/tags/xorm/index.html","hash":"ea089bede5b30ebd9e1bf8398eafc0bfacce48b2","modified":1609237417159},{"_id":"public/tags/golang/index.html","hash":"dedb4c92aa47c7ab71baeda7d48d484593314477","modified":1609237417159},{"_id":"public/tags/logrus/index.html","hash":"c7f2b024467f001f6972be0ac3b9cb41ebf024bc","modified":1609237417159},{"_id":"public/tags/vue/index.html","hash":"f5e011981044deee56b58e7cfbd9e97bc23806ff","modified":1609237417159},{"_id":"public/tags/vuejs/index.html","hash":"2429d6aea5a893bebdbdb39ecb78b0d7d4577efe","modified":1609237417159},{"_id":"public/tags/监控/index.html","hash":"596fb7ce3580d103b868196d0c38b2b556386df2","modified":1609237417159},{"_id":"public/tags/consul/index.html","hash":"3aac69e3e8412ab902a2dfd0f933952210ac4f40","modified":1609237417159},{"_id":"public/2020/12/go-mysql-elasticsearch/index.html","hash":"43da0546e935f7a4c20c808b45d0261fd18c568f","modified":1609237417159},{"_id":"public/2020/10/ldap/index.html","hash":"704c2ff8ee9f101c9a807416a1d3f12d32ad4e17","modified":1609237417160},{"_id":"public/2020/10/k3s/index.html","hash":"409c1da23845a84a66a7b78f74dc7e02c3eddefb","modified":1609237417160},{"_id":"public/2020/08/clickhouse-3shard/index.html","hash":"36650e564246d7c2c423ede86464052f5e99f8e9","modified":1609237417160},{"_id":"public/2020/08/vue/index.html","hash":"9f7735f16911051aedba353200ff79bd4486e57c","modified":1609237417160},{"_id":"public/2020/07/shazam_source_code/index.html","hash":"ce4f38c3b7fb903989b5e0b07c0366718dee0c9f","modified":1609237417160},{"_id":"public/2020/06/clickhouse-ha/index.html","hash":"462c39f9c6720b39ca8872fb5c205d44316ccb3b","modified":1609237417160},{"_id":"public/2020/04/xorm_traceid/index.html","hash":"768201d0f624906c923e86fe56978e678a468212","modified":1609237417160},{"_id":"public/2020/02/docker-web-shell-2/index.html","hash":"2320f09062fbbb2333e919b75b3bba6f4e7da87e","modified":1609237417160},{"_id":"public/2020/01/docker-web-shell-1/index.html","hash":"3218f4086f7c66d36d19ed4abbceefcae841e117","modified":1609237417160},{"_id":"public/2020/01/angular-js/index.html","hash":"30563e632e7d7be11315a6d7bb5d8230f2bf2659","modified":1609237417160},{"_id":"public/2020/01/awk/index.html","hash":"ae9c2661d129639ced1604cc97e2710d07cd573c","modified":1609237417160},{"_id":"public/2019/12/clickhouse/index.html","hash":"521d6988ea245e9cf36d0c9f303f50b3e2003604","modified":1609237417160},{"_id":"public/2019/11/ldap-pbkdf2/index.html","hash":"bd8895949bd01ae1788b822b4bd7274318c5edee","modified":1609237417161},{"_id":"public/2019/11/ubuntu-install/index.html","hash":"8d8026e860c2fa71db8481ab617427c51f9a94c7","modified":1609237417161},{"_id":"public/2019/11/grafana-mysql-source/index.html","hash":"ea83554df55b5a466ed2e4a05a071aa15c417a94","modified":1609237417161},{"_id":"public/2019/11/k8s-migration-1/index.html","hash":"d521b94839feaa09b15e50beacff073746ad8d80","modified":1609237417161},{"_id":"public/2019/11/microk8s/index.html","hash":"98cc9c3f8c4c448bcd4f959e1c241b04502465f5","modified":1609237417161},{"_id":"public/2019/10/jenkins-pipeline/index.html","hash":"ed89cc4e539fa51ebe9f1fab6b9b9245b4d6c258","modified":1609237417161},{"_id":"public/2019/10/hexo/index.html","hash":"6b3465a8074f6f7576abcd561a73fc1279c95a3d","modified":1609237417161},{"_id":"public/2019/10/grafana-variables/index.html","hash":"a2e4d5595e3da2d842c54382a11078afa4e2438a","modified":1609237417161},{"_id":"public/2019/10/loki/index.html","hash":"405e812a2c009ea8f9b6c5d08406486368bb6a96","modified":1609237417161},{"_id":"public/2019/10/core-dns/index.html","hash":"3fc6cee79962e57fe8ab2c5a59597b5c14c72923","modified":1609237417161},{"_id":"public/2019/10/gitrunner-helm-install/index.html","hash":"87361273659a221742c24393fa959a5353012391","modified":1609237417161},{"_id":"public/2019/10/helm/index.html","hash":"4e0bc879374d339322fc41c50764b9546e217251","modified":1609237417161},{"_id":"public/2019/10/grafana-alerting/index.html","hash":"06954a578ff71dadb99e23cc021167c52624863b","modified":1609237417161},{"_id":"public/2019/02/nginx/index.html","hash":"e7f906dbcc54eac08f42321e0d8221188ae6af5f","modified":1609237417162},{"_id":"public/2019/02/tcp/index.html","hash":"5bb34bd59ff1e692ac03e849ce898d6e713531ed","modified":1609237417162},{"_id":"public/2019/02/jenkins-introduction/index.html","hash":"09c43340a833a4057e2c372a99e0a405c8e0058f","modified":1609237417162},{"_id":"public/2019/02/prometheus/index.html","hash":"60c19c457ce8713ccd1b16afd42582a8b4ab9862","modified":1609237417162},{"_id":"public/2019/02/k8s-notes/index.html","hash":"f074c23a08e7f1aab6a94a418e93ea4055f0b6a8","modified":1609237417162},{"_id":"public/2019/01/k8s-introduction/index.html","hash":"406761d219fa28a06f3337ef656eb63f10d5e717","modified":1609237417162},{"_id":"public/archives/index.html","hash":"be9a5cddd8823531fc07adb67216124af9cb5fc7","modified":1609237417162},{"_id":"public/archives/page/2/index.html","hash":"b6a771b0cc1f63c49a2918a713b48c42379c62bc","modified":1609237417162},{"_id":"public/archives/page/3/index.html","hash":"4e3792d91b7e6b775797c2624177523be303f668","modified":1609237417162},{"_id":"public/archives/2019/index.html","hash":"4e7a692cf2764efc8c08febb07872c9f37902076","modified":1609237417162},{"_id":"public/archives/2019/page/2/index.html","hash":"cf53d985c2762140ff1b4d72dbdd60f088c3ec98","modified":1609237417162},{"_id":"public/archives/2019/10/index.html","hash":"89860f46d9ed8b126060ab81056db967c0bf1ec7","modified":1609237417162},{"_id":"public/archives/2020/index.html","hash":"b01f45650b9f388e016b80e7d1560f5276ac11e6","modified":1609237417163},{"_id":"public/index.html","hash":"4c02645caee21511499343b54f87b7462620d7c7","modified":1609237417163},{"_id":"public/page/2/index.html","hash":"531c6a68cd55fd2e3a43fccb734143959d7c725d","modified":1609237417163},{"_id":"public/page/3/index.html","hash":"c231591d23707f60f8706a7e138b57c4874ae81e","modified":1609237417163},{"_id":"public/page/4/index.html","hash":"94bad455dbe731ca8f3b014ea226520420cd63d1","modified":1609237417163},{"_id":"public/img/clickhouse/1.png","hash":"f76cf8847713817e835856a3f824853d011b3b99","modified":1609237417174},{"_id":"public/img/clickhouse/6.png","hash":"c0cee8a66c3b8afe13edc66ff00fb48e152e2abf","modified":1609237417174},{"_id":"public/img/clickhouse/7.png","hash":"fe69af6ce4dc2eebea6c2e21e54a2e80114b4b0d","modified":1609237417174},{"_id":"public/img/clickhouse/5.png","hash":"35498ac9c772019db55711b341812687b4761438","modified":1609237417174},{"_id":"public/img/clickhouse/logo.png","hash":"8fa4420a9948ab6b8eaa01b5ad98dfe8bcce0ddf","modified":1609237417174},{"_id":"public/img/clickhouse/4.png","hash":"64050d16edfabd690dbd2bf8b49160877da5344d","modified":1609237417174},{"_id":"public/img/2020/flowchart.png","hash":"e26c3dd1fbb54e74f27983a151c8578a0c3372ec","modified":1609237417174},{"_id":"public/img/grafana/1.png","hash":"6688d162f54a6b31d8a3f58da4a747e2a90b7e0f","modified":1609237417174},{"_id":"public/img/docker/ws3.png","hash":"7d7a838210b065a7edda576aa4dc2257cbc0136c","modified":1609237417175},{"_id":"public/img/grafana-alerting/3.png","hash":"7445b32c9bc421331dde0efa8eedf8928e5a24b6","modified":1609237417175},{"_id":"public/img/grafana/5.png","hash":"8eafae501beb11d44f1c1cba33ab5d7be7fb436b","modified":1609237417175},{"_id":"public/img/grafana/4.png","hash":"c5767d6d65f0dfa19776c01bf698aa0a7a21144c","modified":1609237417175},{"_id":"public/img/grafana-alerting/2.png","hash":"40bf8a0133c93d206d3f3d3615d9fce997f0ed3f","modified":1609237417175},{"_id":"public/img/grafana-alerting/6.png","hash":"27515ce8d5f065a40d1139d270941477d5c43045","modified":1609237417175},{"_id":"public/img/grafana-alerting/5.png","hash":"f3e7ace9feb0d40d49022dd26de062de5f240ffd","modified":1609237417175},{"_id":"public/img/grafana-alerting/4.png","hash":"8e7beab20bf3c2df3e52e45a63e10b4fbac8d750","modified":1609237417175},{"_id":"public/img/grafana-alerting/7.png","hash":"875de873a9eb3b938eaf719dbf96fabcf32fb9a1","modified":1609237417175},{"_id":"public/img/k8s/4.png","hash":"a8ac198596f6cbc2b176f60a3af8ef770ba74986","modified":1609237417175},{"_id":"public/img/k8s/3.jpg","hash":"04222abe2ac1cb68bd21655780e275b94d4b7bb9","modified":1609237417175},{"_id":"public/img/loki/logo.png","hash":"d3a1ff513556c5bb1c144b9e7caa96d71acb594b","modified":1609237417176},{"_id":"public/img/loki/3.png","hash":"a853262492ce9cf76df0e0fcad9212c07f712430","modified":1609237417176},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1609237417176},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1609237417176},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1609237417176},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1609237417176},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1609237417176},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1609237417176},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1609237417176},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1609237417176},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1609237417176},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1609237417176},{"_id":"public/img/docker/ws1.png","hash":"e0da467851439d0b1da3ba4fe7e4ab4dbe0e9058","modified":1609237417726},{"_id":"public/img/grafana/122.png","hash":"bb068798fd7cbc5bcbe79d0c0d75827377a3debf","modified":1609237417727},{"_id":"public/img/grafana/11.png","hash":"dc22affd7d0954a971c52dd6671b9aea7cc54382","modified":1609237417727},{"_id":"public/img/grafana/3.png","hash":"5226ddfc672c157931a1a64d014978105f3e23a1","modified":1609237417728},{"_id":"public/img/k8s/2.png","hash":"a0cc8e0bc5608f991b98602237ed12b4757e56f2","modified":1609237417728},{"_id":"public/img/grafana/2.png","hash":"ffb7d6e0ca4bdbf08813b7fdccd7d90089528aee","modified":1609237417728},{"_id":"public/img/k8s/6.png","hash":"88cc3026320b900ac1280757e90b8ac9d08504b4","modified":1609237417728},{"_id":"public/img/grafana-alerting/8.png","hash":"d5b36c2709a622f0b7e3be5be8aa06dfe2b1fb93","modified":1609237417728},{"_id":"public/img/k8s/1.png","hash":"aaef20704f36c5cd855b30ffdb370925642b4404","modified":1609237417728},{"_id":"public/img/loki/2.png","hash":"4f40694f5dc0eaf9f4e8df1d2f9b6e2a6fd041b9","modified":1609237417728},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1609237417728},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1609237417738},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1609237417738},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1609237417738},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1609237417738},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1609237417738},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1609237417738},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1609237417739},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1609237417739},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1609237417739},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1609237417739},{"_id":"public/img/docker/ws2.png","hash":"7a26aa3829b6691d0464fe0d63a67e9bb405f5fc","modified":1609237417739},{"_id":"public/img/grafana/12.png","hash":"5262aba45625a7ec9b3ec491ed70ed0bdc8f9316","modified":1609237417739},{"_id":"public/img/k8s/5.svg","hash":"d1411cded83856552f37911eb4522d9887ca4e83","modified":1609237417739},{"_id":"public/img/ubuntu/1.png","hash":"bb274baa3a4b15aa31bd67e7203f404f5c132529","modified":1609237417739},{"_id":"public/css/images/banner.jpg","hash":"e86656f9a24e0d0849aff08aa6490a717e6e1f8d","modified":1609237417740},{"_id":"public/img/grafana/2.bak.png","hash":"5dded09e9b81014954c28c39cd6bfe326e730fce","modified":1609237417745},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1609237417745},{"_id":"public/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1609237417745},{"_id":"public/img/loki/1.png","hash":"1698dc20dd0e4e7fccb7ef63b83209a66d784797","modified":1609237417752},{"_id":"public/img/hexo/1.png","hash":"63f36a8ef225402464c3551ab53f1906cc92cf62","modified":1609237417761}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"使用awk处理csv文件","date":"2020-01-06T15:00:00.000Z","share":true,"_content":"\n上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。\n\n首先考虑了 join 命令，实现左连接、内连接都是没有问题的。\n\n```\n$ cat 1.csv \nNo,Con\n1,aaa\n2,bbb\n5,ccc\n\n$ cat 2.csv\nNo,S_id\n1,000555\n5,000111\n3,000333\n8,000111\n\n# 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。\n$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order <(sort -k 1 -n 1.csv) <(sort -k 1 -n 2.csv) \nNo,Con,S_id\n1,aaa,000555\n2,bbb\n5,ccc,000111\n```\n\n上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join\n<!-- more -->\n\n```\nhead 1.csv 2.csv \n==> 1.csv <==\n1,aaa,,\n2,bbb,,\n5,ccc,r1,rrrr\n\n==> 2.csv <==\n1,000111\n5,000555\n3,000333\n8,000111\nr1,XXXR1\n\n# FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\nFNR == NR{\n  \ta[$1] = $2;\n  \tnext \n}\n{\n\tshop_id = $1;\n\trefund_id = $3;\n\tif ($1 in a) {\n\t\tshop_id = a[$1]\n\t};\n\tif ($3 in a) {\n\t\trefund_id=a[$3]\n\t};\n\tprint shop_id\",\"$2\",\"refund_id\",\"$4\n}' 2.csv 1.csv\n```\n\n**生产使用** 其中 {} 里的为 php 变量\n\n```\n#列筛选\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\n{\n    #清除列末尾空格\n    gsub(/[ ]+$/, \"\", $18);\n    #字符串链接\n    $3  = (\"{$date} \"$3);\n    #负数转正\n    $16 = ($16 > 0) ? $16 :(-1) * $16;\n    $26 = ($26 > 0) ? $26 :(-1) * $26;\n    trade_no = $10 ; refund_no = \"\";\n    if ($23 == \"退款\") {\n        #获取对应的支付中心单号\n        refund_no = trade_no;\n        trade_no = \"\";\n        $23 = \"REFUND\";\n        $38 = ($38 == \"S\" ? \"SUCCESS\" : $38);\n    } else {\n        $23 = \"SUCCESS\";\n        $38 = \"\";\n    };\n    #支付中心单号放最后面\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    $3,$4,$5,$8,\"\",\"JSAPI\",$23,$16,$24,\"\",$26,$38,$27,$17,$18,trade_no,refund_no\n}' {$billFile} \\\n| sed '1d;N;\\$d;P;D' > {$tmpFile}\n\n#join 多个文件,通过 FNR==1 第一行时 {f++} 来判断是第几个文件\nawk 'BEGIN {\n    FS = OFS =\",\";\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    \"交易时间\",\"公众账号ID\",\"商户号\",\"招行订单号\",\"商城订单id\",\"交易类型\",\"交易状态\",\"应结订单金额\",\"招行退款单号\",\"商城退单号\",\"退款金额\",\"退款状态\",\"商品名称\",\"手续费\",\"费率\",\"支付中心订单号\",\"支付中心退单号\"\n}\nFNR == 1 { \n    f++\n} \nf == 1 { \n    rno2tno[$1] = $2;\n    next\n}\nf == 2 { \n    no2id[$1] = $2;\n    next\n}\n{    \n    refund_no = $17;\n    #根据refund_no取trade_no做兼容\n    if (refund_no in rno2tno) {\n        $16 = rno2tno[refund_no]\n    }\n    trade_no = $16;\n    if (trade_no in no2id) {\n        $5 = no2id[trade_no]\n    };\n    if (refund_no in no2id) {\n        $10 = no2id[refund_no]\n    };\n    print $0\n}' {$refundTradeMappingFile} {$mappingFile} {$tmpFile} > {$targetFile}\n```\n\n**其他的一些命令**\n\n```\ncut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d\",\" wx-20191221.csv > a.csv #使用cut来选择列\nsed '1d;N;$d;P;D' a.csv #删除第一行和最后两行\n```\n\n**使用 GuzzleHttp\\Client 来存储文件**\n\n```sh\n$client = new \\GuzzleHttp\\Client();\n#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间\n$params['sink'] = '/path/to/file';\n$response = $client->request($method, $url, $params);\n```\n\n\n\n参考:\n\nhttps://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\n\nhttps://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\n\nhttp://docs.guzzlephp.org/en/stable/request-options.html#sink\n\nhttps://github.com/dilshod/xlsx2csv \n\n","source":"_posts/awk.md","raw":"---\ntitle: \"使用awk处理csv文件\"\ndate: 2020-01-06 15:00:00\ntags: [awk]\nshare: true\n---\n\n上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。\n\n首先考虑了 join 命令，实现左连接、内连接都是没有问题的。\n\n```\n$ cat 1.csv \nNo,Con\n1,aaa\n2,bbb\n5,ccc\n\n$ cat 2.csv\nNo,S_id\n1,000555\n5,000111\n3,000333\n8,000111\n\n# 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。\n$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order <(sort -k 1 -n 1.csv) <(sort -k 1 -n 2.csv) \nNo,Con,S_id\n1,aaa,000555\n2,bbb\n5,ccc,000111\n```\n\n上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join\n<!-- more -->\n\n```\nhead 1.csv 2.csv \n==> 1.csv <==\n1,aaa,,\n2,bbb,,\n5,ccc,r1,rrrr\n\n==> 2.csv <==\n1,000111\n5,000555\n3,000333\n8,000111\nr1,XXXR1\n\n# FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\nFNR == NR{\n  \ta[$1] = $2;\n  \tnext \n}\n{\n\tshop_id = $1;\n\trefund_id = $3;\n\tif ($1 in a) {\n\t\tshop_id = a[$1]\n\t};\n\tif ($3 in a) {\n\t\trefund_id=a[$3]\n\t};\n\tprint shop_id\",\"$2\",\"refund_id\",\"$4\n}' 2.csv 1.csv\n```\n\n**生产使用** 其中 {} 里的为 php 变量\n\n```\n#列筛选\nawk 'BEGIN {\n    FS = OFS = \",\";\n}\n{\n    #清除列末尾空格\n    gsub(/[ ]+$/, \"\", $18);\n    #字符串链接\n    $3  = (\"{$date} \"$3);\n    #负数转正\n    $16 = ($16 > 0) ? $16 :(-1) * $16;\n    $26 = ($26 > 0) ? $26 :(-1) * $26;\n    trade_no = $10 ; refund_no = \"\";\n    if ($23 == \"退款\") {\n        #获取对应的支付中心单号\n        refund_no = trade_no;\n        trade_no = \"\";\n        $23 = \"REFUND\";\n        $38 = ($38 == \"S\" ? \"SUCCESS\" : $38);\n    } else {\n        $23 = \"SUCCESS\";\n        $38 = \"\";\n    };\n    #支付中心单号放最后面\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    $3,$4,$5,$8,\"\",\"JSAPI\",$23,$16,$24,\"\",$26,$38,$27,$17,$18,trade_no,refund_no\n}' {$billFile} \\\n| sed '1d;N;\\$d;P;D' > {$tmpFile}\n\n#join 多个文件,通过 FNR==1 第一行时 {f++} 来判断是第几个文件\nawk 'BEGIN {\n    FS = OFS =\",\";\n    printf \"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n\",\n    \"交易时间\",\"公众账号ID\",\"商户号\",\"招行订单号\",\"商城订单id\",\"交易类型\",\"交易状态\",\"应结订单金额\",\"招行退款单号\",\"商城退单号\",\"退款金额\",\"退款状态\",\"商品名称\",\"手续费\",\"费率\",\"支付中心订单号\",\"支付中心退单号\"\n}\nFNR == 1 { \n    f++\n} \nf == 1 { \n    rno2tno[$1] = $2;\n    next\n}\nf == 2 { \n    no2id[$1] = $2;\n    next\n}\n{    \n    refund_no = $17;\n    #根据refund_no取trade_no做兼容\n    if (refund_no in rno2tno) {\n        $16 = rno2tno[refund_no]\n    }\n    trade_no = $16;\n    if (trade_no in no2id) {\n        $5 = no2id[trade_no]\n    };\n    if (refund_no in no2id) {\n        $10 = no2id[refund_no]\n    };\n    print $0\n}' {$refundTradeMappingFile} {$mappingFile} {$tmpFile} > {$targetFile}\n```\n\n**其他的一些命令**\n\n```\ncut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d\",\" wx-20191221.csv > a.csv #使用cut来选择列\nsed '1d;N;$d;P;D' a.csv #删除第一行和最后两行\n```\n\n**使用 GuzzleHttp\\Client 来存储文件**\n\n```sh\n$client = new \\GuzzleHttp\\Client();\n#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间\n$params['sink'] = '/path/to/file';\n$response = $client->request($method, $url, $params);\n```\n\n\n\n参考:\n\nhttps://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\n\nhttps://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\n\nhttp://docs.guzzlephp.org/en/stable/request-options.html#sink\n\nhttps://github.com/dilshod/xlsx2csv \n\n","slug":"awk","published":1,"updated":"2020-01-19T07:43:40.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenj200000wpbtgzfos9l","content":"<p>上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。</p>\n<p>首先考虑了 join 命令，实现左连接、内连接都是没有问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.csv </span><br><span class=\"line\">No,Con</span><br><span class=\"line\">1,aaa</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat 2.csv</span><br><span class=\"line\">No,S_id</span><br><span class=\"line\">1,000555</span><br><span class=\"line\">5,000111</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\"></span><br><span class=\"line\"># 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。</span><br><span class=\"line\">$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order &lt;(sort -k 1 -n 1.csv) &lt;(sort -k 1 -n 2.csv) </span><br><span class=\"line\">No,Con,S_id</span><br><span class=\"line\">1,aaa,000555</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc,000111</span><br></pre></td></tr></table></figure>\n<p>上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head 1.csv 2.csv </span><br><span class=\"line\">==&gt; 1.csv &lt;==</span><br><span class=\"line\">1,aaa,,</span><br><span class=\"line\">2,bbb,,</span><br><span class=\"line\">5,ccc,r1,rrrr</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; 2.csv &lt;==</span><br><span class=\"line\">1,000111</span><br><span class=\"line\">5,000555</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\">r1,XXXR1</span><br><span class=\"line\"></span><br><span class=\"line\"># FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == NR&#123;</span><br><span class=\"line\">  \ta[$1] = $2;</span><br><span class=\"line\">  \tnext </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshop_id = $1;</span><br><span class=\"line\">\trefund_id = $3;</span><br><span class=\"line\">\tif ($1 in a) &#123;</span><br><span class=\"line\">\t\tshop_id = a[$1]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tif ($3 in a) &#123;</span><br><span class=\"line\">\t\trefund_id=a[$3]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tprint shop_id&quot;,&quot;$2&quot;,&quot;refund_id&quot;,&quot;$4</span><br><span class=\"line\">&#125;&apos; 2.csv 1.csv</span><br></pre></td></tr></table></figure>\n<p><strong>生产使用</strong> 其中 {} 里的为 php 变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列筛选</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #清除列末尾空格</span><br><span class=\"line\">    gsub(/[ ]+$/, &quot;&quot;, $18);</span><br><span class=\"line\">    #字符串链接</span><br><span class=\"line\">    $3  = (&quot;&#123;$date&#125; &quot;$3);</span><br><span class=\"line\">    #负数转正</span><br><span class=\"line\">    $16 = ($16 &gt; 0) ? $16 :(-1) * $16;</span><br><span class=\"line\">    $26 = ($26 &gt; 0) ? $26 :(-1) * $26;</span><br><span class=\"line\">    trade_no = $10 ; refund_no = &quot;&quot;;</span><br><span class=\"line\">    if ($23 == &quot;退款&quot;) &#123;</span><br><span class=\"line\">        #获取对应的支付中心单号</span><br><span class=\"line\">        refund_no = trade_no;</span><br><span class=\"line\">        trade_no = &quot;&quot;;</span><br><span class=\"line\">        $23 = &quot;REFUND&quot;;</span><br><span class=\"line\">        $38 = ($38 == &quot;S&quot; ? &quot;SUCCESS&quot; : $38);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $23 = &quot;SUCCESS&quot;;</span><br><span class=\"line\">        $38 = &quot;&quot;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    #支付中心单号放最后面</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    $3,$4,$5,$8,&quot;&quot;,&quot;JSAPI&quot;,$23,$16,$24,&quot;&quot;,$26,$38,$27,$17,$18,trade_no,refund_no</span><br><span class=\"line\">&#125;&apos; &#123;$billFile&#125; \\</span><br><span class=\"line\">| sed &apos;1d;N;\\$d;P;D&apos; &gt; &#123;$tmpFile&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#join 多个文件,通过 FNR==1 第一行时 &#123;f++&#125; 来判断是第几个文件</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS =&quot;,&quot;;</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    &quot;交易时间&quot;,&quot;公众账号ID&quot;,&quot;商户号&quot;,&quot;招行订单号&quot;,&quot;商城订单id&quot;,&quot;交易类型&quot;,&quot;交易状态&quot;,&quot;应结订单金额&quot;,&quot;招行退款单号&quot;,&quot;商城退单号&quot;,&quot;退款金额&quot;,&quot;退款状态&quot;,&quot;商品名称&quot;,&quot;手续费&quot;,&quot;费率&quot;,&quot;支付中心订单号&quot;,&quot;支付中心退单号&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == 1 &#123; </span><br><span class=\"line\">    f++</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">f == 1 &#123; </span><br><span class=\"line\">    rno2tno[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f == 2 &#123; </span><br><span class=\"line\">    no2id[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    refund_no = $17;</span><br><span class=\"line\">    #根据refund_no取trade_no做兼容</span><br><span class=\"line\">    if (refund_no in rno2tno) &#123;</span><br><span class=\"line\">        $16 = rno2tno[refund_no]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trade_no = $16;</span><br><span class=\"line\">    if (trade_no in no2id) &#123;</span><br><span class=\"line\">        $5 = no2id[trade_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (refund_no in no2id) &#123;</span><br><span class=\"line\">        $10 = no2id[refund_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    print $0</span><br><span class=\"line\">&#125;&apos; &#123;$refundTradeMappingFile&#125; &#123;$mappingFile&#125; &#123;$tmpFile&#125; &gt; &#123;$targetFile&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他的一些命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d&quot;,&quot; wx-20191221.csv &gt; a.csv #使用cut来选择列</span><br><span class=\"line\">sed &apos;1d;N;$d;P;D&apos; a.csv #删除第一行和最后两行</span><br></pre></td></tr></table></figure>\n<p><strong>使用 GuzzleHttp\\Client 来存储文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$client</span> = new \\GuzzleHttp\\Client();</span><br><span class=\"line\"><span class=\"comment\">#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间</span></span><br><span class=\"line\"><span class=\"variable\">$params</span>[<span class=\"string\">'sink'</span>] = <span class=\"string\">'/path/to/file'</span>;</span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$client</span>-&gt;request(<span class=\"variable\">$method</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed</a></p>\n<p><a href=\"http://docs.guzzlephp.org/en/stable/request-options.html#sink\" target=\"_blank\" rel=\"noopener\">http://docs.guzzlephp.org/en/stable/request-options.html#sink</a></p>\n<p><a href=\"https://github.com/dilshod/xlsx2csv\" target=\"_blank\" rel=\"noopener\">https://github.com/dilshod/xlsx2csv</a> </p>\n","site":{"data":{}},"excerpt":"<p>上周有个处理对账单的需求，从微信、招行下载每天的对账单，然后把订单号转成数据库里对应的商城单号，需求比较简单，打算用 shell 命令来写。</p>\n<p>首先考虑了 join 命令，实现左连接、内连接都是没有问题的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.csv </span><br><span class=\"line\">No,Con</span><br><span class=\"line\">1,aaa</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat 2.csv</span><br><span class=\"line\">No,S_id</span><br><span class=\"line\">1,000555</span><br><span class=\"line\">5,000111</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\"></span><br><span class=\"line\"># 对1.csv、2.csv排序，使用逗号作为分隔符，用两个文件的第一列，跳过header，-a左连接。</span><br><span class=\"line\">$ join -t, -1 1 -2 1 -a 1 --header --nocheck-order &lt;(sort -k 1 -n 1.csv) &lt;(sort -k 1 -n 2.csv) </span><br><span class=\"line\">No,Con,S_id</span><br><span class=\"line\">1,aaa,000555</span><br><span class=\"line\">2,bbb</span><br><span class=\"line\">5,ccc,000111</span><br></pre></td></tr></table></figure>\n<p>上面结果No = 2时后面没有补充逗号，而且格式化各列还需要 awk 再处理下，于是搜了下使用 awk 来实现 join<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head 1.csv 2.csv </span><br><span class=\"line\">==&gt; 1.csv &lt;==</span><br><span class=\"line\">1,aaa,,</span><br><span class=\"line\">2,bbb,,</span><br><span class=\"line\">5,ccc,r1,rrrr</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; 2.csv &lt;==</span><br><span class=\"line\">1,000111</span><br><span class=\"line\">5,000555</span><br><span class=\"line\">3,000333</span><br><span class=\"line\">8,000111</span><br><span class=\"line\">r1,XXXR1</span><br><span class=\"line\"></span><br><span class=\"line\"># FNR == NR 第一个文件时用第一列作数组 a 的下标，后面根据第二个文件的第一列是否在数组中，来则替换为对应的 value，循环+数组，感觉可以搞定一切.</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == NR&#123;</span><br><span class=\"line\">  \ta[$1] = $2;</span><br><span class=\"line\">  \tnext </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tshop_id = $1;</span><br><span class=\"line\">\trefund_id = $3;</span><br><span class=\"line\">\tif ($1 in a) &#123;</span><br><span class=\"line\">\t\tshop_id = a[$1]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tif ($3 in a) &#123;</span><br><span class=\"line\">\t\trefund_id=a[$3]</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tprint shop_id&quot;,&quot;$2&quot;,&quot;refund_id&quot;,&quot;$4</span><br><span class=\"line\">&#125;&apos; 2.csv 1.csv</span><br></pre></td></tr></table></figure>\n<p><strong>生产使用</strong> 其中 {} 里的为 php 变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列筛选</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS = &quot;,&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #清除列末尾空格</span><br><span class=\"line\">    gsub(/[ ]+$/, &quot;&quot;, $18);</span><br><span class=\"line\">    #字符串链接</span><br><span class=\"line\">    $3  = (&quot;&#123;$date&#125; &quot;$3);</span><br><span class=\"line\">    #负数转正</span><br><span class=\"line\">    $16 = ($16 &gt; 0) ? $16 :(-1) * $16;</span><br><span class=\"line\">    $26 = ($26 &gt; 0) ? $26 :(-1) * $26;</span><br><span class=\"line\">    trade_no = $10 ; refund_no = &quot;&quot;;</span><br><span class=\"line\">    if ($23 == &quot;退款&quot;) &#123;</span><br><span class=\"line\">        #获取对应的支付中心单号</span><br><span class=\"line\">        refund_no = trade_no;</span><br><span class=\"line\">        trade_no = &quot;&quot;;</span><br><span class=\"line\">        $23 = &quot;REFUND&quot;;</span><br><span class=\"line\">        $38 = ($38 == &quot;S&quot; ? &quot;SUCCESS&quot; : $38);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        $23 = &quot;SUCCESS&quot;;</span><br><span class=\"line\">        $38 = &quot;&quot;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    #支付中心单号放最后面</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    $3,$4,$5,$8,&quot;&quot;,&quot;JSAPI&quot;,$23,$16,$24,&quot;&quot;,$26,$38,$27,$17,$18,trade_no,refund_no</span><br><span class=\"line\">&#125;&apos; &#123;$billFile&#125; \\</span><br><span class=\"line\">| sed &apos;1d;N;\\$d;P;D&apos; &gt; &#123;$tmpFile&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#join 多个文件,通过 FNR==1 第一行时 &#123;f++&#125; 来判断是第几个文件</span><br><span class=\"line\">awk &apos;BEGIN &#123;</span><br><span class=\"line\">    FS = OFS =&quot;,&quot;;</span><br><span class=\"line\">    printf &quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\\\\n&quot;,</span><br><span class=\"line\">    &quot;交易时间&quot;,&quot;公众账号ID&quot;,&quot;商户号&quot;,&quot;招行订单号&quot;,&quot;商城订单id&quot;,&quot;交易类型&quot;,&quot;交易状态&quot;,&quot;应结订单金额&quot;,&quot;招行退款单号&quot;,&quot;商城退单号&quot;,&quot;退款金额&quot;,&quot;退款状态&quot;,&quot;商品名称&quot;,&quot;手续费&quot;,&quot;费率&quot;,&quot;支付中心订单号&quot;,&quot;支付中心退单号&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FNR == 1 &#123; </span><br><span class=\"line\">    f++</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">f == 1 &#123; </span><br><span class=\"line\">    rno2tno[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f == 2 &#123; </span><br><span class=\"line\">    no2id[$1] = $2;</span><br><span class=\"line\">    next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    refund_no = $17;</span><br><span class=\"line\">    #根据refund_no取trade_no做兼容</span><br><span class=\"line\">    if (refund_no in rno2tno) &#123;</span><br><span class=\"line\">        $16 = rno2tno[refund_no]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trade_no = $16;</span><br><span class=\"line\">    if (trade_no in no2id) &#123;</span><br><span class=\"line\">        $5 = no2id[trade_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    if (refund_no in no2id) &#123;</span><br><span class=\"line\">        $10 = no2id[refund_no]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    print $0</span><br><span class=\"line\">&#125;&apos; &#123;$refundTradeMappingFile&#125; &#123;$mappingFile&#125; &#123;$tmpFile&#125; &gt; &#123;$targetFile&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>其他的一些命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -f1,3,6,7,9,10,13,15-17,19-21,23-26 -d&quot;,&quot; wx-20191221.csv &gt; a.csv #使用cut来选择列</span><br><span class=\"line\">sed &apos;1d;N;$d;P;D&apos; a.csv #删除第一行和最后两行</span><br></pre></td></tr></table></figure>\n<p><strong>使用 GuzzleHttp\\Client 来存储文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$client</span> = new \\GuzzleHttp\\Client();</span><br><span class=\"line\"><span class=\"comment\">#$params[\\GuzzleHttp\\RequestOptions::TIMEOUT] = -1; 不能设置超时时间</span></span><br><span class=\"line\"><span class=\"variable\">$params</span>[<span class=\"string\">'sink'</span>] = <span class=\"string\">'/path/to/file'</span>;</span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$client</span>-&gt;request(<span class=\"variable\">$method</span>, <span class=\"variable\">$url</span>, <span class=\"variable\">$params</span>);</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<p><a href=\"https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/42443801/how-to-join-3-files-using-awk</a></p>\n<p><a href=\"https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/27600967/merge-csv-files-using-join-awk-sed</a></p>\n<p><a href=\"http://docs.guzzlephp.org/en/stable/request-options.html#sink\" target=\"_blank\" rel=\"noopener\">http://docs.guzzlephp.org/en/stable/request-options.html#sink</a></p>\n<p><a href=\"https://github.com/dilshod/xlsx2csv\" target=\"_blank\" rel=\"noopener\">https://github.com/dilshod/xlsx2csv</a> </p>"},{"title":"clickhouse单分片三副本高可用搭建","date":"2020-06-30T12:06:00.000Z","share":true,"_content":"\n3台机器，分别起3个 clickhosue 和 zookeeper 搭建一分片三副本高可用集群。\n\n用到镜像`yandex/clickhouse-server:19.15.3.6`，`zookeeper`\n\n**zookeeper 配置**\n\nzoo.cfg 增加server列表\n\n```\n[root@node-a002 zookeeper]# cat zoo.cfg\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=0\nmaxClientCnxns=60\nstandaloneEnabled=true\nadmin.enableServer=true\nserver.1=10.2.4.14:2888:3888;2181\nserver.2=10.2.4.15:2888:3888;2181\nserver.3=10.2.4.16:2888:3888;2181\n```\n\n同时 data 目录下 myid 内容对应配置里的id编号\n\n```\n[root@node-a002 zookeeper]# cat data/myid\n1\n```\n\n启动 zookeeper \n\n```\n[root@node-a002 ~]# cat sh/d_zookeeper.sh\ndocker run -d \\\n        --network host \\\n        -v /root/zookeeper/data:/data \\\n        -v /root/zookeeper/zoo.cfg:/conf/zoo.cfg \\\n        --name zookeeper \\\n        --restart=\"always\" \\\n        zookeeper\n```\n\n**clickhouse 配置**\n\n添加 `metrika.xml` 文件: 配置3个zookeeper，replica 处表示01集群、01分片、a001备份\n\n```\n[root@node-a002 clickhouse]# cat conf/metrika.xml\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.14</host>\n            <port>2181</port>\n        </node>\n        <node index=\"2\">\n            <host>10.2.4.15</host>\n            <port>2181</port>\n        </node>\n        <node index=\"3\">\n            <host>10.2.4.16</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-a002</replica>\n    </macros>\n</yandex>\n```\n\n`config.xml` 引入 `metrika.xml`\n\n```\n[root@node-a002 clickhouse]# cat conf/config.xml -n | grep 'metrika.xml'\n461      <include_from>/etc/clickhouse-server/metrika.xml</include_from>\n```\n\n启动 clickhouse \n\n```\n[root@node-a002 sh]# cat d_clickhouse.sh\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse/conf/users.xml:/etc/clickhouse-server/users.xml \\\n        -v /root/clickhouse/data:/var/lib/clickhouse \\\n        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\\n        --name clickhouse \\\n        yandex/clickhouse-server:19.14\n```\n\n**写数据**\n\n三分片分别创建`ReplicatedMergeTree`引擎表\n\n```\nCREATE TABLE test\n(\n    `id` Int64,\n    `created_date` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/test', '{replica}')\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id\nSETTINGS index_granularity = 8192\n```\n\n插入数据：\n\n```\ninsert into test values(1,'2020 06 28 14:00:00') ;\n```\n\n到其他两台备份上分别查看数据是否同步 ✓\n\n停掉某一台 zookeeper 数据库是否能正常访问 ✓\n\n\n**其他表引擎**\n\n自动数据备份，是表的行为，ReplicatedXXX的表支持自动同步。\n\nReplicated前缀只用于MergeTree系列（MergeTree是最常用的引擎），即clickhouse支持以下几种自动备份的引擎：\n```\nReplicatedMergeTree\nReplicatedSummingMergeTree\nReplicatedReplacingMergeTree\nReplicatedAggregatingMergeTree\nReplicatedCollapsingMergeTree\nReplicatedGraphiteMergeTree\n```\n\n**参考：**\n\n{% post_link clickhouse clickhouse入门操作%}\n\n[zookeeper集群启动报错](https://blog.csdn.net/qq_33142257/article/details/79836645)\n\n[Clickhouse集群应用、分片、复制](https://blog.csdn.net/linglingma9087/article/details/84666581)\n\n[添加帐号密码](https://www.jianshu.com/p/e339336e7bb9)","source":"_posts/clickhouse-ha.md","raw":"---\ntitle: \"clickhouse单分片三副本高可用搭建\"\ndate: 2020-06-30 12:06:00\ntags: [clickhouse 高可用]\nshare: true\n---\n\n3台机器，分别起3个 clickhosue 和 zookeeper 搭建一分片三副本高可用集群。\n\n用到镜像`yandex/clickhouse-server:19.15.3.6`，`zookeeper`\n\n**zookeeper 配置**\n\nzoo.cfg 增加server列表\n\n```\n[root@node-a002 zookeeper]# cat zoo.cfg\ndataDir=/data\ndataLogDir=/datalog\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=0\nmaxClientCnxns=60\nstandaloneEnabled=true\nadmin.enableServer=true\nserver.1=10.2.4.14:2888:3888;2181\nserver.2=10.2.4.15:2888:3888;2181\nserver.3=10.2.4.16:2888:3888;2181\n```\n\n同时 data 目录下 myid 内容对应配置里的id编号\n\n```\n[root@node-a002 zookeeper]# cat data/myid\n1\n```\n\n启动 zookeeper \n\n```\n[root@node-a002 ~]# cat sh/d_zookeeper.sh\ndocker run -d \\\n        --network host \\\n        -v /root/zookeeper/data:/data \\\n        -v /root/zookeeper/zoo.cfg:/conf/zoo.cfg \\\n        --name zookeeper \\\n        --restart=\"always\" \\\n        zookeeper\n```\n\n**clickhouse 配置**\n\n添加 `metrika.xml` 文件: 配置3个zookeeper，replica 处表示01集群、01分片、a001备份\n\n```\n[root@node-a002 clickhouse]# cat conf/metrika.xml\n<yandex>\n    <zookeeper-servers>\n        <node index=\"1\">\n            <host>10.2.4.14</host>\n            <port>2181</port>\n        </node>\n        <node index=\"2\">\n            <host>10.2.4.15</host>\n            <port>2181</port>\n        </node>\n        <node index=\"3\">\n            <host>10.2.4.16</host>\n            <port>2181</port>\n        </node>\n    </zookeeper-servers>\n\n    <macros>\n        <layer>01</layer>\n        <shard>01</shard>\n        <replica>cluster01-01-a002</replica>\n    </macros>\n</yandex>\n```\n\n`config.xml` 引入 `metrika.xml`\n\n```\n[root@node-a002 clickhouse]# cat conf/config.xml -n | grep 'metrika.xml'\n461      <include_from>/etc/clickhouse-server/metrika.xml</include_from>\n```\n\n启动 clickhouse \n\n```\n[root@node-a002 sh]# cat d_clickhouse.sh\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse/conf/users.xml:/etc/clickhouse-server/users.xml \\\n        -v /root/clickhouse/data:/var/lib/clickhouse \\\n        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\\n        --name clickhouse \\\n        yandex/clickhouse-server:19.14\n```\n\n**写数据**\n\n三分片分别创建`ReplicatedMergeTree`引擎表\n\n```\nCREATE TABLE test\n(\n    `id` Int64,\n    `created_date` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/test', '{replica}')\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id\nSETTINGS index_granularity = 8192\n```\n\n插入数据：\n\n```\ninsert into test values(1,'2020 06 28 14:00:00') ;\n```\n\n到其他两台备份上分别查看数据是否同步 ✓\n\n停掉某一台 zookeeper 数据库是否能正常访问 ✓\n\n\n**其他表引擎**\n\n自动数据备份，是表的行为，ReplicatedXXX的表支持自动同步。\n\nReplicated前缀只用于MergeTree系列（MergeTree是最常用的引擎），即clickhouse支持以下几种自动备份的引擎：\n```\nReplicatedMergeTree\nReplicatedSummingMergeTree\nReplicatedReplacingMergeTree\nReplicatedAggregatingMergeTree\nReplicatedCollapsingMergeTree\nReplicatedGraphiteMergeTree\n```\n\n**参考：**\n\n{% post_link clickhouse clickhouse入门操作%}\n\n[zookeeper集群启动报错](https://blog.csdn.net/qq_33142257/article/details/79836645)\n\n[Clickhouse集群应用、分片、复制](https://blog.csdn.net/linglingma9087/article/details/84666581)\n\n[添加帐号密码](https://www.jianshu.com/p/e339336e7bb9)","slug":"clickhouse-ha","published":1,"updated":"2020-08-19T07:44:34.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenj900010wpb2a5aamg4","content":"<p>3台机器，分别起3个 clickhosue 和 zookeeper 搭建一分片三副本高可用集群。</p>\n<p>用到镜像<code>yandex/clickhouse-server:19.15.3.6</code>，<code>zookeeper</code></p>\n<p><strong>zookeeper 配置</strong></p>\n<p>zoo.cfg 增加server列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 zookeeper]# cat zoo.cfg</span><br><span class=\"line\">dataDir=/data</span><br><span class=\"line\">dataLogDir=/datalog</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=5</span><br><span class=\"line\">syncLimit=2</span><br><span class=\"line\">autopurge.snapRetainCount=3</span><br><span class=\"line\">autopurge.purgeInterval=0</span><br><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">standaloneEnabled=true</span><br><span class=\"line\">admin.enableServer=true</span><br><span class=\"line\">server.1=10.2.4.14:2888:3888;2181</span><br><span class=\"line\">server.2=10.2.4.15:2888:3888;2181</span><br><span class=\"line\">server.3=10.2.4.16:2888:3888;2181</span><br></pre></td></tr></table></figure>\n<p>同时 data 目录下 myid 内容对应配置里的id编号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 zookeeper]# cat data/myid</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>启动 zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 ~]# cat sh/d_zookeeper.sh</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network host \\</span><br><span class=\"line\">        -v /root/zookeeper/data:/data \\</span><br><span class=\"line\">        -v /root/zookeeper/zoo.cfg:/conf/zoo.cfg \\</span><br><span class=\"line\">        --name zookeeper \\</span><br><span class=\"line\">        --restart=&quot;always&quot; \\</span><br><span class=\"line\">        zookeeper</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 配置</strong></p>\n<p>添加 <code>metrika.xml</code> 文件: 配置3个zookeeper，replica 处表示01集群、01分片、a001备份</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 clickhouse]# cat conf/metrika.xml</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.14&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">        &lt;node index=&quot;2&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.15&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">        &lt;node index=&quot;3&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.16&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-a002&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>\n<p><code>config.xml</code> 引入 <code>metrika.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 clickhouse]# cat conf/config.xml -n | grep &apos;metrika.xml&apos;</span><br><span class=\"line\">461      &lt;include_from&gt;/etc/clickhouse-server/metrika.xml&lt;/include_from&gt;</span><br></pre></td></tr></table></figure>\n<p>启动 clickhouse </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 sh]# cat d_clickhouse.sh</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/users.xml:/etc/clickhouse-server/users.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.14</span><br></pre></td></tr></table></figure>\n<p><strong>写数据</strong></p>\n<p>三分片分别创建<code>ReplicatedMergeTree</code>引擎表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test</span><br><span class=\"line\">(</span><br><span class=\"line\">    `id` Int64,</span><br><span class=\"line\">    `created_date` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/test&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure>\n<p>插入数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into test values(1,&apos;2020 06 28 14:00:00&apos;) ;</span><br></pre></td></tr></table></figure>\n<p>到其他两台备份上分别查看数据是否同步 ✓</p>\n<p>停掉某一台 zookeeper 数据库是否能正常访问 ✓</p>\n<p><strong>其他表引擎</strong></p>\n<p>自动数据备份，是表的行为，ReplicatedXXX的表支持自动同步。</p>\n<p>Replicated前缀只用于MergeTree系列（MergeTree是最常用的引擎），即clickhouse支持以下几种自动备份的引擎：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplicatedMergeTree</span><br><span class=\"line\">ReplicatedSummingMergeTree</span><br><span class=\"line\">ReplicatedReplacingMergeTree</span><br><span class=\"line\">ReplicatedAggregatingMergeTree</span><br><span class=\"line\">ReplicatedCollapsingMergeTree</span><br><span class=\"line\">ReplicatedGraphiteMergeTree</span><br></pre></td></tr></table></figure></p>\n<p><strong>参考：</strong></p>\n<a href=\"/2019/12/clickhouse/\" title=\"clickhouse入门操作\">clickhouse入门操作</a>\n<p><a href=\"https://blog.csdn.net/qq_33142257/article/details/79836645\" target=\"_blank\" rel=\"noopener\">zookeeper集群启动报错</a></p>\n<p><a href=\"https://blog.csdn.net/linglingma9087/article/details/84666581\" target=\"_blank\" rel=\"noopener\">Clickhouse集群应用、分片、复制</a></p>\n<p><a href=\"https://www.jianshu.com/p/e339336e7bb9\" target=\"_blank\" rel=\"noopener\">添加帐号密码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>3台机器，分别起3个 clickhosue 和 zookeeper 搭建一分片三副本高可用集群。</p>\n<p>用到镜像<code>yandex/clickhouse-server:19.15.3.6</code>，<code>zookeeper</code></p>\n<p><strong>zookeeper 配置</strong></p>\n<p>zoo.cfg 增加server列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 zookeeper]# cat zoo.cfg</span><br><span class=\"line\">dataDir=/data</span><br><span class=\"line\">dataLogDir=/datalog</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=5</span><br><span class=\"line\">syncLimit=2</span><br><span class=\"line\">autopurge.snapRetainCount=3</span><br><span class=\"line\">autopurge.purgeInterval=0</span><br><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">standaloneEnabled=true</span><br><span class=\"line\">admin.enableServer=true</span><br><span class=\"line\">server.1=10.2.4.14:2888:3888;2181</span><br><span class=\"line\">server.2=10.2.4.15:2888:3888;2181</span><br><span class=\"line\">server.3=10.2.4.16:2888:3888;2181</span><br></pre></td></tr></table></figure>\n<p>同时 data 目录下 myid 内容对应配置里的id编号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 zookeeper]# cat data/myid</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>启动 zookeeper </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 ~]# cat sh/d_zookeeper.sh</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network host \\</span><br><span class=\"line\">        -v /root/zookeeper/data:/data \\</span><br><span class=\"line\">        -v /root/zookeeper/zoo.cfg:/conf/zoo.cfg \\</span><br><span class=\"line\">        --name zookeeper \\</span><br><span class=\"line\">        --restart=&quot;always&quot; \\</span><br><span class=\"line\">        zookeeper</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 配置</strong></p>\n<p>添加 <code>metrika.xml</code> 文件: 配置3个zookeeper，replica 处表示01集群、01分片、a001备份</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 clickhouse]# cat conf/metrika.xml</span><br><span class=\"line\">&lt;yandex&gt;</span><br><span class=\"line\">    &lt;zookeeper-servers&gt;</span><br><span class=\"line\">        &lt;node index=&quot;1&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.14&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">        &lt;node index=&quot;2&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.15&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">        &lt;node index=&quot;3&quot;&gt;</span><br><span class=\"line\">            &lt;host&gt;10.2.4.16&lt;/host&gt;</span><br><span class=\"line\">            &lt;port&gt;2181&lt;/port&gt;</span><br><span class=\"line\">        &lt;/node&gt;</span><br><span class=\"line\">    &lt;/zookeeper-servers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;macros&gt;</span><br><span class=\"line\">        &lt;layer&gt;01&lt;/layer&gt;</span><br><span class=\"line\">        &lt;shard&gt;01&lt;/shard&gt;</span><br><span class=\"line\">        &lt;replica&gt;cluster01-01-a002&lt;/replica&gt;</span><br><span class=\"line\">    &lt;/macros&gt;</span><br><span class=\"line\">&lt;/yandex&gt;</span><br></pre></td></tr></table></figure>\n<p><code>config.xml</code> 引入 <code>metrika.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 clickhouse]# cat conf/config.xml -n | grep &apos;metrika.xml&apos;</span><br><span class=\"line\">461      &lt;include_from&gt;/etc/clickhouse-server/metrika.xml&lt;/include_from&gt;</span><br></pre></td></tr></table></figure>\n<p>启动 clickhouse </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node-a002 sh]# cat d_clickhouse.sh</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/conf/users.xml:/etc/clickhouse-server/users.xml \\</span><br><span class=\"line\">        -v /root/clickhouse/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse/log:/var/log/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.14</span><br></pre></td></tr></table></figure>\n<p><strong>写数据</strong></p>\n<p>三分片分别创建<code>ReplicatedMergeTree</code>引擎表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test</span><br><span class=\"line\">(</span><br><span class=\"line\">    `id` Int64,</span><br><span class=\"line\">    `created_date` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/test&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure>\n<p>插入数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into test values(1,&apos;2020 06 28 14:00:00&apos;) ;</span><br></pre></td></tr></table></figure>\n<p>到其他两台备份上分别查看数据是否同步 ✓</p>\n<p>停掉某一台 zookeeper 数据库是否能正常访问 ✓</p>\n<p><strong>其他表引擎</strong></p>\n<p>自动数据备份，是表的行为，ReplicatedXXX的表支持自动同步。</p>\n<p>Replicated前缀只用于MergeTree系列（MergeTree是最常用的引擎），即clickhouse支持以下几种自动备份的引擎：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReplicatedMergeTree</span><br><span class=\"line\">ReplicatedSummingMergeTree</span><br><span class=\"line\">ReplicatedReplacingMergeTree</span><br><span class=\"line\">ReplicatedAggregatingMergeTree</span><br><span class=\"line\">ReplicatedCollapsingMergeTree</span><br><span class=\"line\">ReplicatedGraphiteMergeTree</span><br></pre></td></tr></table></figure></p>\n<p><strong>参考：</strong></p>\n<a href=\"/2019/12/clickhouse/\" title=\"clickhouse入门操作\">clickhouse入门操作</a>\n<p><a href=\"https://blog.csdn.net/qq_33142257/article/details/79836645\" target=\"_blank\" rel=\"noopener\">zookeeper集群启动报错</a></p>\n<p><a href=\"https://blog.csdn.net/linglingma9087/article/details/84666581\" target=\"_blank\" rel=\"noopener\">Clickhouse集群应用、分片、复制</a></p>\n<p><a href=\"https://www.jianshu.com/p/e339336e7bb9\" target=\"_blank\" rel=\"noopener\">添加帐号密码</a></p>\n"},{"title":"angular js基本使用","date":"2020-01-17T20:36:00.000Z","share":true,"_content":"\n**基本使用**\n\n- 引入 `angular.js`\n\n```\n <script src=\"https://cdn.bootcss.com/angular.js/1.7.8/angular.min.js\"></script>\n```\n\n- 数据绑定\n\n```\n<div ng-app=\"myApp\">\n    <input type=\"text\" ng-model=\"name\"/>\n</div>\n\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function ($scope, $http) {\n    $scope.name = \"runner\"\n})\n```\n\n- 下拉列表框、单选框数据绑定 `ng-model`、触发事件`ng-change`(ng-chnge必须要有ng-model绑定)、是否可用`ng-disabled`\n\n```\n<select class=\"form-control\" ng-model=\"list.filter.group_id\"\n    ng-options=\"k as v for (k,v) in data_source.list_group_list\" ng-change=\"list.refresh()\" required>\n</select>\n\n<label class=\"radio-inline\" ng-repeat=\"data_format in data_source.data_format_list\">\n    <input type=\"radio\" name=\"data_format[]\" value=\"{{data_format}}\" ng-model=\"edit.data_format\"\n        ng-click=\"edit.clear_data_body()\" ng-disabled=\"edit.mode=='view'\" ng-change=\"edit.form_change()\">\n    {{data_format}}\n</label>\n```\n\n- Button 按钮是否显示 `ng-show`\n\n```\n<button type=\"submit\" class=\"btn btn-primary\" ng-show=\"edit.mode == 'insert' || edit.mode=='update'\" ng-disabled=\"edit.form_validate()\">提交</button>\n```\n<!-- more -->\n\n- 动态添加 class `ng-class`\n```\n<span class=\"glyphicon\" ng-class=\"row.is_ok == -1 ? 'text-warning glyphicon-question-sign' : (row.is_ok == 0 ? 'text-danger glyphicon-remove-sign' : 'text-success glyphicon-ok-sign')\"> </span>\n```\n\n- 三元表达式\n```\n <text placeholder=\"{{edit.mode == 'view' ? '' : (edit.data_format == 'json' ? edit.placeholder.json : edit.placeholder.form_data)}}\"></text>\n```\n\n\n- ajax 请求\n\n```\napp.controller('myCtrl', function ($scope, $http, $interval) {\n    $http({\n        method: 'POST',\n        url: base_url + '/api/update',\n        contentType: 'application/json;charset=UTF-8',\n        data: data\n    }).then(function successCallback(rs) {\n        if (rs.data.code === 0) {\n            $('#myModal').modal('show')\n            var row = rs.data.data\n            all_data[row['id']] = row;\n            list.refresh()\n        }\n    });\n})\n```\n\n- 定时器\n\n```\nvar timer = $interval(function () {\n    func.monitor_list()\n}, 1000)\n```\n\n**表单**\nradio:\n```\n<label class=\"radio-inline\" ng-repeat=\"method in data_source.method_list\">\n    <input type=\"radio\" name=\"method[]\" value=\"{{method}}\" ng-model=\"edit.method\"\n    ng-click=\"edit.clear_data_body()\" ng-disabled=\"edit.mode=='view'\"\n    ng-change=\"edit.form_change()\"> {{method}}\n</label>\n```\n\ncheckbox\n```\n<label class=\"checkbox-inline\" ng-repeat=\"(k,v) in data_source.group_list\">\n    <input type=\"checkbox\" ng-change=\"edit.form_change()\" ng-model=\"edit.relation_group[k]\"\n    ng-checked=\"edit.relation_group[k]\" ng-disabled=\"edit.mode=='view'\" ng-show=\"{{k!='请选择'}}\">\n    <span ng-show=\"{{k!='请选择'}}\">{{v}}</span>\n</label>\n```\nselect\n```\n//数据源为map格式，key为字符\n<select class=\"form-control\" ng-model=\"edit.group\" ng-options=\"k as v for (k,v) in data_source.group_list\"\n    ng-disabled=\"edit.mode=='view'\" ng-change=\"edit.form_change()\" required>\n</select>\n```\n\n\n**路由**\n\n- 路由需要单独引入 `angular-route.js` 文件\n\n```\n<script src=\"https://cdn.bootcss.com/angular.js/1.7.8/angular-route.js\"></script>\n```\n\n- body 内定义连接信息，引入`ng-view` 指令标签\n\n```\n<body ng-app=\"app\">\n    <ul>\n        <li><a href=\"#/a\">click a</a></li>\n        <li><a href=\"#/name/runner/age/33?height=180\">click b</a></li>\n        <li><a href=\"#/c\">click c</a></li>\n    </ul>\n    <div ng-view>\n\n    </div>\n</body>\n```\n\n- 模板内容:\n\n```\nhead a.html b.html \n==> a.html <==\n{{ content }}\n==> b.html <==\npage b: {{params}}\n```\n\n- 定义各个页面的控制器和路由信息，防止 html5 url转义，需要配置 `$locationProvider.hashPrefix(\"\");`\n\n```\n<script>\nvar app = angular.module('app', ['ngRoute'])\n    .run(function ($rootScope, $location) {\n        var nav = {\n            data: ['监控主页', 'API列表', '服务列表', '关于'],\n            current: \"\"\n        }\n        $rootScope.nav = nav\n\n        /* 监听路由的状态变化 */\n        $rootScope.$on('$routeChangeStart', function (evt, next, current) {\n            //console.log('route begin change');\n        });\n        $rootScope.$on('$routeChangeSuccess', function (evt, current, previous) {\n            //console.log('route have already changed ：' + $location.path());\n            // 路由改变触发对应菜单选中状态\n            var path = $location.path()\n            strs = path.split(\"/\")\n            if (strs.length > 1) {\n                if (strs.length == 2) {\n                    nav.current = strs[1]\n                } else {\n                    nav.current = strs[1] + '_' + strs[2]\n                }\n            }\n        });\n    })\n    .controller('aController', ['$scope', function ($scope) {\n        $scope.content = \"page a\";\n    }])\n    .controller('bController', ['$scope', '$routeParams', function ($scope, $routeParams) {\n        $scope.params = $routeParams\n    }])\n    .config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n        // $locationProvider.html5Mode(false);\n        $locationProvider.hashPrefix(\"\");\n        $routeProvider.when('/a', {\n            controller: 'aController',\n            templateUrl: './a.html'\n        }).when('/name/:name/age/:age', {\n            // URL: index.html#/name/runner/age/33?height=180\n            // $routeParams ==> {\"height\":\"180\",\"name\":\"runner\",\"age\":\"33\"}\n            controller: 'bController',\n            templateUrl: './b.html',\n            resolve: {\n                // 延迟 1秒再跳转\n                delay: function ($q, $timeout) {\n                    var delay = $q.defer();\n                    $timeout(delay.resolve, 1000);\n                    return delay.promise;\n                }\n            }\n        }).otherwise({\n            redirectTo: '/'\n        });\n    }]);\n</script>\n```\n\n以上是在一个监控展示小项目中用到的操作，之后再写前端会尝试下 `vue` ","source":"_posts/angular-js.md","raw":"---\ntitle: \"angular js基本使用\"\ndate: 2020-01-17 20:36:00\ntags: [angular js]\nshare: true\n---\n\n**基本使用**\n\n- 引入 `angular.js`\n\n```\n <script src=\"https://cdn.bootcss.com/angular.js/1.7.8/angular.min.js\"></script>\n```\n\n- 数据绑定\n\n```\n<div ng-app=\"myApp\">\n    <input type=\"text\" ng-model=\"name\"/>\n</div>\n\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function ($scope, $http) {\n    $scope.name = \"runner\"\n})\n```\n\n- 下拉列表框、单选框数据绑定 `ng-model`、触发事件`ng-change`(ng-chnge必须要有ng-model绑定)、是否可用`ng-disabled`\n\n```\n<select class=\"form-control\" ng-model=\"list.filter.group_id\"\n    ng-options=\"k as v for (k,v) in data_source.list_group_list\" ng-change=\"list.refresh()\" required>\n</select>\n\n<label class=\"radio-inline\" ng-repeat=\"data_format in data_source.data_format_list\">\n    <input type=\"radio\" name=\"data_format[]\" value=\"{{data_format}}\" ng-model=\"edit.data_format\"\n        ng-click=\"edit.clear_data_body()\" ng-disabled=\"edit.mode=='view'\" ng-change=\"edit.form_change()\">\n    {{data_format}}\n</label>\n```\n\n- Button 按钮是否显示 `ng-show`\n\n```\n<button type=\"submit\" class=\"btn btn-primary\" ng-show=\"edit.mode == 'insert' || edit.mode=='update'\" ng-disabled=\"edit.form_validate()\">提交</button>\n```\n<!-- more -->\n\n- 动态添加 class `ng-class`\n```\n<span class=\"glyphicon\" ng-class=\"row.is_ok == -1 ? 'text-warning glyphicon-question-sign' : (row.is_ok == 0 ? 'text-danger glyphicon-remove-sign' : 'text-success glyphicon-ok-sign')\"> </span>\n```\n\n- 三元表达式\n```\n <text placeholder=\"{{edit.mode == 'view' ? '' : (edit.data_format == 'json' ? edit.placeholder.json : edit.placeholder.form_data)}}\"></text>\n```\n\n\n- ajax 请求\n\n```\napp.controller('myCtrl', function ($scope, $http, $interval) {\n    $http({\n        method: 'POST',\n        url: base_url + '/api/update',\n        contentType: 'application/json;charset=UTF-8',\n        data: data\n    }).then(function successCallback(rs) {\n        if (rs.data.code === 0) {\n            $('#myModal').modal('show')\n            var row = rs.data.data\n            all_data[row['id']] = row;\n            list.refresh()\n        }\n    });\n})\n```\n\n- 定时器\n\n```\nvar timer = $interval(function () {\n    func.monitor_list()\n}, 1000)\n```\n\n**表单**\nradio:\n```\n<label class=\"radio-inline\" ng-repeat=\"method in data_source.method_list\">\n    <input type=\"radio\" name=\"method[]\" value=\"{{method}}\" ng-model=\"edit.method\"\n    ng-click=\"edit.clear_data_body()\" ng-disabled=\"edit.mode=='view'\"\n    ng-change=\"edit.form_change()\"> {{method}}\n</label>\n```\n\ncheckbox\n```\n<label class=\"checkbox-inline\" ng-repeat=\"(k,v) in data_source.group_list\">\n    <input type=\"checkbox\" ng-change=\"edit.form_change()\" ng-model=\"edit.relation_group[k]\"\n    ng-checked=\"edit.relation_group[k]\" ng-disabled=\"edit.mode=='view'\" ng-show=\"{{k!='请选择'}}\">\n    <span ng-show=\"{{k!='请选择'}}\">{{v}}</span>\n</label>\n```\nselect\n```\n//数据源为map格式，key为字符\n<select class=\"form-control\" ng-model=\"edit.group\" ng-options=\"k as v for (k,v) in data_source.group_list\"\n    ng-disabled=\"edit.mode=='view'\" ng-change=\"edit.form_change()\" required>\n</select>\n```\n\n\n**路由**\n\n- 路由需要单独引入 `angular-route.js` 文件\n\n```\n<script src=\"https://cdn.bootcss.com/angular.js/1.7.8/angular-route.js\"></script>\n```\n\n- body 内定义连接信息，引入`ng-view` 指令标签\n\n```\n<body ng-app=\"app\">\n    <ul>\n        <li><a href=\"#/a\">click a</a></li>\n        <li><a href=\"#/name/runner/age/33?height=180\">click b</a></li>\n        <li><a href=\"#/c\">click c</a></li>\n    </ul>\n    <div ng-view>\n\n    </div>\n</body>\n```\n\n- 模板内容:\n\n```\nhead a.html b.html \n==> a.html <==\n{{ content }}\n==> b.html <==\npage b: {{params}}\n```\n\n- 定义各个页面的控制器和路由信息，防止 html5 url转义，需要配置 `$locationProvider.hashPrefix(\"\");`\n\n```\n<script>\nvar app = angular.module('app', ['ngRoute'])\n    .run(function ($rootScope, $location) {\n        var nav = {\n            data: ['监控主页', 'API列表', '服务列表', '关于'],\n            current: \"\"\n        }\n        $rootScope.nav = nav\n\n        /* 监听路由的状态变化 */\n        $rootScope.$on('$routeChangeStart', function (evt, next, current) {\n            //console.log('route begin change');\n        });\n        $rootScope.$on('$routeChangeSuccess', function (evt, current, previous) {\n            //console.log('route have already changed ：' + $location.path());\n            // 路由改变触发对应菜单选中状态\n            var path = $location.path()\n            strs = path.split(\"/\")\n            if (strs.length > 1) {\n                if (strs.length == 2) {\n                    nav.current = strs[1]\n                } else {\n                    nav.current = strs[1] + '_' + strs[2]\n                }\n            }\n        });\n    })\n    .controller('aController', ['$scope', function ($scope) {\n        $scope.content = \"page a\";\n    }])\n    .controller('bController', ['$scope', '$routeParams', function ($scope, $routeParams) {\n        $scope.params = $routeParams\n    }])\n    .config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n        // $locationProvider.html5Mode(false);\n        $locationProvider.hashPrefix(\"\");\n        $routeProvider.when('/a', {\n            controller: 'aController',\n            templateUrl: './a.html'\n        }).when('/name/:name/age/:age', {\n            // URL: index.html#/name/runner/age/33?height=180\n            // $routeParams ==> {\"height\":\"180\",\"name\":\"runner\",\"age\":\"33\"}\n            controller: 'bController',\n            templateUrl: './b.html',\n            resolve: {\n                // 延迟 1秒再跳转\n                delay: function ($q, $timeout) {\n                    var delay = $q.defer();\n                    $timeout(delay.resolve, 1000);\n                    return delay.promise;\n                }\n            }\n        }).otherwise({\n            redirectTo: '/'\n        });\n    }]);\n</script>\n```\n\n以上是在一个监控展示小项目中用到的操作，之后再写前端会尝试下 `vue` ","slug":"angular-js","published":1,"updated":"2020-06-18T07:32:56.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenjg00030wpb7armbeqm","content":"<p><strong>基本使用</strong></p>\n<ul>\n<li>引入 <code>angular.js</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.7.8/angular.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-app=&quot;myApp&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ng-model=&quot;name&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class=\"line\">app.controller(&apos;myCtrl&apos;, function ($scope, $http) &#123;</span><br><span class=\"line\">    $scope.name = &quot;runner&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下拉列表框、单选框数据绑定 <code>ng-model</code>、触发事件<code>ng-change</code>(ng-chnge必须要有ng-model绑定)、是否可用<code>ng-disabled</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select class=&quot;form-control&quot; ng-model=&quot;list.filter.group_id&quot;</span><br><span class=\"line\">    ng-options=&quot;k as v for (k,v) in data_source.list_group_list&quot; ng-change=&quot;list.refresh()&quot; required&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;label class=&quot;radio-inline&quot; ng-repeat=&quot;data_format in data_source.data_format_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;data_format[]&quot; value=&quot;&#123;&#123;data_format&#125;&#125;&quot; ng-model=&quot;edit.data_format&quot;</span><br><span class=\"line\">        ng-click=&quot;edit.clear_data_body()&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-change=&quot;edit.form_change()&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;data_format&#125;&#125;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Button 按钮是否显示 <code>ng-show</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; ng-show=&quot;edit.mode == &apos;insert&apos; || edit.mode==&apos;update&apos;&quot; ng-disabled=&quot;edit.form_validate()&quot;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p>动态添加 class <code>ng-class</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;glyphicon&quot; ng-class=&quot;row.is_ok == -1 ? &apos;text-warning glyphicon-question-sign&apos; : (row.is_ok == 0 ? &apos;text-danger glyphicon-remove-sign&apos; : &apos;text-success glyphicon-ok-sign&apos;)&quot;&gt; &lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text placeholder=&quot;&#123;&#123;edit.mode == &apos;view&apos; ? &apos;&apos; : (edit.data_format == &apos;json&apos; ? edit.placeholder.json : edit.placeholder.form_data)&#125;&#125;&quot;&gt;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ajax 请求</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(&apos;myCtrl&apos;, function ($scope, $http, $interval) &#123;</span><br><span class=\"line\">    $http(&#123;</span><br><span class=\"line\">        method: &apos;POST&apos;,</span><br><span class=\"line\">        url: base_url + &apos;/api/update&apos;,</span><br><span class=\"line\">        contentType: &apos;application/json;charset=UTF-8&apos;,</span><br><span class=\"line\">        data: data</span><br><span class=\"line\">    &#125;).then(function successCallback(rs) &#123;</span><br><span class=\"line\">        if (rs.data.code === 0) &#123;</span><br><span class=\"line\">            $(&apos;#myModal&apos;).modal(&apos;show&apos;)</span><br><span class=\"line\">            var row = rs.data.data</span><br><span class=\"line\">            all_data[row[&apos;id&apos;]] = row;</span><br><span class=\"line\">            list.refresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定时器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = $interval(function () &#123;</span><br><span class=\"line\">    func.monitor_list()</span><br><span class=\"line\">&#125;, 1000)</span><br></pre></td></tr></table></figure>\n<p><strong>表单</strong><br>radio:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;radio-inline&quot; ng-repeat=&quot;method in data_source.method_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;method[]&quot; value=&quot;&#123;&#123;method&#125;&#125;&quot; ng-model=&quot;edit.method&quot;</span><br><span class=\"line\">    ng-click=&quot;edit.clear_data_body()&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot;</span><br><span class=\"line\">    ng-change=&quot;edit.form_change()&quot;&gt; &#123;&#123;method&#125;&#125;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p>\n<p>checkbox<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline&quot; ng-repeat=&quot;(k,v) in data_source.group_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-change=&quot;edit.form_change()&quot; ng-model=&quot;edit.relation_group[k]&quot;</span><br><span class=\"line\">    ng-checked=&quot;edit.relation_group[k]&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-show=&quot;&#123;&#123;k!=&apos;请选择&apos;&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;span ng-show=&quot;&#123;&#123;k!=&apos;请选择&apos;&#125;&#125;&quot;&gt;&#123;&#123;v&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p>\n<p>select<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据源为map格式，key为字符</span><br><span class=\"line\">&lt;select class=&quot;form-control&quot; ng-model=&quot;edit.group&quot; ng-options=&quot;k as v for (k,v) in data_source.group_list&quot;</span><br><span class=\"line\">    ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-change=&quot;edit.form_change()&quot; required&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>路由</strong></p>\n<ul>\n<li>路由需要单独引入 <code>angular-route.js</code> 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.7.8/angular-route.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>body 内定义连接信息，引入<code>ng-view</code> 指令标签</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body ng-app=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/a&quot;&gt;click a&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/name/runner/age/33?height=180&quot;&gt;click b&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/c&quot;&gt;click c&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;div ng-view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模板内容:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head a.html b.html </span><br><span class=\"line\">==&gt; a.html &lt;==</span><br><span class=\"line\">&#123;&#123; content &#125;&#125;</span><br><span class=\"line\">==&gt; b.html &lt;==</span><br><span class=\"line\">page b: &#123;&#123;params&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义各个页面的控制器和路由信息，防止 html5 url转义，需要配置 <code>$locationProvider.hashPrefix(&quot;&quot;);</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var app = angular.module(&apos;app&apos;, [&apos;ngRoute&apos;])</span><br><span class=\"line\">    .run(function ($rootScope, $location) &#123;</span><br><span class=\"line\">        var nav = &#123;</span><br><span class=\"line\">            data: [&apos;监控主页&apos;, &apos;API列表&apos;, &apos;服务列表&apos;, &apos;关于&apos;],</span><br><span class=\"line\">            current: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $rootScope.nav = nav</span><br><span class=\"line\"></span><br><span class=\"line\">        /* 监听路由的状态变化 */</span><br><span class=\"line\">        $rootScope.$on(&apos;$routeChangeStart&apos;, function (evt, next, current) &#123;</span><br><span class=\"line\">            //console.log(&apos;route begin change&apos;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $rootScope.$on(&apos;$routeChangeSuccess&apos;, function (evt, current, previous) &#123;</span><br><span class=\"line\">            //console.log(&apos;route have already changed ：&apos; + $location.path());</span><br><span class=\"line\">            // 路由改变触发对应菜单选中状态</span><br><span class=\"line\">            var path = $location.path()</span><br><span class=\"line\">            strs = path.split(&quot;/&quot;)</span><br><span class=\"line\">            if (strs.length &gt; 1) &#123;</span><br><span class=\"line\">                if (strs.length == 2) &#123;</span><br><span class=\"line\">                    nav.current = strs[1]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    nav.current = strs[1] + &apos;_&apos; + strs[2]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .controller(&apos;aController&apos;, [&apos;$scope&apos;, function ($scope) &#123;</span><br><span class=\"line\">        $scope.content = &quot;page a&quot;;</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">    .controller(&apos;bController&apos;, [&apos;$scope&apos;, &apos;$routeParams&apos;, function ($scope, $routeParams) &#123;</span><br><span class=\"line\">        $scope.params = $routeParams</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">    .config([&apos;$routeProvider&apos;, &apos;$locationProvider&apos;, function ($routeProvider, $locationProvider) &#123;</span><br><span class=\"line\">        // $locationProvider.html5Mode(false);</span><br><span class=\"line\">        $locationProvider.hashPrefix(&quot;&quot;);</span><br><span class=\"line\">        $routeProvider.when(&apos;/a&apos;, &#123;</span><br><span class=\"line\">            controller: &apos;aController&apos;,</span><br><span class=\"line\">            templateUrl: &apos;./a.html&apos;</span><br><span class=\"line\">        &#125;).when(&apos;/name/:name/age/:age&apos;, &#123;</span><br><span class=\"line\">            // URL: index.html#/name/runner/age/33?height=180</span><br><span class=\"line\">            // $routeParams ==&gt; &#123;&quot;height&quot;:&quot;180&quot;,&quot;name&quot;:&quot;runner&quot;,&quot;age&quot;:&quot;33&quot;&#125;</span><br><span class=\"line\">            controller: &apos;bController&apos;,</span><br><span class=\"line\">            templateUrl: &apos;./b.html&apos;,</span><br><span class=\"line\">            resolve: &#123;</span><br><span class=\"line\">                // 延迟 1秒再跳转</span><br><span class=\"line\">                delay: function ($q, $timeout) &#123;</span><br><span class=\"line\">                    var delay = $q.defer();</span><br><span class=\"line\">                    $timeout(delay.resolve, 1000);</span><br><span class=\"line\">                    return delay.promise;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).otherwise(&#123;</span><br><span class=\"line\">            redirectTo: &apos;/&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>以上是在一个监控展示小项目中用到的操作，之后再写前端会尝试下 <code>vue</code> </p>\n","site":{"data":{}},"excerpt":"<p><strong>基本使用</strong></p>\n<ul>\n<li>引入 <code>angular.js</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.7.8/angular.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-app=&quot;myApp&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ng-model=&quot;name&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class=\"line\">app.controller(&apos;myCtrl&apos;, function ($scope, $http) &#123;</span><br><span class=\"line\">    $scope.name = &quot;runner&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下拉列表框、单选框数据绑定 <code>ng-model</code>、触发事件<code>ng-change</code>(ng-chnge必须要有ng-model绑定)、是否可用<code>ng-disabled</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select class=&quot;form-control&quot; ng-model=&quot;list.filter.group_id&quot;</span><br><span class=\"line\">    ng-options=&quot;k as v for (k,v) in data_source.list_group_list&quot; ng-change=&quot;list.refresh()&quot; required&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;label class=&quot;radio-inline&quot; ng-repeat=&quot;data_format in data_source.data_format_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;data_format[]&quot; value=&quot;&#123;&#123;data_format&#125;&#125;&quot; ng-model=&quot;edit.data_format&quot;</span><br><span class=\"line\">        ng-click=&quot;edit.clear_data_body()&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-change=&quot;edit.form_change()&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;data_format&#125;&#125;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Button 按钮是否显示 <code>ng-show</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; ng-show=&quot;edit.mode == &apos;insert&apos; || edit.mode==&apos;update&apos;&quot; ng-disabled=&quot;edit.form_validate()&quot;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><p>动态添加 class <code>ng-class</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;glyphicon&quot; ng-class=&quot;row.is_ok == -1 ? &apos;text-warning glyphicon-question-sign&apos; : (row.is_ok == 0 ? &apos;text-danger glyphicon-remove-sign&apos; : &apos;text-success glyphicon-ok-sign&apos;)&quot;&gt; &lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;text placeholder=&quot;&#123;&#123;edit.mode == &apos;view&apos; ? &apos;&apos; : (edit.data_format == &apos;json&apos; ? edit.placeholder.json : edit.placeholder.form_data)&#125;&#125;&quot;&gt;&lt;/text&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ajax 请求</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(&apos;myCtrl&apos;, function ($scope, $http, $interval) &#123;</span><br><span class=\"line\">    $http(&#123;</span><br><span class=\"line\">        method: &apos;POST&apos;,</span><br><span class=\"line\">        url: base_url + &apos;/api/update&apos;,</span><br><span class=\"line\">        contentType: &apos;application/json;charset=UTF-8&apos;,</span><br><span class=\"line\">        data: data</span><br><span class=\"line\">    &#125;).then(function successCallback(rs) &#123;</span><br><span class=\"line\">        if (rs.data.code === 0) &#123;</span><br><span class=\"line\">            $(&apos;#myModal&apos;).modal(&apos;show&apos;)</span><br><span class=\"line\">            var row = rs.data.data</span><br><span class=\"line\">            all_data[row[&apos;id&apos;]] = row;</span><br><span class=\"line\">            list.refresh()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定时器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = $interval(function () &#123;</span><br><span class=\"line\">    func.monitor_list()</span><br><span class=\"line\">&#125;, 1000)</span><br></pre></td></tr></table></figure>\n<p><strong>表单</strong><br>radio:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;radio-inline&quot; ng-repeat=&quot;method in data_source.method_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;radio&quot; name=&quot;method[]&quot; value=&quot;&#123;&#123;method&#125;&#125;&quot; ng-model=&quot;edit.method&quot;</span><br><span class=\"line\">    ng-click=&quot;edit.clear_data_body()&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot;</span><br><span class=\"line\">    ng-change=&quot;edit.form_change()&quot;&gt; &#123;&#123;method&#125;&#125;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p>\n<p>checkbox<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline&quot; ng-repeat=&quot;(k,v) in data_source.group_list&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-change=&quot;edit.form_change()&quot; ng-model=&quot;edit.relation_group[k]&quot;</span><br><span class=\"line\">    ng-checked=&quot;edit.relation_group[k]&quot; ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-show=&quot;&#123;&#123;k!=&apos;请选择&apos;&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;span ng-show=&quot;&#123;&#123;k!=&apos;请选择&apos;&#125;&#125;&quot;&gt;&#123;&#123;v&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure></p>\n<p>select<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据源为map格式，key为字符</span><br><span class=\"line\">&lt;select class=&quot;form-control&quot; ng-model=&quot;edit.group&quot; ng-options=&quot;k as v for (k,v) in data_source.group_list&quot;</span><br><span class=\"line\">    ng-disabled=&quot;edit.mode==&apos;view&apos;&quot; ng-change=&quot;edit.form_change()&quot; required&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>路由</strong></p>\n<ul>\n<li>路由需要单独引入 <code>angular-route.js</code> 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.7.8/angular-route.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>body 内定义连接信息，引入<code>ng-view</code> 指令标签</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body ng-app=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/a&quot;&gt;click a&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/name/runner/age/33?height=180&quot;&gt;click b&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">        &lt;li&gt;&lt;a href=&quot;#/c&quot;&gt;click c&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;div ng-view&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模板内容:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head a.html b.html </span><br><span class=\"line\">==&gt; a.html &lt;==</span><br><span class=\"line\">&#123;&#123; content &#125;&#125;</span><br><span class=\"line\">==&gt; b.html &lt;==</span><br><span class=\"line\">page b: &#123;&#123;params&#125;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义各个页面的控制器和路由信息，防止 html5 url转义，需要配置 <code>$locationProvider.hashPrefix(&quot;&quot;);</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var app = angular.module(&apos;app&apos;, [&apos;ngRoute&apos;])</span><br><span class=\"line\">    .run(function ($rootScope, $location) &#123;</span><br><span class=\"line\">        var nav = &#123;</span><br><span class=\"line\">            data: [&apos;监控主页&apos;, &apos;API列表&apos;, &apos;服务列表&apos;, &apos;关于&apos;],</span><br><span class=\"line\">            current: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $rootScope.nav = nav</span><br><span class=\"line\"></span><br><span class=\"line\">        /* 监听路由的状态变化 */</span><br><span class=\"line\">        $rootScope.$on(&apos;$routeChangeStart&apos;, function (evt, next, current) &#123;</span><br><span class=\"line\">            //console.log(&apos;route begin change&apos;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $rootScope.$on(&apos;$routeChangeSuccess&apos;, function (evt, current, previous) &#123;</span><br><span class=\"line\">            //console.log(&apos;route have already changed ：&apos; + $location.path());</span><br><span class=\"line\">            // 路由改变触发对应菜单选中状态</span><br><span class=\"line\">            var path = $location.path()</span><br><span class=\"line\">            strs = path.split(&quot;/&quot;)</span><br><span class=\"line\">            if (strs.length &gt; 1) &#123;</span><br><span class=\"line\">                if (strs.length == 2) &#123;</span><br><span class=\"line\">                    nav.current = strs[1]</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    nav.current = strs[1] + &apos;_&apos; + strs[2]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .controller(&apos;aController&apos;, [&apos;$scope&apos;, function ($scope) &#123;</span><br><span class=\"line\">        $scope.content = &quot;page a&quot;;</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">    .controller(&apos;bController&apos;, [&apos;$scope&apos;, &apos;$routeParams&apos;, function ($scope, $routeParams) &#123;</span><br><span class=\"line\">        $scope.params = $routeParams</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">    .config([&apos;$routeProvider&apos;, &apos;$locationProvider&apos;, function ($routeProvider, $locationProvider) &#123;</span><br><span class=\"line\">        // $locationProvider.html5Mode(false);</span><br><span class=\"line\">        $locationProvider.hashPrefix(&quot;&quot;);</span><br><span class=\"line\">        $routeProvider.when(&apos;/a&apos;, &#123;</span><br><span class=\"line\">            controller: &apos;aController&apos;,</span><br><span class=\"line\">            templateUrl: &apos;./a.html&apos;</span><br><span class=\"line\">        &#125;).when(&apos;/name/:name/age/:age&apos;, &#123;</span><br><span class=\"line\">            // URL: index.html#/name/runner/age/33?height=180</span><br><span class=\"line\">            // $routeParams ==&gt; &#123;&quot;height&quot;:&quot;180&quot;,&quot;name&quot;:&quot;runner&quot;,&quot;age&quot;:&quot;33&quot;&#125;</span><br><span class=\"line\">            controller: &apos;bController&apos;,</span><br><span class=\"line\">            templateUrl: &apos;./b.html&apos;,</span><br><span class=\"line\">            resolve: &#123;</span><br><span class=\"line\">                // 延迟 1秒再跳转</span><br><span class=\"line\">                delay: function ($q, $timeout) &#123;</span><br><span class=\"line\">                    var delay = $q.defer();</span><br><span class=\"line\">                    $timeout(delay.resolve, 1000);</span><br><span class=\"line\">                    return delay.promise;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).otherwise(&#123;</span><br><span class=\"line\">            redirectTo: &apos;/&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>以上是在一个监控展示小项目中用到的操作，之后再写前端会尝试下 <code>vue</code> </p>"},{"title":"core-dns使用","date":"2019-10-16T17:58:10.000Z","share":true,"_content":"\n**core-dns-conf 配置**\n```\n. {\n    forward . 8.8.8.8\n    log\n    hosts {\n        10.111.8.170 www.sms.service\n        ttl 60\n        reload 1m\n        fallthrough\n    }\n}\n```\n\n**docker 方式启动**\n```shell\nsudo systemctl stop systemd-resolved\ndocker run -d \\\n    --net=\"host\" \\\n    -v /etc/hosts:/etc/hosts \\\n    -v /etc/resolv.conf:/etc/resolv.conf \\\n    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\\n    --name core-dns \\\n    coredns/coredns -conf /etc/core-dns-conf\n```\n\n**使用etcd做服务发现**\n\n```\nhttps://www.cnblogs.com/leffss/p/10148507.html\netcdctl put /coredns/net/apple/t1/a '{\"host\":\"10.111.8.185\",\"ttl\":30}'\n\n$ ETCDCTL_API=3 \n./etcdctl put /skydns/com/example/services/users \\\n'{\"host\": \"192.0.2.10\",\"port \": 20020,\"priority\": 10,\"weight\": 20}'\nOK\n$ ETCDCTL_API=3 \n./etcdctl get /skydns/com/example/services/users\n/skydns/com/example/services/users\n{\"host\": \"192.0.2.10\",\"port\": 20020,\"priority\": 10,\"weight\": 20}\n\n. {\n    etcd {   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com {\n        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成\n        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下\n        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开\n\n        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。\n        upstream 8.8.8.8:53 8.8.4.4:53\n\n        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件\n        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置\n    }\n    prometheus  :9153 # 监控插件\n    cache 160\n    loadbalance   # 负载均衡，开启DNS记录轮询策略\n    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析\n    log # 打印日志\n}\n```\n\n对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。\n\n```\ndocker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\\n    /bin/bash -c \\\n    \"git clone https://github.com/coredns/coredns.git && \\\n    cd coredns && \\\n    git checkout v1.5.0\"\n```\n\n","source":"_posts/core-dns.md","raw":"---\ntitle: \"core-dns使用\"\ndate: 2019-10-16 17:58:10\ntags: [coredns,etcd]\nshare: true\n---\n\n**core-dns-conf 配置**\n```\n. {\n    forward . 8.8.8.8\n    log\n    hosts {\n        10.111.8.170 www.sms.service\n        ttl 60\n        reload 1m\n        fallthrough\n    }\n}\n```\n\n**docker 方式启动**\n```shell\nsudo systemctl stop systemd-resolved\ndocker run -d \\\n    --net=\"host\" \\\n    -v /etc/hosts:/etc/hosts \\\n    -v /etc/resolv.conf:/etc/resolv.conf \\\n    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\\n    --name core-dns \\\n    coredns/coredns -conf /etc/core-dns-conf\n```\n\n**使用etcd做服务发现**\n\n```\nhttps://www.cnblogs.com/leffss/p/10148507.html\netcdctl put /coredns/net/apple/t1/a '{\"host\":\"10.111.8.185\",\"ttl\":30}'\n\n$ ETCDCTL_API=3 \n./etcdctl put /skydns/com/example/services/users \\\n'{\"host\": \"192.0.2.10\",\"port \": 20020,\"priority\": 10,\"weight\": 20}'\nOK\n$ ETCDCTL_API=3 \n./etcdctl get /skydns/com/example/services/users\n/skydns/com/example/services/users\n{\"host\": \"192.0.2.10\",\"port\": 20020,\"priority\": 10,\"weight\": 20}\n\n. {\n    etcd {   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com {\n        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成\n        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下\n        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开\n\n        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。\n        upstream 8.8.8.8:53 8.8.4.4:53\n\n        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件\n        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置\n    }\n    prometheus  :9153 # 监控插件\n    cache 160\n    loadbalance   # 负载均衡，开启DNS记录轮询策略\n    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析\n    log # 打印日志\n}\n```\n\n对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。\n\n```\ndocker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\\n    /bin/bash -c \\\n    \"git clone https://github.com/coredns/coredns.git && \\\n    cd coredns && \\\n    git checkout v1.5.0\"\n```\n\n","slug":"core-dns","published":1,"updated":"2019-11-14T03:33:28.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkh00090wpbo727ymro","content":"<p><strong>core-dns-conf 配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. &#123;</span><br><span class=\"line\">    forward . 8.8.8.8</span><br><span class=\"line\">    log</span><br><span class=\"line\">    hosts &#123;</span><br><span class=\"line\">        10.111.8.170 www.sms.service</span><br><span class=\"line\">        ttl 60</span><br><span class=\"line\">        reload 1m</span><br><span class=\"line\">        fallthrough</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>docker 方式启动</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop systemd-resolved</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --net=\"host\" \\</span><br><span class=\"line\">    -v /etc/hosts:/etc/hosts \\</span><br><span class=\"line\">    -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\</span><br><span class=\"line\">    --name core-dns \\</span><br><span class=\"line\">    coredns/coredns -conf /etc/core-dns-conf</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用etcd做服务发现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leffss/p/10148507.html</span><br><span class=\"line\">etcdctl put /coredns/net/apple/t1/a &apos;&#123;&quot;host&quot;:&quot;10.111.8.185&quot;,&quot;ttl&quot;:30&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl put /skydns/com/example/services/users \\</span><br><span class=\"line\">&apos;&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port &quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;&apos;</span><br><span class=\"line\">OK</span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl get /skydns/com/example/services/users</span><br><span class=\"line\">/skydns/com/example/services/users</span><br><span class=\"line\">&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port&quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">. &#123;</span><br><span class=\"line\">    etcd &#123;   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com &#123;</span><br><span class=\"line\">        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成</span><br><span class=\"line\">        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下</span><br><span class=\"line\">        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开</span><br><span class=\"line\"></span><br><span class=\"line\">        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。</span><br><span class=\"line\">        upstream 8.8.8.8:53 8.8.4.4:53</span><br><span class=\"line\"></span><br><span class=\"line\">        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件</span><br><span class=\"line\">        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prometheus  :9153 # 监控插件</span><br><span class=\"line\">    cache 160</span><br><span class=\"line\">    loadbalance   # 负载均衡，开启DNS记录轮询策略</span><br><span class=\"line\">    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析</span><br><span class=\"line\">    log # 打印日志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\</span><br><span class=\"line\">    /bin/bash -c \\</span><br><span class=\"line\">    &quot;git clone https://github.com/coredns/coredns.git &amp;&amp; \\</span><br><span class=\"line\">    cd coredns &amp;&amp; \\</span><br><span class=\"line\">    git checkout v1.5.0&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>core-dns-conf 配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. &#123;</span><br><span class=\"line\">    forward . 8.8.8.8</span><br><span class=\"line\">    log</span><br><span class=\"line\">    hosts &#123;</span><br><span class=\"line\">        10.111.8.170 www.sms.service</span><br><span class=\"line\">        ttl 60</span><br><span class=\"line\">        reload 1m</span><br><span class=\"line\">        fallthrough</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>docker 方式启动</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop systemd-resolved</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --net=\"host\" \\</span><br><span class=\"line\">    -v /etc/hosts:/etc/hosts \\</span><br><span class=\"line\">    -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">    -v /home/runner/work/coredns/core-dns/etc/core-dns-conf:/etc/core-dns-conf \\</span><br><span class=\"line\">    --name core-dns \\</span><br><span class=\"line\">    coredns/coredns -conf /etc/core-dns-conf</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用etcd做服务发现</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.cnblogs.com/leffss/p/10148507.html</span><br><span class=\"line\">etcdctl put /coredns/net/apple/t1/a &apos;&#123;&quot;host&quot;:&quot;10.111.8.185&quot;,&quot;ttl&quot;:30&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl put /skydns/com/example/services/users \\</span><br><span class=\"line\">&apos;&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port &quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;&apos;</span><br><span class=\"line\">OK</span><br><span class=\"line\">$ ETCDCTL_API=3 </span><br><span class=\"line\">./etcdctl get /skydns/com/example/services/users</span><br><span class=\"line\">/skydns/com/example/services/users</span><br><span class=\"line\">&#123;&quot;host&quot;: &quot;192.0.2.10&quot;,&quot;port&quot;: 20020,&quot;priority&quot;: 10,&quot;weight&quot;: 20&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">. &#123;</span><br><span class=\"line\">    etcd &#123;   # 配置启用etcd插件,后面可以指定域名,例如 etcd test.com &#123;</span><br><span class=\"line\">        stubzones # 启用存根区域功能。 stubzone仅在位于指定的第一个区域下方的etcd树中完成</span><br><span class=\"line\">        path /coredns # etcd里面的路径 默认为/skydns，以后所有的dns记录就是存储在该存根路径底下</span><br><span class=\"line\">        endpoint http://172.16.101.209:2379 # etcd访问地址，多个空格分开</span><br><span class=\"line\"></span><br><span class=\"line\">        # upstream设置要使用的上游解析程序解决指向外部域名的在etcd（认为CNAME）中找到的外部域名。</span><br><span class=\"line\">        upstream 8.8.8.8:53 8.8.4.4:53</span><br><span class=\"line\"></span><br><span class=\"line\">        fallthrough # 如果区域匹配但不能生成记录，则将请求传递给下一个插件</span><br><span class=\"line\">        # tls CERT KEY CACERT # 可选参数，etcd认证证书设置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prometheus  :9153 # 监控插件</span><br><span class=\"line\">    cache 160</span><br><span class=\"line\">    loadbalance   # 负载均衡，开启DNS记录轮询策略</span><br><span class=\"line\">    forward . 8.8.8.8:53 8.8.4.4:53 # 上面etcd未查询到的请求转发给设置的DNS服务器解析</span><br><span class=\"line\">    log # 打印日志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于传统的DNS服务器（例如BIND），管理员通常将主区域数据作为文件进行管理。 最近，DNS服务器已开始支持从其他来源（例如数据库）加载主区域数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -u $(id -u):$(id -g) -v $PWD:/go golang:1.12 \\</span><br><span class=\"line\">    /bin/bash -c \\</span><br><span class=\"line\">    &quot;git clone https://github.com/coredns/coredns.git &amp;&amp; \\</span><br><span class=\"line\">    cd coredns &amp;&amp; \\</span><br><span class=\"line\">    git checkout v1.5.0&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":" clickhouse 多分片集群搭建","date":"2020-08-25T14:44:00.000Z","share":true,"_content":"\nck分布式集群，采用`本地表`、`分布式表` 形式实现。本地表作为分片，分布式表作为数据集合。对于分布式表的插入会随机分配到配置的分片上，查询则会得到所有的数据集合。\n\n本地表采用 Replicated 引擎，实现主备之间的数据同步，可以参考上篇文章 {% post_link clickhouse-ha clickhouse单分片三副本高可用搭建%}，分布表采用 Distributed 引擎。\n\n由于只有3台机器 a001、a002、a003，采用每台机器上起两个服务、一主一备，备服务 `config.xml` 端口配置\n\n```xml\n<http_port>8124</http_port>\n<tcp_port>9001</tcp_port>\n<interserver_http_port>9010</interserver_http_port>\n```\n\n`metrika.xml`配置，下面是环形备份，实现一台机器挂了，分布式表查询不受影响\n\n```xml\n<yandex>\n  <!-- 集群配置 -->\n  <clickhouse_remote_servers>\n    <!-- 3分片2备份 -->\n    <cluster_3shards_2replicas>\n      <!-- 数据分片1  -->\n      <shard>\n        <weight>1</weight>\n        <!-- 是否只写入所有replica中的一台，与ZooKeeper配合进行复制 -->\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a001</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a002</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n      <!-- 数据分片2  -->\n      <shard>\n        <weight>1</weight>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a002</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a003</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n      <!-- 数据分片3  -->\n      <shard>\n        <weight>1</weight>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a003</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a001</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n    </cluster_3shards_2replicas>\n    <!-- 1分片3备份 -->\n    <cluster_1shards_3replicas>\n      <!-- 数据分片1  -->\n      <shard>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a001</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a002</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a003</host>\n          <port>9000</port>\n        </replica>\n      </shard>\n    </cluster_1shards_3replicas>\n  </clickhouse_remote_servers>\n  <zookeeper-servers>\n    <node index=\"1\">\n      <host>10.2.4.34</host>\n      <port>2181</port>\n    </node>\n    <node index=\"2\">\n      <host>10.2.4.35</host>\n      <port>2181</port>\n    </node>\n    <node index=\"3\">\n      <host>10.2.4.36</host>\n      <port>2181</port>\n    </node>\n  </zookeeper-servers>\n  <macros> <!--a001作为第3分片备份a003-->\n    <layer>01</layer>\n    <shard>03</shard>\n    <replica>cluster01-03-a001</replica>\n  </macros>\n</yandex>\n```\n<!-- more -->\n\n**备服务启动脚本**\n\n```sh\n# cat d_clickhouse2.sh\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse2/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse2/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse2/data:/var/lib/clickhouse \\\n        -v /root/clickhouse2/log:/var/log/clickhouse-server/ \\\n        --name clickhouse2 \\\n        yandex/clickhouse-server:19.14\n```\n\n**查看集群**\n```\nSELECT *\nFROM system.clusters\n\n┌─cluster───────────────────────────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address─┬─port─┬─is_local─┬─user────┬─default_database─┐\n│ cluster_1shards_3replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │\n│ cluster_1shards_3replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9000 │        1 │ default │                  │\n│ cluster_1shards_3replicas         │         1 │            1 │           3 │ a003      │ 10.2.4.36    │ 9000 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9001 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         2 │            1 │           1 │ a002      │ 10.2.4.35    │ 9000 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         2 │            1 │           2 │ a003      │ 10.2.4.36    │ 9001 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         3 │            1 │           1 │ a003      │ 10.2.4.36    │ 9000 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         3 │            1 │           2 │ a001      │ 10.2.4.34    │ 9001 │        0 │ default │                  │\n└───────────────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴──────┴──────────┴─────────┴──────────────────┘\n```\n\n**创建多分片本地表**\n\n```sql\nCREATE TABLE IF NOT EXISTS default.user_local ON CLUSTER 'cluster_3shards_2replicas' (\n  ts_date DateTime DEFAULT now(),\n  user_id Int64\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/default/user_local','{replica}')\nPARTITION BY toYYYYMMDD(ts_date)\nORDER BY (ts_date)\nSETTINGS index_granularity = 8192;\n\n---删除本地表\nDROP TABLE default.events_local ON CLUSTER 'cluster_3shards_2replicas';\n```\n\n**创建分布式表**\n\n```sql\nCREATE TABLE IF NOT EXISTS default.user_all ON CLUSTER cluster_3shards_2replicas\nAS default.user_local\nENGINE = Distributed(cluster_3shards_2replicas,default,user_local,rand());\n\n---插入数据\nINSERT INTO user_all (user_id) values(888);\n\n---更新\nALTER TABLE user_local ON CLUSTER cluster_3shards_2replicas UPDATE user_id = '2' WHERE user_id = '1'\n```\n\n**创建单分片表**\n```sql\nCREATE TABLE IF NOT EXISTS soa.user_behavior ON CLUSTER cluster_1shards_3replicas\n(\n    `date` Date DEFAULT today(),\n    `datetime` DateTime DEFAULT now(),\n    `user` String,\n    `service` String,\n    `operation` String,\n    `content` String,\n    `extra` String,\n    `op_time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-01/user_behavior', '{replica}')\nPARTITION BY date\nORDER BY (date, user, intHash64(datetime))\nSAMPLE BY intHash64(datetime)\nSETTINGS index_granularity = 8192\n```\n\n**删除表** （先删除 zookeeper 目录，再删除 clickhouse 硬盘文件）\n\n```\n/clickhouse/tables/ # zk\n/var/lib/clickhouse/data/data/default/ \n/var/lib/clickhouse/data/metadata/default/*.sql\nDROP TABLE user_local\nDETACH TABLE user_local\n```\n\n**客户端连接备服务**\n\n```\nclickhouse-client -m --port 9001\n```\n\n**测试**\n\n- 在 a001 本地表`user_local`插入数据，会自动通过到 a002 备服务本地表\n\n- 在分布式表`user_all`插入数据，会分配到不同的分片上\n\n- 停掉 a001 上的两个clickhouse 服务，查询user_all正常\n\n\n\n### 实操\n\n```sql\n--- 创建数据库\nCREATE DATABASE IF NOT EXISTS biw ON CLUSTER cluster_3shards_2replicas\n\n--- 本地复制表\nCREATE TABLE IF NOT EXISTS biw.stock_warehouse_receipt_local ON CLUSTER cluster_3shards_2replicas\n(\n    `op_receipt_id` Int64,\n    `ware_trans_id` String,\n    `ware_id` Nullable(Int64),\n    `inventory_type` Nullable(String),\n    `sku_id` Nullable(Int32),\n    `sku_lot` Nullable(Int64),\n    `op_type` Nullable(Int16),\n    `origin_code` Nullable(String),\n    `origin_receipt_type` Nullable(Int16),\n    `ower_id` Nullable(Int16),\n    `quantity` Nullable(Int32),\n    `origin_num` Nullable(Int32),\n    `left_num` Nullable(Int32),\n    `src_system` Nullable(String),\n    `product_date` Nullable(Int32),\n    `shelf_life_days` Nullable(Int16),\n    `expire_date` Nullable(Int32),\n    `op_date` Nullable(Int32),\n    `bill_id` Nullable(Int64),\n    `bill_code` Nullable(String),\n    `receipt_type` Nullable(Int32),\n    `operator` Nullable(Int64),\n    `operator_name` Nullable(String),\n    `create_date` Int32,\n    `frozen_flag` Nullable(Int8)\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/stock_warehouse_receipt', '{replica}')\nPARTITION BY toYYYYMMDD(toDateTime(create_date))\nORDER BY create_date\nSETTINGS index_granularity = 8192\n\n--- 分布式表\nCREATE TABLE IF NOT EXISTS biw.stock_warehouse_receipt_all ON CLUSTER cluster_3shards_2replicas AS biw.stock_warehouse_receipt_local\nENGINE = Distributed(cluster_3shards_2replicas, biw, stock_warehouse_receipt_local, rand())\n\n--- 插入数据\nINSERT INTO biw.stock_warehouse_receipt_all SELECT *\nFROM url('http://10.0.10.16:8123/?database=default&query=select%20*%20from%20stock_warehouse_receipt&user=default&password=******', TabSeparated, '`op_receipt_id` Int64, `ware_trans_id` String, `ware_id` Nullable(Int64), `inventory_type` Nullable(String), `sku_id` Nullable(Int32), `sku_lot` Nullable(Int64), `op_type` Nullable(Int16), `origin_code` Nullable(String), `origin_receipt_type` Nullable(Int16), `ower_id` Nullable(Int16), `quantity` Nullable(Int32), `origin_num` Nullable(Int32), `left_num` Nullable(Int32), `src_system` Nullable(String), `product_date` Nullable(Int32), `shelf_life_days` Nullable(Int16), `expire_date` Nullable(Int32), `op_date` Nullable(Int32), `bill_id` Nullable(Int64), `bill_code` Nullable(String), `receipt_type` Nullable(Int32), `operator` Nullable(Int64), `operator_name` Nullable(String),`create_date` Int32, `frozen_flag` Nullable(Int8)')\n```\n\n其中一台机器`stock_warehouse_receipt_local`数据，和`stock_warehouse_receipt_all`表数据\n\n```mysql\nSELECT count() AS cnt\nFROM biw.stock_warehouse_receipt_local\nUNION ALL\nSELECT count()\nFROM biw.stock_warehouse_receipt_all\n\n┌──────cnt─┐\n│ 92452812 │\n└──────────┘\n┌───────cnt─┐\n│ 277354174 │\n└───────────┘\n\n2 rows in set. Elapsed: 0.080 sec. Processed 369.81 million rows, 1.11 GB (4.65 billion rows/s., 13.95 GB/s.)\n```\n\n分组查询速度对比:\n\n![单表](/img/clickhouse/4.png)\n\n![分布式表](/img/clickhouse/5.png)\n\n\n按条件查询对比:\n\n![单表](/img/clickhouse/6.png)\n\n![分布式表](/img/clickhouse/7.png)\n\n可以看出分布式表查询速度明显优于单表查询。\n\n\n参考：\n\n[ClickHouse高可用集群的安装与部署](https://www.jianshu.com/p/78271ba9969b)\n\n[ClickHouse复制表、分布式表机制与使用方法](https://www.jianshu.com/p/ab811cceb856)\n\n[用Docker快速上手Clickhouse](http://sineyuan.github.io/post/clickhouse-docker-quick-start/)","source":"_posts/clickhouse-3shard.md","raw":"---\ntitle: \" clickhouse 多分片集群搭建\"\ndate: 2020-08-25 14:44:00\ntags: [clickhouse]\nshare: true\n---\n\nck分布式集群，采用`本地表`、`分布式表` 形式实现。本地表作为分片，分布式表作为数据集合。对于分布式表的插入会随机分配到配置的分片上，查询则会得到所有的数据集合。\n\n本地表采用 Replicated 引擎，实现主备之间的数据同步，可以参考上篇文章 {% post_link clickhouse-ha clickhouse单分片三副本高可用搭建%}，分布表采用 Distributed 引擎。\n\n由于只有3台机器 a001、a002、a003，采用每台机器上起两个服务、一主一备，备服务 `config.xml` 端口配置\n\n```xml\n<http_port>8124</http_port>\n<tcp_port>9001</tcp_port>\n<interserver_http_port>9010</interserver_http_port>\n```\n\n`metrika.xml`配置，下面是环形备份，实现一台机器挂了，分布式表查询不受影响\n\n```xml\n<yandex>\n  <!-- 集群配置 -->\n  <clickhouse_remote_servers>\n    <!-- 3分片2备份 -->\n    <cluster_3shards_2replicas>\n      <!-- 数据分片1  -->\n      <shard>\n        <weight>1</weight>\n        <!-- 是否只写入所有replica中的一台，与ZooKeeper配合进行复制 -->\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a001</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a002</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n      <!-- 数据分片2  -->\n      <shard>\n        <weight>1</weight>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a002</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a003</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n      <!-- 数据分片3  -->\n      <shard>\n        <weight>1</weight>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a003</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a001</host>\n          <port>9001</port>\n        </replica>\n      </shard>\n    </cluster_3shards_2replicas>\n    <!-- 1分片3备份 -->\n    <cluster_1shards_3replicas>\n      <!-- 数据分片1  -->\n      <shard>\n        <internal_replication>true</internal_replication>\n        <replica>\n          <host>a001</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a002</host>\n          <port>9000</port>\n        </replica>\n        <replica>\n          <host>a003</host>\n          <port>9000</port>\n        </replica>\n      </shard>\n    </cluster_1shards_3replicas>\n  </clickhouse_remote_servers>\n  <zookeeper-servers>\n    <node index=\"1\">\n      <host>10.2.4.34</host>\n      <port>2181</port>\n    </node>\n    <node index=\"2\">\n      <host>10.2.4.35</host>\n      <port>2181</port>\n    </node>\n    <node index=\"3\">\n      <host>10.2.4.36</host>\n      <port>2181</port>\n    </node>\n  </zookeeper-servers>\n  <macros> <!--a001作为第3分片备份a003-->\n    <layer>01</layer>\n    <shard>03</shard>\n    <replica>cluster01-03-a001</replica>\n  </macros>\n</yandex>\n```\n<!-- more -->\n\n**备服务启动脚本**\n\n```sh\n# cat d_clickhouse2.sh\ndocker run -d \\\n        --network=host \\\n        -v /root/clickhouse2/conf/config.xml:/etc/clickhouse-server/config.xml \\\n        -v /root/clickhouse2/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\\n        -v /root/clickhouse2/data:/var/lib/clickhouse \\\n        -v /root/clickhouse2/log:/var/log/clickhouse-server/ \\\n        --name clickhouse2 \\\n        yandex/clickhouse-server:19.14\n```\n\n**查看集群**\n```\nSELECT *\nFROM system.clusters\n\n┌─cluster───────────────────────────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address─┬─port─┬─is_local─┬─user────┬─default_database─┐\n│ cluster_1shards_3replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │\n│ cluster_1shards_3replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9000 │        1 │ default │                  │\n│ cluster_1shards_3replicas         │         1 │            1 │           3 │ a003      │ 10.2.4.36    │ 9000 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9001 │        1 │ default │                  │\n│ cluster_3shards_2replicas         │         2 │            1 │           1 │ a002      │ 10.2.4.35    │ 9000 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         2 │            1 │           2 │ a003      │ 10.2.4.36    │ 9001 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         3 │            1 │           1 │ a003      │ 10.2.4.36    │ 9000 │        0 │ default │                  │\n│ cluster_3shards_2replicas         │         3 │            1 │           2 │ a001      │ 10.2.4.34    │ 9001 │        0 │ default │                  │\n└───────────────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴──────┴──────────┴─────────┴──────────────────┘\n```\n\n**创建多分片本地表**\n\n```sql\nCREATE TABLE IF NOT EXISTS default.user_local ON CLUSTER 'cluster_3shards_2replicas' (\n  ts_date DateTime DEFAULT now(),\n  user_id Int64\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/default/user_local','{replica}')\nPARTITION BY toYYYYMMDD(ts_date)\nORDER BY (ts_date)\nSETTINGS index_granularity = 8192;\n\n---删除本地表\nDROP TABLE default.events_local ON CLUSTER 'cluster_3shards_2replicas';\n```\n\n**创建分布式表**\n\n```sql\nCREATE TABLE IF NOT EXISTS default.user_all ON CLUSTER cluster_3shards_2replicas\nAS default.user_local\nENGINE = Distributed(cluster_3shards_2replicas,default,user_local,rand());\n\n---插入数据\nINSERT INTO user_all (user_id) values(888);\n\n---更新\nALTER TABLE user_local ON CLUSTER cluster_3shards_2replicas UPDATE user_id = '2' WHERE user_id = '1'\n```\n\n**创建单分片表**\n```sql\nCREATE TABLE IF NOT EXISTS soa.user_behavior ON CLUSTER cluster_1shards_3replicas\n(\n    `date` Date DEFAULT today(),\n    `datetime` DateTime DEFAULT now(),\n    `user` String,\n    `service` String,\n    `operation` String,\n    `content` String,\n    `extra` String,\n    `op_time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-01/user_behavior', '{replica}')\nPARTITION BY date\nORDER BY (date, user, intHash64(datetime))\nSAMPLE BY intHash64(datetime)\nSETTINGS index_granularity = 8192\n```\n\n**删除表** （先删除 zookeeper 目录，再删除 clickhouse 硬盘文件）\n\n```\n/clickhouse/tables/ # zk\n/var/lib/clickhouse/data/data/default/ \n/var/lib/clickhouse/data/metadata/default/*.sql\nDROP TABLE user_local\nDETACH TABLE user_local\n```\n\n**客户端连接备服务**\n\n```\nclickhouse-client -m --port 9001\n```\n\n**测试**\n\n- 在 a001 本地表`user_local`插入数据，会自动通过到 a002 备服务本地表\n\n- 在分布式表`user_all`插入数据，会分配到不同的分片上\n\n- 停掉 a001 上的两个clickhouse 服务，查询user_all正常\n\n\n\n### 实操\n\n```sql\n--- 创建数据库\nCREATE DATABASE IF NOT EXISTS biw ON CLUSTER cluster_3shards_2replicas\n\n--- 本地复制表\nCREATE TABLE IF NOT EXISTS biw.stock_warehouse_receipt_local ON CLUSTER cluster_3shards_2replicas\n(\n    `op_receipt_id` Int64,\n    `ware_trans_id` String,\n    `ware_id` Nullable(Int64),\n    `inventory_type` Nullable(String),\n    `sku_id` Nullable(Int32),\n    `sku_lot` Nullable(Int64),\n    `op_type` Nullable(Int16),\n    `origin_code` Nullable(String),\n    `origin_receipt_type` Nullable(Int16),\n    `ower_id` Nullable(Int16),\n    `quantity` Nullable(Int32),\n    `origin_num` Nullable(Int32),\n    `left_num` Nullable(Int32),\n    `src_system` Nullable(String),\n    `product_date` Nullable(Int32),\n    `shelf_life_days` Nullable(Int16),\n    `expire_date` Nullable(Int32),\n    `op_date` Nullable(Int32),\n    `bill_id` Nullable(Int64),\n    `bill_code` Nullable(String),\n    `receipt_type` Nullable(Int32),\n    `operator` Nullable(Int64),\n    `operator_name` Nullable(String),\n    `create_date` Int32,\n    `frozen_flag` Nullable(Int8)\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/stock_warehouse_receipt', '{replica}')\nPARTITION BY toYYYYMMDD(toDateTime(create_date))\nORDER BY create_date\nSETTINGS index_granularity = 8192\n\n--- 分布式表\nCREATE TABLE IF NOT EXISTS biw.stock_warehouse_receipt_all ON CLUSTER cluster_3shards_2replicas AS biw.stock_warehouse_receipt_local\nENGINE = Distributed(cluster_3shards_2replicas, biw, stock_warehouse_receipt_local, rand())\n\n--- 插入数据\nINSERT INTO biw.stock_warehouse_receipt_all SELECT *\nFROM url('http://10.0.10.16:8123/?database=default&query=select%20*%20from%20stock_warehouse_receipt&user=default&password=******', TabSeparated, '`op_receipt_id` Int64, `ware_trans_id` String, `ware_id` Nullable(Int64), `inventory_type` Nullable(String), `sku_id` Nullable(Int32), `sku_lot` Nullable(Int64), `op_type` Nullable(Int16), `origin_code` Nullable(String), `origin_receipt_type` Nullable(Int16), `ower_id` Nullable(Int16), `quantity` Nullable(Int32), `origin_num` Nullable(Int32), `left_num` Nullable(Int32), `src_system` Nullable(String), `product_date` Nullable(Int32), `shelf_life_days` Nullable(Int16), `expire_date` Nullable(Int32), `op_date` Nullable(Int32), `bill_id` Nullable(Int64), `bill_code` Nullable(String), `receipt_type` Nullable(Int32), `operator` Nullable(Int64), `operator_name` Nullable(String),`create_date` Int32, `frozen_flag` Nullable(Int8)')\n```\n\n其中一台机器`stock_warehouse_receipt_local`数据，和`stock_warehouse_receipt_all`表数据\n\n```mysql\nSELECT count() AS cnt\nFROM biw.stock_warehouse_receipt_local\nUNION ALL\nSELECT count()\nFROM biw.stock_warehouse_receipt_all\n\n┌──────cnt─┐\n│ 92452812 │\n└──────────┘\n┌───────cnt─┐\n│ 277354174 │\n└───────────┘\n\n2 rows in set. Elapsed: 0.080 sec. Processed 369.81 million rows, 1.11 GB (4.65 billion rows/s., 13.95 GB/s.)\n```\n\n分组查询速度对比:\n\n![单表](/img/clickhouse/4.png)\n\n![分布式表](/img/clickhouse/5.png)\n\n\n按条件查询对比:\n\n![单表](/img/clickhouse/6.png)\n\n![分布式表](/img/clickhouse/7.png)\n\n可以看出分布式表查询速度明显优于单表查询。\n\n\n参考：\n\n[ClickHouse高可用集群的安装与部署](https://www.jianshu.com/p/78271ba9969b)\n\n[ClickHouse复制表、分布式表机制与使用方法](https://www.jianshu.com/p/ab811cceb856)\n\n[用Docker快速上手Clickhouse](http://sineyuan.github.io/post/clickhouse-docker-quick-start/)","slug":"clickhouse-3shard","published":1,"updated":"2020-08-26T03:54:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkj000a0wpbx6l1qerf","content":"<p>ck分布式集群，采用<code>本地表</code>、<code>分布式表</code> 形式实现。本地表作为分片，分布式表作为数据集合。对于分布式表的插入会随机分配到配置的分片上，查询则会得到所有的数据集合。</p>\n<p>本地表采用 Replicated 引擎，实现主备之间的数据同步，可以参考上篇文章 <a href=\"/2020/06/clickhouse-ha/\" title=\"clickhouse单分片三副本高可用搭建\">clickhouse单分片三副本高可用搭建</a>，分布表采用 Distributed 引擎。</p>\n<p>由于只有3台机器 a001、a002、a003，采用每台机器上起两个服务、一主一备，备服务 <code>config.xml</code> 端口配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">http_port</span>&gt;</span>8124<span class=\"tag\">&lt;/<span class=\"name\">http_port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tcp_port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">tcp_port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interserver_http_port</span>&gt;</span>9010<span class=\"tag\">&lt;/<span class=\"name\">interserver_http_port</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>metrika.xml</code>配置，下面是环形备份，实现一台机器挂了，分布式表查询不受影响</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 集群配置 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">clickhouse_remote_servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 3分片2备份 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cluster_3shards_2replicas</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片1  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 是否只写入所有replica中的一台，与ZooKeeper配合进行复制 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片2  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片3  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cluster_3shards_2replicas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1分片3备份 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cluster_1shards_3replicas</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片1  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cluster_1shards_3replicas</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">clickhouse_remote_servers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zookeeper-servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.34<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.35<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.36<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">zookeeper-servers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">macros</span>&gt;</span> <span class=\"comment\">&lt;!--a001作为第3分片备份a003--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layer</span>&gt;</span>01<span class=\"tag\">&lt;/<span class=\"name\">layer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span>03<span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span>cluster01-03-a001<span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">macros</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>备服务启动脚本</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat d_clickhouse2.sh</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse2/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse2/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse2/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse2/<span class=\"built_in\">log</span>:/var/<span class=\"built_in\">log</span>/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse2 \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.14</span><br></pre></td></tr></table></figure>\n<p><strong>查看集群</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM system.clusters</span><br><span class=\"line\"></span><br><span class=\"line\">┌─cluster───────────────────────────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address─┬─port─┬─is_local─┬─user────┬─default_database─┐</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           3 │ a003      │ 10.2.4.36    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9001 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         2 │            1 │           1 │ a002      │ 10.2.4.35    │ 9000 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         2 │            1 │           2 │ a003      │ 10.2.4.36    │ 9001 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         3 │            1 │           1 │ a003      │ 10.2.4.36    │ 9000 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         3 │            1 │           2 │ a001      │ 10.2.4.34    │ 9001 │        0 │ default │                  │</span><br><span class=\"line\">└───────────────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴──────┴──────────┴─────────┴──────────────────┘</span><br></pre></td></tr></table></figure></p>\n<p><strong>创建多分片本地表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> default.user_local <span class=\"keyword\">ON</span> CLUSTER <span class=\"string\">'cluster_3shards_2replicas'</span> (</span><br><span class=\"line\">  ts_date DateTime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>(),</span><br><span class=\"line\">  user_id Int64</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/default/user_local'</span>,<span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMMDD(ts_date)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (ts_date)</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---删除本地表</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> default.events_local <span class=\"keyword\">ON</span> CLUSTER <span class=\"string\">'cluster_3shards_2replicas'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>创建分布式表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> default.user_all <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\"><span class=\"keyword\">AS</span> default.user_local</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">Distributed</span>(cluster_3shards_2replicas,<span class=\"keyword\">default</span>,user_local,<span class=\"keyword\">rand</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_all (user_id) <span class=\"keyword\">values</span>(<span class=\"number\">888</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---更新</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> user_local <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas <span class=\"keyword\">UPDATE</span> user_id = <span class=\"string\">'2'</span> <span class=\"keyword\">WHERE</span> user_id = <span class=\"string\">'1'</span></span><br></pre></td></tr></table></figure>\n<p><strong>创建单分片表</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> soa.user_behavior <span class=\"keyword\">ON</span> CLUSTER cluster_1shards_3replicas</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`date`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> today(),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> DateTime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>(),</span><br><span class=\"line\">    <span class=\"string\">`user`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`service`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`operation`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`content`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`extra`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`op_time`</span> DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-01/user_behavior'</span>, <span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (<span class=\"built_in\">date</span>, <span class=\"keyword\">user</span>, intHash64(datetime))</span><br><span class=\"line\"><span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span> intHash64(datetime)</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>删除表</strong> （先删除 zookeeper 目录，再删除 clickhouse 硬盘文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/clickhouse/tables/ # zk</span><br><span class=\"line\">/var/lib/clickhouse/data/data/default/ </span><br><span class=\"line\">/var/lib/clickhouse/data/metadata/default/*.sql</span><br><span class=\"line\">DROP TABLE user_local</span><br><span class=\"line\">DETACH TABLE user_local</span><br></pre></td></tr></table></figure>\n<p><strong>客户端连接备服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -m --port 9001</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<ul>\n<li><p>在 a001 本地表<code>user_local</code>插入数据，会自动通过到 a002 备服务本地表</p>\n</li>\n<li><p>在分布式表<code>user_all</code>插入数据，会分配到不同的分片上</p>\n</li>\n<li><p>停掉 a001 上的两个clickhouse 服务，查询user_all正常</p>\n</li>\n</ul>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- 创建数据库</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 本地复制表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw.stock_warehouse_receipt_local <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`op_receipt_id`</span> Int64,</span><br><span class=\"line\">    <span class=\"string\">`ware_trans_id`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`ware_id`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`inventory_type`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sku_id`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`sku_lot`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`op_type`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`origin_code`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`origin_receipt_type`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`ower_id`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`quantity`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`origin_num`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`left_num`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`src_system`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`product_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`shelf_life_days`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`expire_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`op_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`bill_id`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`bill_code`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`receipt_type`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`operator`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`operator_name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`create_date`</span> Int32,</span><br><span class=\"line\">    <span class=\"string\">`frozen_flag`</span> Nullable(<span class=\"built_in\">Int8</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/stock_warehouse_receipt'</span>, <span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMMDD(toDateTime(create_date))</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_date</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw.stock_warehouse_receipt_all <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas <span class=\"keyword\">AS</span> biw.stock_warehouse_receipt_local</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">Distributed</span>(cluster_3shards_2replicas, biw, stock_warehouse_receipt_local, <span class=\"keyword\">rand</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> biw.stock_warehouse_receipt_all <span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">url</span>(<span class=\"string\">'http://10.0.10.16:8123/?database=default&amp;query=select%20*%20from%20stock_warehouse_receipt&amp;user=default&amp;password=******'</span>, TabSeparated, <span class=\"string\">'`op_receipt_id` Int64, `ware_trans_id` String, `ware_id` Nullable(Int64), `inventory_type` Nullable(String), `sku_id` Nullable(Int32), `sku_lot` Nullable(Int64), `op_type` Nullable(Int16), `origin_code` Nullable(String), `origin_receipt_type` Nullable(Int16), `ower_id` Nullable(Int16), `quantity` Nullable(Int32), `origin_num` Nullable(Int32), `left_num` Nullable(Int32), `src_system` Nullable(String), `product_date` Nullable(Int32), `shelf_life_days` Nullable(Int16), `expire_date` Nullable(Int32), `op_date` Nullable(Int32), `bill_id` Nullable(Int64), `bill_code` Nullable(String), `receipt_type` Nullable(Int32), `operator` Nullable(Int64), `operator_name` Nullable(String),`create_date` Int32, `frozen_flag` Nullable(Int8)'</span>)</span><br></pre></td></tr></table></figure>\n<p>其中一台机器<code>stock_warehouse_receipt_local</code>数据，和<code>stock_warehouse_receipt_all</code>表数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT count() AS cnt</span><br><span class=\"line\">FROM biw.stock_warehouse_receipt_local</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT count()</span><br><span class=\"line\">FROM biw.stock_warehouse_receipt_all</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────cnt─┐</span><br><span class=\"line\">│ 92452812 │</span><br><span class=\"line\">└──────────┘</span><br><span class=\"line\">┌───────cnt─┐</span><br><span class=\"line\">│ 277354174 │</span><br><span class=\"line\">└───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">2 rows in set. Elapsed: 0.080 sec. Processed 369.81 million rows, 1.11 GB (4.65 billion rows/s., 13.95 GB/s.)</span><br></pre></td></tr></table></figure>\n<p>分组查询速度对比:</p>\n<p><img src=\"/img/clickhouse/4.png\" alt=\"单表\"></p>\n<p><img src=\"/img/clickhouse/5.png\" alt=\"分布式表\"></p>\n<p>按条件查询对比:</p>\n<p><img src=\"/img/clickhouse/6.png\" alt=\"单表\"></p>\n<p><img src=\"/img/clickhouse/7.png\" alt=\"分布式表\"></p>\n<p>可以看出分布式表查询速度明显优于单表查询。</p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/78271ba9969b\" target=\"_blank\" rel=\"noopener\">ClickHouse高可用集群的安装与部署</a></p>\n<p><a href=\"https://www.jianshu.com/p/ab811cceb856\" target=\"_blank\" rel=\"noopener\">ClickHouse复制表、分布式表机制与使用方法</a></p>\n<p><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">用Docker快速上手Clickhouse</a></p>\n","site":{"data":{}},"excerpt":"<p>ck分布式集群，采用<code>本地表</code>、<code>分布式表</code> 形式实现。本地表作为分片，分布式表作为数据集合。对于分布式表的插入会随机分配到配置的分片上，查询则会得到所有的数据集合。</p>\n<p>本地表采用 Replicated 引擎，实现主备之间的数据同步，可以参考上篇文章 <a href=\"/2020/06/clickhouse-ha/\" title=\"clickhouse单分片三副本高可用搭建\">clickhouse单分片三副本高可用搭建</a>，分布表采用 Distributed 引擎。</p>\n<p>由于只有3台机器 a001、a002、a003，采用每台机器上起两个服务、一主一备，备服务 <code>config.xml</code> 端口配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">http_port</span>&gt;</span>8124<span class=\"tag\">&lt;/<span class=\"name\">http_port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tcp_port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">tcp_port</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">interserver_http_port</span>&gt;</span>9010<span class=\"tag\">&lt;/<span class=\"name\">interserver_http_port</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>metrika.xml</code>配置，下面是环形备份，实现一台机器挂了，分布式表查询不受影响</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 集群配置 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">clickhouse_remote_servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 3分片2备份 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cluster_3shards_2replicas</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片1  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 是否只写入所有replica中的一台，与ZooKeeper配合进行复制 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片2  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片3  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">weight</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">weight</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9001<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cluster_3shards_2replicas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1分片3备份 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cluster_1shards_3replicas</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据分片1  --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">internal_replication</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">internal_replication</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a001<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a002<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>a003<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cluster_1shards_3replicas</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">clickhouse_remote_servers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">zookeeper-servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.34<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.35<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">node</span> <span class=\"attr\">index</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>10.2.4.36<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>2181<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">node</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">zookeeper-servers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">macros</span>&gt;</span> <span class=\"comment\">&lt;!--a001作为第3分片备份a003--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">layer</span>&gt;</span>01<span class=\"tag\">&lt;/<span class=\"name\">layer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span>03<span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span>cluster01-03-a001<span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">macros</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p><strong>备服务启动脚本</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat d_clickhouse2.sh</span></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">        --network=host \\</span><br><span class=\"line\">        -v /root/clickhouse2/conf/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">        -v /root/clickhouse2/conf/metrika.xml:/etc/clickhouse-server/metrika.xml \\</span><br><span class=\"line\">        -v /root/clickhouse2/data:/var/lib/clickhouse \\</span><br><span class=\"line\">        -v /root/clickhouse2/<span class=\"built_in\">log</span>:/var/<span class=\"built_in\">log</span>/clickhouse-server/ \\</span><br><span class=\"line\">        --name clickhouse2 \\</span><br><span class=\"line\">        yandex/clickhouse-server:19.14</span><br></pre></td></tr></table></figure>\n<p><strong>查看集群</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM system.clusters</span><br><span class=\"line\"></span><br><span class=\"line\">┌─cluster───────────────────────────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address─┬─port─┬─is_local─┬─user────┬─default_database─┐</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_1shards_3replicas         │         1 │            1 │           3 │ a003      │ 10.2.4.36    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         1 │            1 │           1 │ a001      │ 10.2.4.34    │ 9000 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         1 │            1 │           2 │ a002      │ 10.2.4.35    │ 9001 │        1 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         2 │            1 │           1 │ a002      │ 10.2.4.35    │ 9000 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         2 │            1 │           2 │ a003      │ 10.2.4.36    │ 9001 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         3 │            1 │           1 │ a003      │ 10.2.4.36    │ 9000 │        0 │ default │                  │</span><br><span class=\"line\">│ cluster_3shards_2replicas         │         3 │            1 │           2 │ a001      │ 10.2.4.34    │ 9001 │        0 │ default │                  │</span><br><span class=\"line\">└───────────────────────────────────┴───────────┴──────────────┴─────────────┴───────────┴──────────────┴──────┴──────────┴─────────┴──────────────────┘</span><br></pre></td></tr></table></figure></p>\n<p><strong>创建多分片本地表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> default.user_local <span class=\"keyword\">ON</span> CLUSTER <span class=\"string\">'cluster_3shards_2replicas'</span> (</span><br><span class=\"line\">  ts_date DateTime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>(),</span><br><span class=\"line\">  user_id Int64</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/default/user_local'</span>,<span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMMDD(ts_date)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (ts_date)</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---删除本地表</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> default.events_local <span class=\"keyword\">ON</span> CLUSTER <span class=\"string\">'cluster_3shards_2replicas'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>创建分布式表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> default.user_all <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\"><span class=\"keyword\">AS</span> default.user_local</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">Distributed</span>(cluster_3shards_2replicas,<span class=\"keyword\">default</span>,user_local,<span class=\"keyword\">rand</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_all (user_id) <span class=\"keyword\">values</span>(<span class=\"number\">888</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---更新</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> user_local <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas <span class=\"keyword\">UPDATE</span> user_id = <span class=\"string\">'2'</span> <span class=\"keyword\">WHERE</span> user_id = <span class=\"string\">'1'</span></span><br></pre></td></tr></table></figure>\n<p><strong>创建单分片表</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> soa.user_behavior <span class=\"keyword\">ON</span> CLUSTER cluster_1shards_3replicas</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`date`</span> <span class=\"built_in\">Date</span> <span class=\"keyword\">DEFAULT</span> today(),</span><br><span class=\"line\">    <span class=\"string\">`datetime`</span> DateTime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">now</span>(),</span><br><span class=\"line\">    <span class=\"string\">`user`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`service`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`operation`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`content`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`extra`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`op_time`</span> DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-01/user_behavior'</span>, <span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (<span class=\"built_in\">date</span>, <span class=\"keyword\">user</span>, intHash64(datetime))</span><br><span class=\"line\"><span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span> intHash64(datetime)</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>删除表</strong> （先删除 zookeeper 目录，再删除 clickhouse 硬盘文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/clickhouse/tables/ # zk</span><br><span class=\"line\">/var/lib/clickhouse/data/data/default/ </span><br><span class=\"line\">/var/lib/clickhouse/data/metadata/default/*.sql</span><br><span class=\"line\">DROP TABLE user_local</span><br><span class=\"line\">DETACH TABLE user_local</span><br></pre></td></tr></table></figure>\n<p><strong>客户端连接备服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -m --port 9001</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<ul>\n<li><p>在 a001 本地表<code>user_local</code>插入数据，会自动通过到 a002 备服务本地表</p>\n</li>\n<li><p>在分布式表<code>user_all</code>插入数据，会分配到不同的分片上</p>\n</li>\n<li><p>停掉 a001 上的两个clickhouse 服务，查询user_all正常</p>\n</li>\n</ul>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- 创建数据库</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 本地复制表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw.stock_warehouse_receipt_local <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`op_receipt_id`</span> Int64,</span><br><span class=\"line\">    <span class=\"string\">`ware_trans_id`</span> <span class=\"keyword\">String</span>,</span><br><span class=\"line\">    <span class=\"string\">`ware_id`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`inventory_type`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`sku_id`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`sku_lot`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`op_type`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`origin_code`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`origin_receipt_type`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`ower_id`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`quantity`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`origin_num`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`left_num`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`src_system`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`product_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`shelf_life_days`</span> Nullable(Int16),</span><br><span class=\"line\">    <span class=\"string\">`expire_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`op_date`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`bill_id`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`bill_code`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`receipt_type`</span> Nullable(Int32),</span><br><span class=\"line\">    <span class=\"string\">`operator`</span> Nullable(Int64),</span><br><span class=\"line\">    <span class=\"string\">`operator_name`</span> Nullable(<span class=\"keyword\">String</span>),</span><br><span class=\"line\">    <span class=\"string\">`create_date`</span> Int32,</span><br><span class=\"line\">    <span class=\"string\">`frozen_flag`</span> Nullable(<span class=\"built_in\">Int8</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplicatedMergeTree(<span class=\"string\">'/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/stock_warehouse_receipt'</span>, <span class=\"string\">'&#123;replica&#125;'</span>)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMMDD(toDateTime(create_date))</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> create_date</span><br><span class=\"line\"><span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 分布式表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> biw.stock_warehouse_receipt_all <span class=\"keyword\">ON</span> CLUSTER cluster_3shards_2replicas <span class=\"keyword\">AS</span> biw.stock_warehouse_receipt_local</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">Distributed</span>(cluster_3shards_2replicas, biw, stock_warehouse_receipt_local, <span class=\"keyword\">rand</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> biw.stock_warehouse_receipt_all <span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">url</span>(<span class=\"string\">'http://10.0.10.16:8123/?database=default&amp;query=select%20*%20from%20stock_warehouse_receipt&amp;user=default&amp;password=******'</span>, TabSeparated, <span class=\"string\">'`op_receipt_id` Int64, `ware_trans_id` String, `ware_id` Nullable(Int64), `inventory_type` Nullable(String), `sku_id` Nullable(Int32), `sku_lot` Nullable(Int64), `op_type` Nullable(Int16), `origin_code` Nullable(String), `origin_receipt_type` Nullable(Int16), `ower_id` Nullable(Int16), `quantity` Nullable(Int32), `origin_num` Nullable(Int32), `left_num` Nullable(Int32), `src_system` Nullable(String), `product_date` Nullable(Int32), `shelf_life_days` Nullable(Int16), `expire_date` Nullable(Int32), `op_date` Nullable(Int32), `bill_id` Nullable(Int64), `bill_code` Nullable(String), `receipt_type` Nullable(Int32), `operator` Nullable(Int64), `operator_name` Nullable(String),`create_date` Int32, `frozen_flag` Nullable(Int8)'</span>)</span><br></pre></td></tr></table></figure>\n<p>其中一台机器<code>stock_warehouse_receipt_local</code>数据，和<code>stock_warehouse_receipt_all</code>表数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT count() AS cnt</span><br><span class=\"line\">FROM biw.stock_warehouse_receipt_local</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT count()</span><br><span class=\"line\">FROM biw.stock_warehouse_receipt_all</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────cnt─┐</span><br><span class=\"line\">│ 92452812 │</span><br><span class=\"line\">└──────────┘</span><br><span class=\"line\">┌───────cnt─┐</span><br><span class=\"line\">│ 277354174 │</span><br><span class=\"line\">└───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">2 rows in set. Elapsed: 0.080 sec. Processed 369.81 million rows, 1.11 GB (4.65 billion rows/s., 13.95 GB/s.)</span><br></pre></td></tr></table></figure>\n<p>分组查询速度对比:</p>\n<p><img src=\"/img/clickhouse/4.png\" alt=\"单表\"></p>\n<p><img src=\"/img/clickhouse/5.png\" alt=\"分布式表\"></p>\n<p>按条件查询对比:</p>\n<p><img src=\"/img/clickhouse/6.png\" alt=\"单表\"></p>\n<p><img src=\"/img/clickhouse/7.png\" alt=\"分布式表\"></p>\n<p>可以看出分布式表查询速度明显优于单表查询。</p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/78271ba9969b\" target=\"_blank\" rel=\"noopener\">ClickHouse高可用集群的安装与部署</a></p>\n<p><a href=\"https://www.jianshu.com/p/ab811cceb856\" target=\"_blank\" rel=\"noopener\">ClickHouse复制表、分布式表机制与使用方法</a></p>\n<p><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">用Docker快速上手Clickhouse</a></p>"},{"title":"Docker web shell 实现一","date":"2020-01-20T14:17:10.000Z","share":true,"_content":"\n**通过 docker 原生 接口 [Attach to a container via a websocket](https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach) 实现**\n\n首先开启 Remote API 访问 2375 端口\n```\n# sudo vim /lib/systemd/system/docker.service\n[Service]\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\n\n# sudo systemctl daemon-reload\n# sudo service docker restart\n\n# curl 0.0.0.0:2375\n{\"message\":\"page not found\"}\n```\n\n启动容器\n\n```\ndocker run -itd --name alpine alpine /bin/sh \n```\n\n\n前端网页代码\n\n```\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Docker Web Shell</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.css\" />\n    <script src=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.js\"></script>\n</head>\n\n<body>\n    <div id=\"container-terminal\"></div>\n    <style type=\"text/css\">\n        body {\n            width: 100%;\n            height: 100%;\n        }\n\n        #container-terminal {\n            width: 100%;\n            height: 100%;\n        }\n\n        .terminal {\n            height: 100%;\n            width: 100%;\n            font-size: 18px;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var term;\n        var url = \"ws://0.0.0.0:2375/containers/alpine/attach/ws?stream=1&stdout=1\";\n        xterm = new Terminal({\n            rows: 38,\n            cursorBlink: true\n        });\n        ws = new WebSocket(url);\n        ws.binaryType = 'arraybuffer';\n        xterm.on('data', function (data) {\n            ws.send(data);\n        });\n        xterm.open(document.getElementById(\"container-terminal\"), true);\n        ws.onopen = function () {\n            console.log('ws connected');\n            ws.send(\"\\n\");\n        };\n        ws.onerror = function () {\n            console.log('ws error');\n        };\n        ws.onclose = function () {\n            xterm.writeln('socket已断开连接，请重连')\n            console.log('ws closed');\n        };\n        ws.onmessage = function (evt) {\n            console.log(evt.data);\n            var decoder = new TextDecoder('utf-8');\n            var data = decoder.decode(evt.data);\n            xterm.write(data);\n        };\n    </script>\n</body>\n\n</html>\n```\n\n效果图:\n\n![](/img/docker/ws1.png)\n\n上面的方式是通过 attach 方式连接到容器内，优点是原生接口、简单，缺点是1号进程必须是 shell 命令，无权限验证功能，后面介绍另外一种方式，满足多用户同时操作，可以添加权限验证。","source":"_posts/docker-web-shell-1.md","raw":"---\ntitle: \"Docker web shell 实现一\"\ndate: 2020-01-20 14:17:10\ntags: [docker,webshell]\nshare: true\n---\n\n**通过 docker 原生 接口 [Attach to a container via a websocket](https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach) 实现**\n\n首先开启 Remote API 访问 2375 端口\n```\n# sudo vim /lib/systemd/system/docker.service\n[Service]\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\n\n# sudo systemctl daemon-reload\n# sudo service docker restart\n\n# curl 0.0.0.0:2375\n{\"message\":\"page not found\"}\n```\n\n启动容器\n\n```\ndocker run -itd --name alpine alpine /bin/sh \n```\n\n\n前端网页代码\n\n```\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Docker Web Shell</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.css\" />\n    <script src=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.js\"></script>\n</head>\n\n<body>\n    <div id=\"container-terminal\"></div>\n    <style type=\"text/css\">\n        body {\n            width: 100%;\n            height: 100%;\n        }\n\n        #container-terminal {\n            width: 100%;\n            height: 100%;\n        }\n\n        .terminal {\n            height: 100%;\n            width: 100%;\n            font-size: 18px;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var term;\n        var url = \"ws://0.0.0.0:2375/containers/alpine/attach/ws?stream=1&stdout=1\";\n        xterm = new Terminal({\n            rows: 38,\n            cursorBlink: true\n        });\n        ws = new WebSocket(url);\n        ws.binaryType = 'arraybuffer';\n        xterm.on('data', function (data) {\n            ws.send(data);\n        });\n        xterm.open(document.getElementById(\"container-terminal\"), true);\n        ws.onopen = function () {\n            console.log('ws connected');\n            ws.send(\"\\n\");\n        };\n        ws.onerror = function () {\n            console.log('ws error');\n        };\n        ws.onclose = function () {\n            xterm.writeln('socket已断开连接，请重连')\n            console.log('ws closed');\n        };\n        ws.onmessage = function (evt) {\n            console.log(evt.data);\n            var decoder = new TextDecoder('utf-8');\n            var data = decoder.decode(evt.data);\n            xterm.write(data);\n        };\n    </script>\n</body>\n\n</html>\n```\n\n效果图:\n\n![](/img/docker/ws1.png)\n\n上面的方式是通过 attach 方式连接到容器内，优点是原生接口、简单，缺点是1号进程必须是 shell 命令，无权限验证功能，后面介绍另外一种方式，满足多用户同时操作，可以添加权限验证。","slug":"docker-web-shell-1","published":1,"updated":"2020-02-03T03:45:07.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkl000c0wpb0enxy88b","content":"<p><strong>通过 docker 原生 接口 <a href=\"https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\" target=\"_blank\" rel=\"noopener\">Attach to a container via a websocket</a> 实现</strong></p>\n<p>首先开启 Remote API 访问 2375 端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo vim /lib/systemd/system/docker.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</span><br><span class=\"line\"></span><br><span class=\"line\"># sudo systemctl daemon-reload</span><br><span class=\"line\"># sudo service docker restart</span><br><span class=\"line\"></span><br><span class=\"line\"># curl 0.0.0.0:2375</span><br><span class=\"line\">&#123;&quot;message&quot;:&quot;page not found&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name alpine alpine /bin/sh</span><br></pre></td></tr></table></figure>\n<p>前端网页代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Docker Web Shell&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container-terminal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #container-terminal &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .terminal &#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            font-size: 18px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var term;</span><br><span class=\"line\">        var url = &quot;ws://0.0.0.0:2375/containers/alpine/attach/ws?stream=1&amp;stdout=1&quot;;</span><br><span class=\"line\">        xterm = new Terminal(&#123;</span><br><span class=\"line\">            rows: 38,</span><br><span class=\"line\">            cursorBlink: true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ws = new WebSocket(url);</span><br><span class=\"line\">        ws.binaryType = &apos;arraybuffer&apos;;</span><br><span class=\"line\">        xterm.on(&apos;data&apos;, function (data) &#123;</span><br><span class=\"line\">            ws.send(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        xterm.open(document.getElementById(&quot;container-terminal&quot;), true);</span><br><span class=\"line\">        ws.onopen = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws connected&apos;);</span><br><span class=\"line\">            ws.send(&quot;\\n&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onerror = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws error&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onclose = function () &#123;</span><br><span class=\"line\">            xterm.writeln(&apos;socket已断开连接，请重连&apos;)</span><br><span class=\"line\">            console.log(&apos;ws closed&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onmessage = function (evt) &#123;</span><br><span class=\"line\">            console.log(evt.data);</span><br><span class=\"line\">            var decoder = new TextDecoder(&apos;utf-8&apos;);</span><br><span class=\"line\">            var data = decoder.decode(evt.data);</span><br><span class=\"line\">            xterm.write(data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图:</p>\n<p><img src=\"/img/docker/ws1.png\" alt></p>\n<p>上面的方式是通过 attach 方式连接到容器内，优点是原生接口、简单，缺点是1号进程必须是 shell 命令，无权限验证功能，后面介绍另外一种方式，满足多用户同时操作，可以添加权限验证。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>通过 docker 原生 接口 <a href=\"https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\" target=\"_blank\" rel=\"noopener\">Attach to a container via a websocket</a> 实现</strong></p>\n<p>首先开启 Remote API 访问 2375 端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo vim /lib/systemd/system/docker.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</span><br><span class=\"line\"></span><br><span class=\"line\"># sudo systemctl daemon-reload</span><br><span class=\"line\"># sudo service docker restart</span><br><span class=\"line\"></span><br><span class=\"line\"># curl 0.0.0.0:2375</span><br><span class=\"line\">&#123;&quot;message&quot;:&quot;page not found&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name alpine alpine /bin/sh</span><br></pre></td></tr></table></figure>\n<p>前端网页代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Docker Web Shell&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container-terminal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #container-terminal &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .terminal &#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            font-size: 18px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var term;</span><br><span class=\"line\">        var url = &quot;ws://0.0.0.0:2375/containers/alpine/attach/ws?stream=1&amp;stdout=1&quot;;</span><br><span class=\"line\">        xterm = new Terminal(&#123;</span><br><span class=\"line\">            rows: 38,</span><br><span class=\"line\">            cursorBlink: true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ws = new WebSocket(url);</span><br><span class=\"line\">        ws.binaryType = &apos;arraybuffer&apos;;</span><br><span class=\"line\">        xterm.on(&apos;data&apos;, function (data) &#123;</span><br><span class=\"line\">            ws.send(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        xterm.open(document.getElementById(&quot;container-terminal&quot;), true);</span><br><span class=\"line\">        ws.onopen = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws connected&apos;);</span><br><span class=\"line\">            ws.send(&quot;\\n&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onerror = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws error&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onclose = function () &#123;</span><br><span class=\"line\">            xterm.writeln(&apos;socket已断开连接，请重连&apos;)</span><br><span class=\"line\">            console.log(&apos;ws closed&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onmessage = function (evt) &#123;</span><br><span class=\"line\">            console.log(evt.data);</span><br><span class=\"line\">            var decoder = new TextDecoder(&apos;utf-8&apos;);</span><br><span class=\"line\">            var data = decoder.decode(evt.data);</span><br><span class=\"line\">            xterm.write(data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图:</p>\n<p><img src=\"/img/docker/ws1.png\" alt></p>\n<p>上面的方式是通过 attach 方式连接到容器内，优点是原生接口、简单，缺点是1号进程必须是 shell 命令，无权限验证功能，后面介绍另外一种方式，满足多用户同时操作，可以添加权限验证。</p>\n"},{"title":"helm安装gitrunner","date":"2019-10-16T17:52:10.000Z","share":true,"_content":"\n**gitrunner**\n\n\n```\n#下载包\nhelm repo add gitlab https://charts.gitlab.io\nhelm pull gitlab/gitlab-runner --untar\n\n#打标签\nkubectl get nodes --show-labels \nkubectl label nodes node-a002 ci=true\n\n安装gitlab-runner\nhelm upgrade gitlab-runner-01 --install --namespace gitlab \\\n--set checkInterval=2 \\\n--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present --set runners.tags=k8s-01 \\\n--set gitlabUrl=http://gitlab.******.net/,runnerRegistrationToken=AxwjhfK7bb8eDCs5PN --set runners.privileged=true \\\n--set gitRunnerCacheDir=/volume \\\n--set nodeSelector.ci=true \\\n.\n```\n\n**mount 目录** \n\n在configmap.yaml 里 entrypoint 最后增加\n\n```\n{{ if .Values.gitRunnerCacheDir }}\n    cat >>/home/gitlab-runner/.gitlab-runner/config.toml <<EOF\n      [[runners.kubernetes.volumes.host_path]]\n        name = \"git-runner-cache\"\n        mount_path = {{ .Values.gitRunnerCacheDir | quote }}\n        host_path  = {{ .Values.gitRunnerCacheDir | quote }}\n    EOF\n{{- end }}\n```\n\n提示没有权限创建job\n```\nERROR: Job failed (system failure): pods is forbidden: User \"system:serviceaccount:gitlab:default\" cannot create resource \"pods\" in API group \"\" in the namespace \"gitlab\"\n```\n\n添加权限绑定\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-admin-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-admin-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: gitlab\nroleRef:\n  kind: Role\n  name: gitlab-admin-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n\n**跳过fetch **\n\n```\ndeploy_all:\n  variables:\n    GIT_STRATEGY: none\n    GIT_CHECKOUT: \"false\"\n  stage: deploy\n```\n\n 参考：\n\n[GitlabCI 使用 S3 存储配置分布式缓存](https://mp.weixin.qq.com/s/dY1J-SJJmJK9p7FdbrPSDQ)\n\n[Gitlab CI yaml官方配置文件翻译](https://segmentfault.com/a/1190000010442764)","source":"_posts/gitrunner-helm-install.md","raw":"---\ntitle: \"helm安装gitrunner\"\ndate: 2019-10-16 17:52:10\ntags: [gitrunner,helm]\nshare: true\n---\n\n**gitrunner**\n\n\n```\n#下载包\nhelm repo add gitlab https://charts.gitlab.io\nhelm pull gitlab/gitlab-runner --untar\n\n#打标签\nkubectl get nodes --show-labels \nkubectl label nodes node-a002 ci=true\n\n安装gitlab-runner\nhelm upgrade gitlab-runner-01 --install --namespace gitlab \\\n--set checkInterval=2 \\\n--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present --set runners.tags=k8s-01 \\\n--set gitlabUrl=http://gitlab.******.net/,runnerRegistrationToken=AxwjhfK7bb8eDCs5PN --set runners.privileged=true \\\n--set gitRunnerCacheDir=/volume \\\n--set nodeSelector.ci=true \\\n.\n```\n\n**mount 目录** \n\n在configmap.yaml 里 entrypoint 最后增加\n\n```\n{{ if .Values.gitRunnerCacheDir }}\n    cat >>/home/gitlab-runner/.gitlab-runner/config.toml <<EOF\n      [[runners.kubernetes.volumes.host_path]]\n        name = \"git-runner-cache\"\n        mount_path = {{ .Values.gitRunnerCacheDir | quote }}\n        host_path  = {{ .Values.gitRunnerCacheDir | quote }}\n    EOF\n{{- end }}\n```\n\n提示没有权限创建job\n```\nERROR: Job failed (system failure): pods is forbidden: User \"system:serviceaccount:gitlab:default\" cannot create resource \"pods\" in API group \"\" in the namespace \"gitlab\"\n```\n\n添加权限绑定\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-admin-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-admin-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: gitlab\nroleRef:\n  kind: Role\n  name: gitlab-admin-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n\n**跳过fetch **\n\n```\ndeploy_all:\n  variables:\n    GIT_STRATEGY: none\n    GIT_CHECKOUT: \"false\"\n  stage: deploy\n```\n\n 参考：\n\n[GitlabCI 使用 S3 存储配置分布式缓存](https://mp.weixin.qq.com/s/dY1J-SJJmJK9p7FdbrPSDQ)\n\n[Gitlab CI yaml官方配置文件翻译](https://segmentfault.com/a/1190000010442764)","slug":"gitrunner-helm-install","published":1,"updated":"2020-12-19T03:45:09.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkn000d0wpbzil67v7c","content":"<p><strong>gitrunner</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载包</span><br><span class=\"line\">helm repo add gitlab https://charts.gitlab.io</span><br><span class=\"line\">helm pull gitlab/gitlab-runner --untar</span><br><span class=\"line\"></span><br><span class=\"line\">#打标签</span><br><span class=\"line\">kubectl get nodes --show-labels </span><br><span class=\"line\">kubectl label nodes node-a002 ci=true</span><br><span class=\"line\"></span><br><span class=\"line\">安装gitlab-runner</span><br><span class=\"line\">helm upgrade gitlab-runner-01 --install --namespace gitlab \\</span><br><span class=\"line\">--set checkInterval=2 \\</span><br><span class=\"line\">--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present --set runners.tags=k8s-01 \\</span><br><span class=\"line\">--set gitlabUrl=http://gitlab.******.net/,runnerRegistrationToken=AxwjhfK7bb8eDCs5PN --set runners.privileged=true \\</span><br><span class=\"line\">--set gitRunnerCacheDir=/volume \\</span><br><span class=\"line\">--set nodeSelector.ci=true \\</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p><strong>mount 目录</strong> </p>\n<p>在configmap.yaml 里 entrypoint 最后增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; if .Values.gitRunnerCacheDir &#125;&#125;</span><br><span class=\"line\">    cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml &lt;&lt;EOF</span><br><span class=\"line\">      [[runners.kubernetes.volumes.host_path]]</span><br><span class=\"line\">        name = &quot;git-runner-cache&quot;</span><br><span class=\"line\">        mount_path = &#123;&#123; .Values.gitRunnerCacheDir | quote &#125;&#125;</span><br><span class=\"line\">        host_path  = &#123;&#123; .Values.gitRunnerCacheDir | quote &#125;&#125;</span><br><span class=\"line\">    EOF</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>提示没有权限创建job<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Job failed (system failure): pods is forbidden: User &quot;system:serviceaccount:gitlab:default&quot; cannot create resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;gitlab&quot;</span><br></pre></td></tr></table></figure></p>\n<p>添加权限绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-admin-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p>\n<p><strong>跳过fetch </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy_all:</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    GIT_STRATEGY: none</span><br><span class=\"line\">    GIT_CHECKOUT: &quot;false&quot;</span><br><span class=\"line\">  stage: deploy</span><br></pre></td></tr></table></figure>\n<p> 参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/dY1J-SJJmJK9p7FdbrPSDQ\" target=\"_blank\" rel=\"noopener\">GitlabCI 使用 S3 存储配置分布式缓存</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000010442764\" target=\"_blank\" rel=\"noopener\">Gitlab CI yaml官方配置文件翻译</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>gitrunner</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载包</span><br><span class=\"line\">helm repo add gitlab https://charts.gitlab.io</span><br><span class=\"line\">helm pull gitlab/gitlab-runner --untar</span><br><span class=\"line\"></span><br><span class=\"line\">#打标签</span><br><span class=\"line\">kubectl get nodes --show-labels </span><br><span class=\"line\">kubectl label nodes node-a002 ci=true</span><br><span class=\"line\"></span><br><span class=\"line\">安装gitlab-runner</span><br><span class=\"line\">helm upgrade gitlab-runner-01 --install --namespace gitlab \\</span><br><span class=\"line\">--set checkInterval=2 \\</span><br><span class=\"line\">--set runners.image=alpine:latest --set runners.imagePullPolicy=if-not-present --set runners.tags=k8s-01 \\</span><br><span class=\"line\">--set gitlabUrl=http://gitlab.******.net/,runnerRegistrationToken=AxwjhfK7bb8eDCs5PN --set runners.privileged=true \\</span><br><span class=\"line\">--set gitRunnerCacheDir=/volume \\</span><br><span class=\"line\">--set nodeSelector.ci=true \\</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p><strong>mount 目录</strong> </p>\n<p>在configmap.yaml 里 entrypoint 最后增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; if .Values.gitRunnerCacheDir &#125;&#125;</span><br><span class=\"line\">    cat &gt;&gt;/home/gitlab-runner/.gitlab-runner/config.toml &lt;&lt;EOF</span><br><span class=\"line\">      [[runners.kubernetes.volumes.host_path]]</span><br><span class=\"line\">        name = &quot;git-runner-cache&quot;</span><br><span class=\"line\">        mount_path = &#123;&#123; .Values.gitRunnerCacheDir | quote &#125;&#125;</span><br><span class=\"line\">        host_path  = &#123;&#123; .Values.gitRunnerCacheDir | quote &#125;&#125;</span><br><span class=\"line\">    EOF</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>提示没有权限创建job<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Job failed (system failure): pods is forbidden: User &quot;system:serviceaccount:gitlab:default&quot; cannot create resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;gitlab&quot;</span><br></pre></td></tr></table></figure></p>\n<p>添加权限绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-admin-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-admin-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p>\n<p><strong>跳过fetch </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy_all:</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    GIT_STRATEGY: none</span><br><span class=\"line\">    GIT_CHECKOUT: &quot;false&quot;</span><br><span class=\"line\">  stage: deploy</span><br></pre></td></tr></table></figure>\n<p> 参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/dY1J-SJJmJK9p7FdbrPSDQ\" target=\"_blank\" rel=\"noopener\">GitlabCI 使用 S3 存储配置分布式缓存</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000010442764\" target=\"_blank\" rel=\"noopener\">Gitlab CI yaml官方配置文件翻译</a></p>\n"},{"title":"grafana使用mysql源做统计","date":"2019-11-14T20:41:01.000Z","share":true,"_content":"\n配置对应的 mysql 数据源，新建面板，查询语句：\n\n```\nSELECT\n  created_at AS \"time\",\n  \"下单金额\" AS metric,\n  total_fee/100\nFROM `order`\nWHERE\n  $__unixEpochFilter(created_at)\nORDER BY created_at\n```\n\nFormat as选择Time series, Unit 选择 Currency\n\n![11.png](/img/grafana/11.png)\n<!-- more -->\n\n**效果图:**\n\n![12.png](/img/grafana/12.png)\n\n**备注:**\n\nhelm版 grafana chart 安装饼装图插件\n\n```\nplugins:\n  - grafana-piechart-panel\n```\n\n开启 plugin alpha 模式\n\n```\ngrafana.ini:\n  paths:\n    data: /var/lib/grafana/data\n    logs: /var/log/grafana\n    plugins: /var/lib/grafana/plugins\n    provisioning: /etc/grafana/provisioning\n  analytics:\n    check_for_updates: true\n  log:\n    mode: console\n  grafana_net:\n    url: https://grafana.net\n  server:\n    root_url: http://grafana.local.com\n  plugins:\n    enable_alpha: true\n```\n**参考查询:**\n```\n#最近七天每日订单金额\nSELECT\n   unix_timestamp(from_unixtime(created_at,'%Y-%m-%d 00:00:00')) as time,\n   from_unixtime(created_at,'%Y-%m-%d') AS metric,\n   sum(total_fee)/100\nFROM `order_log`\nWHERE\n  created_at <= ($__unixEpochTo()) AND created_at >= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in (${agg_platform})\nGROUP BY time\nORDER BY time\n\n#昨日下单数在当前时间轴展示\nSELECT\n    time + 86400 as time, \n    \"昨日下单数\" AS metric,\n    cnt\nFROM\n(\n  SELECT\n     $__unixEpochGroup(created_at,$__interval) as time,\n     count(*) cnt\n  FROM `order_log`\n  WHERE\n    created_at >  ($__unixEpochFrom() - 86400)  AND created_at <  ($__unixEpochTo() - 86400)  AND agg_platform in (${agg_platform})\n  GROUP BY time\n  ORDER BY time\n) obl\n```\n参考链接：\nhttps://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\nhttps://blog.csdn.net/malingyu/article/details/84389113\nhttps://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\n[去除 Data outside time range](https://www.cnblogs.com/michellexiaoqi/p/7274890.html)","source":"_posts/grafana-mysql-source.md","raw":"---\ntitle: \"grafana使用mysql源做统计\"\ndate: 2019-11-14 20:41:01\ntags: [grafana,helm]\nshare: true\n---\n\n配置对应的 mysql 数据源，新建面板，查询语句：\n\n```\nSELECT\n  created_at AS \"time\",\n  \"下单金额\" AS metric,\n  total_fee/100\nFROM `order`\nWHERE\n  $__unixEpochFilter(created_at)\nORDER BY created_at\n```\n\nFormat as选择Time series, Unit 选择 Currency\n\n![11.png](/img/grafana/11.png)\n<!-- more -->\n\n**效果图:**\n\n![12.png](/img/grafana/12.png)\n\n**备注:**\n\nhelm版 grafana chart 安装饼装图插件\n\n```\nplugins:\n  - grafana-piechart-panel\n```\n\n开启 plugin alpha 模式\n\n```\ngrafana.ini:\n  paths:\n    data: /var/lib/grafana/data\n    logs: /var/log/grafana\n    plugins: /var/lib/grafana/plugins\n    provisioning: /etc/grafana/provisioning\n  analytics:\n    check_for_updates: true\n  log:\n    mode: console\n  grafana_net:\n    url: https://grafana.net\n  server:\n    root_url: http://grafana.local.com\n  plugins:\n    enable_alpha: true\n```\n**参考查询:**\n```\n#最近七天每日订单金额\nSELECT\n   unix_timestamp(from_unixtime(created_at,'%Y-%m-%d 00:00:00')) as time,\n   from_unixtime(created_at,'%Y-%m-%d') AS metric,\n   sum(total_fee)/100\nFROM `order_log`\nWHERE\n  created_at <= ($__unixEpochTo()) AND created_at >= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in (${agg_platform})\nGROUP BY time\nORDER BY time\n\n#昨日下单数在当前时间轴展示\nSELECT\n    time + 86400 as time, \n    \"昨日下单数\" AS metric,\n    cnt\nFROM\n(\n  SELECT\n     $__unixEpochGroup(created_at,$__interval) as time,\n     count(*) cnt\n  FROM `order_log`\n  WHERE\n    created_at >  ($__unixEpochFrom() - 86400)  AND created_at <  ($__unixEpochTo() - 86400)  AND agg_platform in (${agg_platform})\n  GROUP BY time\n  ORDER BY time\n) obl\n```\n参考链接：\nhttps://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\nhttps://blog.csdn.net/malingyu/article/details/84389113\nhttps://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\n[去除 Data outside time range](https://www.cnblogs.com/michellexiaoqi/p/7274890.html)","slug":"grafana-mysql-source","published":1,"updated":"2019-12-02T08:50:12.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkr000e0wpblyjy7owi","content":"<p>配置对应的 mysql 数据源，新建面板，查询语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  created_at AS &quot;time&quot;,</span><br><span class=\"line\">  &quot;下单金额&quot; AS metric,</span><br><span class=\"line\">  total_fee/100</span><br><span class=\"line\">FROM `order`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  $__unixEpochFilter(created_at)</span><br><span class=\"line\">ORDER BY created_at</span><br></pre></td></tr></table></figure>\n<p>Format as选择Time series, Unit 选择 Currency</p>\n<p><img src=\"/img/grafana/11.png\" alt=\"11.png\"><br><a id=\"more\"></a></p>\n<p><strong>效果图:</strong></p>\n<p><img src=\"/img/grafana/12.png\" alt=\"12.png\"></p>\n<p><strong>备注:</strong></p>\n<p>helm版 grafana chart 安装饼装图插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - grafana-piechart-panel</span><br></pre></td></tr></table></figure>\n<p>开启 plugin alpha 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana.ini:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    data: /var/lib/grafana/data</span><br><span class=\"line\">    logs: /var/log/grafana</span><br><span class=\"line\">    plugins: /var/lib/grafana/plugins</span><br><span class=\"line\">    provisioning: /etc/grafana/provisioning</span><br><span class=\"line\">  analytics:</span><br><span class=\"line\">    check_for_updates: true</span><br><span class=\"line\">  log:</span><br><span class=\"line\">    mode: console</span><br><span class=\"line\">  grafana_net:</span><br><span class=\"line\">    url: https://grafana.net</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    root_url: http://grafana.local.com</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    enable_alpha: true</span><br></pre></td></tr></table></figure>\n<p><strong>参考查询:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最近七天每日订单金额</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">   unix_timestamp(from_unixtime(created_at,&apos;%Y-%m-%d 00:00:00&apos;)) as time,</span><br><span class=\"line\">   from_unixtime(created_at,&apos;%Y-%m-%d&apos;) AS metric,</span><br><span class=\"line\">   sum(total_fee)/100</span><br><span class=\"line\">FROM `order_log`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  created_at &lt;= ($__unixEpochTo()) AND created_at &gt;= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time</span><br><span class=\"line\"></span><br><span class=\"line\">#昨日下单数在当前时间轴展示</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    time + 86400 as time, </span><br><span class=\"line\">    &quot;昨日下单数&quot; AS metric,</span><br><span class=\"line\">    cnt</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     $__unixEpochGroup(created_at,$__interval) as time,</span><br><span class=\"line\">     count(*) cnt</span><br><span class=\"line\">  FROM `order_log`</span><br><span class=\"line\">  WHERE</span><br><span class=\"line\">    created_at &gt;  ($__unixEpochFrom() - 86400)  AND created_at &lt;  ($__unixEpochTo() - 86400)  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">  GROUP BY time</span><br><span class=\"line\">  ORDER BY time</span><br><span class=\"line\">) obl</span><br></pre></td></tr></table></figure></p>\n<p>参考链接：<br><a href=\"https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\" target=\"_blank\" rel=\"noopener\">https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/</a><br><a href=\"https://blog.csdn.net/malingyu/article/details/84389113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/malingyu/article/details/84389113</a><br><a href=\"https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\" target=\"_blank\" rel=\"noopener\">https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55</a><br><a href=\"https://www.cnblogs.com/michellexiaoqi/p/7274890.html\" target=\"_blank\" rel=\"noopener\">去除 Data outside time range</a></p>\n","site":{"data":{}},"excerpt":"<p>配置对应的 mysql 数据源，新建面板，查询语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  created_at AS &quot;time&quot;,</span><br><span class=\"line\">  &quot;下单金额&quot; AS metric,</span><br><span class=\"line\">  total_fee/100</span><br><span class=\"line\">FROM `order`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  $__unixEpochFilter(created_at)</span><br><span class=\"line\">ORDER BY created_at</span><br></pre></td></tr></table></figure>\n<p>Format as选择Time series, Unit 选择 Currency</p>\n<p><img src=\"/img/grafana/11.png\" alt=\"11.png\"><br>","more":"</p>\n<p><strong>效果图:</strong></p>\n<p><img src=\"/img/grafana/12.png\" alt=\"12.png\"></p>\n<p><strong>备注:</strong></p>\n<p>helm版 grafana chart 安装饼装图插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - grafana-piechart-panel</span><br></pre></td></tr></table></figure>\n<p>开启 plugin alpha 模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana.ini:</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    data: /var/lib/grafana/data</span><br><span class=\"line\">    logs: /var/log/grafana</span><br><span class=\"line\">    plugins: /var/lib/grafana/plugins</span><br><span class=\"line\">    provisioning: /etc/grafana/provisioning</span><br><span class=\"line\">  analytics:</span><br><span class=\"line\">    check_for_updates: true</span><br><span class=\"line\">  log:</span><br><span class=\"line\">    mode: console</span><br><span class=\"line\">  grafana_net:</span><br><span class=\"line\">    url: https://grafana.net</span><br><span class=\"line\">  server:</span><br><span class=\"line\">    root_url: http://grafana.local.com</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    enable_alpha: true</span><br></pre></td></tr></table></figure>\n<p><strong>参考查询:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#最近七天每日订单金额</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">   unix_timestamp(from_unixtime(created_at,&apos;%Y-%m-%d 00:00:00&apos;)) as time,</span><br><span class=\"line\">   from_unixtime(created_at,&apos;%Y-%m-%d&apos;) AS metric,</span><br><span class=\"line\">   sum(total_fee)/100</span><br><span class=\"line\">FROM `order_log`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">  created_at &lt;= ($__unixEpochTo()) AND created_at &gt;= ($__unixEpochTo() DIV 86400 * 86400 - 6*60*60*24 - 8*60*60) AND state = 3  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time</span><br><span class=\"line\"></span><br><span class=\"line\">#昨日下单数在当前时间轴展示</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    time + 86400 as time, </span><br><span class=\"line\">    &quot;昨日下单数&quot; AS metric,</span><br><span class=\"line\">    cnt</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     $__unixEpochGroup(created_at,$__interval) as time,</span><br><span class=\"line\">     count(*) cnt</span><br><span class=\"line\">  FROM `order_log`</span><br><span class=\"line\">  WHERE</span><br><span class=\"line\">    created_at &gt;  ($__unixEpochFrom() - 86400)  AND created_at &lt;  ($__unixEpochTo() - 86400)  AND agg_platform in ($&#123;agg_platform&#125;)</span><br><span class=\"line\">  GROUP BY time</span><br><span class=\"line\">  ORDER BY time</span><br><span class=\"line\">) obl</span><br></pre></td></tr></table></figure></p>\n<p>参考链接：<br><a href=\"https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/\" target=\"_blank\" rel=\"noopener\">https://www.mssqltips.com/sqlservertip/6008/sql-server-time-series-data-visualization-with-grafana/</a><br><a href=\"https://blog.csdn.net/malingyu/article/details/84389113\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/malingyu/article/details/84389113</a><br><a href=\"https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55\" target=\"_blank\" rel=\"noopener\">https://community.grafana.com/t/how-to-add-time-series-queries-with-grafana-and-mysql/3170/55</a><br><a href=\"https://www.cnblogs.com/michellexiaoqi/p/7274890.html\" target=\"_blank\" rel=\"noopener\">去除 Data outside time range</a></p>"},{"title":"ClickHouse 入门笔记","date":"2019-12-16T14:22:10.000Z","share":true,"_content":"\nClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)\n\n**版本**\n\n文章使用版本 `docker pull yandex/clickhouse-server:19.15.3.6`\n\n**SQL支持**\n\n支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。\n\n**支持近似计算**\n\n用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)\n\n**吞吐量**\n\nClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。\n\n**访问控制**\n\nClickHouse包含访问控制配置，它们位于`users.xml`文件中(与'config.xml'同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。\n\n默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：`clickhouse-client --host=example.com`\n\n**时区设置**\n\n```\nsed \"144 i<timezone>Asia/Shanghai</timezone>\" -i /etc/clickhouse-server/config.xml\n```\n<!-- more -->\n\n**交互方式**\n\n客户端可以选择使用交互式与非交互式两种\n\n\n```\nCREATE TABLE test (\n         created_date Date DEFAULT today(),  \n         created_at DateTime DEFAULT now(), \n        `id` UInt16,\n        `name` String\n) ENGINE = MergeTree(created_date, created_at, 8192);\n\n\ncat <<_EOF | clickhouse-client --database=default --query=\"INSERT INTO test FORMAT CSV\";\n'2016-08-14','2016-08-14 00:00:00',3, 'some text',\n'2016-08-14','2016-08-14 00:00:01',4, 'some text'\n_EOF\n```\n\n可以指定 `\\G` 来替代分号或者在分号后面，这表示 `Vertical` 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。\n\n**命令行参数**\n\nhttps://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\n\n**输入输出格式**\n\n支持 json、csv 等多种格式 https://clickhouse.yandex/docs/zh/interfaces/formats/\n\n**mysql 引擎**\n\n```\nCREATE DATABASE mysql_db ENGINE = MySQL('172.16.200.10:3306', 'test', 'root', 'passwd')\n```\n\n**mergeTree 引擎**\n\n使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构\n\n```\nCREATE TABLE wikistat\n(\n    id bigint,\n    dt DateTime,\n    project String,\n    subproject String,\n    path String,\n    hits UInt64,\n    size UInt64\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(dt)\nORDER BY dt\n```\n\n**ReplacingMergeTree 引擎** (按主键进行合并)\n```\nCREATE TABLE mergetree\n(\n    `msg_id` UInt64,\n    `msg_type` String,\n    `sync_time` DateTime DEFAULT now()\n)\nENGINE = ReplacingMergeTree \nPARTITION BY toYYYYMMDD(sync_time)\nORDER BY msg_id;\n# 插入数据\ninsert into mergetree(msg_id,msg_type) values(1,'aa') ;\n# 强制合并\noptimize table mergetree final;\n```\n\n**SummingMergeTree** (按主键合并，SummingMergeTree(a) a求和)\n```\nCREATE TABLE smt_tab(date Date,id UInt8,name String,a UInt16) ENGINE=SummingMergeTree(a) PARTITION BY date ORDER BY (id,name) SAMPLE BY name\n#插入数据\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',1)\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',2)\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',3)\n#结果只有一条，a列求和\n```\n\n**JSON 函数**\n\n```\n#pay_data 是否有 appId 下标\nselect visitParamHas(pay_data,'appId') from `order` limit 1;\n#获取appId值\nselect visitParamExtractRaw(pay_data,'appId') from `order` limit 1;\n#获取值\nSELECT visitParamExtractString(return_data, 'body') FROM order_behavior_log LIMIT 10;\n```\n\nhttps://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\n\n**数据备份**\n\n```\nclickhouse-client -d default --query=\"show create table ontime\"\nclickhouse-client -d default -f CSV --query=\"select * from ontime limit 1\" >/var/lib/clickhouse/a.csv\n```\n\n**使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:**\n![1.png](/img/clickhouse/1.png)\n\n存档到ClickHouse允许您保留旧数据并将其用于报告\n\n\n**LowCardinality 类型** （对字符串做数字字典）\n\n城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。\n\n值得一提的是，还有一种用字典编码字符串的可能性：[Enums](https://clickhouse.yandex/docs/en/data_types/enum/)。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。\n\n**实时视图**\n\n将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存\n\n**命令**\n\n```\ndetach database payemnt #删除mysql引擎库\nalter table cpu update usage_user = 888 where usage_user=18 #update\nalter table cpu delete where usage_user = 888 #delete\nalter table user_behavior add column `operation` String after service; #add column\nalter table user_behavior drop column operator; #drop column\nrename table system_msg to system_msg_old\n```\n\n**web 客户端tabix**\n\n```\ndocker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client\n```\n\n\n**查询示例**\n\n```\n#执行时间分位数查询\nSELECT\n    created_date,\n    quantile(0.999)(toFloat64(execute_mic_time))\nFROM order_behavior_log\nWHERE (created_date > '2019-11-28 12:00:00') AND (created_date < '2019-11-28 12:01:00')\nGROUP BY created_date\nORDER BY created_date ASC\n\n#最近7天\nSELECT\n    toUnixTimestamp(toStartOfDay(created_date)) AS time,\n    max(created_date),\n    sum(total_fee) / 100\nFROM order_behavior_log\nWHERE (created_date <= now()) AND (created_date >= (toDate(now()) - 7)) AND (state = 3)\nGROUP BY time\nORDER BY time ASC\n\n#10月份销售额\nselect sum(total_fee)/100 from order_behavior_log where toDate(created_date) >= '2019-10-01' and toDate(created_date) <='2019-10-31' and state = 3\n```\n\n**系统查询**\n\n```\n#查看列大小\nSELECT column, any(type), \n        sum(column_data_compressed_bytes) compressed, \n        sum(column_data_uncompressed_bytes) uncompressed, \n        sum(rows)\n    FROM system.parts_columns \n    WHERE (table = 'ontime') AND active AND (column LIKE '%CityName')\n    GROUP BY column\n    ORDER BY column ASC\n    \n#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`\nSELECT \n    table, \n    sum(rows), \n    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, \n    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr\nFROM system.parts\nWHERE active AND (table LIKE 'order_behavior_log')\nGROUP BY table\n```\n\n**产生date_time列**\n\n```\ncat data.csv | awk -F \",\" '{str=substr($NF,0,11);print $0\",\"str}'\n#时间戳\nPARTITION BY toYYYYMMDD(toDateTime(create_date))\n```\n\n**使用 mysql 函数将 mysql 数据导入clickhouse**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\n\nOk.\n\n0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)\n\n┌─count()─┐\n│ 7381387 │\n└─────────┘\n\n┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐\n│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │\n└────────────────────┴───────────┴─────────────────┴───────────┘\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\nWHERE id >\n(\n    SELECT max(id)\n    FROM order_behavior_log\n);\n\n#使用非交互模式\nclickhouse-client --input_format_allow_errors_num=10 \\\n--query=\"INSERT INTO bill SELECT * FROM url('http://ck.t1.apple.net/?database=default&query=select%20*%20from%20bill', TabSeparated, 'created_date DateTime, wx_app_id String, mch_id String, order_id String, shop_order_id String, trade_type String, trade_status String, total_fee Float64, refund_id String, shop_refund_id String, refund_fee Float64, refund_status String, goods_name String, fees Float64, rates String, trade_no String, refund_no String')\"\n```\n\n**使用 url 函数 clickhouseA 导入 clickhouseB**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n```\n\n**clickhouse 查询远程数据**\n\n```\n# 从api接口查询\nSELECT *\nFROM url('http://10.2.4.35:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log&user=default&password=MXtqOeQcX', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n# 从远端mysql查询\nSELECT \n    data1, \n    COUNT(*)\nFROM mysql('172.16.200.4:3306', 'soa_behavior', 'order_behavior_log', 'root', 'passwd') \nGROUP BY data1\n```\n\n**开启mysql客户端支持**\n\n```\nsed \"145 i<mysql_port>9004</mysql_port>\" -i /etc/clickhouse-server/config.xml\n\n## 导入mysql数据\nmysql --protocol tcp -u default -h 10.42.0.76 -P 9004   < /home/runner/work/clickhouse/clickhouse/tmp/sms_new_metrics.sql\n\n#查询\nSELECT (intDiv(toUInt32(created_at), 7200) * 7200) * 1000 as t, count(id) AS \"id\" FROM metrics WHERE  created_at BETWEEN  '2020-03-01 00:00:00'  AND  '2020-06-04 15:59:59'  GROUP BY t ORDER BY 1;\n```\n\n**跳过错误** (忽略csv标题行)\n\n```\nclickhouse-client --input_format_allow_errors_num=1 \\\n--input_format_allow_errors_ratio=0.1 \\\n--query=\"INSERT INTO bill SELECT *\nFROM url('http://payment-hotfix-duizhangdan.t1.apple.net/order/downloadbill?bill_date=20200106&agg_platform=wx', CSV, 'created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String')\"\n```\n\n**php 客户端**\n\n```\n#composer require smi2/phpclickhouse\n\n<?php\ninclude('./vendor/autoload.php');\n$config = [\n    'host' => '10.0.12.*',\n    'port' => '8123',\n    'username' => 'default',\n    'password' => ''\n];\n$db = new ClickHouseDB\\Client($config);\n$db->database('soa_behavior');\n$statement = $db->select('select * from order_behavior_log where id = 100');\nprint_r($statement->rows());\n\n$statement = $db->write('alter table order_behavior_log update shop_id = 1 where id = 100');\nprint_r($statement->info());\n```\n\n**grafana查询**\n\n```\nSELECT\n    1574058600000 as t,\n    usage_user\nFROM $table\nWHERE $timeFilter\nORDER BY t\n\n#查询最近7天数据\nSELECT\n    t,\n    groupArray((d,s)) AS groupArr\nFROM\n(\n  SELECT \n      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,\n      toDate(created_date) AS d, \n      sum(total_fee) / 100 AS s\n  FROM $table\n  WHERE (created_date < toDateTime($to)) AND (created_date > (toDate($to) - 7)) AND (state = 3)\n  GROUP BY t,d\n  ORDER BY t ASC\n)\nGROUP BY t\nORDER BY t \n\n#七日数据\nSELECT\n    t + 86400000 * 7,\n    st AS `七日`\nFROM\n(\n  SELECT\n     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,\n     sum(total_fee)/100 as st\n  FROM $table\n  WHERE \n      (created_date > toDateTime($from - 86400*7)) AND (created_date < toDateTime($to - 86400*7))\n      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) \n  Group by t\n  ORDER BY t\n)\n\n#世界地图\nCREATE TABLE `worldmap_latlng` (\n   created_date Date DEFAULT today(),  \n   created_at DateTime DEFAULT now(),    \n  `lat` Float32,\n  `lng` Float32,\n  `name` String,\n  `value` Int32\n ) ENGINE = MergeTree(created_date, created_at, 8192);\n \nINSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, '上海', 2)\n```\n\n**高可用**\n\n{% post_link clickhouse-ha clickhouse高可用集群搭建%}\n\n\n**定时同步mysql**\n```\n* * * * * sh /root/sh/sync_soa_behavior.sh\n0 0 * * * sh /root/sh/sync_soa_behavior_del_today.sh\n\n[root@node-a001 sh]# cat sync_soa_behavior_del_today.sh\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"alter table order_behavior_log delete where created_date >= yesterday()\"\n\n\n[root@node-a001 sh]# cat sync_soa_behavior.sh\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"alter table order_behavior_log delete where created_date >= toStartOfTenMinutes(now())\"\n\nsleep 5\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"INSERT INTO order_behavior_log SELECT * FROM mysql('mysql.host', 'soa_behavior', 'order_behavior_log', 'username','password') WHERE id >(SELECT max(id) FROM order_behavior_log)\"\n\n```\n\n**抽样**\n同时我们还可以通过 ClickHouse 的抽样功能来辅助降低引擎查询压力。这里需要注意的是，只有在创建表结构时开启抽样查询功能，才能执行抽样查询 SQL \n那么如何开启抽样查询功能呢，其实很简单，比如我们想以 datetime 维度进程抽样展示，只要在您的建表语句中包含 SAMPLE BY intHash64(datetime) ，同时，在您的主键中，也就是 ORDER BY 里面，必须包含抽样的字段。完成的建表语句如下:\n```\nCREATE TABLE soa.user_behavior\n(\n    `date` Date DEFAULT today(),\n    `datetime` DateTime DEFAULT now(),\n    `user` String,\n    `service` String,\n    `operation` String,\n    `content` String,\n    `extra` String,\n    `op_time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/user_behavior', '{replica}')\nPARTITION BY date\nORDER BY (date, user, intHash64(datetime))\nSAMPLE BY intHash64(datetime)\nSETTINGS index_granularity = 8192\n```\n\n**grafana 7.0警报支持**\n```\nrm -rfv /var/lib/grafana/plugins/vertamedia-clickhouse/\ngit clone https://github.com/Vertamedia/clickhouse-grafana /var/lib/grafana/plugins/vertamedia-clickhouse/\necho \"[plugins]\\nallow_loading_unsigned_plugins = vertamedia-clickhouse-datasource\" >> /etc/grafana/grafana.ini\nsystemctl restart grafana\n\n# helm形式安装\n在 grafana 包 value.yaml 文件大概390行，添加：    \nallow_loading_unsigned_plugins: \"vertamedia-clickhouse-datasource\"\n```\n\n**物化视图**\n```\nCREATE MATERIALIZED VIEW mv_sms_year_month_cnt\nENGINE = SummingMergeTree\nPARTITION BY year_month\nORDER BY (year_month,channel) POPULATE AS\nSELECT\n    toYYYYMM(created_at) AS year_month,\n    channel,\n    count() AS cnt\nFROM sms_report\nGROUP BY\n    toYYYYMM(created_at),\n    channel\n```\n\n**备份**\n```\nclickhouse-client --host=\"localhost\" --port=\"9000\" --user=\"default\" --password=\"*******\" --max_threads=\"1\"  --query=\"select * from biw.system_msg FORMAT CSV\"  > /tmp/system_20200819.csv\n```\n\n**参考：**\n\nhttps://clickhouse.yandex/docs/zh/\nhttps://www.altinity.com/blog/clickhouse-for-time-series\nhttps://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\nhttps://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\nhttps://developer.aliyun.com/article/739805\n[创建grafana面板](https://altinity.com/blog/2019/12/28/creating-beautiful-grafana-dashboards-on-clickhouse-a-tutorial)\n\n多分片多副本高可用\nhttps://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\nhttp://sineyuan.github.io/post/clickhouse-docker-quick-start/\nhttps://www.cnblogs.com/freeweb/p/9352947.html\nhttps://www.jianshu.com/p/ab811cceb856","source":"_posts/clickhouse.md","raw":"---\ntitle: \"ClickHouse 入门笔记\"\ndate: 2019-12-16 14:22:10\ntags: [clickhouse,OLAP]\nshare: true\n---\n\nClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)\n\n**版本**\n\n文章使用版本 `docker pull yandex/clickhouse-server:19.15.3.6`\n\n**SQL支持**\n\n支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。\n\n**支持近似计算**\n\n用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)\n\n**吞吐量**\n\nClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。\n\n**访问控制**\n\nClickHouse包含访问控制配置，它们位于`users.xml`文件中(与'config.xml'同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。\n\n默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：`clickhouse-client --host=example.com`\n\n**时区设置**\n\n```\nsed \"144 i<timezone>Asia/Shanghai</timezone>\" -i /etc/clickhouse-server/config.xml\n```\n<!-- more -->\n\n**交互方式**\n\n客户端可以选择使用交互式与非交互式两种\n\n\n```\nCREATE TABLE test (\n         created_date Date DEFAULT today(),  \n         created_at DateTime DEFAULT now(), \n        `id` UInt16,\n        `name` String\n) ENGINE = MergeTree(created_date, created_at, 8192);\n\n\ncat <<_EOF | clickhouse-client --database=default --query=\"INSERT INTO test FORMAT CSV\";\n'2016-08-14','2016-08-14 00:00:00',3, 'some text',\n'2016-08-14','2016-08-14 00:00:01',4, 'some text'\n_EOF\n```\n\n可以指定 `\\G` 来替代分号或者在分号后面，这表示 `Vertical` 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。\n\n**命令行参数**\n\nhttps://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\n\n**输入输出格式**\n\n支持 json、csv 等多种格式 https://clickhouse.yandex/docs/zh/interfaces/formats/\n\n**mysql 引擎**\n\n```\nCREATE DATABASE mysql_db ENGINE = MySQL('172.16.200.10:3306', 'test', 'root', 'passwd')\n```\n\n**mergeTree 引擎**\n\n使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构\n\n```\nCREATE TABLE wikistat\n(\n    id bigint,\n    dt DateTime,\n    project String,\n    subproject String,\n    path String,\n    hits UInt64,\n    size UInt64\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(dt)\nORDER BY dt\n```\n\n**ReplacingMergeTree 引擎** (按主键进行合并)\n```\nCREATE TABLE mergetree\n(\n    `msg_id` UInt64,\n    `msg_type` String,\n    `sync_time` DateTime DEFAULT now()\n)\nENGINE = ReplacingMergeTree \nPARTITION BY toYYYYMMDD(sync_time)\nORDER BY msg_id;\n# 插入数据\ninsert into mergetree(msg_id,msg_type) values(1,'aa') ;\n# 强制合并\noptimize table mergetree final;\n```\n\n**SummingMergeTree** (按主键合并，SummingMergeTree(a) a求和)\n```\nCREATE TABLE smt_tab(date Date,id UInt8,name String,a UInt16) ENGINE=SummingMergeTree(a) PARTITION BY date ORDER BY (id,name) SAMPLE BY name\n#插入数据\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',1)\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',2)\ninsert into smt_tab (date,id,name,a) values ('2019-12-12',1,'Jason',3)\n#结果只有一条，a列求和\n```\n\n**JSON 函数**\n\n```\n#pay_data 是否有 appId 下标\nselect visitParamHas(pay_data,'appId') from `order` limit 1;\n#获取appId值\nselect visitParamExtractRaw(pay_data,'appId') from `order` limit 1;\n#获取值\nSELECT visitParamExtractString(return_data, 'body') FROM order_behavior_log LIMIT 10;\n```\n\nhttps://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\n\n**数据备份**\n\n```\nclickhouse-client -d default --query=\"show create table ontime\"\nclickhouse-client -d default -f CSV --query=\"select * from ontime limit 1\" >/var/lib/clickhouse/a.csv\n```\n\n**使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:**\n![1.png](/img/clickhouse/1.png)\n\n存档到ClickHouse允许您保留旧数据并将其用于报告\n\n\n**LowCardinality 类型** （对字符串做数字字典）\n\n城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。\n\n值得一提的是，还有一种用字典编码字符串的可能性：[Enums](https://clickhouse.yandex/docs/en/data_types/enum/)。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。\n\n**实时视图**\n\n将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存\n\n**命令**\n\n```\ndetach database payemnt #删除mysql引擎库\nalter table cpu update usage_user = 888 where usage_user=18 #update\nalter table cpu delete where usage_user = 888 #delete\nalter table user_behavior add column `operation` String after service; #add column\nalter table user_behavior drop column operator; #drop column\nrename table system_msg to system_msg_old\n```\n\n**web 客户端tabix**\n\n```\ndocker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client\n```\n\n\n**查询示例**\n\n```\n#执行时间分位数查询\nSELECT\n    created_date,\n    quantile(0.999)(toFloat64(execute_mic_time))\nFROM order_behavior_log\nWHERE (created_date > '2019-11-28 12:00:00') AND (created_date < '2019-11-28 12:01:00')\nGROUP BY created_date\nORDER BY created_date ASC\n\n#最近7天\nSELECT\n    toUnixTimestamp(toStartOfDay(created_date)) AS time,\n    max(created_date),\n    sum(total_fee) / 100\nFROM order_behavior_log\nWHERE (created_date <= now()) AND (created_date >= (toDate(now()) - 7)) AND (state = 3)\nGROUP BY time\nORDER BY time ASC\n\n#10月份销售额\nselect sum(total_fee)/100 from order_behavior_log where toDate(created_date) >= '2019-10-01' and toDate(created_date) <='2019-10-31' and state = 3\n```\n\n**系统查询**\n\n```\n#查看列大小\nSELECT column, any(type), \n        sum(column_data_compressed_bytes) compressed, \n        sum(column_data_uncompressed_bytes) uncompressed, \n        sum(rows)\n    FROM system.parts_columns \n    WHERE (table = 'ontime') AND active AND (column LIKE '%CityName')\n    GROUP BY column\n    ORDER BY column ASC\n    \n#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`\nSELECT \n    table, \n    sum(rows), \n    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, \n    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr\nFROM system.parts\nWHERE active AND (table LIKE 'order_behavior_log')\nGROUP BY table\n```\n\n**产生date_time列**\n\n```\ncat data.csv | awk -F \",\" '{str=substr($NF,0,11);print $0\",\"str}'\n#时间戳\nPARTITION BY toYYYYMMDD(toDateTime(create_date))\n```\n\n**使用 mysql 函数将 mysql 数据导入clickhouse**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\n\nOk.\n\n0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)\n\n┌─count()─┐\n│ 7381387 │\n└─────────┘\n\n┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐\n│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │\n└────────────────────┴───────────┴─────────────────┴───────────┘\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM mysql('172.16.200.40', 'soa_behavior', 'order_behavior_log', 'root', 'passwd')\nWHERE id >\n(\n    SELECT max(id)\n    FROM order_behavior_log\n);\n\n#使用非交互模式\nclickhouse-client --input_format_allow_errors_num=10 \\\n--query=\"INSERT INTO bill SELECT * FROM url('http://ck.t1.apple.net/?database=default&query=select%20*%20from%20bill', TabSeparated, 'created_date DateTime, wx_app_id String, mch_id String, order_id String, shop_order_id String, trade_type String, trade_status String, total_fee Float64, refund_id String, shop_refund_id String, refund_fee Float64, refund_status String, goods_name String, fees Float64, rates String, trade_no String, refund_no String')\"\n```\n\n**使用 url 函数 clickhouseA 导入 clickhouseB**\n\n```\n#方式一 (导入之前要先修改时区)\nCREATE TABLE order_behavior_log\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(created_date)\nORDER BY id AS\nSELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n#方式二增量\nINSERT INTO order_behavior_log SELECT *\nFROM url('http://10.2.4.3:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n```\n\n**clickhouse 查询远程数据**\n\n```\n# 从api接口查询\nSELECT *\nFROM url('http://10.2.4.35:8123/?database=soa_behavior&query=select%20*%20from%20order_behavior_log&user=default&password=MXtqOeQcX', TabSeparated, '`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime')\nLIMIT 3\n\n# 从远端mysql查询\nSELECT \n    data1, \n    COUNT(*)\nFROM mysql('172.16.200.4:3306', 'soa_behavior', 'order_behavior_log', 'root', 'passwd') \nGROUP BY data1\n```\n\n**开启mysql客户端支持**\n\n```\nsed \"145 i<mysql_port>9004</mysql_port>\" -i /etc/clickhouse-server/config.xml\n\n## 导入mysql数据\nmysql --protocol tcp -u default -h 10.42.0.76 -P 9004   < /home/runner/work/clickhouse/clickhouse/tmp/sms_new_metrics.sql\n\n#查询\nSELECT (intDiv(toUInt32(created_at), 7200) * 7200) * 1000 as t, count(id) AS \"id\" FROM metrics WHERE  created_at BETWEEN  '2020-03-01 00:00:00'  AND  '2020-06-04 15:59:59'  GROUP BY t ORDER BY 1;\n```\n\n**跳过错误** (忽略csv标题行)\n\n```\nclickhouse-client --input_format_allow_errors_num=1 \\\n--input_format_allow_errors_ratio=0.1 \\\n--query=\"INSERT INTO bill SELECT *\nFROM url('http://payment-hotfix-duizhangdan.t1.apple.net/order/downloadbill?bill_date=20200106&agg_platform=wx', CSV, 'created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String')\"\n```\n\n**php 客户端**\n\n```\n#composer require smi2/phpclickhouse\n\n<?php\ninclude('./vendor/autoload.php');\n$config = [\n    'host' => '10.0.12.*',\n    'port' => '8123',\n    'username' => 'default',\n    'password' => ''\n];\n$db = new ClickHouseDB\\Client($config);\n$db->database('soa_behavior');\n$statement = $db->select('select * from order_behavior_log where id = 100');\nprint_r($statement->rows());\n\n$statement = $db->write('alter table order_behavior_log update shop_id = 1 where id = 100');\nprint_r($statement->info());\n```\n\n**grafana查询**\n\n```\nSELECT\n    1574058600000 as t,\n    usage_user\nFROM $table\nWHERE $timeFilter\nORDER BY t\n\n#查询最近7天数据\nSELECT\n    t,\n    groupArray((d,s)) AS groupArr\nFROM\n(\n  SELECT \n      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,\n      toDate(created_date) AS d, \n      sum(total_fee) / 100 AS s\n  FROM $table\n  WHERE (created_date < toDateTime($to)) AND (created_date > (toDate($to) - 7)) AND (state = 3)\n  GROUP BY t,d\n  ORDER BY t ASC\n)\nGROUP BY t\nORDER BY t \n\n#七日数据\nSELECT\n    t + 86400000 * 7,\n    st AS `七日`\nFROM\n(\n  SELECT\n     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,\n     sum(total_fee)/100 as st\n  FROM $table\n  WHERE \n      (created_date > toDateTime($from - 86400*7)) AND (created_date < toDateTime($to - 86400*7))\n      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) \n  Group by t\n  ORDER BY t\n)\n\n#世界地图\nCREATE TABLE `worldmap_latlng` (\n   created_date Date DEFAULT today(),  \n   created_at DateTime DEFAULT now(),    \n  `lat` Float32,\n  `lng` Float32,\n  `name` String,\n  `value` Int32\n ) ENGINE = MergeTree(created_date, created_at, 8192);\n \nINSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, '上海', 2)\n```\n\n**高可用**\n\n{% post_link clickhouse-ha clickhouse高可用集群搭建%}\n\n\n**定时同步mysql**\n```\n* * * * * sh /root/sh/sync_soa_behavior.sh\n0 0 * * * sh /root/sh/sync_soa_behavior_del_today.sh\n\n[root@node-a001 sh]# cat sync_soa_behavior_del_today.sh\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"alter table order_behavior_log delete where created_date >= yesterday()\"\n\n\n[root@node-a001 sh]# cat sync_soa_behavior.sh\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"alter table order_behavior_log delete where created_date >= toStartOfTenMinutes(now())\"\n\nsleep 5\n\ndocker exec clickhouse clickhouse-client --database=soa_behavior --query=\"INSERT INTO order_behavior_log SELECT * FROM mysql('mysql.host', 'soa_behavior', 'order_behavior_log', 'username','password') WHERE id >(SELECT max(id) FROM order_behavior_log)\"\n\n```\n\n**抽样**\n同时我们还可以通过 ClickHouse 的抽样功能来辅助降低引擎查询压力。这里需要注意的是，只有在创建表结构时开启抽样查询功能，才能执行抽样查询 SQL \n那么如何开启抽样查询功能呢，其实很简单，比如我们想以 datetime 维度进程抽样展示，只要在您的建表语句中包含 SAMPLE BY intHash64(datetime) ，同时，在您的主键中，也就是 ORDER BY 里面，必须包含抽样的字段。完成的建表语句如下:\n```\nCREATE TABLE soa.user_behavior\n(\n    `date` Date DEFAULT today(),\n    `datetime` DateTime DEFAULT now(),\n    `user` String,\n    `service` String,\n    `operation` String,\n    `content` String,\n    `extra` String,\n    `op_time` DateTime\n)\nENGINE = ReplicatedMergeTree('/clickhouse/tables/{layer}-{shard}/user_behavior', '{replica}')\nPARTITION BY date\nORDER BY (date, user, intHash64(datetime))\nSAMPLE BY intHash64(datetime)\nSETTINGS index_granularity = 8192\n```\n\n**grafana 7.0警报支持**\n```\nrm -rfv /var/lib/grafana/plugins/vertamedia-clickhouse/\ngit clone https://github.com/Vertamedia/clickhouse-grafana /var/lib/grafana/plugins/vertamedia-clickhouse/\necho \"[plugins]\\nallow_loading_unsigned_plugins = vertamedia-clickhouse-datasource\" >> /etc/grafana/grafana.ini\nsystemctl restart grafana\n\n# helm形式安装\n在 grafana 包 value.yaml 文件大概390行，添加：    \nallow_loading_unsigned_plugins: \"vertamedia-clickhouse-datasource\"\n```\n\n**物化视图**\n```\nCREATE MATERIALIZED VIEW mv_sms_year_month_cnt\nENGINE = SummingMergeTree\nPARTITION BY year_month\nORDER BY (year_month,channel) POPULATE AS\nSELECT\n    toYYYYMM(created_at) AS year_month,\n    channel,\n    count() AS cnt\nFROM sms_report\nGROUP BY\n    toYYYYMM(created_at),\n    channel\n```\n\n**备份**\n```\nclickhouse-client --host=\"localhost\" --port=\"9000\" --user=\"default\" --password=\"*******\" --max_threads=\"1\"  --query=\"select * from biw.system_msg FORMAT CSV\"  > /tmp/system_20200819.csv\n```\n\n**参考：**\n\nhttps://clickhouse.yandex/docs/zh/\nhttps://www.altinity.com/blog/clickhouse-for-time-series\nhttps://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\nhttps://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\nhttps://developer.aliyun.com/article/739805\n[创建grafana面板](https://altinity.com/blog/2019/12/28/creating-beautiful-grafana-dashboards-on-clickhouse-a-tutorial)\n\n多分片多副本高可用\nhttps://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\nhttp://sineyuan.github.io/post/clickhouse-docker-quick-start/\nhttps://www.cnblogs.com/freeweb/p/9352947.html\nhttps://www.jianshu.com/p/ab811cceb856","slug":"clickhouse","published":1,"updated":"2020-08-25T07:19:18.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenku000g0wpbrs8gua86","content":"<p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)</p>\n<p><strong>版本</strong></p>\n<p>文章使用版本 <code>docker pull yandex/clickhouse-server:19.15.3.6</code></p>\n<p><strong>SQL支持</strong></p>\n<p>支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。</p>\n<p><strong>支持近似计算</strong></p>\n<p>用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)</p>\n<p><strong>吞吐量</strong></p>\n<p>ClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。</p>\n<p><strong>访问控制</strong></p>\n<p>ClickHouse包含访问控制配置，它们位于<code>users.xml</code>文件中(与’config.xml’同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。</p>\n<p>默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：<code>clickhouse-client --host=example.com</code></p>\n<p><strong>时区设置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &quot;144 i&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;&quot; -i /etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>交互方式</strong></p>\n<p>客户端可以选择使用交互式与非交互式两种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test (</span><br><span class=\"line\">         created_date Date DEFAULT today(),  </span><br><span class=\"line\">         created_at DateTime DEFAULT now(), </span><br><span class=\"line\">        `id` UInt16,</span><br><span class=\"line\">        `name` String</span><br><span class=\"line\">) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;_EOF | clickhouse-client --database=default --query=&quot;INSERT INTO test FORMAT CSV&quot;;</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:00&apos;,3, &apos;some text&apos;,</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:01&apos;,4, &apos;some text&apos;</span><br><span class=\"line\">_EOF</span><br></pre></td></tr></table></figure>\n<p>可以指定 <code>\\G</code> 来替代分号或者在分号后面，这表示 <code>Vertical</code> 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。</p>\n<p><strong>命令行参数</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu</a></p>\n<p><strong>输入输出格式</strong></p>\n<p>支持 json、csv 等多种格式 <a href=\"https://clickhouse.yandex/docs/zh/interfaces/formats/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/formats/</a></p>\n<p><strong>mysql 引擎</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mysql_db ENGINE = MySQL(&apos;172.16.200.10:3306&apos;, &apos;test&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>mergeTree 引擎</strong></p>\n<p>使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE wikistat</span><br><span class=\"line\">(</span><br><span class=\"line\">    id bigint,</span><br><span class=\"line\">    dt DateTime,</span><br><span class=\"line\">    project String,</span><br><span class=\"line\">    subproject String,</span><br><span class=\"line\">    path String,</span><br><span class=\"line\">    hits UInt64,</span><br><span class=\"line\">    size UInt64</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(dt)</span><br><span class=\"line\">ORDER BY dt</span><br></pre></td></tr></table></figure>\n<p><strong>ReplacingMergeTree 引擎</strong> (按主键进行合并)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE mergetree</span><br><span class=\"line\">(</span><br><span class=\"line\">    `msg_id` UInt64,</span><br><span class=\"line\">    `msg_type` String,</span><br><span class=\"line\">    `sync_time` DateTime DEFAULT now()</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplacingMergeTree </span><br><span class=\"line\">PARTITION BY toYYYYMMDD(sync_time)</span><br><span class=\"line\">ORDER BY msg_id;</span><br><span class=\"line\"># 插入数据</span><br><span class=\"line\">insert into mergetree(msg_id,msg_type) values(1,&apos;aa&apos;) ;</span><br><span class=\"line\"># 强制合并</span><br><span class=\"line\">optimize table mergetree final;</span><br></pre></td></tr></table></figure></p>\n<p><strong>SummingMergeTree</strong> (按主键合并，SummingMergeTree(a) a求和)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE smt_tab(date Date,id UInt8,name String,a UInt16) ENGINE=SummingMergeTree(a) PARTITION BY date ORDER BY (id,name) SAMPLE BY name</span><br><span class=\"line\">#插入数据</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,1)</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,2)</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,3)</span><br><span class=\"line\">#结果只有一条，a列求和</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON 函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pay_data 是否有 appId 下标</span><br><span class=\"line\">select visitParamHas(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取appId值</span><br><span class=\"line\">select visitParamExtractRaw(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取值</span><br><span class=\"line\">SELECT visitParamExtractString(return_data, &apos;body&apos;) FROM order_behavior_log LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/</a></p>\n<p><strong>数据备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -d default --query=&quot;show create table ontime&quot;</span><br><span class=\"line\">clickhouse-client -d default -f CSV --query=&quot;select * from ontime limit 1&quot; &gt;/var/lib/clickhouse/a.csv</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:</strong><br><img src=\"/img/clickhouse/1.png\" alt=\"1.png\"></p>\n<p>存档到ClickHouse允许您保留旧数据并将其用于报告</p>\n<p><strong>LowCardinality 类型</strong> （对字符串做数字字典）</p>\n<p>城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。</p>\n<p>值得一提的是，还有一种用字典编码字符串的可能性：<a href=\"https://clickhouse.yandex/docs/en/data_types/enum/\" target=\"_blank\" rel=\"noopener\">Enums</a>。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。</p>\n<p><strong>实时视图</strong></p>\n<p>将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存</p>\n<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detach database payemnt #删除mysql引擎库</span><br><span class=\"line\">alter table cpu update usage_user = 888 where usage_user=18 #update</span><br><span class=\"line\">alter table cpu delete where usage_user = 888 #delete</span><br><span class=\"line\">alter table user_behavior add column `operation` String after service; #add column</span><br><span class=\"line\">alter table user_behavior drop column operator; #drop column</span><br><span class=\"line\">rename table system_msg to system_msg_old</span><br></pre></td></tr></table></figure>\n<p><strong>web 客户端tabix</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client</span><br></pre></td></tr></table></figure>\n<p><strong>查询示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行时间分位数查询</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    created_date,</span><br><span class=\"line\">    quantile(0.999)(toFloat64(execute_mic_time))</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &gt; &apos;2019-11-28 12:00:00&apos;) AND (created_date &lt; &apos;2019-11-28 12:01:00&apos;)</span><br><span class=\"line\">GROUP BY created_date</span><br><span class=\"line\">ORDER BY created_date ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#最近7天</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toUnixTimestamp(toStartOfDay(created_date)) AS time,</span><br><span class=\"line\">    max(created_date),</span><br><span class=\"line\">    sum(total_fee) / 100</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &lt;= now()) AND (created_date &gt;= (toDate(now()) - 7)) AND (state = 3)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#10月份销售额</span><br><span class=\"line\">select sum(total_fee)/100 from order_behavior_log where toDate(created_date) &gt;= &apos;2019-10-01&apos; and toDate(created_date) &lt;=&apos;2019-10-31&apos; and state = 3</span><br></pre></td></tr></table></figure>\n<p><strong>系统查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看列大小</span><br><span class=\"line\">SELECT column, any(type), </span><br><span class=\"line\">        sum(column_data_compressed_bytes) compressed, </span><br><span class=\"line\">        sum(column_data_uncompressed_bytes) uncompressed, </span><br><span class=\"line\">        sum(rows)</span><br><span class=\"line\">    FROM system.parts_columns </span><br><span class=\"line\">    WHERE (table = &apos;ontime&apos;) AND active AND (column LIKE &apos;%CityName&apos;)</span><br><span class=\"line\">    GROUP BY column</span><br><span class=\"line\">    ORDER BY column ASC</span><br><span class=\"line\">    </span><br><span class=\"line\">#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    table, </span><br><span class=\"line\">    sum(rows), </span><br><span class=\"line\">    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, </span><br><span class=\"line\">    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr</span><br><span class=\"line\">FROM system.parts</span><br><span class=\"line\">WHERE active AND (table LIKE &apos;order_behavior_log&apos;)</span><br><span class=\"line\">GROUP BY table</span><br></pre></td></tr></table></figure>\n<p><strong>产生date_time列</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.csv | awk -F &quot;,&quot; &apos;&#123;str=substr($NF,0,11);print $0&quot;,&quot;str&#125;&apos;</span><br><span class=\"line\">#时间戳</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(toDateTime(create_date))</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 函数将 mysql 数据导入clickhouse</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 7381387 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐</span><br><span class=\"line\">│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │</span><br><span class=\"line\">└────────────────────┴───────────┴─────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\">WHERE id &gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    SELECT max(id)</span><br><span class=\"line\">    FROM order_behavior_log</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#使用非交互模式</span><br><span class=\"line\">clickhouse-client --input_format_allow_errors_num=10 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT * FROM url(&apos;http://ck.t1.apple.net/?database=default&amp;query=select%20*%20from%20bill&apos;, TabSeparated, &apos;created_date DateTime, wx_app_id String, mch_id String, order_id String, shop_order_id String, trade_type String, trade_status String, total_fee Float64, refund_id String, shop_refund_id String, refund_fee Float64, refund_status String, goods_name String, fees Float64, rates String, trade_no String, refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>使用 url 函数 clickhouseA 导入 clickhouseB</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 查询远程数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从api接口查询</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.35:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&amp;user=default&amp;password=MXtqOeQcX&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 从远端mysql查询</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    data1, </span><br><span class=\"line\">    COUNT(*)</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.4:3306&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;) </span><br><span class=\"line\">GROUP BY data1</span><br></pre></td></tr></table></figure>\n<p><strong>开启mysql客户端支持</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &quot;145 i&lt;mysql_port&gt;9004&lt;/mysql_port&gt;&quot; -i /etc/clickhouse-server/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\">## 导入mysql数据</span><br><span class=\"line\">mysql --protocol tcp -u default -h 10.42.0.76 -P 9004   &lt; /home/runner/work/clickhouse/clickhouse/tmp/sms_new_metrics.sql</span><br><span class=\"line\"></span><br><span class=\"line\">#查询</span><br><span class=\"line\">SELECT (intDiv(toUInt32(created_at), 7200) * 7200) * 1000 as t, count(id) AS &quot;id&quot; FROM metrics WHERE  created_at BETWEEN  &apos;2020-03-01 00:00:00&apos;  AND  &apos;2020-06-04 15:59:59&apos;  GROUP BY t ORDER BY 1;</span><br></pre></td></tr></table></figure>\n<p><strong>跳过错误</strong> (忽略csv标题行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --input_format_allow_errors_num=1 \\</span><br><span class=\"line\">--input_format_allow_errors_ratio=0.1 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT *</span><br><span class=\"line\">FROM url(&apos;http://payment-hotfix-duizhangdan.t1.apple.net/order/downloadbill?bill_date=20200106&amp;agg_platform=wx&apos;, CSV, &apos;created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>php 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#composer require smi2/phpclickhouse</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include(&apos;./vendor/autoload.php&apos;);</span><br><span class=\"line\">$config = [</span><br><span class=\"line\">    &apos;host&apos; =&gt; &apos;10.0.12.*&apos;,</span><br><span class=\"line\">    &apos;port&apos; =&gt; &apos;8123&apos;,</span><br><span class=\"line\">    &apos;username&apos; =&gt; &apos;default&apos;,</span><br><span class=\"line\">    &apos;password&apos; =&gt; &apos;&apos;</span><br><span class=\"line\">];</span><br><span class=\"line\">$db = new ClickHouseDB\\Client($config);</span><br><span class=\"line\">$db-&gt;database(&apos;soa_behavior&apos;);</span><br><span class=\"line\">$statement = $db-&gt;select(&apos;select * from order_behavior_log where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;rows());</span><br><span class=\"line\"></span><br><span class=\"line\">$statement = $db-&gt;write(&apos;alter table order_behavior_log update shop_id = 1 where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;info());</span><br></pre></td></tr></table></figure>\n<p><strong>grafana查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">    1574058600000 as t,</span><br><span class=\"line\">    usage_user</span><br><span class=\"line\">FROM $table</span><br><span class=\"line\">WHERE $timeFilter</span><br><span class=\"line\">ORDER BY t</span><br><span class=\"line\"></span><br><span class=\"line\">#查询最近7天数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t,</span><br><span class=\"line\">    groupArray((d,s)) AS groupArr</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT </span><br><span class=\"line\">      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,</span><br><span class=\"line\">      toDate(created_date) AS d, </span><br><span class=\"line\">      sum(total_fee) / 100 AS s</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE (created_date &lt; toDateTime($to)) AND (created_date &gt; (toDate($to) - 7)) AND (state = 3)</span><br><span class=\"line\">  GROUP BY t,d</span><br><span class=\"line\">  ORDER BY t ASC</span><br><span class=\"line\">)</span><br><span class=\"line\">GROUP BY t</span><br><span class=\"line\">ORDER BY t </span><br><span class=\"line\"></span><br><span class=\"line\">#七日数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t + 86400000 * 7,</span><br><span class=\"line\">    st AS `七日`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,</span><br><span class=\"line\">     sum(total_fee)/100 as st</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE </span><br><span class=\"line\">      (created_date &gt; toDateTime($from - 86400*7)) AND (created_date &lt; toDateTime($to - 86400*7))</span><br><span class=\"line\">      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) </span><br><span class=\"line\">  Group by t</span><br><span class=\"line\">  ORDER BY t</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">#世界地图</span><br><span class=\"line\">CREATE TABLE `worldmap_latlng` (</span><br><span class=\"line\">   created_date Date DEFAULT today(),  </span><br><span class=\"line\">   created_at DateTime DEFAULT now(),    </span><br><span class=\"line\">  `lat` Float32,</span><br><span class=\"line\">  `lng` Float32,</span><br><span class=\"line\">  `name` String,</span><br><span class=\"line\">  `value` Int32</span><br><span class=\"line\"> ) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, &apos;上海&apos;, 2)</span><br></pre></td></tr></table></figure>\n<p><strong>高可用</strong></p>\n<a href=\"/2020/06/clickhouse-ha/\" title=\"clickhouse高可用集群搭建\">clickhouse高可用集群搭建</a>\n<p><strong>定时同步mysql</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * sh /root/sh/sync_soa_behavior.sh</span><br><span class=\"line\">0 0 * * * sh /root/sh/sync_soa_behavior_del_today.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node-a001 sh]# cat sync_soa_behavior_del_today.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;alter table order_behavior_log delete where created_date &gt;= yesterday()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@node-a001 sh]# cat sync_soa_behavior.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;alter table order_behavior_log delete where created_date &gt;= toStartOfTenMinutes(now())&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;INSERT INTO order_behavior_log SELECT * FROM mysql(&apos;mysql.host&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;username&apos;,&apos;password&apos;) WHERE id &gt;(SELECT max(id) FROM order_behavior_log)&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>抽样</strong><br>同时我们还可以通过 ClickHouse 的抽样功能来辅助降低引擎查询压力。这里需要注意的是，只有在创建表结构时开启抽样查询功能，才能执行抽样查询 SQL<br>那么如何开启抽样查询功能呢，其实很简单，比如我们想以 datetime 维度进程抽样展示，只要在您的建表语句中包含 SAMPLE BY intHash64(datetime) ，同时，在您的主键中，也就是 ORDER BY 里面，必须包含抽样的字段。完成的建表语句如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE soa.user_behavior</span><br><span class=\"line\">(</span><br><span class=\"line\">    `date` Date DEFAULT today(),</span><br><span class=\"line\">    `datetime` DateTime DEFAULT now(),</span><br><span class=\"line\">    `user` String,</span><br><span class=\"line\">    `service` String,</span><br><span class=\"line\">    `operation` String,</span><br><span class=\"line\">    `content` String,</span><br><span class=\"line\">    `extra` String,</span><br><span class=\"line\">    `op_time` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/user_behavior&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY date</span><br><span class=\"line\">ORDER BY (date, user, intHash64(datetime))</span><br><span class=\"line\">SAMPLE BY intHash64(datetime)</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure></p>\n<p><strong>grafana 7.0警报支持</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rfv /var/lib/grafana/plugins/vertamedia-clickhouse/</span><br><span class=\"line\">git clone https://github.com/Vertamedia/clickhouse-grafana /var/lib/grafana/plugins/vertamedia-clickhouse/</span><br><span class=\"line\">echo &quot;[plugins]\\nallow_loading_unsigned_plugins = vertamedia-clickhouse-datasource&quot; &gt;&gt; /etc/grafana/grafana.ini</span><br><span class=\"line\">systemctl restart grafana</span><br><span class=\"line\"></span><br><span class=\"line\"># helm形式安装</span><br><span class=\"line\">在 grafana 包 value.yaml 文件大概390行，添加：    </span><br><span class=\"line\">allow_loading_unsigned_plugins: &quot;vertamedia-clickhouse-datasource&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>物化视图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE MATERIALIZED VIEW mv_sms_year_month_cnt</span><br><span class=\"line\">ENGINE = SummingMergeTree</span><br><span class=\"line\">PARTITION BY year_month</span><br><span class=\"line\">ORDER BY (year_month,channel) POPULATE AS</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toYYYYMM(created_at) AS year_month,</span><br><span class=\"line\">    channel,</span><br><span class=\"line\">    count() AS cnt</span><br><span class=\"line\">FROM sms_report</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">    toYYYYMM(created_at),</span><br><span class=\"line\">    channel</span><br></pre></td></tr></table></figure></p>\n<p><strong>备份</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --host=&quot;localhost&quot; --port=&quot;9000&quot; --user=&quot;default&quot; --password=&quot;*******&quot; --max_threads=&quot;1&quot;  --query=&quot;select * from biw.system_msg FORMAT CSV&quot;  &gt; /tmp/system_20200819.csv</span><br></pre></td></tr></table></figure></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/</a><br><a href=\"https://www.altinity.com/blog/clickhouse-for-time-series\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/clickhouse-for-time-series</a><br><a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a><br><a href=\"https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse</a><br><a href=\"https://developer.aliyun.com/article/739805\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/article/739805</a><br><a href=\"https://altinity.com/blog/2019/12/28/creating-beautiful-grafana-dashboards-on-clickhouse-a-tutorial\" target=\"_blank\" rel=\"noopener\">创建grafana面板</a></p>\n<p>多分片多副本高可用<br><a href=\"https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a><br><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">http://sineyuan.github.io/post/clickhouse-docker-quick-start/</a><br><a href=\"https://www.cnblogs.com/freeweb/p/9352947.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/freeweb/p/9352947.html</a><br><a href=\"https://www.jianshu.com/p/ab811cceb856\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ab811cceb856</a></p>\n","site":{"data":{}},"excerpt":"<p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)</p>\n<p><strong>版本</strong></p>\n<p>文章使用版本 <code>docker pull yandex/clickhouse-server:19.15.3.6</code></p>\n<p><strong>SQL支持</strong></p>\n<p>支持的查询包括 GROUP BY，ORDER BY，IN，JOIN以及非相关子查询。 不支持窗口函数和相关子查询。</p>\n<p><strong>支持近似计算</strong></p>\n<p>用于近似计算的各类聚合函数，如：distinct values, medians(中位数), quantiles(分位数)</p>\n<p><strong>吞吐量</strong></p>\n<p>ClickHouse可以在单个服务器上每秒处理数百个查询（在最佳的情况下最多可以处理数千个），建议每秒最多查询100次。有一种流行的观点认为，想要有效的计算统计数据，必须要聚合数据，因为聚合将降低数据量。</p>\n<p><strong>访问控制</strong></p>\n<p>ClickHouse包含访问控制配置，它们位于<code>users.xml</code>文件中(与’config.xml’同目录)。 默认情况下，允许从任何地方使用默认的‘default’用户无密码的访问ClickHouse。</p>\n<p>默认情况下它使用‘default’用户无密码的与localhost:9000服务建立连接。 客户端也可以用于连接远程服务，例如：<code>clickhouse-client --host=example.com</code></p>\n<p><strong>时区设置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &quot;144 i&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;&quot; -i /etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>","more":"<p><strong>交互方式</strong></p>\n<p>客户端可以选择使用交互式与非交互式两种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test (</span><br><span class=\"line\">         created_date Date DEFAULT today(),  </span><br><span class=\"line\">         created_at DateTime DEFAULT now(), </span><br><span class=\"line\">        `id` UInt16,</span><br><span class=\"line\">        `name` String</span><br><span class=\"line\">) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;_EOF | clickhouse-client --database=default --query=&quot;INSERT INTO test FORMAT CSV&quot;;</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:00&apos;,3, &apos;some text&apos;,</span><br><span class=\"line\">&apos;2016-08-14&apos;,&apos;2016-08-14 00:00:01&apos;,4, &apos;some text&apos;</span><br><span class=\"line\">_EOF</span><br></pre></td></tr></table></figure>\n<p>可以指定 <code>\\G</code> 来替代分号或者在分号后面，这表示 <code>Vertical</code> 的格式。在这种格式下，每一个值都会打印在不同的行中，这种方式对于宽表来说很方便。这个不常见的特性是为了兼容 MySQL 命令而加的。</p>\n<p><strong>命令行参数</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/cli/#ming-ling-xing-can-shu</a></p>\n<p><strong>输入输出格式</strong></p>\n<p>支持 json、csv 等多种格式 <a href=\"https://clickhouse.yandex/docs/zh/interfaces/formats/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/interfaces/formats/</a></p>\n<p><strong>mysql 引擎</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE mysql_db ENGINE = MySQL(&apos;172.16.200.10:3306&apos;, &apos;test&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>mergeTree 引擎</strong></p>\n<p>使用新的ClickHouse自定义分区，不需要创建单独的日期列即可将MySQL中的表映射到ClickHouse中的相​​同表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE wikistat</span><br><span class=\"line\">(</span><br><span class=\"line\">    id bigint,</span><br><span class=\"line\">    dt DateTime,</span><br><span class=\"line\">    project String,</span><br><span class=\"line\">    subproject String,</span><br><span class=\"line\">    path String,</span><br><span class=\"line\">    hits UInt64,</span><br><span class=\"line\">    size UInt64</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(dt)</span><br><span class=\"line\">ORDER BY dt</span><br></pre></td></tr></table></figure>\n<p><strong>ReplacingMergeTree 引擎</strong> (按主键进行合并)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE mergetree</span><br><span class=\"line\">(</span><br><span class=\"line\">    `msg_id` UInt64,</span><br><span class=\"line\">    `msg_type` String,</span><br><span class=\"line\">    `sync_time` DateTime DEFAULT now()</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplacingMergeTree </span><br><span class=\"line\">PARTITION BY toYYYYMMDD(sync_time)</span><br><span class=\"line\">ORDER BY msg_id;</span><br><span class=\"line\"># 插入数据</span><br><span class=\"line\">insert into mergetree(msg_id,msg_type) values(1,&apos;aa&apos;) ;</span><br><span class=\"line\"># 强制合并</span><br><span class=\"line\">optimize table mergetree final;</span><br></pre></td></tr></table></figure></p>\n<p><strong>SummingMergeTree</strong> (按主键合并，SummingMergeTree(a) a求和)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE smt_tab(date Date,id UInt8,name String,a UInt16) ENGINE=SummingMergeTree(a) PARTITION BY date ORDER BY (id,name) SAMPLE BY name</span><br><span class=\"line\">#插入数据</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,1)</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,2)</span><br><span class=\"line\">insert into smt_tab (date,id,name,a) values (&apos;2019-12-12&apos;,1,&apos;Jason&apos;,3)</span><br><span class=\"line\">#结果只有一条，a列求和</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON 函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pay_data 是否有 appId 下标</span><br><span class=\"line\">select visitParamHas(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取appId值</span><br><span class=\"line\">select visitParamExtractRaw(pay_data,&apos;appId&apos;) from `order` limit 1;</span><br><span class=\"line\">#获取值</span><br><span class=\"line\">SELECT visitParamExtractString(return_data, &apos;body&apos;) FROM order_behavior_log LIMIT 10;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/query_language/functions/json_functions/</a></p>\n<p><strong>数据备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client -d default --query=&quot;show create table ontime&quot;</span><br><span class=\"line\">clickhouse-client -d default -f CSV --query=&quot;select * from ontime limit 1&quot; &gt;/var/lib/clickhouse/a.csv</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 和 clickhouse mysql 引擎，以及 clickhouse 直接查询对比:</strong><br><img src=\"/img/clickhouse/1.png\" alt=\"1.png\"></p>\n<p>存档到ClickHouse允许您保留旧数据并将其用于报告</p>\n<p><strong>LowCardinality 类型</strong> （对字符串做数字字典）</p>\n<p>城市名称相对较短，航班号甚至更短。在较长的字符串上，LowCardinality的影响可能会更加明显。</p>\n<p>值得一提的是，还有一种用字典编码字符串的可能性：<a href=\"https://clickhouse.yandex/docs/en/data_types/enum/\" target=\"_blank\" rel=\"noopener\">Enums</a>。ClickHouse完美支持枚举。从存储的角度来看，它可能甚至更有效率，因为枚举值存储在表定义上而不是存储在单独的数据文件中。枚举适用于静态字典。但是，如果插入了原始枚举之外的值，ClickHouse将引发异常。枚举值集中的每个更改都需要ALTER TABLE，这可能会带来很多麻烦。LowCardinality在这方面要灵活得多。</p>\n<p><strong>实时视图</strong></p>\n<p>将实时视图表与真实数据集一起使用 live view , 相比普通 view 除了实时还多了缓存</p>\n<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detach database payemnt #删除mysql引擎库</span><br><span class=\"line\">alter table cpu update usage_user = 888 where usage_user=18 #update</span><br><span class=\"line\">alter table cpu delete where usage_user = 888 #delete</span><br><span class=\"line\">alter table user_behavior add column `operation` String after service; #add column</span><br><span class=\"line\">alter table user_behavior drop column operator; #drop column</span><br><span class=\"line\">rename table system_msg to system_msg_old</span><br></pre></td></tr></table></figure>\n<p><strong>web 客户端tabix</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client</span><br></pre></td></tr></table></figure>\n<p><strong>查询示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行时间分位数查询</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    created_date,</span><br><span class=\"line\">    quantile(0.999)(toFloat64(execute_mic_time))</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &gt; &apos;2019-11-28 12:00:00&apos;) AND (created_date &lt; &apos;2019-11-28 12:01:00&apos;)</span><br><span class=\"line\">GROUP BY created_date</span><br><span class=\"line\">ORDER BY created_date ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#最近7天</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toUnixTimestamp(toStartOfDay(created_date)) AS time,</span><br><span class=\"line\">    max(created_date),</span><br><span class=\"line\">    sum(total_fee) / 100</span><br><span class=\"line\">FROM order_behavior_log</span><br><span class=\"line\">WHERE (created_date &lt;= now()) AND (created_date &gt;= (toDate(now()) - 7)) AND (state = 3)</span><br><span class=\"line\">GROUP BY time</span><br><span class=\"line\">ORDER BY time ASC</span><br><span class=\"line\"></span><br><span class=\"line\">#10月份销售额</span><br><span class=\"line\">select sum(total_fee)/100 from order_behavior_log where toDate(created_date) &gt;= &apos;2019-10-01&apos; and toDate(created_date) &lt;=&apos;2019-10-31&apos; and state = 3</span><br></pre></td></tr></table></figure>\n<p><strong>系统查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看列大小</span><br><span class=\"line\">SELECT column, any(type), </span><br><span class=\"line\">        sum(column_data_compressed_bytes) compressed, </span><br><span class=\"line\">        sum(column_data_uncompressed_bytes) uncompressed, </span><br><span class=\"line\">        sum(rows)</span><br><span class=\"line\">    FROM system.parts_columns </span><br><span class=\"line\">    WHERE (table = &apos;ontime&apos;) AND active AND (column LIKE &apos;%CityName&apos;)</span><br><span class=\"line\">    GROUP BY column</span><br><span class=\"line\">    ORDER BY column ASC</span><br><span class=\"line\">    </span><br><span class=\"line\">#查看表大小，也可以到data 目录下执行 `du -h --max-depth=1`</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    table, </span><br><span class=\"line\">    sum(rows), </span><br><span class=\"line\">    formatReadableSize(sum(data_compressed_bytes)) AS compressed_size, </span><br><span class=\"line\">    formatReadableSize(sum(data_uncompressed_bytes)) AS uncompr</span><br><span class=\"line\">FROM system.parts</span><br><span class=\"line\">WHERE active AND (table LIKE &apos;order_behavior_log&apos;)</span><br><span class=\"line\">GROUP BY table</span><br></pre></td></tr></table></figure>\n<p><strong>产生date_time列</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.csv | awk -F &quot;,&quot; &apos;&#123;str=substr($NF,0,11);print $0&quot;,&quot;str&#125;&apos;</span><br><span class=\"line\">#时间戳</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(toDateTime(create_date))</span><br></pre></td></tr></table></figure>\n<p><strong>使用 mysql 函数将 mysql 数据导入clickhouse</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows in set. Elapsed: 89.739 sec. Processed 7.38 million rows, 11.81 GB (82.25 thousand rows/s., 131.63 MB/s.)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 7381387 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">┌─table──────────────┬─sum(rows)─┬─compressed_size─┬─uncompr───┐</span><br><span class=\"line\">│ order_behavior_log │   7381387 │ 4.72 GiB        │ 10.63 GiB │</span><br><span class=\"line\">└────────────────────┴───────────┴─────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.40&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;)</span><br><span class=\"line\">WHERE id &gt;</span><br><span class=\"line\">(</span><br><span class=\"line\">    SELECT max(id)</span><br><span class=\"line\">    FROM order_behavior_log</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">#使用非交互模式</span><br><span class=\"line\">clickhouse-client --input_format_allow_errors_num=10 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT * FROM url(&apos;http://ck.t1.apple.net/?database=default&amp;query=select%20*%20from%20bill&apos;, TabSeparated, &apos;created_date DateTime, wx_app_id String, mch_id String, order_id String, shop_order_id String, trade_type String, trade_status String, total_fee Float64, refund_id String, shop_refund_id String, refund_fee Float64, refund_status String, goods_name String, fees Float64, rates String, trade_no String, refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>使用 url 函数 clickhouseA 导入 clickhouseB</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式一 (导入之前要先修改时区)</span><br><span class=\"line\">CREATE TABLE order_behavior_log</span><br><span class=\"line\">ENGINE = MergeTree</span><br><span class=\"line\">PARTITION BY toYYYYMMDD(created_date)</span><br><span class=\"line\">ORDER BY id AS</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\">#方式二增量</span><br><span class=\"line\">INSERT INTO order_behavior_log SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.3:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br></pre></td></tr></table></figure>\n<p><strong>clickhouse 查询远程数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从api接口查询</span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM url(&apos;http://10.2.4.35:8123/?database=soa_behavior&amp;query=select%20*%20from%20order_behavior_log&amp;user=default&amp;password=MXtqOeQcX&apos;, TabSeparated, &apos;`id` Int64, `shop_order_id` Int64, `trade_no` Int64, `shop_id` Int32, `trace_id` String, `agg_platform` String, `deal_handler` String, `parameters` String, `total_fee` Int32, `state` Int8, `return_data` String, `execute_mic_time` String, `error_code` Int32, `error_msg` String, `created_at` Int32, `updated_at` Int32, `deleted_at` Nullable(Int32), `created_date` DateTime&apos;)</span><br><span class=\"line\">LIMIT 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 从远端mysql查询</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    data1, </span><br><span class=\"line\">    COUNT(*)</span><br><span class=\"line\">FROM mysql(&apos;172.16.200.4:3306&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;root&apos;, &apos;passwd&apos;) </span><br><span class=\"line\">GROUP BY data1</span><br></pre></td></tr></table></figure>\n<p><strong>开启mysql客户端支持</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &quot;145 i&lt;mysql_port&gt;9004&lt;/mysql_port&gt;&quot; -i /etc/clickhouse-server/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\">## 导入mysql数据</span><br><span class=\"line\">mysql --protocol tcp -u default -h 10.42.0.76 -P 9004   &lt; /home/runner/work/clickhouse/clickhouse/tmp/sms_new_metrics.sql</span><br><span class=\"line\"></span><br><span class=\"line\">#查询</span><br><span class=\"line\">SELECT (intDiv(toUInt32(created_at), 7200) * 7200) * 1000 as t, count(id) AS &quot;id&quot; FROM metrics WHERE  created_at BETWEEN  &apos;2020-03-01 00:00:00&apos;  AND  &apos;2020-06-04 15:59:59&apos;  GROUP BY t ORDER BY 1;</span><br></pre></td></tr></table></figure>\n<p><strong>跳过错误</strong> (忽略csv标题行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --input_format_allow_errors_num=1 \\</span><br><span class=\"line\">--input_format_allow_errors_ratio=0.1 \\</span><br><span class=\"line\">--query=&quot;INSERT INTO bill SELECT *</span><br><span class=\"line\">FROM url(&apos;http://payment-hotfix-duizhangdan.t1.apple.net/order/downloadbill?bill_date=20200106&amp;agg_platform=wx&apos;, CSV, &apos;created_date DateTime, wx_app_id String , mch_id String, order_id String , shop_order_id String, trade_type String, trade_status String, total_fee Float64 , refund_id String, shop_refund_id String ,refund_fee  Float64, refund_status String, goods_name String, fees Float64, rates String , trade_no String , refund_no String&apos;)&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>php 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#composer require smi2/phpclickhouse</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include(&apos;./vendor/autoload.php&apos;);</span><br><span class=\"line\">$config = [</span><br><span class=\"line\">    &apos;host&apos; =&gt; &apos;10.0.12.*&apos;,</span><br><span class=\"line\">    &apos;port&apos; =&gt; &apos;8123&apos;,</span><br><span class=\"line\">    &apos;username&apos; =&gt; &apos;default&apos;,</span><br><span class=\"line\">    &apos;password&apos; =&gt; &apos;&apos;</span><br><span class=\"line\">];</span><br><span class=\"line\">$db = new ClickHouseDB\\Client($config);</span><br><span class=\"line\">$db-&gt;database(&apos;soa_behavior&apos;);</span><br><span class=\"line\">$statement = $db-&gt;select(&apos;select * from order_behavior_log where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;rows());</span><br><span class=\"line\"></span><br><span class=\"line\">$statement = $db-&gt;write(&apos;alter table order_behavior_log update shop_id = 1 where id = 100&apos;);</span><br><span class=\"line\">print_r($statement-&gt;info());</span><br></pre></td></tr></table></figure>\n<p><strong>grafana查询</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">    1574058600000 as t,</span><br><span class=\"line\">    usage_user</span><br><span class=\"line\">FROM $table</span><br><span class=\"line\">WHERE $timeFilter</span><br><span class=\"line\">ORDER BY t</span><br><span class=\"line\"></span><br><span class=\"line\">#查询最近7天数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t,</span><br><span class=\"line\">    groupArray((d,s)) AS groupArr</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT </span><br><span class=\"line\">      (intDiv(toUInt32(created_date), 86400) * 86400) * 1000 AS t,</span><br><span class=\"line\">      toDate(created_date) AS d, </span><br><span class=\"line\">      sum(total_fee) / 100 AS s</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE (created_date &lt; toDateTime($to)) AND (created_date &gt; (toDate($to) - 7)) AND (state = 3)</span><br><span class=\"line\">  GROUP BY t,d</span><br><span class=\"line\">  ORDER BY t ASC</span><br><span class=\"line\">)</span><br><span class=\"line\">GROUP BY t</span><br><span class=\"line\">ORDER BY t </span><br><span class=\"line\"></span><br><span class=\"line\">#七日数据</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    t + 86400000 * 7,</span><br><span class=\"line\">    st AS `七日`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">(</span><br><span class=\"line\">  SELECT</span><br><span class=\"line\">     (intDiv(toUInt32(created_date), $interval) * $interval) * 1000 AS t,</span><br><span class=\"line\">     sum(total_fee)/100 as st</span><br><span class=\"line\">  FROM $table</span><br><span class=\"line\">  WHERE </span><br><span class=\"line\">      (created_date &gt; toDateTime($from - 86400*7)) AND (created_date &lt; toDateTime($to - 86400*7))</span><br><span class=\"line\">      $conditionalTest(AND agg_platform IN ($agg_platform),$agg_platform) </span><br><span class=\"line\">  Group by t</span><br><span class=\"line\">  ORDER BY t</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">#世界地图</span><br><span class=\"line\">CREATE TABLE `worldmap_latlng` (</span><br><span class=\"line\">   created_date Date DEFAULT today(),  </span><br><span class=\"line\">   created_at DateTime DEFAULT now(),    </span><br><span class=\"line\">  `lat` Float32,</span><br><span class=\"line\">  `lng` Float32,</span><br><span class=\"line\">  `name` String,</span><br><span class=\"line\">  `value` Int32</span><br><span class=\"line\"> ) ENGINE = MergeTree(created_date, created_at, 8192);</span><br><span class=\"line\"> </span><br><span class=\"line\">INSERT INTO `worldmap_latlng`(`lat`, `lng`, `name`, `value`) VALUES (31.24916171,121.487899486, &apos;上海&apos;, 2)</span><br></pre></td></tr></table></figure>\n<p><strong>高可用</strong></p>\n<a href=\"/2020/06/clickhouse-ha/\" title=\"clickhouse高可用集群搭建\">clickhouse高可用集群搭建</a>\n<p><strong>定时同步mysql</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * sh /root/sh/sync_soa_behavior.sh</span><br><span class=\"line\">0 0 * * * sh /root/sh/sync_soa_behavior_del_today.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[root@node-a001 sh]# cat sync_soa_behavior_del_today.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;alter table order_behavior_log delete where created_date &gt;= yesterday()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[root@node-a001 sh]# cat sync_soa_behavior.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;alter table order_behavior_log delete where created_date &gt;= toStartOfTenMinutes(now())&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec clickhouse clickhouse-client --database=soa_behavior --query=&quot;INSERT INTO order_behavior_log SELECT * FROM mysql(&apos;mysql.host&apos;, &apos;soa_behavior&apos;, &apos;order_behavior_log&apos;, &apos;username&apos;,&apos;password&apos;) WHERE id &gt;(SELECT max(id) FROM order_behavior_log)&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>抽样</strong><br>同时我们还可以通过 ClickHouse 的抽样功能来辅助降低引擎查询压力。这里需要注意的是，只有在创建表结构时开启抽样查询功能，才能执行抽样查询 SQL<br>那么如何开启抽样查询功能呢，其实很简单，比如我们想以 datetime 维度进程抽样展示，只要在您的建表语句中包含 SAMPLE BY intHash64(datetime) ，同时，在您的主键中，也就是 ORDER BY 里面，必须包含抽样的字段。完成的建表语句如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE soa.user_behavior</span><br><span class=\"line\">(</span><br><span class=\"line\">    `date` Date DEFAULT today(),</span><br><span class=\"line\">    `datetime` DateTime DEFAULT now(),</span><br><span class=\"line\">    `user` String,</span><br><span class=\"line\">    `service` String,</span><br><span class=\"line\">    `operation` String,</span><br><span class=\"line\">    `content` String,</span><br><span class=\"line\">    `extra` String,</span><br><span class=\"line\">    `op_time` DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE = ReplicatedMergeTree(&apos;/clickhouse/tables/&#123;layer&#125;-&#123;shard&#125;/user_behavior&apos;, &apos;&#123;replica&#125;&apos;)</span><br><span class=\"line\">PARTITION BY date</span><br><span class=\"line\">ORDER BY (date, user, intHash64(datetime))</span><br><span class=\"line\">SAMPLE BY intHash64(datetime)</span><br><span class=\"line\">SETTINGS index_granularity = 8192</span><br></pre></td></tr></table></figure></p>\n<p><strong>grafana 7.0警报支持</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rfv /var/lib/grafana/plugins/vertamedia-clickhouse/</span><br><span class=\"line\">git clone https://github.com/Vertamedia/clickhouse-grafana /var/lib/grafana/plugins/vertamedia-clickhouse/</span><br><span class=\"line\">echo &quot;[plugins]\\nallow_loading_unsigned_plugins = vertamedia-clickhouse-datasource&quot; &gt;&gt; /etc/grafana/grafana.ini</span><br><span class=\"line\">systemctl restart grafana</span><br><span class=\"line\"></span><br><span class=\"line\"># helm形式安装</span><br><span class=\"line\">在 grafana 包 value.yaml 文件大概390行，添加：    </span><br><span class=\"line\">allow_loading_unsigned_plugins: &quot;vertamedia-clickhouse-datasource&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>物化视图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE MATERIALIZED VIEW mv_sms_year_month_cnt</span><br><span class=\"line\">ENGINE = SummingMergeTree</span><br><span class=\"line\">PARTITION BY year_month</span><br><span class=\"line\">ORDER BY (year_month,channel) POPULATE AS</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">    toYYYYMM(created_at) AS year_month,</span><br><span class=\"line\">    channel,</span><br><span class=\"line\">    count() AS cnt</span><br><span class=\"line\">FROM sms_report</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">    toYYYYMM(created_at),</span><br><span class=\"line\">    channel</span><br></pre></td></tr></table></figure></p>\n<p><strong>备份</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickhouse-client --host=&quot;localhost&quot; --port=&quot;9000&quot; --user=&quot;default&quot; --password=&quot;*******&quot; --max_threads=&quot;1&quot;  --query=&quot;select * from biw.system_msg FORMAT CSV&quot;  &gt; /tmp/system_20200819.csv</span><br></pre></td></tr></table></figure></p>\n<p><strong>参考：</strong></p>\n<p><a href=\"https://clickhouse.yandex/docs/zh/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/</a><br><a href=\"https://www.altinity.com/blog/clickhouse-for-time-series\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/clickhouse-for-time-series</a><br><a href=\"https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/getting_started/example_datasets/ontime/</a><br><a href=\"https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse\" target=\"_blank\" rel=\"noopener\">https://www.altinity.com/blog/2018/2/12/aggregate-mysql-data-at-high-speed-with-clickhouse</a><br><a href=\"https://developer.aliyun.com/article/739805\" target=\"_blank\" rel=\"noopener\">https://developer.aliyun.com/article/739805</a><br><a href=\"https://altinity.com/blog/2019/12/28/creating-beautiful-grafana-dashboards-on-clickhouse-a-tutorial\" target=\"_blank\" rel=\"noopener\">创建grafana面板</a></p>\n<p>多分片多副本高可用<br><a href=\"https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.yandex/docs/zh/operations/table_engines/distributed/</a><br><a href=\"http://sineyuan.github.io/post/clickhouse-docker-quick-start/\" target=\"_blank\" rel=\"noopener\">http://sineyuan.github.io/post/clickhouse-docker-quick-start/</a><br><a href=\"https://www.cnblogs.com/freeweb/p/9352947.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/freeweb/p/9352947.html</a><br><a href=\"https://www.jianshu.com/p/ab811cceb856\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ab811cceb856</a></p>"},{"title":"Docker web shell 实现二","date":"2020-02-03T11:36:10.000Z","share":true,"_content":"\n**通过 docke exec start 实现 webshell**\n\n调用 [exec](https://docs.docker.com/engine/api/v1.30/#tag/Exec) 接口 传入参数\n\n```\n{\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n```\n\n用返回的 id 请求 start 接口， 附加 post 参数\n\n```\n'{\"Detach\":false,\"Tty\":true}'\n```\n\n我们使用 go 代码来完成上面的操作\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t_ \"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"regexp\"\n\t\"time\"\n)\n\n//发送信息\nfunc sender(conn net.Conn) {\n\tbuffer := make([]byte, 1024)\n\n\texec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1\nHost: 0.0.0.0:2375\nContent-Type: application/json\nCache-Control: no-cache\nContent-Length: 91\n\n{\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n\n`, \"alpine\")\n\tconn.Write([]byte(exec_req))\n\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\t//\n\t}\n\trep := string(buffer[:n])\n\n\tLog(rep)\n\treg1 := regexp.MustCompile(`.*?{\"Id\":\"(.*?)\"`)\n\tres := reg1.FindAllStringSubmatch(rep, -1)\n\ts_id := res[0][1]\n\n\tstart_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1\nHost: 0.0.0.0:2375\nContent-Type: application/json\nCache-Control: no-cache\nContent-Length: 27\n\n{\"Detach\":false,\"Tty\":true}\n\n`, s_id)\n\n\tconn.Write([]byte(start_req))\n\ttime.Sleep(time.Second)\n\tconn.Write([]byte(\"ls -l\\n\"))\n\tLog(\"send over\")\n\n\tfor {\n\t\t//接收服务端反馈\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tLog(conn.RemoteAddr().String(), \"waiting server back msg error: \", err)\n\t\t\treturn\n\t\t}\n\t\tLog(conn.RemoteAddr().String(), \"receive server back msg: \", string(buffer[:n]), n)\n\t}\n\n}\n\n//日志\nfunc Log(v ...interface{}) {\n\tlog.Println(v...)\n}\n\nfunc main() {\n\tserver := \"0.0.0.0:2375\"\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp4\", server)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tconn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(\"connection success\")\n\tsender(conn)\n}\n\n```\n<!-- more -->\n\n执行效果:\n\n![](/img/docker/ws2.png)\n\n上面实现了通过 tcp 连接访问 docker shell 的效果，我们想要的是通过web 浏览器来访问，这里通过一个开源的项目 [websocket_agent](https://github.com/zxb19890727/websocket_agent)，可以把 tcp 协议转为 websocket 协议，这样通过浏览器，访问 websocket 服务就可以与 docker shell 交互.\n\n贴一下需要在文件 `websocket_transfer_tcp.go` 添加的代码：\n\n```\n232 buffer := make([]byte, 1024)\n233 var s_id string\n234 exec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1\n235 Host: 0.0.0.0:2375\n236 Content-Type: application/json\n237 Cache-Control: no-cache\n238 Content-Length: 90\n239 \n240 {\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n241 \n242 `,self.Container)\n243 conn.Write([]byte(exec_req))\n244 \n245 n, err := conn.Read(buffer)\n246 if(err != nil){\n247 log.Print(\"exec interface error!\")\n248 }\n249 rep := string(buffer[:n])\n250 \n251 log.Print(rep)\n252 reg1 := regexp.MustCompile(`.*?{\"Id\":\"(.*?)\"`)\n253 res := reg1.FindAllStringSubmatch(rep, -1)\n254 if(len(res) !=0 && res[0] != nil){\n255 s_id = res[0][1]\n256 }\n257 \n258 start_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1\n259 Host: 127.0.0.1:2375\n260 Content-Type: application/json\n261 Cache-Control: no-cache\n262 Content-Length: 27\n263 \n264 {\"Detach\":false,\"Tty\":true}\n265 \n266 `,s_id)\n267 \n268 conn.Write([]byte(start_req))\n269 time.Sleep(100*time.Millisecond)\n270 n, err = conn.Read(buffer)\n271 \n272 self.TcpConn = conn\n\n\n285     reg1 := regexp.MustCompile(`/\\?c=(.*?) `)\n286 \n287     for {\n\n296         str = string(line)\n297         //获取容器名\n298         if(self.Container == \"\"){\n299             res := reg1.FindAllStringSubmatch(str, -1)\n300             if(len(res) !=0  && res[0] != nil){\n301                 self.Container = res[0][1]\n302             }\n303         }\n304 \n```\n\n然后执行` ./websocket_transfer_tcp 8088 0.0.0.0:2375` ，通过 8088 端口代理 2375  端口\n\n前端代码: 通过参数来访问相应的容器\n\n```\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Docker Web Shell</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.css\" />\n    <script src=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.js\"></script>\n</head>\n\n<body>\n    <div id=\"container-terminal\"></div>\n    <style type=\"text/css\">\n        body {\n            width: 100%;\n            height: 100%;\n        }\n\n        #container-terminal {\n            width: 100%;\n            height: 100%;\n        }\n\n        .terminal {\n            height: 100%;\n            width: 100%;\n            font-size: 18px;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var term;\n        var container = GetQueryString(\"c\")\n        if (container == \"\" || container == null) {\n            alert(\"参数错误!没有容器名称\");\n            throw (\"error\");\n        }\n        var url = \"ws://127.0.0.1:8088?c=\" + container;\n        xterm = new Terminal({\n            rows: 38,\n            cursorBlink: true\n        });\n        ws = new WebSocket(url);\n        ws.binaryType = 'arraybuffer';\n        xterm.on('data', function (data) {\n            ws.send(data);\n        });\n        xterm.open(document.getElementById(\"container-terminal\"), true);\n        ws.onopen = function () {\n            console.log('ws connected');\n            xterm.writeln(\"              _           _          _ _ \")\n            xterm.writeln(\"             | |         | |        | | |\")\n            xterm.writeln(\"__      _____| |__    ___| |__   ___| | |\")\n            xterm.writeln(\"\\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\  / __| '_ \\\\ / _ \\\\ | |\")\n            xterm.writeln(\" \\\\ V  V /  __/ |_) | \\\\__ \\\\ | | |  __/ | |\")\n            xterm.writeln(\"  \\\\_/\\\\_/ \\\\___|_.__/  |___/_| |_|\\\\___|_|_|\")\n            //ws.send(\"\\n\");\n        };\n        ws.onerror = function () {\n            console.log('ws error');\n        };\n        ws.onclose = function () {\n            xterm.writeln(' ')\n            xterm.writeln('=======================')\n            xterm.writeln(' ')\n            xterm.writeln(' socket已断开连接，请重连')\n            xterm.writeln(' ')\n            xterm.writeln('=======================')\n            console.log('ws closed');\n        };\n        ws.onmessage = function (evt) {\n            console.log(evt.data);\n            //var decoder = new TextDecoder('utf-8');\n            //var data = decoder.decode(evt.data);\n            xterm.write(evt.data);\n        };\n\n        function GetQueryString(name) {\n            var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n            var r = window.location.search.substr(1).match(reg);//search,查询？后面的参数，并匹配正则\n            if (r != null) return unescape(r[2]); return null;\n        }\n    </script>\n</body>\n\n</html>\n```\n\n效果图：\n\n![](/img/docker/ws3.png)\n\n可以看到这种方式是新建的 /bin/sh 进程下工作的，同时访问就是多个 bash 进程，操作不影响，1号进程可以是我们自己的常驻服务，更能满足我们的使用场景。\n\n\n\n参考：\nhttps://blog.51cto.com/709151/2406150?source=dra\t\t\t\nhttps://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\nhttps://github.com/zxb19890727/\nhttp://patorjk.com/software/taag/","source":"_posts/docker-web-shell-2.md","raw":"---\ntitle: \"Docker web shell 实现二\"\ndate: 2020-02-03 11:36:10\ntags: [docker,webshell]\nshare: true\n---\n\n**通过 docke exec start 实现 webshell**\n\n调用 [exec](https://docs.docker.com/engine/api/v1.30/#tag/Exec) 接口 传入参数\n\n```\n{\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n```\n\n用返回的 id 请求 start 接口， 附加 post 参数\n\n```\n'{\"Detach\":false,\"Tty\":true}'\n```\n\n我们使用 go 代码来完成上面的操作\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t_ \"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"regexp\"\n\t\"time\"\n)\n\n//发送信息\nfunc sender(conn net.Conn) {\n\tbuffer := make([]byte, 1024)\n\n\texec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1\nHost: 0.0.0.0:2375\nContent-Type: application/json\nCache-Control: no-cache\nContent-Length: 91\n\n{\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n\n`, \"alpine\")\n\tconn.Write([]byte(exec_req))\n\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\t//\n\t}\n\trep := string(buffer[:n])\n\n\tLog(rep)\n\treg1 := regexp.MustCompile(`.*?{\"Id\":\"(.*?)\"`)\n\tres := reg1.FindAllStringSubmatch(rep, -1)\n\ts_id := res[0][1]\n\n\tstart_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1\nHost: 0.0.0.0:2375\nContent-Type: application/json\nCache-Control: no-cache\nContent-Length: 27\n\n{\"Detach\":false,\"Tty\":true}\n\n`, s_id)\n\n\tconn.Write([]byte(start_req))\n\ttime.Sleep(time.Second)\n\tconn.Write([]byte(\"ls -l\\n\"))\n\tLog(\"send over\")\n\n\tfor {\n\t\t//接收服务端反馈\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tLog(conn.RemoteAddr().String(), \"waiting server back msg error: \", err)\n\t\t\treturn\n\t\t}\n\t\tLog(conn.RemoteAddr().String(), \"receive server back msg: \", string(buffer[:n]), n)\n\t}\n\n}\n\n//日志\nfunc Log(v ...interface{}) {\n\tlog.Println(v...)\n}\n\nfunc main() {\n\tserver := \"0.0.0.0:2375\"\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp4\", server)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tconn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(\"connection success\")\n\tsender(conn)\n}\n\n```\n<!-- more -->\n\n执行效果:\n\n![](/img/docker/ws2.png)\n\n上面实现了通过 tcp 连接访问 docker shell 的效果，我们想要的是通过web 浏览器来访问，这里通过一个开源的项目 [websocket_agent](https://github.com/zxb19890727/websocket_agent)，可以把 tcp 协议转为 websocket 协议，这样通过浏览器，访问 websocket 服务就可以与 docker shell 交互.\n\n贴一下需要在文件 `websocket_transfer_tcp.go` 添加的代码：\n\n```\n232 buffer := make([]byte, 1024)\n233 var s_id string\n234 exec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1\n235 Host: 0.0.0.0:2375\n236 Content-Type: application/json\n237 Cache-Control: no-cache\n238 Content-Length: 90\n239 \n240 {\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"Tty\":true,\"Cmd\":[\"/bin/sh\"]}\n241 \n242 `,self.Container)\n243 conn.Write([]byte(exec_req))\n244 \n245 n, err := conn.Read(buffer)\n246 if(err != nil){\n247 log.Print(\"exec interface error!\")\n248 }\n249 rep := string(buffer[:n])\n250 \n251 log.Print(rep)\n252 reg1 := regexp.MustCompile(`.*?{\"Id\":\"(.*?)\"`)\n253 res := reg1.FindAllStringSubmatch(rep, -1)\n254 if(len(res) !=0 && res[0] != nil){\n255 s_id = res[0][1]\n256 }\n257 \n258 start_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1\n259 Host: 127.0.0.1:2375\n260 Content-Type: application/json\n261 Cache-Control: no-cache\n262 Content-Length: 27\n263 \n264 {\"Detach\":false,\"Tty\":true}\n265 \n266 `,s_id)\n267 \n268 conn.Write([]byte(start_req))\n269 time.Sleep(100*time.Millisecond)\n270 n, err = conn.Read(buffer)\n271 \n272 self.TcpConn = conn\n\n\n285     reg1 := regexp.MustCompile(`/\\?c=(.*?) `)\n286 \n287     for {\n\n296         str = string(line)\n297         //获取容器名\n298         if(self.Container == \"\"){\n299             res := reg1.FindAllStringSubmatch(str, -1)\n300             if(len(res) !=0  && res[0] != nil){\n301                 self.Container = res[0][1]\n302             }\n303         }\n304 \n```\n\n然后执行` ./websocket_transfer_tcp 8088 0.0.0.0:2375` ，通过 8088 端口代理 2375  端口\n\n前端代码: 通过参数来访问相应的容器\n\n```\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <title>Docker Web Shell</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.css\" />\n    <script src=\"https://cdn.bootcss.com/xterm/3.14.5/xterm.js\"></script>\n</head>\n\n<body>\n    <div id=\"container-terminal\"></div>\n    <style type=\"text/css\">\n        body {\n            width: 100%;\n            height: 100%;\n        }\n\n        #container-terminal {\n            width: 100%;\n            height: 100%;\n        }\n\n        .terminal {\n            height: 100%;\n            width: 100%;\n            font-size: 18px;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var term;\n        var container = GetQueryString(\"c\")\n        if (container == \"\" || container == null) {\n            alert(\"参数错误!没有容器名称\");\n            throw (\"error\");\n        }\n        var url = \"ws://127.0.0.1:8088?c=\" + container;\n        xterm = new Terminal({\n            rows: 38,\n            cursorBlink: true\n        });\n        ws = new WebSocket(url);\n        ws.binaryType = 'arraybuffer';\n        xterm.on('data', function (data) {\n            ws.send(data);\n        });\n        xterm.open(document.getElementById(\"container-terminal\"), true);\n        ws.onopen = function () {\n            console.log('ws connected');\n            xterm.writeln(\"              _           _          _ _ \")\n            xterm.writeln(\"             | |         | |        | | |\")\n            xterm.writeln(\"__      _____| |__    ___| |__   ___| | |\")\n            xterm.writeln(\"\\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\  / __| '_ \\\\ / _ \\\\ | |\")\n            xterm.writeln(\" \\\\ V  V /  __/ |_) | \\\\__ \\\\ | | |  __/ | |\")\n            xterm.writeln(\"  \\\\_/\\\\_/ \\\\___|_.__/  |___/_| |_|\\\\___|_|_|\")\n            //ws.send(\"\\n\");\n        };\n        ws.onerror = function () {\n            console.log('ws error');\n        };\n        ws.onclose = function () {\n            xterm.writeln(' ')\n            xterm.writeln('=======================')\n            xterm.writeln(' ')\n            xterm.writeln(' socket已断开连接，请重连')\n            xterm.writeln(' ')\n            xterm.writeln('=======================')\n            console.log('ws closed');\n        };\n        ws.onmessage = function (evt) {\n            console.log(evt.data);\n            //var decoder = new TextDecoder('utf-8');\n            //var data = decoder.decode(evt.data);\n            xterm.write(evt.data);\n        };\n\n        function GetQueryString(name) {\n            var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n            var r = window.location.search.substr(1).match(reg);//search,查询？后面的参数，并匹配正则\n            if (r != null) return unescape(r[2]); return null;\n        }\n    </script>\n</body>\n\n</html>\n```\n\n效果图：\n\n![](/img/docker/ws3.png)\n\n可以看到这种方式是新建的 /bin/sh 进程下工作的，同时访问就是多个 bash 进程，操作不影响，1号进程可以是我们自己的常驻服务，更能满足我们的使用场景。\n\n\n\n参考：\nhttps://blog.51cto.com/709151/2406150?source=dra\t\t\t\nhttps://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\nhttps://github.com/zxb19890727/\nhttp://patorjk.com/software/taag/","slug":"docker-web-shell-2","published":1,"updated":"2020-02-03T05:01:46.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenkx000h0wpbnu7frt09","content":"<p><strong>通过 docke exec start 实现 webshell</strong></p>\n<p>调用 <a href=\"https://docs.docker.com/engine/api/v1.30/#tag/Exec\" target=\"_blank\" rel=\"noopener\">exec</a> 接口 传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br></pre></td></tr></table></figure>\n<p>用返回的 id 请求 start 接口， 附加 post 参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>我们使用 go 代码来完成上面的操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t_ &quot;io&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;regexp&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//发送信息</span><br><span class=\"line\">func sender(conn net.Conn) &#123;</span><br><span class=\"line\">\tbuffer := make([]byte, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">\texec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1</span><br><span class=\"line\">Host: 0.0.0.0:2375</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Length: 91</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`, &quot;alpine&quot;)</span><br><span class=\"line\">\tconn.Write([]byte(exec_req))</span><br><span class=\"line\"></span><br><span class=\"line\">\tn, err := conn.Read(buffer)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trep := string(buffer[:n])</span><br><span class=\"line\"></span><br><span class=\"line\">\tLog(rep)</span><br><span class=\"line\">\treg1 := regexp.MustCompile(`.*?&#123;&quot;Id&quot;:&quot;(.*?)&quot;`)</span><br><span class=\"line\">\tres := reg1.FindAllStringSubmatch(rep, -1)</span><br><span class=\"line\">\ts_id := res[0][1]</span><br><span class=\"line\"></span><br><span class=\"line\">\tstart_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1</span><br><span class=\"line\">Host: 0.0.0.0:2375</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Length: 27</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`, s_id)</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn.Write([]byte(start_req))</span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\tconn.Write([]byte(&quot;ls -l\\n&quot;))</span><br><span class=\"line\">\tLog(&quot;send over&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\t//接收服务端反馈</span><br><span class=\"line\">\t\tn, err := conn.Read(buffer)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tLog(conn.RemoteAddr().String(), &quot;waiting server back msg error: &quot;, err)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tLog(conn.RemoteAddr().String(), &quot;receive server back msg: &quot;, string(buffer[:n]), n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//日志</span><br><span class=\"line\">func Log(v ...interface&#123;&#125;) &#123;</span><br><span class=\"line\">\tlog.Println(v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tserver := &quot;0.0.0.0:2375&quot;</span><br><span class=\"line\">\ttcpAddr, err := net.ResolveTCPAddr(&quot;tcp4&quot;, server)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;Fatal error: %s&quot;, err.Error())</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconn, err := net.DialTCP(&quot;tcp&quot;, nil, tcpAddr)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;Fatal error: %s&quot;, err.Error())</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(&quot;connection success&quot;)</span><br><span class=\"line\">\tsender(conn)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>执行效果:</p>\n<p><img src=\"/img/docker/ws2.png\" alt></p>\n<p>上面实现了通过 tcp 连接访问 docker shell 的效果，我们想要的是通过web 浏览器来访问，这里通过一个开源的项目 <a href=\"https://github.com/zxb19890727/websocket_agent\" target=\"_blank\" rel=\"noopener\">websocket_agent</a>，可以把 tcp 协议转为 websocket 协议，这样通过浏览器，访问 websocket 服务就可以与 docker shell 交互.</p>\n<p>贴一下需要在文件 <code>websocket_transfer_tcp.go</code> 添加的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">232 buffer := make([]byte, 1024)</span><br><span class=\"line\">233 var s_id string</span><br><span class=\"line\">234 exec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1</span><br><span class=\"line\">235 Host: 0.0.0.0:2375</span><br><span class=\"line\">236 Content-Type: application/json</span><br><span class=\"line\">237 Cache-Control: no-cache</span><br><span class=\"line\">238 Content-Length: 90</span><br><span class=\"line\">239 </span><br><span class=\"line\">240 &#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br><span class=\"line\">241 </span><br><span class=\"line\">242 `,self.Container)</span><br><span class=\"line\">243 conn.Write([]byte(exec_req))</span><br><span class=\"line\">244 </span><br><span class=\"line\">245 n, err := conn.Read(buffer)</span><br><span class=\"line\">246 if(err != nil)&#123;</span><br><span class=\"line\">247 log.Print(&quot;exec interface error!&quot;)</span><br><span class=\"line\">248 &#125;</span><br><span class=\"line\">249 rep := string(buffer[:n])</span><br><span class=\"line\">250 </span><br><span class=\"line\">251 log.Print(rep)</span><br><span class=\"line\">252 reg1 := regexp.MustCompile(`.*?&#123;&quot;Id&quot;:&quot;(.*?)&quot;`)</span><br><span class=\"line\">253 res := reg1.FindAllStringSubmatch(rep, -1)</span><br><span class=\"line\">254 if(len(res) !=0 &amp;&amp; res[0] != nil)&#123;</span><br><span class=\"line\">255 s_id = res[0][1]</span><br><span class=\"line\">256 &#125;</span><br><span class=\"line\">257 </span><br><span class=\"line\">258 start_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1</span><br><span class=\"line\">259 Host: 127.0.0.1:2375</span><br><span class=\"line\">260 Content-Type: application/json</span><br><span class=\"line\">261 Cache-Control: no-cache</span><br><span class=\"line\">262 Content-Length: 27</span><br><span class=\"line\">263 </span><br><span class=\"line\">264 &#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;</span><br><span class=\"line\">265 </span><br><span class=\"line\">266 `,s_id)</span><br><span class=\"line\">267 </span><br><span class=\"line\">268 conn.Write([]byte(start_req))</span><br><span class=\"line\">269 time.Sleep(100*time.Millisecond)</span><br><span class=\"line\">270 n, err = conn.Read(buffer)</span><br><span class=\"line\">271 </span><br><span class=\"line\">272 self.TcpConn = conn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">285     reg1 := regexp.MustCompile(`/\\?c=(.*?) `)</span><br><span class=\"line\">286 </span><br><span class=\"line\">287     for &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">296         str = string(line)</span><br><span class=\"line\">297         //获取容器名</span><br><span class=\"line\">298         if(self.Container == &quot;&quot;)&#123;</span><br><span class=\"line\">299             res := reg1.FindAllStringSubmatch(str, -1)</span><br><span class=\"line\">300             if(len(res) !=0  &amp;&amp; res[0] != nil)&#123;</span><br><span class=\"line\">301                 self.Container = res[0][1]</span><br><span class=\"line\">302             &#125;</span><br><span class=\"line\">303         &#125;</span><br><span class=\"line\">304</span><br></pre></td></tr></table></figure>\n<p>然后执行<code>./websocket_transfer_tcp 8088 0.0.0.0:2375</code> ，通过 8088 端口代理 2375  端口</p>\n<p>前端代码: 通过参数来访问相应的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Docker Web Shell&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container-terminal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #container-terminal &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .terminal &#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            font-size: 18px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var term;</span><br><span class=\"line\">        var container = GetQueryString(&quot;c&quot;)</span><br><span class=\"line\">        if (container == &quot;&quot; || container == null) &#123;</span><br><span class=\"line\">            alert(&quot;参数错误!没有容器名称&quot;);</span><br><span class=\"line\">            throw (&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var url = &quot;ws://127.0.0.1:8088?c=&quot; + container;</span><br><span class=\"line\">        xterm = new Terminal(&#123;</span><br><span class=\"line\">            rows: 38,</span><br><span class=\"line\">            cursorBlink: true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ws = new WebSocket(url);</span><br><span class=\"line\">        ws.binaryType = &apos;arraybuffer&apos;;</span><br><span class=\"line\">        xterm.on(&apos;data&apos;, function (data) &#123;</span><br><span class=\"line\">            ws.send(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        xterm.open(document.getElementById(&quot;container-terminal&quot;), true);</span><br><span class=\"line\">        ws.onopen = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws connected&apos;);</span><br><span class=\"line\">            xterm.writeln(&quot;              _           _          _ _ &quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;             | |         | |        | | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;__      _____| |__    ___| |__   ___| | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;\\\\ \\\\ /\\\\ / / _ \\\\ &apos;_ \\\\  / __| &apos;_ \\\\ / _ \\\\ | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot; \\\\ V  V /  __/ |_) | \\\\__ \\\\ | | |  __/ | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;  \\\\_/\\\\_/ \\\\___|_.__/  |___/_| |_|\\\\___|_|_|&quot;)</span><br><span class=\"line\">            //ws.send(&quot;\\n&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onerror = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws error&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onclose = function () &#123;</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos;=======================&apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; socket已断开连接，请重连&apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos;=======================&apos;)</span><br><span class=\"line\">            console.log(&apos;ws closed&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onmessage = function (evt) &#123;</span><br><span class=\"line\">            console.log(evt.data);</span><br><span class=\"line\">            //var decoder = new TextDecoder(&apos;utf-8&apos;);</span><br><span class=\"line\">            //var data = decoder.decode(evt.data);</span><br><span class=\"line\">            xterm.write(evt.data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        function GetQueryString(name) &#123;</span><br><span class=\"line\">            var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">            var r = window.location.search.substr(1).match(reg);//search,查询？后面的参数，并匹配正则</span><br><span class=\"line\">            if (r != null) return unescape(r[2]); return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><img src=\"/img/docker/ws3.png\" alt></p>\n<p>可以看到这种方式是新建的 /bin/sh 进程下工作的，同时访问就是多个 bash 进程，操作不影响，1号进程可以是我们自己的常驻服务，更能满足我们的使用场景。</p>\n<p>参考：<br><a href=\"https://blog.51cto.com/709151/2406150?source=dra\" target=\"_blank\" rel=\"noopener\">https://blog.51cto.com/709151/2406150?source=dra</a><br><a href=\"https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach</a><br><a href=\"https://github.com/zxb19890727/\" target=\"_blank\" rel=\"noopener\">https://github.com/zxb19890727/</a><br><a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">http://patorjk.com/software/taag/</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>通过 docke exec start 实现 webshell</strong></p>\n<p>调用 <a href=\"https://docs.docker.com/engine/api/v1.30/#tag/Exec\" target=\"_blank\" rel=\"noopener\">exec</a> 接口 传入参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br></pre></td></tr></table></figure>\n<p>用返回的 id 请求 start 接口， 附加 post 参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>我们使用 go 代码来完成上面的操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t_ &quot;io&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;regexp&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//发送信息</span><br><span class=\"line\">func sender(conn net.Conn) &#123;</span><br><span class=\"line\">\tbuffer := make([]byte, 1024)</span><br><span class=\"line\"></span><br><span class=\"line\">\texec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1</span><br><span class=\"line\">Host: 0.0.0.0:2375</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Length: 91</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`, &quot;alpine&quot;)</span><br><span class=\"line\">\tconn.Write([]byte(exec_req))</span><br><span class=\"line\"></span><br><span class=\"line\">\tn, err := conn.Read(buffer)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\t//</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trep := string(buffer[:n])</span><br><span class=\"line\"></span><br><span class=\"line\">\tLog(rep)</span><br><span class=\"line\">\treg1 := regexp.MustCompile(`.*?&#123;&quot;Id&quot;:&quot;(.*?)&quot;`)</span><br><span class=\"line\">\tres := reg1.FindAllStringSubmatch(rep, -1)</span><br><span class=\"line\">\ts_id := res[0][1]</span><br><span class=\"line\"></span><br><span class=\"line\">\tstart_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1</span><br><span class=\"line\">Host: 0.0.0.0:2375</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Length: 27</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`, s_id)</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn.Write([]byte(start_req))</span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\tconn.Write([]byte(&quot;ls -l\\n&quot;))</span><br><span class=\"line\">\tLog(&quot;send over&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\t//接收服务端反馈</span><br><span class=\"line\">\t\tn, err := conn.Read(buffer)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tLog(conn.RemoteAddr().String(), &quot;waiting server back msg error: &quot;, err)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tLog(conn.RemoteAddr().String(), &quot;receive server back msg: &quot;, string(buffer[:n]), n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//日志</span><br><span class=\"line\">func Log(v ...interface&#123;&#125;) &#123;</span><br><span class=\"line\">\tlog.Println(v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tserver := &quot;0.0.0.0:2375&quot;</span><br><span class=\"line\">\ttcpAddr, err := net.ResolveTCPAddr(&quot;tcp4&quot;, server)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;Fatal error: %s&quot;, err.Error())</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconn, err := net.DialTCP(&quot;tcp&quot;, nil, tcpAddr)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, &quot;Fatal error: %s&quot;, err.Error())</span><br><span class=\"line\">\t\tos.Exit(1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(&quot;connection success&quot;)</span><br><span class=\"line\">\tsender(conn)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>执行效果:</p>\n<p><img src=\"/img/docker/ws2.png\" alt></p>\n<p>上面实现了通过 tcp 连接访问 docker shell 的效果，我们想要的是通过web 浏览器来访问，这里通过一个开源的项目 <a href=\"https://github.com/zxb19890727/websocket_agent\" target=\"_blank\" rel=\"noopener\">websocket_agent</a>，可以把 tcp 协议转为 websocket 协议，这样通过浏览器，访问 websocket 服务就可以与 docker shell 交互.</p>\n<p>贴一下需要在文件 <code>websocket_transfer_tcp.go</code> 添加的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">232 buffer := make([]byte, 1024)</span><br><span class=\"line\">233 var s_id string</span><br><span class=\"line\">234 exec_req := fmt.Sprintf(`POST /containers/%s/exec HTTP/1.1</span><br><span class=\"line\">235 Host: 0.0.0.0:2375</span><br><span class=\"line\">236 Content-Type: application/json</span><br><span class=\"line\">237 Cache-Control: no-cache</span><br><span class=\"line\">238 Content-Length: 90</span><br><span class=\"line\">239 </span><br><span class=\"line\">240 &#123;&quot;AttachStdin&quot;:true,&quot;AttachStdout&quot;:true,&quot;AttachStderr&quot;:true,&quot;Tty&quot;:true,&quot;Cmd&quot;:[&quot;/bin/sh&quot;]&#125;</span><br><span class=\"line\">241 </span><br><span class=\"line\">242 `,self.Container)</span><br><span class=\"line\">243 conn.Write([]byte(exec_req))</span><br><span class=\"line\">244 </span><br><span class=\"line\">245 n, err := conn.Read(buffer)</span><br><span class=\"line\">246 if(err != nil)&#123;</span><br><span class=\"line\">247 log.Print(&quot;exec interface error!&quot;)</span><br><span class=\"line\">248 &#125;</span><br><span class=\"line\">249 rep := string(buffer[:n])</span><br><span class=\"line\">250 </span><br><span class=\"line\">251 log.Print(rep)</span><br><span class=\"line\">252 reg1 := regexp.MustCompile(`.*?&#123;&quot;Id&quot;:&quot;(.*?)&quot;`)</span><br><span class=\"line\">253 res := reg1.FindAllStringSubmatch(rep, -1)</span><br><span class=\"line\">254 if(len(res) !=0 &amp;&amp; res[0] != nil)&#123;</span><br><span class=\"line\">255 s_id = res[0][1]</span><br><span class=\"line\">256 &#125;</span><br><span class=\"line\">257 </span><br><span class=\"line\">258 start_req := fmt.Sprintf(`POST /exec/%s/start HTTP/1.1</span><br><span class=\"line\">259 Host: 127.0.0.1:2375</span><br><span class=\"line\">260 Content-Type: application/json</span><br><span class=\"line\">261 Cache-Control: no-cache</span><br><span class=\"line\">262 Content-Length: 27</span><br><span class=\"line\">263 </span><br><span class=\"line\">264 &#123;&quot;Detach&quot;:false,&quot;Tty&quot;:true&#125;</span><br><span class=\"line\">265 </span><br><span class=\"line\">266 `,s_id)</span><br><span class=\"line\">267 </span><br><span class=\"line\">268 conn.Write([]byte(start_req))</span><br><span class=\"line\">269 time.Sleep(100*time.Millisecond)</span><br><span class=\"line\">270 n, err = conn.Read(buffer)</span><br><span class=\"line\">271 </span><br><span class=\"line\">272 self.TcpConn = conn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">285     reg1 := regexp.MustCompile(`/\\?c=(.*?) `)</span><br><span class=\"line\">286 </span><br><span class=\"line\">287     for &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">296         str = string(line)</span><br><span class=\"line\">297         //获取容器名</span><br><span class=\"line\">298         if(self.Container == &quot;&quot;)&#123;</span><br><span class=\"line\">299             res := reg1.FindAllStringSubmatch(str, -1)</span><br><span class=\"line\">300             if(len(res) !=0  &amp;&amp; res[0] != nil)&#123;</span><br><span class=\"line\">301                 self.Container = res[0][1]</span><br><span class=\"line\">302             &#125;</span><br><span class=\"line\">303         &#125;</span><br><span class=\"line\">304</span><br></pre></td></tr></table></figure>\n<p>然后执行<code>./websocket_transfer_tcp 8088 0.0.0.0:2375</code> ，通过 8088 端口代理 2375  端口</p>\n<p>前端代码: 通过参数来访问相应的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Docker Web Shell&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/xterm/3.14.5/xterm.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container-terminal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #container-terminal &#123;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .terminal &#123;</span><br><span class=\"line\">            height: 100%;</span><br><span class=\"line\">            width: 100%;</span><br><span class=\"line\">            font-size: 18px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var term;</span><br><span class=\"line\">        var container = GetQueryString(&quot;c&quot;)</span><br><span class=\"line\">        if (container == &quot;&quot; || container == null) &#123;</span><br><span class=\"line\">            alert(&quot;参数错误!没有容器名称&quot;);</span><br><span class=\"line\">            throw (&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var url = &quot;ws://127.0.0.1:8088?c=&quot; + container;</span><br><span class=\"line\">        xterm = new Terminal(&#123;</span><br><span class=\"line\">            rows: 38,</span><br><span class=\"line\">            cursorBlink: true</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ws = new WebSocket(url);</span><br><span class=\"line\">        ws.binaryType = &apos;arraybuffer&apos;;</span><br><span class=\"line\">        xterm.on(&apos;data&apos;, function (data) &#123;</span><br><span class=\"line\">            ws.send(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        xterm.open(document.getElementById(&quot;container-terminal&quot;), true);</span><br><span class=\"line\">        ws.onopen = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws connected&apos;);</span><br><span class=\"line\">            xterm.writeln(&quot;              _           _          _ _ &quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;             | |         | |        | | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;__      _____| |__    ___| |__   ___| | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;\\\\ \\\\ /\\\\ / / _ \\\\ &apos;_ \\\\  / __| &apos;_ \\\\ / _ \\\\ | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot; \\\\ V  V /  __/ |_) | \\\\__ \\\\ | | |  __/ | |&quot;)</span><br><span class=\"line\">            xterm.writeln(&quot;  \\\\_/\\\\_/ \\\\___|_.__/  |___/_| |_|\\\\___|_|_|&quot;)</span><br><span class=\"line\">            //ws.send(&quot;\\n&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onerror = function () &#123;</span><br><span class=\"line\">            console.log(&apos;ws error&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onclose = function () &#123;</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos;=======================&apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; socket已断开连接，请重连&apos;)</span><br><span class=\"line\">            xterm.writeln(&apos; &apos;)</span><br><span class=\"line\">            xterm.writeln(&apos;=======================&apos;)</span><br><span class=\"line\">            console.log(&apos;ws closed&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ws.onmessage = function (evt) &#123;</span><br><span class=\"line\">            console.log(evt.data);</span><br><span class=\"line\">            //var decoder = new TextDecoder(&apos;utf-8&apos;);</span><br><span class=\"line\">            //var data = decoder.decode(evt.data);</span><br><span class=\"line\">            xterm.write(evt.data);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        function GetQueryString(name) &#123;</span><br><span class=\"line\">            var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">            var r = window.location.search.substr(1).match(reg);//search,查询？后面的参数，并匹配正则</span><br><span class=\"line\">            if (r != null) return unescape(r[2]); return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><img src=\"/img/docker/ws3.png\" alt></p>\n<p>可以看到这种方式是新建的 /bin/sh 进程下工作的，同时访问就是多个 bash 进程，操作不影响，1号进程可以是我们自己的常驻服务，更能满足我们的使用场景。</p>\n<p>参考：<br><a href=\"https://blog.51cto.com/709151/2406150?source=dra\" target=\"_blank\" rel=\"noopener\">https://blog.51cto.com/709151/2406150?source=dra</a><br><a href=\"https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach</a><br><a href=\"https://github.com/zxb19890727/\" target=\"_blank\" rel=\"noopener\">https://github.com/zxb19890727/</a><br><a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">http://patorjk.com/software/taag/</a></p>"},{"title":"grafana alerting 报警","date":"2019-10-16T17:20:01.000Z","share":true,"_content":"\n使用工具：[prometheus](https://github.com/prometheus/prometheus)、[grafana](https://github.com/grafana/grafana)、[prometheus_client_php](https://github.com/endclothing/prometheus_client_php)\n\n通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90\n```\n# HELP payment_queue_length it sets\n# TYPE payment_queue_length gauge\npayment_queue_length{name=\"order_notify\"} 90\n```\n\n被 prometheus 采集\n![2](/img/grafana-alerting/2.png)\n<!-- more -->\n\n配置邮件报警规则(间隔5分钟发送一次)\n![8](/img/grafana-alerting/8.png)\n\n配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置`no data`情况下的报警状态，防止当前时间点没有采集到数据报警)\n![7](/img/grafana-alerting/7.png)\n\n在grafana中展示（图中设置了值超过100的报警规则）\n![3](/img/grafana-alerting/3.png)\n\n手动修改队列长度为120,触发报警\n![4](/img/grafana-alerting/4.png)\n\n收到报警邮件\n![5](/img/grafana-alerting/5.png)\n\n解除报警\n![6](/img/grafana-alerting/6.png)\n\n邮件报警配置\n```\n[smtp]\nenabled = true\nhost = smtp.exmail.qq.com:465\nuser = system@exmail.com\n# If the password contains # or ; you have to wrap it with trippel quotes. Ex \"\"\"#password;\"\"\"\npassword = ***********\n;cert_file =\n;key_file =\nskip_verify = false\nfrom_address = system@exmail.com\n```\n\n钉钉报警api\n```\ncurl 'https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3' \\\n-H 'Content-Type: application/json' \\\n-d '{\"msgtype\": \"text\",\n\"text\": {\n\t\"content\": \"业务报警测试\"\n}\n}\n```\n\nldap  配置\n```yaml\nconfig: |-\n    [[servers]]\n    host = \"10.0.0.1\"\n    port = 389\n    use_ssl = false\n    start_tls = false\n    ssl_skip_verify = false\n    bind_dn = \"uid=auth,ou=users,dc=apple,dc=com\"\n    bind_password = \"******\"\n    search_filter = \"(uid=%s)\"\n    group_search_filter = \"(&(objectClass=inetOrgPerson)(uid=%s))\"\n    search_base_dns = [\"ou=users,dc=apple,dc=com\"]\n    [servers.attributes]\n    name = \"givenName\"\n    surname = \"sn\"\n    username = \"uid\"\n    email =  \"mail\"\n```\n","source":"_posts/grafana-alerting.md","raw":"---\ntitle: \"grafana alerting 报警\"\ndate: 2019-10-16 17:20:01\ntags: [grafana,prometheus,报警]\nshare: true\n---\n\n使用工具：[prometheus](https://github.com/prometheus/prometheus)、[grafana](https://github.com/grafana/grafana)、[prometheus_client_php](https://github.com/endclothing/prometheus_client_php)\n\n通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90\n```\n# HELP payment_queue_length it sets\n# TYPE payment_queue_length gauge\npayment_queue_length{name=\"order_notify\"} 90\n```\n\n被 prometheus 采集\n![2](/img/grafana-alerting/2.png)\n<!-- more -->\n\n配置邮件报警规则(间隔5分钟发送一次)\n![8](/img/grafana-alerting/8.png)\n\n配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置`no data`情况下的报警状态，防止当前时间点没有采集到数据报警)\n![7](/img/grafana-alerting/7.png)\n\n在grafana中展示（图中设置了值超过100的报警规则）\n![3](/img/grafana-alerting/3.png)\n\n手动修改队列长度为120,触发报警\n![4](/img/grafana-alerting/4.png)\n\n收到报警邮件\n![5](/img/grafana-alerting/5.png)\n\n解除报警\n![6](/img/grafana-alerting/6.png)\n\n邮件报警配置\n```\n[smtp]\nenabled = true\nhost = smtp.exmail.qq.com:465\nuser = system@exmail.com\n# If the password contains # or ; you have to wrap it with trippel quotes. Ex \"\"\"#password;\"\"\"\npassword = ***********\n;cert_file =\n;key_file =\nskip_verify = false\nfrom_address = system@exmail.com\n```\n\n钉钉报警api\n```\ncurl 'https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3' \\\n-H 'Content-Type: application/json' \\\n-d '{\"msgtype\": \"text\",\n\"text\": {\n\t\"content\": \"业务报警测试\"\n}\n}\n```\n\nldap  配置\n```yaml\nconfig: |-\n    [[servers]]\n    host = \"10.0.0.1\"\n    port = 389\n    use_ssl = false\n    start_tls = false\n    ssl_skip_verify = false\n    bind_dn = \"uid=auth,ou=users,dc=apple,dc=com\"\n    bind_password = \"******\"\n    search_filter = \"(uid=%s)\"\n    group_search_filter = \"(&(objectClass=inetOrgPerson)(uid=%s))\"\n    search_base_dns = [\"ou=users,dc=apple,dc=com\"]\n    [servers.attributes]\n    name = \"givenName\"\n    surname = \"sn\"\n    username = \"uid\"\n    email =  \"mail\"\n```\n","slug":"grafana-alerting","published":1,"updated":"2020-10-21T10:22:36.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenl0000j0wpbxnzhsbx4","content":"<p>使用工具：<a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"noopener\">prometheus</a>、<a href=\"https://github.com/grafana/grafana\" target=\"_blank\" rel=\"noopener\">grafana</a>、<a href=\"https://github.com/endclothing/prometheus_client_php\" target=\"_blank\" rel=\"noopener\">prometheus_client_php</a></p>\n<p>通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HELP payment_queue_length it sets</span><br><span class=\"line\"># TYPE payment_queue_length gauge</span><br><span class=\"line\">payment_queue_length&#123;name=&quot;order_notify&quot;&#125; 90</span><br></pre></td></tr></table></figure></p>\n<p>被 prometheus 采集<br><img src=\"/img/grafana-alerting/2.png\" alt=\"2\"><br><a id=\"more\"></a></p>\n<p>配置邮件报警规则(间隔5分钟发送一次)<br><img src=\"/img/grafana-alerting/8.png\" alt=\"8\"></p>\n<p>配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置<code>no data</code>情况下的报警状态，防止当前时间点没有采集到数据报警)<br><img src=\"/img/grafana-alerting/7.png\" alt=\"7\"></p>\n<p>在grafana中展示（图中设置了值超过100的报警规则）<br><img src=\"/img/grafana-alerting/3.png\" alt=\"3\"></p>\n<p>手动修改队列长度为120,触发报警<br><img src=\"/img/grafana-alerting/4.png\" alt=\"4\"></p>\n<p>收到报警邮件<br><img src=\"/img/grafana-alerting/5.png\" alt=\"5\"></p>\n<p>解除报警<br><img src=\"/img/grafana-alerting/6.png\" alt=\"6\"></p>\n<p>邮件报警配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[smtp]</span><br><span class=\"line\">enabled = true</span><br><span class=\"line\">host = smtp.exmail.qq.com:465</span><br><span class=\"line\">user = system@exmail.com</span><br><span class=\"line\"># If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</span><br><span class=\"line\">password = ***********</span><br><span class=\"line\">;cert_file =</span><br><span class=\"line\">;key_file =</span><br><span class=\"line\">skip_verify = false</span><br><span class=\"line\">from_address = system@exmail.com</span><br></pre></td></tr></table></figure></p>\n<p>钉钉报警api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3&apos; \\</span><br><span class=\"line\">-H &apos;Content-Type: application/json&apos; \\</span><br><span class=\"line\">-d &apos;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class=\"line\">&quot;text&quot;: &#123;</span><br><span class=\"line\">\t&quot;content&quot;: &quot;业务报警测试&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ldap  配置<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"string\">[[servers]]</span></span><br><span class=\"line\">    <span class=\"string\">host</span> <span class=\"string\">=</span> <span class=\"string\">\"10.0.0.1\"</span></span><br><span class=\"line\">    <span class=\"string\">port</span> <span class=\"string\">=</span> <span class=\"number\">389</span></span><br><span class=\"line\">    <span class=\"string\">use_ssl</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">start_tls</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">ssl_skip_verify</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">bind_dn</span> <span class=\"string\">=</span> <span class=\"string\">\"uid=auth,ou=users,dc=apple,dc=com\"</span></span><br><span class=\"line\">    <span class=\"string\">bind_password</span> <span class=\"string\">=</span> <span class=\"string\">\"******\"</span></span><br><span class=\"line\">    <span class=\"string\">search_filter</span> <span class=\"string\">=</span> <span class=\"string\">\"(uid=%s)\"</span></span><br><span class=\"line\">    <span class=\"string\">group_search_filter</span> <span class=\"string\">=</span> <span class=\"string\">\"(&amp;(objectClass=inetOrgPerson)(uid=%s))\"</span></span><br><span class=\"line\">    <span class=\"string\">search_base_dns</span> <span class=\"string\">=</span> <span class=\"string\">[\"ou=users,dc=apple,dc=com\"]</span></span><br><span class=\"line\">    <span class=\"string\">[servers.attributes]</span></span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">\"givenName\"</span></span><br><span class=\"line\">    <span class=\"string\">surname</span> <span class=\"string\">=</span> <span class=\"string\">\"sn\"</span></span><br><span class=\"line\">    <span class=\"string\">username</span> <span class=\"string\">=</span> <span class=\"string\">\"uid\"</span></span><br><span class=\"line\">    <span class=\"string\">email</span> <span class=\"string\">=</span>  <span class=\"string\">\"mail\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>使用工具：<a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"noopener\">prometheus</a>、<a href=\"https://github.com/grafana/grafana\" target=\"_blank\" rel=\"noopener\">grafana</a>、<a href=\"https://github.com/endclothing/prometheus_client_php\" target=\"_blank\" rel=\"noopener\">prometheus_client_php</a></p>\n<p>通过 prometheus-php-client 客户端暴露监控元信息，如下表示 order_notify 队列长度为90<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HELP payment_queue_length it sets</span><br><span class=\"line\"># TYPE payment_queue_length gauge</span><br><span class=\"line\">payment_queue_length&#123;name=&quot;order_notify&quot;&#125; 90</span><br></pre></td></tr></table></figure></p>\n<p>被 prometheus 采集<br><img src=\"/img/grafana-alerting/2.png\" alt=\"2\"><br>","more":"</p>\n<p>配置邮件报警规则(间隔5分钟发送一次)<br><img src=\"/img/grafana-alerting/8.png\" alt=\"8\"></p>\n<p>配置报警策略,关联邮件报警规则(每30m秒检查一次,报警触发后延迟1分钟后再通知,注意For参数和Conditions里的query时间单位要合理配置，一般设置相同。还要注意设置<code>no data</code>情况下的报警状态，防止当前时间点没有采集到数据报警)<br><img src=\"/img/grafana-alerting/7.png\" alt=\"7\"></p>\n<p>在grafana中展示（图中设置了值超过100的报警规则）<br><img src=\"/img/grafana-alerting/3.png\" alt=\"3\"></p>\n<p>手动修改队列长度为120,触发报警<br><img src=\"/img/grafana-alerting/4.png\" alt=\"4\"></p>\n<p>收到报警邮件<br><img src=\"/img/grafana-alerting/5.png\" alt=\"5\"></p>\n<p>解除报警<br><img src=\"/img/grafana-alerting/6.png\" alt=\"6\"></p>\n<p>邮件报警配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[smtp]</span><br><span class=\"line\">enabled = true</span><br><span class=\"line\">host = smtp.exmail.qq.com:465</span><br><span class=\"line\">user = system@exmail.com</span><br><span class=\"line\"># If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</span><br><span class=\"line\">password = ***********</span><br><span class=\"line\">;cert_file =</span><br><span class=\"line\">;key_file =</span><br><span class=\"line\">skip_verify = false</span><br><span class=\"line\">from_address = system@exmail.com</span><br></pre></td></tr></table></figure></p>\n<p>钉钉报警api<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;https://oapi.dingtalk.com/robot/send?access_token=762627b8d3fdfe3951dc***733e9e59ff59***7515c3&apos; \\</span><br><span class=\"line\">-H &apos;Content-Type: application/json&apos; \\</span><br><span class=\"line\">-d &apos;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class=\"line\">&quot;text&quot;: &#123;</span><br><span class=\"line\">\t&quot;content&quot;: &quot;业务报警测试&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ldap  配置<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"string\">[[servers]]</span></span><br><span class=\"line\">    <span class=\"string\">host</span> <span class=\"string\">=</span> <span class=\"string\">\"10.0.0.1\"</span></span><br><span class=\"line\">    <span class=\"string\">port</span> <span class=\"string\">=</span> <span class=\"number\">389</span></span><br><span class=\"line\">    <span class=\"string\">use_ssl</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">start_tls</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">ssl_skip_verify</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">bind_dn</span> <span class=\"string\">=</span> <span class=\"string\">\"uid=auth,ou=users,dc=apple,dc=com\"</span></span><br><span class=\"line\">    <span class=\"string\">bind_password</span> <span class=\"string\">=</span> <span class=\"string\">\"******\"</span></span><br><span class=\"line\">    <span class=\"string\">search_filter</span> <span class=\"string\">=</span> <span class=\"string\">\"(uid=%s)\"</span></span><br><span class=\"line\">    <span class=\"string\">group_search_filter</span> <span class=\"string\">=</span> <span class=\"string\">\"(&amp;(objectClass=inetOrgPerson)(uid=%s))\"</span></span><br><span class=\"line\">    <span class=\"string\">search_base_dns</span> <span class=\"string\">=</span> <span class=\"string\">[\"ou=users,dc=apple,dc=com\"]</span></span><br><span class=\"line\">    <span class=\"string\">[servers.attributes]</span></span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">\"givenName\"</span></span><br><span class=\"line\">    <span class=\"string\">surname</span> <span class=\"string\">=</span> <span class=\"string\">\"sn\"</span></span><br><span class=\"line\">    <span class=\"string\">username</span> <span class=\"string\">=</span> <span class=\"string\">\"uid\"</span></span><br><span class=\"line\">    <span class=\"string\">email</span> <span class=\"string\">=</span>  <span class=\"string\">\"mail\"</span></span><br></pre></td></tr></table></figure></p>"},{"title":"grafana 模板变量配置","date":"2019-10-22T20:23:10.000Z","share":true,"_content":"\n重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱\n\n![1.png](/img/grafana/1.png)\n\nprometheus 中按标签查询结果，显示了该标签有多个查询结果\n\n![2.png](/img/grafana/2.png)\n<!-- more -->\n\n现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：\n\n![3.png](/img/grafana/3.png)\n\n重新编辑面板，按日期变量来过滤数据\n\n![4.png](/img/grafana/4.png)\n\n保存，面版按当前日期显示正常：\n\n![5.png](/img/grafana/5.png)\n\n\n日志监控的配置参考上篇文章: {% post_link loki  使用Loki查询日志%}\n\n{% post_link grafana-mysql-source grafana 使用 mysql源%}时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: `select count(*) from t where type in (${source_type})`;","source":"_posts/grafana-variables.md","raw":"---\ntitle: \"grafana 模板变量配置\"\ndate: 2019-10-22 20:23:10\ntags: [loki,promtal,grafana]\nshare: true\n---\n\n重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱\n\n![1.png](/img/grafana/1.png)\n\nprometheus 中按标签查询结果，显示了该标签有多个查询结果\n\n![2.png](/img/grafana/2.png)\n<!-- more -->\n\n现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：\n\n![3.png](/img/grafana/3.png)\n\n重新编辑面板，按日期变量来过滤数据\n\n![4.png](/img/grafana/4.png)\n\n保存，面版按当前日期显示正常：\n\n![5.png](/img/grafana/5.png)\n\n\n日志监控的配置参考上篇文章: {% post_link loki  使用Loki查询日志%}\n\n{% post_link grafana-mysql-source grafana 使用 mysql源%}时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: `select count(*) from t where type in (${source_type})`;","slug":"grafana-variables","published":1,"updated":"2019-12-02T09:00:10.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenl3000l0wpb969zilaq","content":"<p>重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱</p>\n<p><img src=\"/img/grafana/1.png\" alt=\"1.png\"></p>\n<p>prometheus 中按标签查询结果，显示了该标签有多个查询结果</p>\n<p><img src=\"/img/grafana/2.png\" alt=\"2.png\"><br><a id=\"more\"></a></p>\n<p>现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：</p>\n<p><img src=\"/img/grafana/3.png\" alt=\"3.png\"></p>\n<p>重新编辑面板，按日期变量来过滤数据</p>\n<p><img src=\"/img/grafana/4.png\" alt=\"4.png\"></p>\n<p>保存，面版按当前日期显示正常：</p>\n<p><img src=\"/img/grafana/5.png\" alt=\"5.png\"></p>\n<p>日志监控的配置参考上篇文章: <a href=\"/2019/10/loki/\" title=\"使用Loki查询日志\">使用Loki查询日志</a></p>\n<p><a href=\"/2019/11/grafana-mysql-source/\" title=\"grafana 使用 mysql源\">grafana 使用 mysql源</a>时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: <code>select count(*) from t where type in (${source_type})</code>;</p>\n","site":{"data":{}},"excerpt":"<p>重新安装了日志采集器，生成了所有日志文件的 metrics 统计信息，在 grafana 中显示如图，比较混乱</p>\n<p><img src=\"/img/grafana/1.png\" alt=\"1.png\"></p>\n<p>prometheus 中按标签查询结果，显示了该标签有多个查询结果</p>\n<p><img src=\"/img/grafana/2.png\" alt=\"2.png\"><br>","more":"</p>\n<p>现在按 filename 字段查询当天的日志文件统计信息，在 grafana 面板中创建日期变量，来源选择 prometheus，按正则选出日期变量，最下方显示了产生变量的预览信息：</p>\n<p><img src=\"/img/grafana/3.png\" alt=\"3.png\"></p>\n<p>重新编辑面板，按日期变量来过滤数据</p>\n<p><img src=\"/img/grafana/4.png\" alt=\"4.png\"></p>\n<p>保存，面版按当前日期显示正常：</p>\n<p><img src=\"/img/grafana/5.png\" alt=\"5.png\"></p>\n<p>日志监控的配置参考上篇文章: <a href=\"/2019/10/loki/\" title=\"使用Loki查询日志\">使用Loki查询日志</a></p>\n<p><a href=\"/2019/11/grafana-mysql-source/\" title=\"grafana 使用 mysql源\">grafana 使用 mysql源</a>时，如果使用 All 变量，查询 sql 过滤要改成 in 方式，如: <code>select count(*) from t where type in (${source_type})</code>;</p>"},{"title":"go-mysql-elasticsearch 源码解读","date":"2020-12-23T21:03:01.000Z","share":true,"_content":"\n\n\n项目中使用到了 go-mysql-elasticsearch 来做mysql和es的数据同步，所以花些时间了解下源码。\n\n中间件主要用到了 `github.com/siddontang/go-mysql/canal` 这个包来实现 binlog 的处理 \n\n**canal示例**\n\n```go\ncfg := canal.NewDefaultConfig()\ncfg.Addr = \"172.16.30.127:3308\"\ncfg.User = \"root\"\n\ncfg.Password = \"admin\"\n\n//只同步test库canal_test表\ncfg.IncludeTableRegex = make([]string, 1)\ncfg.IncludeTableRegex[0] = \"test\\\\.canal_test\"\n\nc, _ := canal.NewCanal(cfg)\n\ntype MyEventHandler struct {\n\tDummyEventHandler\n}\n\nfunc (h *MyEventHandler) OnRow(e *RowsEvent) error {\n\tlog.Infof(\"%s %v\\n\", e.Action, e.Rows)\n\treturn nil\n}\n\nfunc (h *MyEventHandler) String() string {\n\treturn \"MyEventHandler\"\n}\n\n// Register a handler to handle RowsEvent\nc.SetEventHandler(&MyEventHandler{})\nc.RunFrom(mysql.Position{\"mysql_bin.000001\", 0})\n```\n\n**Rule**\n\n根据配置文件的规则，go-mysql-elasticsearch 把mysql 数据组装成 es 格式数据写入es，规则支持:\n\n1.  同步test库t表到 index:test type:t\n2.  同步test库t_[0-9]{4}表到 index:test type:t\n3. 同步test库tfield表到 index:test type:tfield 字段映射: id:\"es_id\",tags:\"es_tags,list\",keywords:\",list\"\n4. 同步test库tfilter表到 index:test type:tfilter 只同步 id、 name 列\n5. 同步test库tid_[0-9]{4}表到 index:test type:t id由原表的 id + tag 生成\n\n<!-- more -->\n\n\n**服务启动流程**\n\n![流程图](/img/2020/flowchart.png)\n\n\n\n这里主要介绍下配置文件、创建River 及 river.Run部分\n\n\n\n**配置文件** \n\n```go\n& river.Config {\n    MyAddr: \"127.0.0.1:3306\", //mysql地址\n    MyUser: \"root\",\n    MyPassword: \"\",\n    MyCharset: \"utf8\",\n    ESHttps: false,\n    ESAddr: \"127.0.0.1:9200\",\n    ESUser: \"\",\n    ESPassword: \"\",\n    StatAddr: \"127.0.0.1:12800\", //prometheus metrics地址\n    StatPath: \"/metrics\",\n    ServerID: 0x3e9, //mysql server_id\n    Flavor: \"mysql\",\n    DataDir: \"./var\", //数据存储路径，用来存储binlog positon信息\n    DumpExec: \"mysqldump\", \n    SkipMasterData: false, \n    Sources: [] river.SourceConfig { //数据源\n        river.SourceConfig {\n            Schema: \"test\",\n            Tables: [] string {\n                \"t\",\n                \"t_[0-9]{4}\",\n                \"tfield\",\n                \"tfilter\"\n            }\n        }\n    },\n    Rules: [] * river.Rule { ( * river.Rule)(0xc00034e000), //rule规则\n        ( * river.Rule)(0xc00034e140),\n        ( * river.Rule)(0xc00034e280),\n        ( * river.Rule)(0xc00034e3c0),\n        ( * river.Rule)(0xc00034e500)\n    },\n    BulkSize: 128, //es 批量执行大小\n    FlushBulkTime: river.TomlDuration { \n        Duration: 200000000 //多久刷一次切片里的数据到es\n    },\n    SkipNoPkTable: false //跳过没有主键的表\n}\n```\n\n```go\n& river.Rule {\n    Schema: \"test\", //mysql Schema\n    Table: \"canal_test\", //mysql 表名\n    Index: \"test\", //对应的es index\n    Type: \"canal_test\", //对应的 es type\n    Parent: \"\", //设置es parent\n    ID: [] string(nil), //id 由哪些字段组成\n    FieldMapping: map[string] string {}, //字段映射\n    TableInfo: ( * schema.Table)(nil),\n    Filter: [] string(nil), //过滤那些字段\n    Pipeline: \"\" //es Pipeline\n}\n```\n\n\n\n**NewRiver**\n\n```go\n//初始化syncCh,通过这个channel来和esClient做数据交换，及保存binlog postion\nr.syncCh = make(chan interface{}, 4096)\n\n//初始化ctx cancel\nr.ctx, r.cancel = context.WithCancel(context.Background())\n\n//从配置的目录加载master数据，主要包含 bin_name 、bin_pos、filePath 、lastSaveTime\nif r.master, err = loadMasterInfo(c.DataDir); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//创建canal\nif err = r.newCanal(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//预处理rule, 生成格式: r.rules[\"schema:table\"] = rule{}\nif err = r.prepareRule(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//准备canal,设置事件处理handle\nif err = r.prepareCanal(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//设置esClient\nr.es = elastic.NewClient(cfg)\n\n//初始化 prometheus 指标\ngo InitStatus(r.c.StatAddr, r.c.StatPath)\n```\n\nnewCanal\n\n```go\ncfg := canal.NewDefaultConfig()\ncfg.Addr = r.c.MyAddr\ncfg.User = r.c.MyUser\ncfg.Password = r.c.MyPassword\ncfg.Charset = r.c.MyCharset\n//flavor is mysql or mariadb\ncfg.Flavor = r.c.Flavor\n\n//\ncfg.ServerID = r.c.ServerID\ncfg.Dump.ExecutionPath = r.c.DumpExec\ncfg.Dump.DiscardErr = false\ncfg.Dump.SkipMasterData = r.c.SkipMasterData\n\n//设置来自Sources字段的正则过滤 db+table\nfor _, s := range r.c.Sources {\n  for _, t := range s.Tables {\n    cfg.IncludeTableRegex = append(cfg.IncludeTableRegex, s.Schema+\"\\\\.\"+t)\n  }\n}\n```\n\nprepareRule\n\n```go\n//返回通配符对应的表 如 {\"test:t_[0-9]{4}\":[\"t_0000\",\"t_1002\"]} \n//创建默认rule如: r.rules[\"schema:table\"] = newDefaultRule(schema, table)\nwildtables, err := r.parseSource()\n\n//根据配置文件里配置的rule覆盖默认rule里的字段\nif regexp.QuoteMeta(rule.Table) != rule.Table {\n  //判断rule规则的db+table是否配置了source属性\n  tables, ok := wildtables[ruleKey(rule.Schema, rule.Table)]\n  if !ok {\n    return errors.Errorf(\"wildcard table for %s.%s is not defined in source\", rule.Schema, rule.Table)\n  }\n  //index不能为空\n  if len(rule.Index) == 0 {\n    return errors.Errorf(\"wildcard table rule %s.%s must have a index, can not empty\", rule.Schema, rule.Table)\n  }\n  //规则准备，比如index、type转小写，初始化FieldMapping\n  rule.prepare()\n\n  //遍历通过db正则查询的表，根据配置实例化单个rule规则, 没有设置 Filter，PipeLine\n  for _, table := range tables {\n    rr := r.rules[ruleKey(rule.Schema, table)]\n    rr.Index = rule.Index\n    rr.Type = rule.Type\n    rr.Parent = rule.Parent\n    rr.ID = rule.ID\n    rr.FieldMapping = rule.FieldMapping\n  }\n} else {\n  key := ruleKey(rule.Schema, rule.Table)\n  if _, ok := r.rules[key]; !ok {\n    return errors.Errorf(\"rule %s, %s not defined in source\", rule.Schema, rule.Table)\n  }\n  rule.prepare()\n  //使用当前rule替换newDefaultRule\n  r.rules[key] = rule\n}\n\n\nrules := make(map[string]*Rule)\nfor key, rule := range r.rules {\n  //获得rule.TableInfo\n  if rule.TableInfo, err = r.canal.GetTable(rule.Schema, rule.Table); err != nil {\n    return errors.Trace(err)\n  }\n  //检查表是否符合rule规则\n}\n//\nr.rules = rules\n```\n\nprepareCanal\n\n```go\n//SetEventHandler\nr.canal.SetEventHandler(&eventHandler{r})\n```\n\n\n\n**river.Run**\n\n```go\n//for循环处理同步业务\ngo r.syncLoop()\n\n//获取master的binlog同步数据\npos := r.master.Position()\n\n//通过RunFrom启动canal服务\nif err := r.canal.RunFrom(pos); err != nil {\n\tlog.Errorf(\"start canal err %v\", err)\n\tcanalSyncState.Set(0)\n\treturn errors.Trace(err)\n}\n```\n\n\n\nr.syncLoop\n\n```go\nbulkSize := r.c.BulkSize\n\nfor {\n  needFlush := false\n  needSavePos := false\n  \n  select {\n  //断言判断 syncCh 通道数据类型\n  case v := <-r.syncCh:\n    switch v := v.(type) {\n    case posSaver:\n      now := time.Now()\n      //有强制执行标记或者上次保存时间距当前时间3秒以上触发\n      if v.force || now.Sub(lastSavedTime) > 3*time.Second {\n        //更新上次保存时间,及是否需要刷新、保存标记\n        lastSavedTime = now\n        needFlush = true\n        needSavePos = true\n        pos = v.pos\n      }\n    case []*elastic.BulkRequest:\n      //追加到reqs切片\n      reqs = append(reqs, v...)\n      //根据切片长度是否大于buldSize设置needFlush标记\n      needFlush = len(reqs) >= bulkSize\n    }\n  case <-ticker.C:\n    //定时设置needFlush标记为true，处理es请求\n    needFlush = true\n  case <-r.ctx.Done():\n    //跳出循环，返回\n    return\n  }\n\n  if needFlush {\n    //doBulk调用esClient批量处理这些请求数据，到此数据处理完毕\n    if err := r.doBulk(reqs); err != nil {\n      log.Errorf(\"do ES bulk err %v, close sync\", err)\n      //出错执行r.cancel()\n      r.cancel()\n      return\n    }\n    //重置reqs切片为空\n    reqs = reqs[0:0]\n  }\n\n  //保存pos点\n  if needSavePos {\n    if err := r.master.Save(pos); err != nil {\n      log.Errorf(\"save sync position %s err %v, close sync\", pos, err)\n      r.cancel()\n      return\n    }\n  }\n}\n```\n\n\n\neventHandler.OnRow\n\n```go\n//根据db+host获取对应的rule\nrule, ok := h.r.rules[ruleKey(e.Table.Schema, e.Table.Name)]\nif !ok {\n  return nil\n}\n\nvar reqs []*elastic.BulkRequest\nvar err error\nswitch e.Action {\ncase canal.InsertAction:\n  //创建插入请求\n  reqs, err = h.r.makeInsertRequest(rule, e.Rows)\ncase canal.DeleteAction:\n  //创建删除请求\n  reqs, err = h.r.makeDeleteRequest(rule, e.Rows)\ncase canal.UpdateAction:\n  //创建更新请求\n  reqs, err = h.r.makeUpdateRequest(rule, e.Rows)\ndefault:\n  err = errors.Errorf(\"invalid rows action %s\", e.Action)\n}\n\nif err != nil {\n  //如果有错误,执行context.CancelFunc\n  h.r.cancel()\n  return errors.Errorf(\"make %s ES request err %v, close sync\", e.Action, err)\n}\n\nh.r.syncCh <- reqs\n```\n\n\n\nmakeInsertRequest && makeDeleteRequest \n\n```go\nreq := &elastic.BulkRequest{Index: rule.Index, Type: rule.Type, ID: id, Parent: parentID, Pipeline: rule.Pipeline}\n//如果是insert请求调用 makeInsertReqData 组装出data数据\nfor i, c := range rule.TableInfo.Columns {\n    if !rule.CheckFilter(c.Name) {\n      //跳过过滤的字段\n      continue\n    }\n    mapped := false\n    for k, v := range rule.FieldMapping {\n      //字段名称映射\n      mysql, elastic, fieldType := r.getFieldParts(k, v)\n      if mysql == c.Name {\n        mapped = true\n        //字段value转换，如转数组、日期时间，或者执行makeReqColumnData(&c, values[i])获取value值\n        req.Data[elastic] = r.getFieldValue(&c, fieldType, values[i])\n        }\n    }\n    if mapped == false {\n        //makeReqColumnData 直接根据列、和value接口获取转换后的值\n        req.Data[c.Name] = r.makeReqColumnData(&c, values[i])\n    }\n}\n```\n\n\n\nmakeUpdateRequest\n\n```go\nreq := &elastic.BulkRequest{Index: rule.Index, Type: rule.Type, ID: beforeID, Parent: beforeParentID}\n//如果更新了主键值，则是一次插入删除操作\n\n//如果是update请求调用 makeUpdateReqData 组装出data数据、\nbeforeValues []interface{}, afterValues []interface{}) {\nreq.Data = make(map[string]interface{}, len(beforeValues))\n\n// maybe dangerous if something wrong delete before?\nreq.Action = elastic.ActionUpdate\n\nfor i, c := range rule.TableInfo.Columns {\n  mapped := false\n  if !rule.CheckFilter(c.Name) {\n    continue\n  }\n  //比较更新前后数据是否相同，如果相同跳过\n  if reflect.DeepEqual(beforeValues[i], afterValues[i]) {\n    //nothing changed\n    continue\n  }\n  //生成请求数据\n  for k, v := range rule.FieldMapping {\n    mysql, elastic, fieldType := r.getFieldParts(k, v)\n    if mysql == c.Name {\n      mapped = true\n      req.Data[elastic] = r.getFieldValue(&c, fieldType, afterValues[i])\n    }\n  }\n  if mapped == false {\n    req.Data[c.Name] = r.makeReqColumnData(&c, afterValues[i])\n  }\n}\n```\n\n\n\n\n\n**关闭服务**\n\n```go\nlog.Infof(\"closing river\")\nr.cancel()\nr.canal.Close()\nr.master.Close()\n//当等待组计数器不等于 0 时阻塞，直到变 0\n//syncLoop()方法 defer 处执行 r.wg.Done()\nr.wg.Wait()\n```\n\n\n\n\n完整版代码注释链接:\n\nhttps://github.com/airzhe/go-mysql-elasticsearch\n\n\n参考：\n\n[MySQL binlog格式解析](https://www.jianshu.com/p/c16686b35807)\n","source":"_posts/go-mysql-elasticsearch.md","raw":"---\ntitle: \"go-mysql-elasticsearch 源码解读\"\ndate: 2020-12-23 21:03:01\ntags: [go-mysql-elasticsearch,中间件]\nshare: true\n---\n\n\n\n项目中使用到了 go-mysql-elasticsearch 来做mysql和es的数据同步，所以花些时间了解下源码。\n\n中间件主要用到了 `github.com/siddontang/go-mysql/canal` 这个包来实现 binlog 的处理 \n\n**canal示例**\n\n```go\ncfg := canal.NewDefaultConfig()\ncfg.Addr = \"172.16.30.127:3308\"\ncfg.User = \"root\"\n\ncfg.Password = \"admin\"\n\n//只同步test库canal_test表\ncfg.IncludeTableRegex = make([]string, 1)\ncfg.IncludeTableRegex[0] = \"test\\\\.canal_test\"\n\nc, _ := canal.NewCanal(cfg)\n\ntype MyEventHandler struct {\n\tDummyEventHandler\n}\n\nfunc (h *MyEventHandler) OnRow(e *RowsEvent) error {\n\tlog.Infof(\"%s %v\\n\", e.Action, e.Rows)\n\treturn nil\n}\n\nfunc (h *MyEventHandler) String() string {\n\treturn \"MyEventHandler\"\n}\n\n// Register a handler to handle RowsEvent\nc.SetEventHandler(&MyEventHandler{})\nc.RunFrom(mysql.Position{\"mysql_bin.000001\", 0})\n```\n\n**Rule**\n\n根据配置文件的规则，go-mysql-elasticsearch 把mysql 数据组装成 es 格式数据写入es，规则支持:\n\n1.  同步test库t表到 index:test type:t\n2.  同步test库t_[0-9]{4}表到 index:test type:t\n3. 同步test库tfield表到 index:test type:tfield 字段映射: id:\"es_id\",tags:\"es_tags,list\",keywords:\",list\"\n4. 同步test库tfilter表到 index:test type:tfilter 只同步 id、 name 列\n5. 同步test库tid_[0-9]{4}表到 index:test type:t id由原表的 id + tag 生成\n\n<!-- more -->\n\n\n**服务启动流程**\n\n![流程图](/img/2020/flowchart.png)\n\n\n\n这里主要介绍下配置文件、创建River 及 river.Run部分\n\n\n\n**配置文件** \n\n```go\n& river.Config {\n    MyAddr: \"127.0.0.1:3306\", //mysql地址\n    MyUser: \"root\",\n    MyPassword: \"\",\n    MyCharset: \"utf8\",\n    ESHttps: false,\n    ESAddr: \"127.0.0.1:9200\",\n    ESUser: \"\",\n    ESPassword: \"\",\n    StatAddr: \"127.0.0.1:12800\", //prometheus metrics地址\n    StatPath: \"/metrics\",\n    ServerID: 0x3e9, //mysql server_id\n    Flavor: \"mysql\",\n    DataDir: \"./var\", //数据存储路径，用来存储binlog positon信息\n    DumpExec: \"mysqldump\", \n    SkipMasterData: false, \n    Sources: [] river.SourceConfig { //数据源\n        river.SourceConfig {\n            Schema: \"test\",\n            Tables: [] string {\n                \"t\",\n                \"t_[0-9]{4}\",\n                \"tfield\",\n                \"tfilter\"\n            }\n        }\n    },\n    Rules: [] * river.Rule { ( * river.Rule)(0xc00034e000), //rule规则\n        ( * river.Rule)(0xc00034e140),\n        ( * river.Rule)(0xc00034e280),\n        ( * river.Rule)(0xc00034e3c0),\n        ( * river.Rule)(0xc00034e500)\n    },\n    BulkSize: 128, //es 批量执行大小\n    FlushBulkTime: river.TomlDuration { \n        Duration: 200000000 //多久刷一次切片里的数据到es\n    },\n    SkipNoPkTable: false //跳过没有主键的表\n}\n```\n\n```go\n& river.Rule {\n    Schema: \"test\", //mysql Schema\n    Table: \"canal_test\", //mysql 表名\n    Index: \"test\", //对应的es index\n    Type: \"canal_test\", //对应的 es type\n    Parent: \"\", //设置es parent\n    ID: [] string(nil), //id 由哪些字段组成\n    FieldMapping: map[string] string {}, //字段映射\n    TableInfo: ( * schema.Table)(nil),\n    Filter: [] string(nil), //过滤那些字段\n    Pipeline: \"\" //es Pipeline\n}\n```\n\n\n\n**NewRiver**\n\n```go\n//初始化syncCh,通过这个channel来和esClient做数据交换，及保存binlog postion\nr.syncCh = make(chan interface{}, 4096)\n\n//初始化ctx cancel\nr.ctx, r.cancel = context.WithCancel(context.Background())\n\n//从配置的目录加载master数据，主要包含 bin_name 、bin_pos、filePath 、lastSaveTime\nif r.master, err = loadMasterInfo(c.DataDir); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//创建canal\nif err = r.newCanal(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//预处理rule, 生成格式: r.rules[\"schema:table\"] = rule{}\nif err = r.prepareRule(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//准备canal,设置事件处理handle\nif err = r.prepareCanal(); err != nil {\n\treturn nil, errors.Trace(err)\n}\n\n//设置esClient\nr.es = elastic.NewClient(cfg)\n\n//初始化 prometheus 指标\ngo InitStatus(r.c.StatAddr, r.c.StatPath)\n```\n\nnewCanal\n\n```go\ncfg := canal.NewDefaultConfig()\ncfg.Addr = r.c.MyAddr\ncfg.User = r.c.MyUser\ncfg.Password = r.c.MyPassword\ncfg.Charset = r.c.MyCharset\n//flavor is mysql or mariadb\ncfg.Flavor = r.c.Flavor\n\n//\ncfg.ServerID = r.c.ServerID\ncfg.Dump.ExecutionPath = r.c.DumpExec\ncfg.Dump.DiscardErr = false\ncfg.Dump.SkipMasterData = r.c.SkipMasterData\n\n//设置来自Sources字段的正则过滤 db+table\nfor _, s := range r.c.Sources {\n  for _, t := range s.Tables {\n    cfg.IncludeTableRegex = append(cfg.IncludeTableRegex, s.Schema+\"\\\\.\"+t)\n  }\n}\n```\n\nprepareRule\n\n```go\n//返回通配符对应的表 如 {\"test:t_[0-9]{4}\":[\"t_0000\",\"t_1002\"]} \n//创建默认rule如: r.rules[\"schema:table\"] = newDefaultRule(schema, table)\nwildtables, err := r.parseSource()\n\n//根据配置文件里配置的rule覆盖默认rule里的字段\nif regexp.QuoteMeta(rule.Table) != rule.Table {\n  //判断rule规则的db+table是否配置了source属性\n  tables, ok := wildtables[ruleKey(rule.Schema, rule.Table)]\n  if !ok {\n    return errors.Errorf(\"wildcard table for %s.%s is not defined in source\", rule.Schema, rule.Table)\n  }\n  //index不能为空\n  if len(rule.Index) == 0 {\n    return errors.Errorf(\"wildcard table rule %s.%s must have a index, can not empty\", rule.Schema, rule.Table)\n  }\n  //规则准备，比如index、type转小写，初始化FieldMapping\n  rule.prepare()\n\n  //遍历通过db正则查询的表，根据配置实例化单个rule规则, 没有设置 Filter，PipeLine\n  for _, table := range tables {\n    rr := r.rules[ruleKey(rule.Schema, table)]\n    rr.Index = rule.Index\n    rr.Type = rule.Type\n    rr.Parent = rule.Parent\n    rr.ID = rule.ID\n    rr.FieldMapping = rule.FieldMapping\n  }\n} else {\n  key := ruleKey(rule.Schema, rule.Table)\n  if _, ok := r.rules[key]; !ok {\n    return errors.Errorf(\"rule %s, %s not defined in source\", rule.Schema, rule.Table)\n  }\n  rule.prepare()\n  //使用当前rule替换newDefaultRule\n  r.rules[key] = rule\n}\n\n\nrules := make(map[string]*Rule)\nfor key, rule := range r.rules {\n  //获得rule.TableInfo\n  if rule.TableInfo, err = r.canal.GetTable(rule.Schema, rule.Table); err != nil {\n    return errors.Trace(err)\n  }\n  //检查表是否符合rule规则\n}\n//\nr.rules = rules\n```\n\nprepareCanal\n\n```go\n//SetEventHandler\nr.canal.SetEventHandler(&eventHandler{r})\n```\n\n\n\n**river.Run**\n\n```go\n//for循环处理同步业务\ngo r.syncLoop()\n\n//获取master的binlog同步数据\npos := r.master.Position()\n\n//通过RunFrom启动canal服务\nif err := r.canal.RunFrom(pos); err != nil {\n\tlog.Errorf(\"start canal err %v\", err)\n\tcanalSyncState.Set(0)\n\treturn errors.Trace(err)\n}\n```\n\n\n\nr.syncLoop\n\n```go\nbulkSize := r.c.BulkSize\n\nfor {\n  needFlush := false\n  needSavePos := false\n  \n  select {\n  //断言判断 syncCh 通道数据类型\n  case v := <-r.syncCh:\n    switch v := v.(type) {\n    case posSaver:\n      now := time.Now()\n      //有强制执行标记或者上次保存时间距当前时间3秒以上触发\n      if v.force || now.Sub(lastSavedTime) > 3*time.Second {\n        //更新上次保存时间,及是否需要刷新、保存标记\n        lastSavedTime = now\n        needFlush = true\n        needSavePos = true\n        pos = v.pos\n      }\n    case []*elastic.BulkRequest:\n      //追加到reqs切片\n      reqs = append(reqs, v...)\n      //根据切片长度是否大于buldSize设置needFlush标记\n      needFlush = len(reqs) >= bulkSize\n    }\n  case <-ticker.C:\n    //定时设置needFlush标记为true，处理es请求\n    needFlush = true\n  case <-r.ctx.Done():\n    //跳出循环，返回\n    return\n  }\n\n  if needFlush {\n    //doBulk调用esClient批量处理这些请求数据，到此数据处理完毕\n    if err := r.doBulk(reqs); err != nil {\n      log.Errorf(\"do ES bulk err %v, close sync\", err)\n      //出错执行r.cancel()\n      r.cancel()\n      return\n    }\n    //重置reqs切片为空\n    reqs = reqs[0:0]\n  }\n\n  //保存pos点\n  if needSavePos {\n    if err := r.master.Save(pos); err != nil {\n      log.Errorf(\"save sync position %s err %v, close sync\", pos, err)\n      r.cancel()\n      return\n    }\n  }\n}\n```\n\n\n\neventHandler.OnRow\n\n```go\n//根据db+host获取对应的rule\nrule, ok := h.r.rules[ruleKey(e.Table.Schema, e.Table.Name)]\nif !ok {\n  return nil\n}\n\nvar reqs []*elastic.BulkRequest\nvar err error\nswitch e.Action {\ncase canal.InsertAction:\n  //创建插入请求\n  reqs, err = h.r.makeInsertRequest(rule, e.Rows)\ncase canal.DeleteAction:\n  //创建删除请求\n  reqs, err = h.r.makeDeleteRequest(rule, e.Rows)\ncase canal.UpdateAction:\n  //创建更新请求\n  reqs, err = h.r.makeUpdateRequest(rule, e.Rows)\ndefault:\n  err = errors.Errorf(\"invalid rows action %s\", e.Action)\n}\n\nif err != nil {\n  //如果有错误,执行context.CancelFunc\n  h.r.cancel()\n  return errors.Errorf(\"make %s ES request err %v, close sync\", e.Action, err)\n}\n\nh.r.syncCh <- reqs\n```\n\n\n\nmakeInsertRequest && makeDeleteRequest \n\n```go\nreq := &elastic.BulkRequest{Index: rule.Index, Type: rule.Type, ID: id, Parent: parentID, Pipeline: rule.Pipeline}\n//如果是insert请求调用 makeInsertReqData 组装出data数据\nfor i, c := range rule.TableInfo.Columns {\n    if !rule.CheckFilter(c.Name) {\n      //跳过过滤的字段\n      continue\n    }\n    mapped := false\n    for k, v := range rule.FieldMapping {\n      //字段名称映射\n      mysql, elastic, fieldType := r.getFieldParts(k, v)\n      if mysql == c.Name {\n        mapped = true\n        //字段value转换，如转数组、日期时间，或者执行makeReqColumnData(&c, values[i])获取value值\n        req.Data[elastic] = r.getFieldValue(&c, fieldType, values[i])\n        }\n    }\n    if mapped == false {\n        //makeReqColumnData 直接根据列、和value接口获取转换后的值\n        req.Data[c.Name] = r.makeReqColumnData(&c, values[i])\n    }\n}\n```\n\n\n\nmakeUpdateRequest\n\n```go\nreq := &elastic.BulkRequest{Index: rule.Index, Type: rule.Type, ID: beforeID, Parent: beforeParentID}\n//如果更新了主键值，则是一次插入删除操作\n\n//如果是update请求调用 makeUpdateReqData 组装出data数据、\nbeforeValues []interface{}, afterValues []interface{}) {\nreq.Data = make(map[string]interface{}, len(beforeValues))\n\n// maybe dangerous if something wrong delete before?\nreq.Action = elastic.ActionUpdate\n\nfor i, c := range rule.TableInfo.Columns {\n  mapped := false\n  if !rule.CheckFilter(c.Name) {\n    continue\n  }\n  //比较更新前后数据是否相同，如果相同跳过\n  if reflect.DeepEqual(beforeValues[i], afterValues[i]) {\n    //nothing changed\n    continue\n  }\n  //生成请求数据\n  for k, v := range rule.FieldMapping {\n    mysql, elastic, fieldType := r.getFieldParts(k, v)\n    if mysql == c.Name {\n      mapped = true\n      req.Data[elastic] = r.getFieldValue(&c, fieldType, afterValues[i])\n    }\n  }\n  if mapped == false {\n    req.Data[c.Name] = r.makeReqColumnData(&c, afterValues[i])\n  }\n}\n```\n\n\n\n\n\n**关闭服务**\n\n```go\nlog.Infof(\"closing river\")\nr.cancel()\nr.canal.Close()\nr.master.Close()\n//当等待组计数器不等于 0 时阻塞，直到变 0\n//syncLoop()方法 defer 处执行 r.wg.Done()\nr.wg.Wait()\n```\n\n\n\n\n完整版代码注释链接:\n\nhttps://github.com/airzhe/go-mysql-elasticsearch\n\n\n参考：\n\n[MySQL binlog格式解析](https://www.jianshu.com/p/c16686b35807)\n","slug":"go-mysql-elasticsearch","published":1,"updated":"2020-12-24T03:37:58.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenl5000o0wpbazg0yy9b","content":"<p>项目中使用到了 go-mysql-elasticsearch 来做mysql和es的数据同步，所以花些时间了解下源码。</p>\n<p>中间件主要用到了 <code>github.com/siddontang/go-mysql/canal</code> 这个包来实现 binlog 的处理 </p>\n<p><strong>canal示例</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg := canal.NewDefaultConfig()</span><br><span class=\"line\">cfg.Addr = <span class=\"string\">\"172.16.30.127:3308\"</span></span><br><span class=\"line\">cfg.User = <span class=\"string\">\"root\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfg.Password = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//只同步test库canal_test表</span></span><br><span class=\"line\">cfg.IncludeTableRegex = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">cfg.IncludeTableRegex[<span class=\"number\">0</span>] = <span class=\"string\">\"test\\\\.canal_test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">c, _ := canal.NewCanal(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyEventHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDummyEventHandler</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *MyEventHandler)</span> <span class=\"title\">OnRow</span><span class=\"params\">(e *RowsEvent)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tlog.Infof(<span class=\"string\">\"%s %v\\n\"</span>, e.Action, e.Rows)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *MyEventHandler)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"MyEventHandler\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Register a handler to handle RowsEvent</span></span><br><span class=\"line\">c.SetEventHandler(&amp;MyEventHandler&#123;&#125;)</span><br><span class=\"line\">c.RunFrom(mysql.Position&#123;<span class=\"string\">\"mysql_bin.000001\"</span>, <span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>Rule</strong></p>\n<p>根据配置文件的规则，go-mysql-elasticsearch 把mysql 数据组装成 es 格式数据写入es，规则支持:</p>\n<ol>\n<li>同步test库t表到 index:test type:t</li>\n<li>同步test库t_[0-9]{4}表到 index:test type:t</li>\n<li>同步test库tfield表到 index:test type:tfield 字段映射: id:”es_id”,tags:”es_tags,list”,keywords:”,list”</li>\n<li>同步test库tfilter表到 index:test type:tfilter 只同步 id、 name 列</li>\n<li>同步test库tid_[0-9]{4}表到 index:test type:t id由原表的 id + tag 生成</li>\n</ol>\n<a id=\"more\"></a>\n<p><strong>服务启动流程</strong></p>\n<p><img src=\"/img/2020/flowchart.png\" alt=\"流程图\"></p>\n<p>这里主要介绍下配置文件、创建River 及 river.Run部分</p>\n<p><strong>配置文件</strong> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; river.Config &#123;</span><br><span class=\"line\">    MyAddr: <span class=\"string\">\"127.0.0.1:3306\"</span>, <span class=\"comment\">//mysql地址</span></span><br><span class=\"line\">    MyUser: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">    MyPassword: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    MyCharset: <span class=\"string\">\"utf8\"</span>,</span><br><span class=\"line\">    ESHttps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ESAddr: <span class=\"string\">\"127.0.0.1:9200\"</span>,</span><br><span class=\"line\">    ESUser: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    ESPassword: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    StatAddr: <span class=\"string\">\"127.0.0.1:12800\"</span>, <span class=\"comment\">//prometheus metrics地址</span></span><br><span class=\"line\">    StatPath: <span class=\"string\">\"/metrics\"</span>,</span><br><span class=\"line\">    ServerID: <span class=\"number\">0x3e9</span>, <span class=\"comment\">//mysql server_id</span></span><br><span class=\"line\">    Flavor: <span class=\"string\">\"mysql\"</span>,</span><br><span class=\"line\">    DataDir: <span class=\"string\">\"./var\"</span>, <span class=\"comment\">//数据存储路径，用来存储binlog positon信息</span></span><br><span class=\"line\">    DumpExec: <span class=\"string\">\"mysqldump\"</span>, </span><br><span class=\"line\">    SkipMasterData: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    Sources: [] river.SourceConfig &#123; <span class=\"comment\">//数据源</span></span><br><span class=\"line\">        river.SourceConfig &#123;</span><br><span class=\"line\">            Schema: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">            Tables: [] <span class=\"keyword\">string</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">\"t\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"t_[0-9]&#123;4&#125;\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tfield\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tfilter\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Rules: [] * river.Rule &#123; ( * river.Rule)(<span class=\"number\">0xc00034e000</span>), <span class=\"comment\">//rule规则</span></span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e140</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e280</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e3c0</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e500</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    BulkSize: <span class=\"number\">128</span>, <span class=\"comment\">//es 批量执行大小</span></span><br><span class=\"line\">    FlushBulkTime: river.TomlDuration &#123; </span><br><span class=\"line\">        Duration: <span class=\"number\">200000000</span> <span class=\"comment\">//多久刷一次切片里的数据到es</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SkipNoPkTable: <span class=\"literal\">false</span> <span class=\"comment\">//跳过没有主键的表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; river.Rule &#123;</span><br><span class=\"line\">    Schema: <span class=\"string\">\"test\"</span>, <span class=\"comment\">//mysql Schema</span></span><br><span class=\"line\">    Table: <span class=\"string\">\"canal_test\"</span>, <span class=\"comment\">//mysql 表名</span></span><br><span class=\"line\">    Index: <span class=\"string\">\"test\"</span>, <span class=\"comment\">//对应的es index</span></span><br><span class=\"line\">    Type: <span class=\"string\">\"canal_test\"</span>, <span class=\"comment\">//对应的 es type</span></span><br><span class=\"line\">    Parent: <span class=\"string\">\"\"</span>, <span class=\"comment\">//设置es parent</span></span><br><span class=\"line\">    ID: [] <span class=\"keyword\">string</span>(<span class=\"literal\">nil</span>), <span class=\"comment\">//id 由哪些字段组成</span></span><br><span class=\"line\">    FieldMapping: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span> &#123;&#125;, <span class=\"comment\">//字段映射</span></span><br><span class=\"line\">    TableInfo: ( * schema.Table)(<span class=\"literal\">nil</span>),</span><br><span class=\"line\">    Filter: [] <span class=\"keyword\">string</span>(<span class=\"literal\">nil</span>), <span class=\"comment\">//过滤那些字段</span></span><br><span class=\"line\">    Pipeline: <span class=\"string\">\"\"</span> <span class=\"comment\">//es Pipeline</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>NewRiver</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化syncCh,通过这个channel来和esClient做数据交换，及保存binlog postion</span></span><br><span class=\"line\">r.syncCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">4096</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化ctx cancel</span></span><br><span class=\"line\">r.ctx, r.cancel = context.WithCancel(context.Background())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从配置的目录加载master数据，主要包含 bin_name 、bin_pos、filePath 、lastSaveTime</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.master, err = loadMasterInfo(c.DataDir); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建canal</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.newCanal(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预处理rule, 生成格式: r.rules[\"schema:table\"] = rule&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.prepareRule(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备canal,设置事件处理handle</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.prepareCanal(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置esClient</span></span><br><span class=\"line\">r.es = elastic.NewClient(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化 prometheus 指标</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> InitStatus(r.c.StatAddr, r.c.StatPath)</span><br></pre></td></tr></table></figure>\n<p>newCanal</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg := canal.NewDefaultConfig()</span><br><span class=\"line\">cfg.Addr = r.c.MyAddr</span><br><span class=\"line\">cfg.User = r.c.MyUser</span><br><span class=\"line\">cfg.Password = r.c.MyPassword</span><br><span class=\"line\">cfg.Charset = r.c.MyCharset</span><br><span class=\"line\"><span class=\"comment\">//flavor is mysql or mariadb</span></span><br><span class=\"line\">cfg.Flavor = r.c.Flavor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">cfg.ServerID = r.c.ServerID</span><br><span class=\"line\">cfg.Dump.ExecutionPath = r.c.DumpExec</span><br><span class=\"line\">cfg.Dump.DiscardErr = <span class=\"literal\">false</span></span><br><span class=\"line\">cfg.Dump.SkipMasterData = r.c.SkipMasterData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置来自Sources字段的正则过滤 db+table</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> r.c.Sources &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> s.Tables &#123;</span><br><span class=\"line\">    cfg.IncludeTableRegex = <span class=\"built_in\">append</span>(cfg.IncludeTableRegex, s.Schema+<span class=\"string\">\"\\\\.\"</span>+t)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>prepareRule</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回通配符对应的表 如 &#123;\"test:t_[0-9]&#123;4&#125;\":[\"t_0000\",\"t_1002\"]&#125; </span></span><br><span class=\"line\"><span class=\"comment\">//创建默认rule如: r.rules[\"schema:table\"] = newDefaultRule(schema, table)</span></span><br><span class=\"line\">wildtables, err := r.parseSource()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据配置文件里配置的rule覆盖默认rule里的字段</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> regexp.QuoteMeta(rule.Table) != rule.Table &#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断rule规则的db+table是否配置了source属性</span></span><br><span class=\"line\">  tables, ok := wildtables[ruleKey(rule.Schema, rule.Table)]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"wildcard table for %s.%s is not defined in source\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//index不能为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(rule.Index) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"wildcard table rule %s.%s must have a index, can not empty\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//规则准备，比如index、type转小写，初始化FieldMapping</span></span><br><span class=\"line\">  rule.prepare()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//遍历通过db正则查询的表，根据配置实例化单个rule规则, 没有设置 Filter，PipeLine</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, table := <span class=\"keyword\">range</span> tables &#123;</span><br><span class=\"line\">    rr := r.rules[ruleKey(rule.Schema, table)]</span><br><span class=\"line\">    rr.Index = rule.Index</span><br><span class=\"line\">    rr.Type = rule.Type</span><br><span class=\"line\">    rr.Parent = rule.Parent</span><br><span class=\"line\">    rr.ID = rule.ID</span><br><span class=\"line\">    rr.FieldMapping = rule.FieldMapping</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  key := ruleKey(rule.Schema, rule.Table)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, ok := r.rules[key]; !ok &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"rule %s, %s not defined in source\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  rule.prepare()</span><br><span class=\"line\">  <span class=\"comment\">//使用当前rule替换newDefaultRule</span></span><br><span class=\"line\">  r.rules[key] = rule</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rules := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Rule)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, rule := <span class=\"keyword\">range</span> r.rules &#123;</span><br><span class=\"line\">  <span class=\"comment\">//获得rule.TableInfo</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> rule.TableInfo, err = r.canal.GetTable(rule.Schema, rule.Table); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Trace(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检查表是否符合rule规则</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">r.rules = rules</span><br></pre></td></tr></table></figure>\n<p>prepareCanal</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SetEventHandler</span></span><br><span class=\"line\">r.canal.SetEventHandler(&amp;eventHandler&#123;r&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>river.Run</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环处理同步业务</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> r.syncLoop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取master的binlog同步数据</span></span><br><span class=\"line\">pos := r.master.Position()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过RunFrom启动canal服务</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.canal.RunFrom(pos); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Errorf(<span class=\"string\">\"start canal err %v\"</span>, err)</span><br><span class=\"line\">\tcanalSyncState.Set(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>r.syncLoop</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bulkSize := r.c.BulkSize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  needFlush := <span class=\"literal\">false</span></span><br><span class=\"line\">  needSavePos := <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//断言判断 syncCh 通道数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> v := &lt;-r.syncCh:</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> v := v.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> posSaver:</span><br><span class=\"line\">      now := time.Now()</span><br><span class=\"line\">      <span class=\"comment\">//有强制执行标记或者上次保存时间距当前时间3秒以上触发</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> v.force || now.Sub(lastSavedTime) &gt; <span class=\"number\">3</span>*time.Second &#123;</span><br><span class=\"line\">        <span class=\"comment\">//更新上次保存时间,及是否需要刷新、保存标记</span></span><br><span class=\"line\">        lastSavedTime = now</span><br><span class=\"line\">        needFlush = <span class=\"literal\">true</span></span><br><span class=\"line\">        needSavePos = <span class=\"literal\">true</span></span><br><span class=\"line\">        pos = v.pos</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> []*elastic.BulkRequest:</span><br><span class=\"line\">      <span class=\"comment\">//追加到reqs切片</span></span><br><span class=\"line\">      reqs = <span class=\"built_in\">append</span>(reqs, v...)</span><br><span class=\"line\">      <span class=\"comment\">//根据切片长度是否大于buldSize设置needFlush标记</span></span><br><span class=\"line\">      needFlush = <span class=\"built_in\">len</span>(reqs) &gt;= bulkSize</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-ticker.C:</span><br><span class=\"line\">    <span class=\"comment\">//定时设置needFlush标记为true，处理es请求</span></span><br><span class=\"line\">    needFlush = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-r.ctx.Done():</span><br><span class=\"line\">    <span class=\"comment\">//跳出循环，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> needFlush &#123;</span><br><span class=\"line\">    <span class=\"comment\">//doBulk调用esClient批量处理这些请求数据，到此数据处理完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.doBulk(reqs); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Errorf(<span class=\"string\">\"do ES bulk err %v, close sync\"</span>, err)</span><br><span class=\"line\">      <span class=\"comment\">//出错执行r.cancel()</span></span><br><span class=\"line\">      r.cancel()</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重置reqs切片为空</span></span><br><span class=\"line\">    reqs = reqs[<span class=\"number\">0</span>:<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//保存pos点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> needSavePos &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.master.Save(pos); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Errorf(<span class=\"string\">\"save sync position %s err %v, close sync\"</span>, pos, err)</span><br><span class=\"line\">      r.cancel()</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eventHandler.OnRow</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据db+host获取对应的rule</span></span><br><span class=\"line\">rule, ok := h.r.rules[ruleKey(e.Table.Schema, e.Table.Name)]</span><br><span class=\"line\"><span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reqs []*elastic.BulkRequest</span><br><span class=\"line\"><span class=\"keyword\">var</span> err error</span><br><span class=\"line\"><span class=\"keyword\">switch</span> e.Action &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.InsertAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建插入请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeInsertRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.DeleteAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建删除请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeDeleteRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.UpdateAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建更新请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeUpdateRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  err = errors.Errorf(<span class=\"string\">\"invalid rows action %s\"</span>, e.Action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果有错误,执行context.CancelFunc</span></span><br><span class=\"line\">  h.r.cancel()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"make %s ES request err %v, close sync\"</span>, e.Action, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h.r.syncCh &lt;- reqs</span><br></pre></td></tr></table></figure>\n<p>makeInsertRequest &amp;&amp; makeDeleteRequest </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req := &amp;elastic.BulkRequest&#123;Index: rule.Index, Type: rule.Type, ID: id, Parent: parentID, Pipeline: rule.Pipeline&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果是insert请求调用 makeInsertReqData 组装出data数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, c := <span class=\"keyword\">range</span> rule.TableInfo.Columns &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !rule.CheckFilter(c.Name) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//跳过过滤的字段</span></span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mapped := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> rule.FieldMapping &#123;</span><br><span class=\"line\">      <span class=\"comment\">//字段名称映射</span></span><br><span class=\"line\">      mysql, elastic, fieldType := r.getFieldParts(k, v)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> mysql == c.Name &#123;</span><br><span class=\"line\">        mapped = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">//字段value转换，如转数组、日期时间，或者执行makeReqColumnData(&amp;c, values[i])获取value值</span></span><br><span class=\"line\">        req.Data[elastic] = r.getFieldValue(&amp;c, fieldType, values[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mapped == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//makeReqColumnData 直接根据列、和value接口获取转换后的值</span></span><br><span class=\"line\">        req.Data[c.Name] = r.makeReqColumnData(&amp;c, values[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>makeUpdateRequest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req := &amp;elastic.BulkRequest&#123;Index: rule.Index, Type: rule.Type, ID: beforeID, Parent: beforeParentID&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果更新了主键值，则是一次插入删除操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是update请求调用 makeUpdateReqData 组装出data数据、</span></span><br><span class=\"line\">beforeValues []<span class=\"keyword\">interface</span>&#123;&#125;, afterValues []<span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">req.Data = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(beforeValues))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maybe dangerous if something wrong delete before?</span></span><br><span class=\"line\">req.Action = elastic.ActionUpdate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, c := <span class=\"keyword\">range</span> rule.TableInfo.Columns &#123;</span><br><span class=\"line\">  mapped := <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !rule.CheckFilter(c.Name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//比较更新前后数据是否相同，如果相同跳过</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> reflect.DeepEqual(beforeValues[i], afterValues[i]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//nothing changed</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//生成请求数据</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> rule.FieldMapping &#123;</span><br><span class=\"line\">    mysql, elastic, fieldType := r.getFieldParts(k, v)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mysql == c.Name &#123;</span><br><span class=\"line\">      mapped = <span class=\"literal\">true</span></span><br><span class=\"line\">      req.Data[elastic] = r.getFieldValue(&amp;c, fieldType, afterValues[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mapped == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">    req.Data[c.Name] = r.makeReqColumnData(&amp;c, afterValues[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关闭服务</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log.Infof(<span class=\"string\">\"closing river\"</span>)</span><br><span class=\"line\">r.cancel()</span><br><span class=\"line\">r.canal.Close()</span><br><span class=\"line\">r.master.Close()</span><br><span class=\"line\"><span class=\"comment\">//当等待组计数器不等于 0 时阻塞，直到变 0</span></span><br><span class=\"line\"><span class=\"comment\">//syncLoop()方法 defer 处执行 r.wg.Done()</span></span><br><span class=\"line\">r.wg.Wait()</span><br></pre></td></tr></table></figure>\n<p>完整版代码注释链接:</p>\n<p><a href=\"https://github.com/airzhe/go-mysql-elasticsearch\" target=\"_blank\" rel=\"noopener\">https://github.com/airzhe/go-mysql-elasticsearch</a></p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/c16686b35807\" target=\"_blank\" rel=\"noopener\">MySQL binlog格式解析</a></p>\n","site":{"data":{}},"excerpt":"<p>项目中使用到了 go-mysql-elasticsearch 来做mysql和es的数据同步，所以花些时间了解下源码。</p>\n<p>中间件主要用到了 <code>github.com/siddontang/go-mysql/canal</code> 这个包来实现 binlog 的处理 </p>\n<p><strong>canal示例</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg := canal.NewDefaultConfig()</span><br><span class=\"line\">cfg.Addr = <span class=\"string\">\"172.16.30.127:3308\"</span></span><br><span class=\"line\">cfg.User = <span class=\"string\">\"root\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfg.Password = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//只同步test库canal_test表</span></span><br><span class=\"line\">cfg.IncludeTableRegex = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">cfg.IncludeTableRegex[<span class=\"number\">0</span>] = <span class=\"string\">\"test\\\\.canal_test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">c, _ := canal.NewCanal(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyEventHandler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDummyEventHandler</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *MyEventHandler)</span> <span class=\"title\">OnRow</span><span class=\"params\">(e *RowsEvent)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tlog.Infof(<span class=\"string\">\"%s %v\\n\"</span>, e.Action, e.Rows)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h *MyEventHandler)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"MyEventHandler\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Register a handler to handle RowsEvent</span></span><br><span class=\"line\">c.SetEventHandler(&amp;MyEventHandler&#123;&#125;)</span><br><span class=\"line\">c.RunFrom(mysql.Position&#123;<span class=\"string\">\"mysql_bin.000001\"</span>, <span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>Rule</strong></p>\n<p>根据配置文件的规则，go-mysql-elasticsearch 把mysql 数据组装成 es 格式数据写入es，规则支持:</p>\n<ol>\n<li>同步test库t表到 index:test type:t</li>\n<li>同步test库t_[0-9]{4}表到 index:test type:t</li>\n<li>同步test库tfield表到 index:test type:tfield 字段映射: id:”es_id”,tags:”es_tags,list”,keywords:”,list”</li>\n<li>同步test库tfilter表到 index:test type:tfilter 只同步 id、 name 列</li>\n<li>同步test库tid_[0-9]{4}表到 index:test type:t id由原表的 id + tag 生成</li>\n</ol>","more":"<p><strong>服务启动流程</strong></p>\n<p><img src=\"/img/2020/flowchart.png\" alt=\"流程图\"></p>\n<p>这里主要介绍下配置文件、创建River 及 river.Run部分</p>\n<p><strong>配置文件</strong> </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; river.Config &#123;</span><br><span class=\"line\">    MyAddr: <span class=\"string\">\"127.0.0.1:3306\"</span>, <span class=\"comment\">//mysql地址</span></span><br><span class=\"line\">    MyUser: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">    MyPassword: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    MyCharset: <span class=\"string\">\"utf8\"</span>,</span><br><span class=\"line\">    ESHttps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ESAddr: <span class=\"string\">\"127.0.0.1:9200\"</span>,</span><br><span class=\"line\">    ESUser: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    ESPassword: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    StatAddr: <span class=\"string\">\"127.0.0.1:12800\"</span>, <span class=\"comment\">//prometheus metrics地址</span></span><br><span class=\"line\">    StatPath: <span class=\"string\">\"/metrics\"</span>,</span><br><span class=\"line\">    ServerID: <span class=\"number\">0x3e9</span>, <span class=\"comment\">//mysql server_id</span></span><br><span class=\"line\">    Flavor: <span class=\"string\">\"mysql\"</span>,</span><br><span class=\"line\">    DataDir: <span class=\"string\">\"./var\"</span>, <span class=\"comment\">//数据存储路径，用来存储binlog positon信息</span></span><br><span class=\"line\">    DumpExec: <span class=\"string\">\"mysqldump\"</span>, </span><br><span class=\"line\">    SkipMasterData: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    Sources: [] river.SourceConfig &#123; <span class=\"comment\">//数据源</span></span><br><span class=\"line\">        river.SourceConfig &#123;</span><br><span class=\"line\">            Schema: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">            Tables: [] <span class=\"keyword\">string</span> &#123;</span><br><span class=\"line\">                <span class=\"string\">\"t\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"t_[0-9]&#123;4&#125;\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tfield\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"tfilter\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Rules: [] * river.Rule &#123; ( * river.Rule)(<span class=\"number\">0xc00034e000</span>), <span class=\"comment\">//rule规则</span></span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e140</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e280</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e3c0</span>),</span><br><span class=\"line\">        ( * river.Rule)(<span class=\"number\">0xc00034e500</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    BulkSize: <span class=\"number\">128</span>, <span class=\"comment\">//es 批量执行大小</span></span><br><span class=\"line\">    FlushBulkTime: river.TomlDuration &#123; </span><br><span class=\"line\">        Duration: <span class=\"number\">200000000</span> <span class=\"comment\">//多久刷一次切片里的数据到es</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    SkipNoPkTable: <span class=\"literal\">false</span> <span class=\"comment\">//跳过没有主键的表</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; river.Rule &#123;</span><br><span class=\"line\">    Schema: <span class=\"string\">\"test\"</span>, <span class=\"comment\">//mysql Schema</span></span><br><span class=\"line\">    Table: <span class=\"string\">\"canal_test\"</span>, <span class=\"comment\">//mysql 表名</span></span><br><span class=\"line\">    Index: <span class=\"string\">\"test\"</span>, <span class=\"comment\">//对应的es index</span></span><br><span class=\"line\">    Type: <span class=\"string\">\"canal_test\"</span>, <span class=\"comment\">//对应的 es type</span></span><br><span class=\"line\">    Parent: <span class=\"string\">\"\"</span>, <span class=\"comment\">//设置es parent</span></span><br><span class=\"line\">    ID: [] <span class=\"keyword\">string</span>(<span class=\"literal\">nil</span>), <span class=\"comment\">//id 由哪些字段组成</span></span><br><span class=\"line\">    FieldMapping: <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">string</span> &#123;&#125;, <span class=\"comment\">//字段映射</span></span><br><span class=\"line\">    TableInfo: ( * schema.Table)(<span class=\"literal\">nil</span>),</span><br><span class=\"line\">    Filter: [] <span class=\"keyword\">string</span>(<span class=\"literal\">nil</span>), <span class=\"comment\">//过滤那些字段</span></span><br><span class=\"line\">    Pipeline: <span class=\"string\">\"\"</span> <span class=\"comment\">//es Pipeline</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>NewRiver</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化syncCh,通过这个channel来和esClient做数据交换，及保存binlog postion</span></span><br><span class=\"line\">r.syncCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">4096</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化ctx cancel</span></span><br><span class=\"line\">r.ctx, r.cancel = context.WithCancel(context.Background())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从配置的目录加载master数据，主要包含 bin_name 、bin_pos、filePath 、lastSaveTime</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> r.master, err = loadMasterInfo(c.DataDir); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建canal</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.newCanal(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预处理rule, 生成格式: r.rules[\"schema:table\"] = rule&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.prepareRule(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备canal,设置事件处理handle</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err = r.prepareCanal(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置esClient</span></span><br><span class=\"line\">r.es = elastic.NewClient(cfg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化 prometheus 指标</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> InitStatus(r.c.StatAddr, r.c.StatPath)</span><br></pre></td></tr></table></figure>\n<p>newCanal</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg := canal.NewDefaultConfig()</span><br><span class=\"line\">cfg.Addr = r.c.MyAddr</span><br><span class=\"line\">cfg.User = r.c.MyUser</span><br><span class=\"line\">cfg.Password = r.c.MyPassword</span><br><span class=\"line\">cfg.Charset = r.c.MyCharset</span><br><span class=\"line\"><span class=\"comment\">//flavor is mysql or mariadb</span></span><br><span class=\"line\">cfg.Flavor = r.c.Flavor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">cfg.ServerID = r.c.ServerID</span><br><span class=\"line\">cfg.Dump.ExecutionPath = r.c.DumpExec</span><br><span class=\"line\">cfg.Dump.DiscardErr = <span class=\"literal\">false</span></span><br><span class=\"line\">cfg.Dump.SkipMasterData = r.c.SkipMasterData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置来自Sources字段的正则过滤 db+table</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> r.c.Sources &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> s.Tables &#123;</span><br><span class=\"line\">    cfg.IncludeTableRegex = <span class=\"built_in\">append</span>(cfg.IncludeTableRegex, s.Schema+<span class=\"string\">\"\\\\.\"</span>+t)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>prepareRule</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回通配符对应的表 如 &#123;\"test:t_[0-9]&#123;4&#125;\":[\"t_0000\",\"t_1002\"]&#125; </span></span><br><span class=\"line\"><span class=\"comment\">//创建默认rule如: r.rules[\"schema:table\"] = newDefaultRule(schema, table)</span></span><br><span class=\"line\">wildtables, err := r.parseSource()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据配置文件里配置的rule覆盖默认rule里的字段</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> regexp.QuoteMeta(rule.Table) != rule.Table &#123;</span><br><span class=\"line\">  <span class=\"comment\">//判断rule规则的db+table是否配置了source属性</span></span><br><span class=\"line\">  tables, ok := wildtables[ruleKey(rule.Schema, rule.Table)]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"wildcard table for %s.%s is not defined in source\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//index不能为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(rule.Index) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"wildcard table rule %s.%s must have a index, can not empty\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//规则准备，比如index、type转小写，初始化FieldMapping</span></span><br><span class=\"line\">  rule.prepare()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//遍历通过db正则查询的表，根据配置实例化单个rule规则, 没有设置 Filter，PipeLine</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, table := <span class=\"keyword\">range</span> tables &#123;</span><br><span class=\"line\">    rr := r.rules[ruleKey(rule.Schema, table)]</span><br><span class=\"line\">    rr.Index = rule.Index</span><br><span class=\"line\">    rr.Type = rule.Type</span><br><span class=\"line\">    rr.Parent = rule.Parent</span><br><span class=\"line\">    rr.ID = rule.ID</span><br><span class=\"line\">    rr.FieldMapping = rule.FieldMapping</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  key := ruleKey(rule.Schema, rule.Table)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, ok := r.rules[key]; !ok &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"rule %s, %s not defined in source\"</span>, rule.Schema, rule.Table)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  rule.prepare()</span><br><span class=\"line\">  <span class=\"comment\">//使用当前rule替换newDefaultRule</span></span><br><span class=\"line\">  r.rules[key] = rule</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rules := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*Rule)</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, rule := <span class=\"keyword\">range</span> r.rules &#123;</span><br><span class=\"line\">  <span class=\"comment\">//获得rule.TableInfo</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> rule.TableInfo, err = r.canal.GetTable(rule.Schema, rule.Table); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Trace(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//检查表是否符合rule规则</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">r.rules = rules</span><br></pre></td></tr></table></figure>\n<p>prepareCanal</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SetEventHandler</span></span><br><span class=\"line\">r.canal.SetEventHandler(&amp;eventHandler&#123;r&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>river.Run</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//for循环处理同步业务</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> r.syncLoop()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取master的binlog同步数据</span></span><br><span class=\"line\">pos := r.master.Position()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过RunFrom启动canal服务</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.canal.RunFrom(pos); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tlog.Errorf(<span class=\"string\">\"start canal err %v\"</span>, err)</span><br><span class=\"line\">\tcanalSyncState.Set(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errors.Trace(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>r.syncLoop</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bulkSize := r.c.BulkSize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  needFlush := <span class=\"literal\">false</span></span><br><span class=\"line\">  needSavePos := <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//断言判断 syncCh 通道数据类型</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> v := &lt;-r.syncCh:</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> v := v.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> posSaver:</span><br><span class=\"line\">      now := time.Now()</span><br><span class=\"line\">      <span class=\"comment\">//有强制执行标记或者上次保存时间距当前时间3秒以上触发</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> v.force || now.Sub(lastSavedTime) &gt; <span class=\"number\">3</span>*time.Second &#123;</span><br><span class=\"line\">        <span class=\"comment\">//更新上次保存时间,及是否需要刷新、保存标记</span></span><br><span class=\"line\">        lastSavedTime = now</span><br><span class=\"line\">        needFlush = <span class=\"literal\">true</span></span><br><span class=\"line\">        needSavePos = <span class=\"literal\">true</span></span><br><span class=\"line\">        pos = v.pos</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> []*elastic.BulkRequest:</span><br><span class=\"line\">      <span class=\"comment\">//追加到reqs切片</span></span><br><span class=\"line\">      reqs = <span class=\"built_in\">append</span>(reqs, v...)</span><br><span class=\"line\">      <span class=\"comment\">//根据切片长度是否大于buldSize设置needFlush标记</span></span><br><span class=\"line\">      needFlush = <span class=\"built_in\">len</span>(reqs) &gt;= bulkSize</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-ticker.C:</span><br><span class=\"line\">    <span class=\"comment\">//定时设置needFlush标记为true，处理es请求</span></span><br><span class=\"line\">    needFlush = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-r.ctx.Done():</span><br><span class=\"line\">    <span class=\"comment\">//跳出循环，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> needFlush &#123;</span><br><span class=\"line\">    <span class=\"comment\">//doBulk调用esClient批量处理这些请求数据，到此数据处理完毕</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.doBulk(reqs); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Errorf(<span class=\"string\">\"do ES bulk err %v, close sync\"</span>, err)</span><br><span class=\"line\">      <span class=\"comment\">//出错执行r.cancel()</span></span><br><span class=\"line\">      r.cancel()</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重置reqs切片为空</span></span><br><span class=\"line\">    reqs = reqs[<span class=\"number\">0</span>:<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//保存pos点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> needSavePos &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.master.Save(pos); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Errorf(<span class=\"string\">\"save sync position %s err %v, close sync\"</span>, pos, err)</span><br><span class=\"line\">      r.cancel()</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eventHandler.OnRow</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据db+host获取对应的rule</span></span><br><span class=\"line\">rule, ok := h.r.rules[ruleKey(e.Table.Schema, e.Table.Name)]</span><br><span class=\"line\"><span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reqs []*elastic.BulkRequest</span><br><span class=\"line\"><span class=\"keyword\">var</span> err error</span><br><span class=\"line\"><span class=\"keyword\">switch</span> e.Action &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.InsertAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建插入请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeInsertRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.DeleteAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建删除请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeDeleteRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">case</span> canal.UpdateAction:</span><br><span class=\"line\">  <span class=\"comment\">//创建更新请求</span></span><br><span class=\"line\">  reqs, err = h.r.makeUpdateRequest(rule, e.Rows)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  err = errors.Errorf(<span class=\"string\">\"invalid rows action %s\"</span>, e.Action)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//如果有错误,执行context.CancelFunc</span></span><br><span class=\"line\">  h.r.cancel()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">\"make %s ES request err %v, close sync\"</span>, e.Action, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h.r.syncCh &lt;- reqs</span><br></pre></td></tr></table></figure>\n<p>makeInsertRequest &amp;&amp; makeDeleteRequest </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req := &amp;elastic.BulkRequest&#123;Index: rule.Index, Type: rule.Type, ID: id, Parent: parentID, Pipeline: rule.Pipeline&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果是insert请求调用 makeInsertReqData 组装出data数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, c := <span class=\"keyword\">range</span> rule.TableInfo.Columns &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !rule.CheckFilter(c.Name) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//跳过过滤的字段</span></span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mapped := <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> rule.FieldMapping &#123;</span><br><span class=\"line\">      <span class=\"comment\">//字段名称映射</span></span><br><span class=\"line\">      mysql, elastic, fieldType := r.getFieldParts(k, v)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> mysql == c.Name &#123;</span><br><span class=\"line\">        mapped = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">//字段value转换，如转数组、日期时间，或者执行makeReqColumnData(&amp;c, values[i])获取value值</span></span><br><span class=\"line\">        req.Data[elastic] = r.getFieldValue(&amp;c, fieldType, values[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mapped == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//makeReqColumnData 直接根据列、和value接口获取转换后的值</span></span><br><span class=\"line\">        req.Data[c.Name] = r.makeReqColumnData(&amp;c, values[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>makeUpdateRequest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req := &amp;elastic.BulkRequest&#123;Index: rule.Index, Type: rule.Type, ID: beforeID, Parent: beforeParentID&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果更新了主键值，则是一次插入删除操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是update请求调用 makeUpdateReqData 组装出data数据、</span></span><br><span class=\"line\">beforeValues []<span class=\"keyword\">interface</span>&#123;&#125;, afterValues []<span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">req.Data = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(beforeValues))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maybe dangerous if something wrong delete before?</span></span><br><span class=\"line\">req.Action = elastic.ActionUpdate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, c := <span class=\"keyword\">range</span> rule.TableInfo.Columns &#123;</span><br><span class=\"line\">  mapped := <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !rule.CheckFilter(c.Name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//比较更新前后数据是否相同，如果相同跳过</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> reflect.DeepEqual(beforeValues[i], afterValues[i]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//nothing changed</span></span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//生成请求数据</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> rule.FieldMapping &#123;</span><br><span class=\"line\">    mysql, elastic, fieldType := r.getFieldParts(k, v)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mysql == c.Name &#123;</span><br><span class=\"line\">      mapped = <span class=\"literal\">true</span></span><br><span class=\"line\">      req.Data[elastic] = r.getFieldValue(&amp;c, fieldType, afterValues[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mapped == <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">    req.Data[c.Name] = r.makeReqColumnData(&amp;c, afterValues[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关闭服务</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log.Infof(<span class=\"string\">\"closing river\"</span>)</span><br><span class=\"line\">r.cancel()</span><br><span class=\"line\">r.canal.Close()</span><br><span class=\"line\">r.master.Close()</span><br><span class=\"line\"><span class=\"comment\">//当等待组计数器不等于 0 时阻塞，直到变 0</span></span><br><span class=\"line\"><span class=\"comment\">//syncLoop()方法 defer 处执行 r.wg.Done()</span></span><br><span class=\"line\">r.wg.Wait()</span><br></pre></td></tr></table></figure>\n<p>完整版代码注释链接:</p>\n<p><a href=\"https://github.com/airzhe/go-mysql-elasticsearch\" target=\"_blank\" rel=\"noopener\">https://github.com/airzhe/go-mysql-elasticsearch</a></p>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/c16686b35807\" target=\"_blank\" rel=\"noopener\">MySQL binlog格式解析</a></p>"},{"title":"helm 命令介绍及使用","date":"2019-10-16T17:35:10.000Z","share":true,"_content":"\n**命令**\n\n```\nhelm repo list\nhelm search \nhelm list #列出已经按照项目\nhelm del --purge istio-init #删除\nhelm fetch stable/grafana #下载到本地\nhelm push mysql-0.3.5.tgz myrepo\nhelm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库\nhelm repo add stable http://mirror.azure.cn/kubernetes/charts\nhelm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库\n\nhelm list --deleted\nhelm rollback mq-exporter 9 -n soa #回滚某个服务\n\nhelm create hello_test\nhelm package ./hello_test/ #打包\nhelm install ./hello_test-0.1.0.tgz --debug --dry-run #调试\nhelm get manifest #这条命令可以通过 release 名来打印其相关yaml信息\nhelm status wintering-rodent\n\nhelm plugin install https://github.com/chartmuseum/helm-push #安装push插件\nhelm repo add mylibrary http://harbor.local.com:8082/chartrepo/library\nhelm push --username=runner --password=745632Bn hello_test mylibrary\n\nhelm fetch stable/redis\nhelm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0\n\n\ndocker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0\nexport HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134\nhelm list\nhelm init --client-only\n\nhelm upgrade -f panda.yaml happpy-panda stable/mariadb #更新\nhelm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml > my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。\nhelm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f\n\nhelm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中\nhelm status \n\nhelm inspect values . #查看charts的配置选项\nhelm inspect values yhdx/community --version 0.2.0\nhelm get values zeroed-gnat -a #查看 release 的配置值\n\nhelm --set a=b,c=d \nhelm --set name={a,b,c} \nhelm --set server[0].port = 80\n\n--timeout\n--wait\n\nhelm rollback pgadm 2 -n kube-public\n\nhelm init --service-account \nhelm install . --debug --dry-run --set favoriteDrink=tea #set 替换\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\nhelm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . \nhelm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress\n\n#启动本地 chartmuseum 仓库\ndocker run --rm -itd \\\n  -p 8089:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/charts \\\n  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\\n --name my_chartmuseum  chartmuseum/chartmuseum:latest\nhelm repo add myChartMuseum http://172.16.101.197:8089\n\nhelm upgrade install --force\n\nsed -i \"s/api-monitor/hyperf-skelecton/g\" `grep payment -rl ./hyperf-skelecton`\n```\n<!-- more -->\n\n**helm Values Files 值来源**\n\n```\n前面讲了内置对像 Values，它的值有四个来源：\n\nvalues.yaml 文件\n如果这是个子 chart，其父 chart 的 Values.yaml 文件\n在 helm install 或 helm upgrade 时，通过 -f 指定的文件\n通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）\n```\n\n\n\n**helm template**\n\n```\nRelease：该对象描述了发布本身。它里面有几个对象：\nRelease.Name：发布名称\nRelease.Time：发布的时间\nRelease.Namespace：要释放到的命名空间（如果清单未覆盖）\nRelease.Service：发布服务的名称（始终Tiller）。\nRelease.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。\nRelease.IsUpgrade：true如果当前操作是升级或回滚，则设置为。\nRelease.IsInstall：true如果当前操作是安装，则设置为。\n\nChart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如{{.Chart.Name}}-{{.Chart.Version}}将打印出来mychart-0.1.0。\n\"图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file\n\n.Files.Get config.ini\n\nTemplate：包含有关正在执行的当前模板的信息\nName：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）\nBasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。\n\n内置值始终以大写字母开头,本地名称以小写开头\n\ndrink: {{ quote .Values.favorite.drink }} #值加引号\nfood: {{ .Values.favorite.food | upper | quote }} #管道\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }} #默认值\n\nif/ else用于创建条件块\nwith 指定范围\nrange，它提供了“for each”式循环\n\n{{- if eq .Values.favorite.drink \"coffee\"}}\nmug: true\n{{- end}}\n\n#with\n{{- with .Values.favorite }}\ndrink: {{ .drink | default \"tea\" | quote }}\nfood: {{ .food | upper | quote }}\n{{- end }}\n\n|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用\ntoppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }\ntoppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n\n有一个变量始终是全局$变量 - 该变量将始终指向根上下文\n\n\n#模板\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\n  \n当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：{{- template \"mychart.labels\" }} 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：{{- template \"mychart.labels\" . }}\n\n最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。\nlabels:\n    {{- include \"mychart.app\" . | nindent 4 }}\n    \n    \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range list \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n\n#生成 nginx.conf 配置\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n    \n{{ .Release.Name }} 随机生产的单词\n{{ include \"community.fullname\" . }} 和项目有关的名称\n```\n\n\n\n**tiller**\n\n```\ntiller 可以安两个一个集群内，一个集群外\n```\n\n\n\n**docker 客户端**\n\n```\ndocker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl\n```\n\n**依赖管理**\n\n-  直接把依赖的 package 放在 charts / 目录中\n- 使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages\n\n\n\n安装Grafana\n\n```\nhttps://grafana.com/grafana/dashboards/7249\n\nhelm upgrade --install loki loki/loki-stack --namespace monitoring\n\nhelm install  stable/grafana -n grafana --namespace=monitoring\nhelm upgrade grafana  stable/grafana  --set adminPassword=abc123\nhelm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com\n```\n\n\n参考：\n\n[使用github搭建chart仓库](https://blog.csdn.net/u013360850/article/details/103440483）","source":"_posts/helm.md","raw":"---\ntitle: \"helm 命令介绍及使用\"\ndate: 2019-10-16 17:35:10\ntags: [k8s,helm]\nshare: true\n---\n\n**命令**\n\n```\nhelm repo list\nhelm search \nhelm list #列出已经按照项目\nhelm del --purge istio-init #删除\nhelm fetch stable/grafana #下载到本地\nhelm push mysql-0.3.5.tgz myrepo\nhelm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库\nhelm repo add stable http://mirror.azure.cn/kubernetes/charts\nhelm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库\n\nhelm list --deleted\nhelm rollback mq-exporter 9 -n soa #回滚某个服务\n\nhelm create hello_test\nhelm package ./hello_test/ #打包\nhelm install ./hello_test-0.1.0.tgz --debug --dry-run #调试\nhelm get manifest #这条命令可以通过 release 名来打印其相关yaml信息\nhelm status wintering-rodent\n\nhelm plugin install https://github.com/chartmuseum/helm-push #安装push插件\nhelm repo add mylibrary http://harbor.local.com:8082/chartrepo/library\nhelm push --username=runner --password=745632Bn hello_test mylibrary\n\nhelm fetch stable/redis\nhelm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0\n\n\ndocker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0\nexport HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134\nhelm list\nhelm init --client-only\n\nhelm upgrade -f panda.yaml happpy-panda stable/mariadb #更新\nhelm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml > my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。\nhelm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f\n\nhelm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中\nhelm status \n\nhelm inspect values . #查看charts的配置选项\nhelm inspect values yhdx/community --version 0.2.0\nhelm get values zeroed-gnat -a #查看 release 的配置值\n\nhelm --set a=b,c=d \nhelm --set name={a,b,c} \nhelm --set server[0].port = 80\n\n--timeout\n--wait\n\nhelm rollback pgadm 2 -n kube-public\n\nhelm init --service-account \nhelm install . --debug --dry-run --set favoriteDrink=tea #set 替换\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\nhelm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . \nhelm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress\n\n#启动本地 chartmuseum 仓库\ndocker run --rm -itd \\\n  -p 8089:8080 \\\n  -e DEBUG=1 \\\n  -e STORAGE=local \\\n  -e STORAGE_LOCAL_ROOTDIR=/charts \\\n  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\\n --name my_chartmuseum  chartmuseum/chartmuseum:latest\nhelm repo add myChartMuseum http://172.16.101.197:8089\n\nhelm upgrade install --force\n\nsed -i \"s/api-monitor/hyperf-skelecton/g\" `grep payment -rl ./hyperf-skelecton`\n```\n<!-- more -->\n\n**helm Values Files 值来源**\n\n```\n前面讲了内置对像 Values，它的值有四个来源：\n\nvalues.yaml 文件\n如果这是个子 chart，其父 chart 的 Values.yaml 文件\n在 helm install 或 helm upgrade 时，通过 -f 指定的文件\n通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）\n```\n\n\n\n**helm template**\n\n```\nRelease：该对象描述了发布本身。它里面有几个对象：\nRelease.Name：发布名称\nRelease.Time：发布的时间\nRelease.Namespace：要释放到的命名空间（如果清单未覆盖）\nRelease.Service：发布服务的名称（始终Tiller）。\nRelease.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。\nRelease.IsUpgrade：true如果当前操作是升级或回滚，则设置为。\nRelease.IsInstall：true如果当前操作是安装，则设置为。\n\nChart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如{{.Chart.Name}}-{{.Chart.Version}}将打印出来mychart-0.1.0。\n\"图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file\n\n.Files.Get config.ini\n\nTemplate：包含有关正在执行的当前模板的信息\nName：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）\nBasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。\n\n内置值始终以大写字母开头,本地名称以小写开头\n\ndrink: {{ quote .Values.favorite.drink }} #值加引号\nfood: {{ .Values.favorite.food | upper | quote }} #管道\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }} #默认值\n\nif/ else用于创建条件块\nwith 指定范围\nrange，它提供了“for each”式循环\n\n{{- if eq .Values.favorite.drink \"coffee\"}}\nmug: true\n{{- end}}\n\n#with\n{{- with .Values.favorite }}\ndrink: {{ .drink | default \"tea\" | quote }}\nfood: {{ .food | upper | quote }}\n{{- end }}\n\n|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用\ntoppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }\ntoppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n\n有一个变量始终是全局$变量 - 该变量将始终指向根上下文\n\n\n#模板\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\n  \n当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：{{- template \"mychart.labels\" }} 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：{{- template \"mychart.labels\" . }}\n\n最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。\nlabels:\n    {{- include \"mychart.app\" . | nindent 4 }}\n    \n    \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range list \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n\n#生成 nginx.conf 配置\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n    \n{{ .Release.Name }} 随机生产的单词\n{{ include \"community.fullname\" . }} 和项目有关的名称\n```\n\n\n\n**tiller**\n\n```\ntiller 可以安两个一个集群内，一个集群外\n```\n\n\n\n**docker 客户端**\n\n```\ndocker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl\n```\n\n**依赖管理**\n\n-  直接把依赖的 package 放在 charts / 目录中\n- 使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages\n\n\n\n安装Grafana\n\n```\nhttps://grafana.com/grafana/dashboards/7249\n\nhelm upgrade --install loki loki/loki-stack --namespace monitoring\n\nhelm install  stable/grafana -n grafana --namespace=monitoring\nhelm upgrade grafana  stable/grafana  --set adminPassword=abc123\nhelm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com\n```\n\n\n参考：\n\n[使用github搭建chart仓库](https://blog.csdn.net/u013360850/article/details/103440483）","slug":"helm","published":1,"updated":"2020-10-24T08:43:59.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenl6000q0wpb90iul1kh","content":"<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo list</span><br><span class=\"line\">helm search </span><br><span class=\"line\">helm list #列出已经按照项目</span><br><span class=\"line\">helm del --purge istio-init #删除</span><br><span class=\"line\">helm fetch stable/grafana #下载到本地</span><br><span class=\"line\">helm push mysql-0.3.5.tgz myrepo</span><br><span class=\"line\">helm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库</span><br><span class=\"line\">helm repo add stable http://mirror.azure.cn/kubernetes/charts</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库</span><br><span class=\"line\"></span><br><span class=\"line\">helm list --deleted</span><br><span class=\"line\">helm rollback mq-exporter 9 -n soa #回滚某个服务</span><br><span class=\"line\"></span><br><span class=\"line\">helm create hello_test</span><br><span class=\"line\">helm package ./hello_test/ #打包</span><br><span class=\"line\">helm install ./hello_test-0.1.0.tgz --debug --dry-run #调试</span><br><span class=\"line\">helm get manifest #这条命令可以通过 release 名来打印其相关yaml信息</span><br><span class=\"line\">helm status wintering-rodent</span><br><span class=\"line\"></span><br><span class=\"line\">helm plugin install https://github.com/chartmuseum/helm-push #安装push插件</span><br><span class=\"line\">helm repo add mylibrary http://harbor.local.com:8082/chartrepo/library</span><br><span class=\"line\">helm push --username=runner --password=745632Bn hello_test mylibrary</span><br><span class=\"line\"></span><br><span class=\"line\">helm fetch stable/redis</span><br><span class=\"line\">helm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0</span><br><span class=\"line\">export HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134</span><br><span class=\"line\">helm list</span><br><span class=\"line\">helm init --client-only</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade -f panda.yaml happpy-panda stable/mariadb #更新</span><br><span class=\"line\">helm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml &gt; my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。</span><br><span class=\"line\">helm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f</span><br><span class=\"line\"></span><br><span class=\"line\">helm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中</span><br><span class=\"line\">helm status </span><br><span class=\"line\"></span><br><span class=\"line\">helm inspect values . #查看charts的配置选项</span><br><span class=\"line\">helm inspect values yhdx/community --version 0.2.0</span><br><span class=\"line\">helm get values zeroed-gnat -a #查看 release 的配置值</span><br><span class=\"line\"></span><br><span class=\"line\">helm --set a=b,c=d </span><br><span class=\"line\">helm --set name=&#123;a,b,c&#125; </span><br><span class=\"line\">helm --set server[0].port = 80</span><br><span class=\"line\"></span><br><span class=\"line\">--timeout</span><br><span class=\"line\">--wait</span><br><span class=\"line\"></span><br><span class=\"line\">helm rollback pgadm 2 -n kube-public</span><br><span class=\"line\"></span><br><span class=\"line\">helm init --service-account </span><br><span class=\"line\">helm install . --debug --dry-run --set favoriteDrink=tea #set 替换</span><br><span class=\"line\">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null</span><br><span class=\"line\">helm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . </span><br><span class=\"line\">helm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress</span><br><span class=\"line\"></span><br><span class=\"line\">#启动本地 chartmuseum 仓库</span><br><span class=\"line\">docker run --rm -itd \\</span><br><span class=\"line\">  -p 8089:8080 \\</span><br><span class=\"line\">  -e DEBUG=1 \\</span><br><span class=\"line\">  -e STORAGE=local \\</span><br><span class=\"line\">  -e STORAGE_LOCAL_ROOTDIR=/charts \\</span><br><span class=\"line\">  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\</span><br><span class=\"line\"> --name my_chartmuseum  chartmuseum/chartmuseum:latest</span><br><span class=\"line\">helm repo add myChartMuseum http://172.16.101.197:8089</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade install --force</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &quot;s/api-monitor/hyperf-skelecton/g&quot; `grep payment -rl ./hyperf-skelecton`</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>helm Values Files 值来源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前面讲了内置对像 Values，它的值有四个来源：</span><br><span class=\"line\"></span><br><span class=\"line\">values.yaml 文件</span><br><span class=\"line\">如果这是个子 chart，其父 chart 的 Values.yaml 文件</span><br><span class=\"line\">在 helm install 或 helm upgrade 时，通过 -f 指定的文件</span><br><span class=\"line\">通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）</span><br></pre></td></tr></table></figure>\n<p><strong>helm template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release：该对象描述了发布本身。它里面有几个对象：</span><br><span class=\"line\">Release.Name：发布名称</span><br><span class=\"line\">Release.Time：发布的时间</span><br><span class=\"line\">Release.Namespace：要释放到的命名空间（如果清单未覆盖）</span><br><span class=\"line\">Release.Service：发布服务的名称（始终Tiller）。</span><br><span class=\"line\">Release.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。</span><br><span class=\"line\">Release.IsUpgrade：true如果当前操作是升级或回滚，则设置为。</span><br><span class=\"line\">Release.IsInstall：true如果当前操作是安装，则设置为。</span><br><span class=\"line\"></span><br><span class=\"line\">Chart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如&#123;&#123;.Chart.Name&#125;&#125;-&#123;&#123;.Chart.Version&#125;&#125;将打印出来mychart-0.1.0。</span><br><span class=\"line\">&quot;图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file</span><br><span class=\"line\"></span><br><span class=\"line\">.Files.Get config.ini</span><br><span class=\"line\"></span><br><span class=\"line\">Template：包含有关正在执行的当前模板的信息</span><br><span class=\"line\">Name：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）</span><br><span class=\"line\">BasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。</span><br><span class=\"line\"></span><br><span class=\"line\">内置值始终以大写字母开头,本地名称以小写开头</span><br><span class=\"line\"></span><br><span class=\"line\">drink: &#123;&#123; quote .Values.favorite.drink &#125;&#125; #值加引号</span><br><span class=\"line\">food: &#123;&#123; .Values.favorite.food | upper | quote &#125;&#125; #管道</span><br><span class=\"line\">drink: &#123;&#123; .Values.favorite.drink | default &quot;tea&quot; | quote &#125;&#125; #默认值</span><br><span class=\"line\"></span><br><span class=\"line\">if/ else用于创建条件块</span><br><span class=\"line\">with 指定范围</span><br><span class=\"line\">range，它提供了“for each”式循环</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- if eq .Values.favorite.drink &quot;coffee&quot;&#125;&#125;</span><br><span class=\"line\">mug: true</span><br><span class=\"line\">&#123;&#123;- end&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#with</span><br><span class=\"line\">&#123;&#123;- with .Values.favorite &#125;&#125;</span><br><span class=\"line\">drink: &#123;&#123; .drink | default &quot;tea&quot; | quote &#125;&#125;</span><br><span class=\"line\">food: &#123;&#123; .food | upper | quote &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">    - &#123;&#123; . | title | quote &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range $index, $topping := .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">      &#123;&#123; $index &#125;&#125;: &#123;&#123; $topping &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">有一个变量始终是全局$变量 - 该变量将始终指向根上下文</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#模板</span><br><span class=\"line\">&#123;&#123;/* Generate basic labels */&#125;&#125;</span><br><span class=\"line\">&#123;&#123;- define &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    generator: helm</span><br><span class=\"line\">    date: &#123;&#123; now | htmlDate &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">  &#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：&#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125; 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：&#123;&#123;- template &quot;mychart.labels&quot; . &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。</span><br><span class=\"line\">labels:</span><br><span class=\"line\">    &#123;&#123;- include &quot;mychart.app&quot; . | nindent 4 &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">data:</span><br><span class=\"line\">  &#123;&#123;- $files := .Files &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- range list &quot;config1.toml&quot; &quot;config2.toml&quot; &quot;config3.toml&quot; &#125;&#125;</span><br><span class=\"line\">  &#123;&#123; . &#125;&#125;: |-</span><br><span class=\"line\">    &#123;&#123; $files.Get . &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#生成 nginx.conf 配置</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-secret</span><br><span class=\"line\">type: Opaque</span><br><span class=\"line\">data:</span><br><span class=\"line\">  token: |-</span><br><span class=\"line\">    &#123;&#123; .Files.Get &quot;config1.toml&quot; | b64enc &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#123;&#123; .Release.Name &#125;&#125; 随机生产的单词</span><br><span class=\"line\">&#123;&#123; include &quot;community.fullname&quot; . &#125;&#125; 和项目有关的名称</span><br></pre></td></tr></table></figure>\n<p><strong>tiller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiller 可以安两个一个集群内，一个集群外</span><br></pre></td></tr></table></figure>\n<p><strong>docker 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl</span><br></pre></td></tr></table></figure>\n<p><strong>依赖管理</strong></p>\n<ul>\n<li>直接把依赖的 package 放在 charts / 目录中</li>\n<li>使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages</li>\n</ul>\n<p>安装Grafana</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://grafana.com/grafana/dashboards/7249</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --install loki loki/loki-stack --namespace monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">helm install  stable/grafana -n grafana --namespace=monitoring</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set adminPassword=abc123</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p>[使用github搭建chart仓库](<a href=\"https://blog.csdn.net/u013360850/article/details/103440483）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013360850/article/details/103440483）</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo list</span><br><span class=\"line\">helm search </span><br><span class=\"line\">helm list #列出已经按照项目</span><br><span class=\"line\">helm del --purge istio-init #删除</span><br><span class=\"line\">helm fetch stable/grafana #下载到本地</span><br><span class=\"line\">helm push mysql-0.3.5.tgz myrepo</span><br><span class=\"line\">helm repo add  myrepo https://xx.xx.xx.xx/chartrepo/charts #添加仓库</span><br><span class=\"line\">helm repo add stable http://mirror.azure.cn/kubernetes/charts</span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami  #添加仓库</span><br><span class=\"line\"></span><br><span class=\"line\">helm list --deleted</span><br><span class=\"line\">helm rollback mq-exporter 9 -n soa #回滚某个服务</span><br><span class=\"line\"></span><br><span class=\"line\">helm create hello_test</span><br><span class=\"line\">helm package ./hello_test/ #打包</span><br><span class=\"line\">helm install ./hello_test-0.1.0.tgz --debug --dry-run #调试</span><br><span class=\"line\">helm get manifest #这条命令可以通过 release 名来打印其相关yaml信息</span><br><span class=\"line\">helm status wintering-rodent</span><br><span class=\"line\"></span><br><span class=\"line\">helm plugin install https://github.com/chartmuseum/helm-push #安装push插件</span><br><span class=\"line\">helm repo add mylibrary http://harbor.local.com:8082/chartrepo/library</span><br><span class=\"line\">helm push --username=runner --password=745632Bn hello_test mylibrary</span><br><span class=\"line\"></span><br><span class=\"line\">helm fetch stable/redis</span><br><span class=\"line\">helm push redis-8.1.2.tgz -urunner -p745632Bn  mylibrary  -v 0.2.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint /bin/sh alpine/helm:2.9.0</span><br><span class=\"line\">export HELM_HOST=10.102.49.77:44134 #修改 tiller 地址 10.111.8.171:44134</span><br><span class=\"line\">helm list</span><br><span class=\"line\">helm init --client-only</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade -f panda.yaml happpy-panda stable/mariadb #更新</span><br><span class=\"line\">helm temlate helm/istio -name istio -namespace istio-system -f my-values.yaml &gt; my-isti.yaml #根据模板生成部署清单，不用依赖 tiller 服务端。</span><br><span class=\"line\">helm template istio -name istio -f book-values.yaml -namespace istio-system | kubectl apply -f</span><br><span class=\"line\"></span><br><span class=\"line\">helm delete --purge #版本存储在 kube-system 命名空间内的ConfigMaps中</span><br><span class=\"line\">helm status </span><br><span class=\"line\"></span><br><span class=\"line\">helm inspect values . #查看charts的配置选项</span><br><span class=\"line\">helm inspect values yhdx/community --version 0.2.0</span><br><span class=\"line\">helm get values zeroed-gnat -a #查看 release 的配置值</span><br><span class=\"line\"></span><br><span class=\"line\">helm --set a=b,c=d </span><br><span class=\"line\">helm --set name=&#123;a,b,c&#125; </span><br><span class=\"line\">helm --set server[0].port = 80</span><br><span class=\"line\"></span><br><span class=\"line\">--timeout</span><br><span class=\"line\">--wait</span><br><span class=\"line\"></span><br><span class=\"line\">helm rollback pgadm 2 -n kube-public</span><br><span class=\"line\"></span><br><span class=\"line\">helm init --service-account </span><br><span class=\"line\">helm install . --debug --dry-run --set favoriteDrink=tea #set 替换</span><br><span class=\"line\">helm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null</span><br><span class=\"line\">helm upgrade sanguine-panther --set image1.tag=0.3 --set imagePullPolicy=Always . </span><br><span class=\"line\">helm upgrade nginx-ingress -f ingress-nginx.yaml  stable/nginx-ingress</span><br><span class=\"line\"></span><br><span class=\"line\">#启动本地 chartmuseum 仓库</span><br><span class=\"line\">docker run --rm -itd \\</span><br><span class=\"line\">  -p 8089:8080 \\</span><br><span class=\"line\">  -e DEBUG=1 \\</span><br><span class=\"line\">  -e STORAGE=local \\</span><br><span class=\"line\">  -e STORAGE_LOCAL_ROOTDIR=/charts \\</span><br><span class=\"line\">  -v /home/runner/work/k8s/chartmuseum/charts:/charts \\</span><br><span class=\"line\"> --name my_chartmuseum  chartmuseum/chartmuseum:latest</span><br><span class=\"line\">helm repo add myChartMuseum http://172.16.101.197:8089</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade install --force</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &quot;s/api-monitor/hyperf-skelecton/g&quot; `grep payment -rl ./hyperf-skelecton`</span><br></pre></td></tr></table></figure>","more":"<p><strong>helm Values Files 值来源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前面讲了内置对像 Values，它的值有四个来源：</span><br><span class=\"line\"></span><br><span class=\"line\">values.yaml 文件</span><br><span class=\"line\">如果这是个子 chart，其父 chart 的 Values.yaml 文件</span><br><span class=\"line\">在 helm install 或 helm upgrade 时，通过 -f 指定的文件</span><br><span class=\"line\">通过 --set 指定的参数（ 例：helm install --set foo=bar ./mychart）</span><br></pre></td></tr></table></figure>\n<p><strong>helm template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release：该对象描述了发布本身。它里面有几个对象：</span><br><span class=\"line\">Release.Name：发布名称</span><br><span class=\"line\">Release.Time：发布的时间</span><br><span class=\"line\">Release.Namespace：要释放到的命名空间（如果清单未覆盖）</span><br><span class=\"line\">Release.Service：发布服务的名称（始终Tiller）。</span><br><span class=\"line\">Release.Revision：此版本的修订号。它从1开始，每个都递增helm upgrade。</span><br><span class=\"line\">Release.IsUpgrade：true如果当前操作是升级或回滚，则设置为。</span><br><span class=\"line\">Release.IsInstall：true如果当前操作是安装，则设置为。</span><br><span class=\"line\"></span><br><span class=\"line\">Chart：Chart.yaml文件的内容。这里的任何数据Chart.yaml都可以访问。例如&#123;&#123;.Chart.Name&#125;&#125;-&#123;&#123;.Chart.Version&#125;&#125;将打印出来mychart-0.1.0。</span><br><span class=\"line\">&quot;图表指南”中列出了可用字段 #https://github.com/helm/helm/blob/master/docs/charts.md#the-chartyaml-file</span><br><span class=\"line\"></span><br><span class=\"line\">.Files.Get config.ini</span><br><span class=\"line\"></span><br><span class=\"line\">Template：包含有关正在执行的当前模板的信息</span><br><span class=\"line\">Name：当前模板的命名空间文件路径（例如mychart/templates/mytemplate.yaml）</span><br><span class=\"line\">BasePath：当前图表的templates目录的命名空间路径（例如mychart/templates）。</span><br><span class=\"line\"></span><br><span class=\"line\">内置值始终以大写字母开头,本地名称以小写开头</span><br><span class=\"line\"></span><br><span class=\"line\">drink: &#123;&#123; quote .Values.favorite.drink &#125;&#125; #值加引号</span><br><span class=\"line\">food: &#123;&#123; .Values.favorite.food | upper | quote &#125;&#125; #管道</span><br><span class=\"line\">drink: &#123;&#123; .Values.favorite.drink | default &quot;tea&quot; | quote &#125;&#125; #默认值</span><br><span class=\"line\"></span><br><span class=\"line\">if/ else用于创建条件块</span><br><span class=\"line\">with 指定范围</span><br><span class=\"line\">range，它提供了“for each”式循环</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- if eq .Values.favorite.drink &quot;coffee&quot;&#125;&#125;</span><br><span class=\"line\">mug: true</span><br><span class=\"line\">&#123;&#123;- end&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#with</span><br><span class=\"line\">&#123;&#123;- with .Values.favorite &#125;&#125;</span><br><span class=\"line\">drink: &#123;&#123; .drink | default &quot;tea&quot; | quote &#125;&#125;</span><br><span class=\"line\">food: &#123;&#123; .food | upper | quote &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">|-YAML中的标记采用多行字符串。这可以是一种有用的技术，用于在清单中嵌入大块数据，ConfgMaps 使用</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">    - &#123;&#123; . | title | quote &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;</span><br><span class=\"line\">toppings: |-</span><br><span class=\"line\">    &#123;&#123;- range $index, $topping := .Values.pizzaToppings &#125;&#125;</span><br><span class=\"line\">      &#123;&#123; $index &#125;&#125;: &#123;&#123; $topping &#125;&#125;</span><br><span class=\"line\">    &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">有一个变量始终是全局$变量 - 该变量将始终指向根上下文</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#模板</span><br><span class=\"line\">&#123;&#123;/* Generate basic labels */&#125;&#125;</span><br><span class=\"line\">&#123;&#123;- define &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    generator: helm</span><br><span class=\"line\">    date: &#123;&#123; now | htmlDate &#125;&#125;</span><br><span class=\"line\">&#123;&#123;- end &#125;&#125;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">  &#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">当define呈现命名模板（使用）创建时，它将接收template调用传入的范围。在我们的示例中，我们包含了这样的模板：&#123;&#123;- template &quot;mychart.labels&quot; &#125;&#125; 没有传入范围，因此在模板中我们无法访问任何内容.应该改为：&#123;&#123;- template &quot;mychart.labels&quot; . &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">最好在Helm模板中使用include over template，以便可以更好地处理YAML文档的输出格式。</span><br><span class=\"line\">labels:</span><br><span class=\"line\">    &#123;&#123;- include &quot;mychart.app&quot; . | nindent 4 &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-configmap</span><br><span class=\"line\">data:</span><br><span class=\"line\">  &#123;&#123;- $files := .Files &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- range list &quot;config1.toml&quot; &quot;config2.toml&quot; &quot;config3.toml&quot; &#125;&#125;</span><br><span class=\"line\">  &#123;&#123; . &#125;&#125;: |-</span><br><span class=\"line\">    &#123;&#123; $files.Get . &#125;&#125;</span><br><span class=\"line\">  &#123;&#123;- end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#生成 nginx.conf 配置</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &#123;&#123; .Release.Name &#125;&#125;-secret</span><br><span class=\"line\">type: Opaque</span><br><span class=\"line\">data:</span><br><span class=\"line\">  token: |-</span><br><span class=\"line\">    &#123;&#123; .Files.Get &quot;config1.toml&quot; | b64enc &#125;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#123;&#123; .Release.Name &#125;&#125; 随机生产的单词</span><br><span class=\"line\">&#123;&#123; include &quot;community.fullname&quot; . &#125;&#125; 和项目有关的名称</span><br></pre></td></tr></table></figure>\n<p><strong>tiller</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiller 可以安两个一个集群内，一个集群外</span><br></pre></td></tr></table></figure>\n<p><strong>docker 客户端</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v ~/.kube:/root/.kube dtzar/helm-kubectl</span><br></pre></td></tr></table></figure>\n<p><strong>依赖管理</strong></p>\n<ul>\n<li>直接把依赖的 package 放在 charts / 目录中</li>\n<li>使用 requirements.yaml 并用 helm dep up foochart 来自动下载以来的packages</li>\n</ul>\n<p>安装Grafana</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://grafana.com/grafana/dashboards/7249</span><br><span class=\"line\"></span><br><span class=\"line\">helm upgrade --install loki loki/loki-stack --namespace monitoring</span><br><span class=\"line\"></span><br><span class=\"line\">helm install  stable/grafana -n grafana --namespace=monitoring</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set adminPassword=abc123</span><br><span class=\"line\">helm upgrade grafana  stable/grafana  --set ingress.enabled=true --set ingress.hosts[0]=grafana.t1.youhaodongxi.com</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p>[使用github搭建chart仓库](<a href=\"https://blog.csdn.net/u013360850/article/details/103440483）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013360850/article/details/103440483）</a></p>"},{"title":"使用hexo管理博客","date":"2019-10-23T16:09:10.000Z","share":true,"_content":"\n下载 hexo 镜像\n```sh\ndocker pull neofelhz/hexo-docker\n```\n\n启动镜像并映射本地目录\n\n```\ndocker run -itd \\\n    -v /home/runner/work/www/blog:/www/blog \\\n    -w=\"/www/blog\" \\\n    -p 4000:4000 \\\n    --name hexo-test \\\n    neofelhz/hexo-docker \\\n    /bin/sh\n```\n\n进入容器\n\n```\ndocker exec -it hexo-test /bin/sh\n```\n\n执行 `hexo init`，初始化时间较长，应该和网络有关\n\n```\n/www/blog # hexo init \nINFO  Cloning hexo-starter to /www/blog\nCloning into '/www/blog'...\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131\nReceiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.\nResolving deltas: 100% (64/64), done.\nSubmodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'\nCloning into '/www/blog/themes/landscape'...\n......\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nwarning Your current version of Yarn is out of date. The latest version is \"1.19.1\" while you're on \"1.3.2\".\ninfo To upgrade, run the following command:\n$ curl -o- -L https://yarnpkg.com/install.sh | bash\nDone in 112.25s.\nINFO  Start blogging with Hexo!\n```\n<!-- more -->\n\n初始化完成生成目录如下：\n\n```\n/www/blog/source/_posts # ls -la\ntotal 132\ndrwxr-xr-x   6 runner runner  4096 10月 23 14:33 .\ndrwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..\n-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml\n-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp\n-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore\ndrwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules\n-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json\ndrwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:18 source\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes\n-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock\n\n```\n\n修改` _config.yml` ，title 改为自己的网站标题，拷贝一个新的 md 文件到 `source/_posts`目录\n\n```\n/www/blog/source/_posts # ls\nhello-world.md  microk8.md\n```\n\n执行`hexo s`启动服务:\n\n```\n/www/blog/source # hexo s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n访问 `http://localhost:4000`，我们的 markdown 文章就以 html 格式展示出来了\n\n![1.png](/img/hexo/1.png)\n\n\n\n**上传到 github.io **\n\n1.修改_config.yaml，采用 git 方式部署到自己的 github.io\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/airzhe/airzhe.github.io \n```\n\n2.安装 `hexo-deploy-git` 模块，执行:  `npm install hexo-deployer-git --save`，之后执行 `hexo` 如果报错 `ERROR Local hexo not found *** `, 删除 `node_modules` 目录后，执行 `npm install`\n\n3.执行 `hexo clean && hexo deploy` 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！\n\n\n\n**小技巧**:\n\n1.文章注释信息定义：\n\n```\n---\ntitle: \"MicroK8s\"\ndate: 2019-10-23 20:23:10\ntags: [microk8s,k8s]\nshare: true\n---\n```\n\n2.插入图片:  在 source 目录下新建 img 目录，markdown 中以`/img` 为根路径引入对应图片\n\n3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}\n\n4.跳过某个文件_config.yml里配置\n```\nskip_render: [\"_posts/shazam.md\"]\n```\n更多: `<!-- more -->`\n\n\n**文档**\n[hexo中文](https://hexo.io/zh-cn/docs/index.html)\n[hexo特殊符号转义](https://wxnacy.com/2018/01/12/hexo-specific-symbol/)\n\n\n\n**排错**\n\n1. 今天遇到部署时总提示hexo 源码分支指向master分支错误\n```\nBranch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.\n```\n或者以下报错，删除 `.deploy_git` 目录，重试解决\n```\nError: Spawn failed\n\nat ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n```\n参考： https://www.cnblogs.com/hushuangpu/p/10316560.html\n\n2. 切换网络hexo容器提示 github.com 无法访问，容器重启后正常","source":"_posts/hexo.md","raw":"---\ntitle: \"使用hexo管理博客\"\ndate: 2019-10-23 16:09:10\ntags: [hexo]\nshare: true\n---\n\n下载 hexo 镜像\n```sh\ndocker pull neofelhz/hexo-docker\n```\n\n启动镜像并映射本地目录\n\n```\ndocker run -itd \\\n    -v /home/runner/work/www/blog:/www/blog \\\n    -w=\"/www/blog\" \\\n    -p 4000:4000 \\\n    --name hexo-test \\\n    neofelhz/hexo-docker \\\n    /bin/sh\n```\n\n进入容器\n\n```\ndocker exec -it hexo-test /bin/sh\n```\n\n执行 `hexo init`，初始化时间较长，应该和网络有关\n\n```\n/www/blog # hexo init \nINFO  Cloning hexo-starter to /www/blog\nCloning into '/www/blog'...\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131\nReceiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.\nResolving deltas: 100% (64/64), done.\nSubmodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'\nCloning into '/www/blog/themes/landscape'...\n......\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nwarning Your current version of Yarn is out of date. The latest version is \"1.19.1\" while you're on \"1.3.2\".\ninfo To upgrade, run the following command:\n$ curl -o- -L https://yarnpkg.com/install.sh | bash\nDone in 112.25s.\nINFO  Start blogging with Hexo!\n```\n<!-- more -->\n\n初始化完成生成目录如下：\n\n```\n/www/blog/source/_posts # ls -la\ntotal 132\ndrwxr-xr-x   6 runner runner  4096 10月 23 14:33 .\ndrwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..\n-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml\n-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp\n-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore\ndrwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules\n-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json\ndrwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:18 source\ndrwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes\n-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock\n\n```\n\n修改` _config.yml` ，title 改为自己的网站标题，拷贝一个新的 md 文件到 `source/_posts`目录\n\n```\n/www/blog/source/_posts # ls\nhello-world.md  microk8.md\n```\n\n执行`hexo s`启动服务:\n\n```\n/www/blog/source # hexo s\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n访问 `http://localhost:4000`，我们的 markdown 文章就以 html 格式展示出来了\n\n![1.png](/img/hexo/1.png)\n\n\n\n**上传到 github.io **\n\n1.修改_config.yaml，采用 git 方式部署到自己的 github.io\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/airzhe/airzhe.github.io \n```\n\n2.安装 `hexo-deploy-git` 模块，执行:  `npm install hexo-deployer-git --save`，之后执行 `hexo` 如果报错 `ERROR Local hexo not found *** `, 删除 `node_modules` 目录后，执行 `npm install`\n\n3.执行 `hexo clean && hexo deploy` 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！\n\n\n\n**小技巧**:\n\n1.文章注释信息定义：\n\n```\n---\ntitle: \"MicroK8s\"\ndate: 2019-10-23 20:23:10\ntags: [microk8s,k8s]\nshare: true\n---\n```\n\n2.插入图片:  在 source 目录下新建 img 目录，markdown 中以`/img` 为根路径引入对应图片\n\n3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}\n\n4.跳过某个文件_config.yml里配置\n```\nskip_render: [\"_posts/shazam.md\"]\n```\n更多: `<!-- more -->`\n\n\n**文档**\n[hexo中文](https://hexo.io/zh-cn/docs/index.html)\n[hexo特殊符号转义](https://wxnacy.com/2018/01/12/hexo-specific-symbol/)\n\n\n\n**排错**\n\n1. 今天遇到部署时总提示hexo 源码分支指向master分支错误\n```\nBranch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.\n```\n或者以下报错，删除 `.deploy_git` 目录，重试解决\n```\nError: Spawn failed\n\nat ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)\n```\n参考： https://www.cnblogs.com/hushuangpu/p/10316560.html\n\n2. 切换网络hexo容器提示 github.com 无法访问，容器重启后正常","slug":"hexo","published":1,"updated":"2020-07-15T11:59:00.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenl8000s0wpb29idws2o","content":"<p>下载 hexo 镜像<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull neofelhz/hexo-docker</span><br></pre></td></tr></table></figure></p>\n<p>启动镜像并映射本地目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">    -v /home/runner/work/www/blog:/www/blog \\</span><br><span class=\"line\">    -w=&quot;/www/blog&quot; \\</span><br><span class=\"line\">    -p 4000:4000 \\</span><br><span class=\"line\">    --name hexo-test \\</span><br><span class=\"line\">    neofelhz/hexo-docker \\</span><br><span class=\"line\">    /bin/sh</span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it hexo-test /bin/sh</span><br></pre></td></tr></table></figure>\n<p>执行 <code>hexo init</code>，初始化时间较长，应该和网络有关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog # hexo init </span><br><span class=\"line\">INFO  Cloning hexo-starter to /www/blog</span><br><span class=\"line\">Cloning into &apos;/www/blog&apos;...</span><br><span class=\"line\">remote: Enumerating objects: 8, done.</span><br><span class=\"line\">remote: Counting objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131</span><br><span class=\"line\">Receiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (64/64), done.</span><br><span class=\"line\">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class=\"line\">Cloning into &apos;/www/blog/themes/landscape&apos;...</span><br><span class=\"line\">......</span><br><span class=\"line\">[3/4] Linking dependencies...</span><br><span class=\"line\">[4/4] Building fresh packages...</span><br><span class=\"line\">success Saved lockfile.</span><br><span class=\"line\">warning Your current version of Yarn is out of date. The latest version is &quot;1.19.1&quot; while you&apos;re on &quot;1.3.2&quot;.</span><br><span class=\"line\">info To upgrade, run the following command:</span><br><span class=\"line\">$ curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class=\"line\">Done in 112.25s.</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>初始化完成生成目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls -la</span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x   6 runner runner  4096 10月 23 14:33 .</span><br><span class=\"line\">drwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..</span><br><span class=\"line\">-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml</span><br><span class=\"line\">-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp</span><br><span class=\"line\">-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore</span><br><span class=\"line\">drwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules</span><br><span class=\"line\">-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json</span><br><span class=\"line\">drwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:18 source</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes</span><br><span class=\"line\">-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock</span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code> ，title 改为自己的网站标题，拷贝一个新的 md 文件到 <code>source/_posts</code>目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls</span><br><span class=\"line\">hello-world.md  microk8.md</span><br></pre></td></tr></table></figure>\n<p>执行<code>hexo s</code>启动服务:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source # hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:4000</code>，我们的 markdown 文章就以 html 格式展示出来了</p>\n<p><img src=\"/img/hexo/1.png\" alt=\"1.png\"></p>\n<p><strong>上传到 github.io </strong></p>\n<p>1.修改_config.yaml，采用 git 方式部署到自己的 github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/airzhe/airzhe.github.io</span><br></pre></td></tr></table></figure>\n<p>2.安装 <code>hexo-deploy-git</code> 模块，执行:  <code>npm install hexo-deployer-git --save</code>，之后执行 <code>hexo</code> 如果报错 <code>ERROR Local hexo not found ***</code>, 删除 <code>node_modules</code> 目录后，执行 <code>npm install</code></p>\n<p>3.执行 <code>hexo clean &amp;&amp; hexo deploy</code> 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！</p>\n<p><strong>小技巧</strong>:</p>\n<p>1.文章注释信息定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;MicroK8s&quot;</span><br><span class=\"line\">date: 2019-10-23 20:23:10</span><br><span class=\"line\">tags: [microk8s,k8s]</span><br><span class=\"line\">share: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>2.插入图片:  在 source 目录下新建 img 目录，markdown 中以<code>/img</code> 为根路径引入对应图片</p>\n<p>3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}</p>\n<p>4.跳过某个文件_config.yml里配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: [&quot;_posts/shazam.md&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>更多: <code>&lt;!-- more --&gt;</code></p>\n<p><strong>文档</strong><br><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo中文</a><br><a href=\"https://wxnacy.com/2018/01/12/hexo-specific-symbol/\" target=\"_blank\" rel=\"noopener\">hexo特殊符号转义</a></p>\n<p><strong>排错</strong></p>\n<ol>\n<li>今天遇到部署时总提示hexo 源码分支指向master分支错误<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者以下报错，删除 <code>.deploy_git</code> 目录，重试解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br></pre></td></tr></table></figure></p>\n<p>参考： <a href=\"https://www.cnblogs.com/hushuangpu/p/10316560.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hushuangpu/p/10316560.html</a></p>\n<ol start=\"2\">\n<li>切换网络hexo容器提示 github.com 无法访问，容器重启后正常</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>下载 hexo 镜像<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull neofelhz/hexo-docker</span><br></pre></td></tr></table></figure></p>\n<p>启动镜像并映射本地目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">    -v /home/runner/work/www/blog:/www/blog \\</span><br><span class=\"line\">    -w=&quot;/www/blog&quot; \\</span><br><span class=\"line\">    -p 4000:4000 \\</span><br><span class=\"line\">    --name hexo-test \\</span><br><span class=\"line\">    neofelhz/hexo-docker \\</span><br><span class=\"line\">    /bin/sh</span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it hexo-test /bin/sh</span><br></pre></td></tr></table></figure>\n<p>执行 <code>hexo init</code>，初始化时间较长，应该和网络有关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog # hexo init </span><br><span class=\"line\">INFO  Cloning hexo-starter to /www/blog</span><br><span class=\"line\">Cloning into &apos;/www/blog&apos;...</span><br><span class=\"line\">remote: Enumerating objects: 8, done.</span><br><span class=\"line\">remote: Counting objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (8/8), done.</span><br><span class=\"line\">remote: Total 139 (delta 2), reused 2 (delta 0), pack-reused 131</span><br><span class=\"line\">Receiving objects: 100% (139/139), 25.72 KiB | 21.00 KiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (64/64), done.</span><br><span class=\"line\">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</span><br><span class=\"line\">Cloning into &apos;/www/blog/themes/landscape&apos;...</span><br><span class=\"line\">......</span><br><span class=\"line\">[3/4] Linking dependencies...</span><br><span class=\"line\">[4/4] Building fresh packages...</span><br><span class=\"line\">success Saved lockfile.</span><br><span class=\"line\">warning Your current version of Yarn is out of date. The latest version is &quot;1.19.1&quot; while you&apos;re on &quot;1.3.2&quot;.</span><br><span class=\"line\">info To upgrade, run the following command:</span><br><span class=\"line\">$ curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class=\"line\">Done in 112.25s.</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>","more":"<p>初始化完成生成目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls -la</span><br><span class=\"line\">total 132</span><br><span class=\"line\">drwxr-xr-x   6 runner runner  4096 10月 23 14:33 .</span><br><span class=\"line\">drwxr-xr-x  13 runner runner  4096 10月 23 14:15 ..</span><br><span class=\"line\">-rw-r--r--   1 runner runner  2121 10月 23 14:18 _config.yml</span><br><span class=\"line\">-rw-r--r--   1 runner runner 12288 10月 23 14:33 ._config.yml.swp</span><br><span class=\"line\">-rw-r--r--   1 runner runner    65 10月 23 14:18 .gitignore</span><br><span class=\"line\">drwxr-xr-x 273 runner runner 12288 10月 23 14:27 node_modules</span><br><span class=\"line\">-rw-r--r--   1 runner runner   577 10月 23 14:18 package.json</span><br><span class=\"line\">drwxr-xr-x   2 runner runner  4096 10月 23 14:18 scaffolds</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:18 source</span><br><span class=\"line\">drwxr-xr-x   3 runner runner  4096 10月 23 14:24 themes</span><br><span class=\"line\">-rw-r--r--   1 runner runner 76595 10月 23 14:27 yarn.lock</span><br></pre></td></tr></table></figure>\n<p>修改<code>_config.yml</code> ，title 改为自己的网站标题，拷贝一个新的 md 文件到 <code>source/_posts</code>目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source/_posts # ls</span><br><span class=\"line\">hello-world.md  microk8.md</span><br></pre></td></tr></table></figure>\n<p>执行<code>hexo s</code>启动服务:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/www/blog/source # hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:4000</code>，我们的 markdown 文章就以 html 格式展示出来了</p>\n<p><img src=\"/img/hexo/1.png\" alt=\"1.png\"></p>\n<p><strong>上传到 github.io </strong></p>\n<p>1.修改_config.yaml，采用 git 方式部署到自己的 github.io</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/airzhe/airzhe.github.io</span><br></pre></td></tr></table></figure>\n<p>2.安装 <code>hexo-deploy-git</code> 模块，执行:  <code>npm install hexo-deployer-git --save</code>，之后执行 <code>hexo</code> 如果报错 <code>ERROR Local hexo not found ***</code>, 删除 <code>node_modules</code> 目录后，执行 <code>npm install</code></p>\n<p>3.执行 <code>hexo clean &amp;&amp; hexo deploy</code> 按提示配置 git-confg 信息后重试，输入 git 帐号和密码，部署成功！</p>\n<p><strong>小技巧</strong>:</p>\n<p>1.文章注释信息定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &quot;MicroK8s&quot;</span><br><span class=\"line\">date: 2019-10-23 20:23:10</span><br><span class=\"line\">tags: [microk8s,k8s]</span><br><span class=\"line\">share: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>2.插入图片:  在 source 目录下新建 img 目录，markdown 中以<code>/img</code> 为根路径引入对应图片</p>\n<p>3.站内链接: {&#37; post_link loki  使用Loki查询日志 &#37;}</p>\n<p>4.跳过某个文件_config.yml里配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skip_render: [&quot;_posts/shazam.md&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>更多: <code>&lt;!-- more --&gt;</code></p>\n<p><strong>文档</strong><br><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo中文</a><br><a href=\"https://wxnacy.com/2018/01/12/hexo-specific-symbol/\" target=\"_blank\" rel=\"noopener\">hexo特殊符号转义</a></p>\n<p><strong>排错</strong></p>\n<ol>\n<li>今天遇到部署时总提示hexo 源码分支指向master分支错误<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branch hexo set up to track remote branch master from https://github.com/airzhe/airzhe.github.io.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者以下报错，删除 <code>.deploy_git</code> 目录，重试解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.task.on.code (/www/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span><br></pre></td></tr></table></figure></p>\n<p>参考： <a href=\"https://www.cnblogs.com/hushuangpu/p/10316560.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hushuangpu/p/10316560.html</a></p>\n<ol start=\"2\">\n<li>切换网络hexo容器提示 github.com 无法访问，容器重启后正常</li>\n</ol>"},{"layout":"post","title":"jenkins pipeline 入门","description":"","date":"2019-02-12T00:00:00.000Z","comments":0,"share":true,"_content":"### Jenkins 特点：\n\n开源免费；\n跨平台，支持所有的平台；\nmaster/slave 支持分布式的 build；\nweb 形式的可视化的管理页面；\n\n\n\n### 安装\n```\ndocker pull jenkins/jenkins:2.138.2\ndocker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins\n\ndocker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2\n  \n```\n\n### 插件\n\n```\nGo\n\nCloudBees Docker Build and Publish:\n\n```\n\n### 全局工具配置\n\n```\nGo 安装\n安装目录：/var/jenkins_home/go\n```\n\n### 证书\n\n```\n配置访问git证书 SSH Username with private key\nharbor jenkins  密码\n```\n\n\n### 项目配置\n```\n构建环境\nSet up Go programming language tools\n构建：\nDocker Build and Publish\nDocker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375\n```\n\n\n### Pipeline\n\nPipeline的几个基本概念：\n\n- Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。\n- Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。\n- Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。\n\n```\npipeline {\n    agent { label 'master' }\n    tools {\n       maven 'maven_1'\n    }\n     stages {\n        stage('Build') {\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '*/master']], \n                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], \n                userRemoteConfigs: [[url: 'https://github.com/airzhe/demo-junit']]])\n                sh 'mvn -version'\n                sh 'mvn package -DskipTests'\n            }             \n        }\n        stage('Build docker image') {\n            steps {\n                //sh 'docker login --username airzhe  --password ×××'\n                sh 'docker build -t airzhe/test:${imageversion} .'\n                sh 'docker push airzhe/test:${imageversion}'\n            }             \n        }\n    }\n    post { \n            failure { \n                echo 'fail !'\n            }\n            success{\n                echo 'success !'\n            }\n    }\n}\n```\n\n### 参考\n\ngo 插件安装：  \nhttps://blog.csdn.net/aixiaoyang168/article/details/82965854\n\n","source":"_posts/jenkins-introduction.md","raw":"---\nlayout: post\ntitle: \"jenkins pipeline 入门\"\ndescription: \"\"\ndate: 2019-02-12\ntags: [jenkins,pipeline]\ncomments: false\nshare: true\n---\n### Jenkins 特点：\n\n开源免费；\n跨平台，支持所有的平台；\nmaster/slave 支持分布式的 build；\nweb 形式的可视化的管理页面；\n\n\n\n### 安装\n```\ndocker pull jenkins/jenkins:2.138.2\ndocker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins\n\ndocker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2\n  \n```\n\n### 插件\n\n```\nGo\n\nCloudBees Docker Build and Publish:\n\n```\n\n### 全局工具配置\n\n```\nGo 安装\n安装目录：/var/jenkins_home/go\n```\n\n### 证书\n\n```\n配置访问git证书 SSH Username with private key\nharbor jenkins  密码\n```\n\n\n### 项目配置\n```\n构建环境\nSet up Go programming language tools\n构建：\nDocker Build and Publish\nDocker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375\n```\n\n\n### Pipeline\n\nPipeline的几个基本概念：\n\n- Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。\n- Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。\n- Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。\n\n```\npipeline {\n    agent { label 'master' }\n    tools {\n       maven 'maven_1'\n    }\n     stages {\n        stage('Build') {\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '*/master']], \n                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], \n                userRemoteConfigs: [[url: 'https://github.com/airzhe/demo-junit']]])\n                sh 'mvn -version'\n                sh 'mvn package -DskipTests'\n            }             \n        }\n        stage('Build docker image') {\n            steps {\n                //sh 'docker login --username airzhe  --password ×××'\n                sh 'docker build -t airzhe/test:${imageversion} .'\n                sh 'docker push airzhe/test:${imageversion}'\n            }             \n        }\n    }\n    post { \n            failure { \n                echo 'fail !'\n            }\n            success{\n                echo 'success !'\n            }\n    }\n}\n```\n\n### 参考\n\ngo 插件安装：  \nhttps://blog.csdn.net/aixiaoyang168/article/details/82965854\n\n","slug":"jenkins-introduction","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ckj9uenla000t0wpbb2vdeueg","content":"<h3 id=\"Jenkins-特点：\"><a href=\"#Jenkins-特点：\" class=\"headerlink\" title=\"Jenkins 特点：\"></a>Jenkins 特点：</h3><p>开源免费；<br>跨平台，支持所有的平台；<br>master/slave 支持分布式的 build；<br>web 形式的可视化的管理页面；</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:2.138.2</span><br><span class=\"line\">docker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go</span><br><span class=\"line\"></span><br><span class=\"line\">CloudBees Docker Build and Publish:</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a>全局工具配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go 安装</span><br><span class=\"line\">安装目录：/var/jenkins_home/go</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置访问git证书 SSH Username with private key</span><br><span class=\"line\">harbor jenkins  密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建环境</span><br><span class=\"line\">Set up Go programming language tools</span><br><span class=\"line\">构建：</span><br><span class=\"line\">Docker Build and Publish</span><br><span class=\"line\">Docker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>Pipeline的几个基本概念：</p>\n<ul>\n<li>Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。</li>\n<li>Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。</li>\n<li>Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label &apos;master&apos; &#125;</span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">       maven &apos;maven_1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     stages &#123;</span><br><span class=\"line\">        stage(&apos;Build&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], </span><br><span class=\"line\">                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], </span><br><span class=\"line\">                userRemoteConfigs: [[url: &apos;https://github.com/airzhe/demo-junit&apos;]]])</span><br><span class=\"line\">                sh &apos;mvn -version&apos;</span><br><span class=\"line\">                sh &apos;mvn package -DskipTests&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(&apos;Build docker image&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                //sh &apos;docker login --username airzhe  --password ×××&apos;</span><br><span class=\"line\">                sh &apos;docker build -t airzhe/test:$&#123;imageversion&#125; .&apos;</span><br><span class=\"line\">                sh &apos;docker push airzhe/test:$&#123;imageversion&#125;&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123; </span><br><span class=\"line\">            failure &#123; </span><br><span class=\"line\">                echo &apos;fail !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            success&#123;</span><br><span class=\"line\">                echo &apos;success !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>go 插件安装：<br><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/82965854\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aixiaoyang168/article/details/82965854</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Jenkins-特点：\"><a href=\"#Jenkins-特点：\" class=\"headerlink\" title=\"Jenkins 特点：\"></a>Jenkins 特点：</h3><p>开源免费；<br>跨平台，支持所有的平台；<br>master/slave 支持分布式的 build；<br>web 形式的可视化的管理页面；</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:2.138.2</span><br><span class=\"line\">docker run -p 9090:8080 -p 50000:50000 -v /User/user/jenkins:/var/jenkins_home jenkins</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --rm --name jenkins -p 9090:8080 -p 50000:50000 --user root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /Users/user/jenkins:/var/jenkins_home jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go</span><br><span class=\"line\"></span><br><span class=\"line\">CloudBees Docker Build and Publish:</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a>全局工具配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go 安装</span><br><span class=\"line\">安装目录：/var/jenkins_home/go</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置访问git证书 SSH Username with private key</span><br><span class=\"line\">harbor jenkins  密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构建环境</span><br><span class=\"line\">Set up Go programming language tools</span><br><span class=\"line\">构建：</span><br><span class=\"line\">Docker Build and Publish</span><br><span class=\"line\">Docker Host URI 配置 unix:///var/run/docker.sock 或者 tcp://127.0.0.1:2375</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h3><p>Pipeline的几个基本概念：</p>\n<ul>\n<li>Stage: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。</li>\n<li>Node: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。</li>\n<li>Step: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label &apos;master&apos; &#125;</span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">       maven &apos;maven_1&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     stages &#123;</span><br><span class=\"line\">        stage(&apos;Build&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], </span><br><span class=\"line\">                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], </span><br><span class=\"line\">                userRemoteConfigs: [[url: &apos;https://github.com/airzhe/demo-junit&apos;]]])</span><br><span class=\"line\">                sh &apos;mvn -version&apos;</span><br><span class=\"line\">                sh &apos;mvn package -DskipTests&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(&apos;Build docker image&apos;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                //sh &apos;docker login --username airzhe  --password ×××&apos;</span><br><span class=\"line\">                sh &apos;docker build -t airzhe/test:$&#123;imageversion&#125; .&apos;</span><br><span class=\"line\">                sh &apos;docker push airzhe/test:$&#123;imageversion&#125;&apos;</span><br><span class=\"line\">            &#125;             </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123; </span><br><span class=\"line\">            failure &#123; </span><br><span class=\"line\">                echo &apos;fail !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            success&#123;</span><br><span class=\"line\">                echo &apos;success !&apos;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>go 插件安装：<br><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/82965854\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/aixiaoyang168/article/details/82965854</a></p>\n"},{"layout":"post","title":"jenkins k8s pipeline","description":"","date":"2019-10-30T00:00:00.000Z","comments":0,"share":true,"_content":"**docker 启动脚本**\n\n```sh\ndocker run -d \\\n    -p 8090:8080 -p 50000:50000  \\\n    -u root \\\n    -v /root/jenkins:/var/jenkins_home \\\n    -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $(which docker):/usr/bin/docker \\\n    --name jenkins jenkinszh/jenkins-zh:latest\n```\n\n**pipeline**\n\n```sh\npipeline {\n    agent any \n    environment {\n    \tAPP_NAME = \"api-monitor-new\"\n        GIT_BRANCH = \"test123\"\n        GIT_COMMIT_ID = \"test123456\"\n    \tCHART_NAME = \"apple/api-monitor-new\"\n        CHART_VERSION = 3.0\n        NEW_HARBOR_HOST = \"harbor.apple.net\"\n        BUILD_IMAGES_NAME = \"${NEW_HARBOR_HOST}/php/${APP_NAME}:${GIT_BRANCH}\"\n        KUBE_CONFIG = credentials(\"156485be-dbb8-4f8c-b3a2-15f3535049ad\")\n        NAMESPACE = \"default\"   \n    }\n\n    stages {\n        stage('Build') { \n            agent {\n                docker { image 'harbor.apple.net/php/golang:latest' }\n            }\n            steps { \n                sh 'echo Build stage ...' \n                git credentialsId: '1', url: 'http://gitlaball.apple.net/apple/middle/soa/api-monitor-new.git'\n                sh 'rm -rf ./output'\n                sh 'export CGO_ENABLED=0 ;chmod +x ./build.sh ; ./build.sh'\n                sh 'cd ./output && mkdir ./app && tar -zxvf *.gz -C ./app'\n            }\n        }\n        stage('Build Image') { \n            agent {\n                docker { image 'harbor.apple.net/php/docker:stable' }\n            }\n            steps { \n                withCredentials([usernamePassword(credentialsId: 'a00b4d01-c2e7-49af-9b1f-fcc382116911', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PWD')]) {\n                    sh 'docker login -u \"${HARBOR_USER}\" -p \"${HARBOR_PWD}\" \"${NEW_HARBOR_HOST}\"'\n                }\n                sh 'cd ./output/app'\n                sh 'echo Dockerfile01 > .dockerignore'\n                sh 'echo FROM harbor.apple.net/php/alpine > Dockerfile01 && echo COPY . /app >> Dockerfile01'\n                sh 'docker build -t \"$BUILD_IMAGES_NAME\"  -f Dockerfile01 .'\n                sh 'docker push \"$BUILD_IMAGES_NAME\"'\n                sh 'docker images'\n            }\n        }\n        stage('Deploy') {\n             agent {\n                docker { image 'harbor.apple.net/php/helm:3.0-rc2' }\n            }\n            steps { \n                sh 'mkdir -p ~/.kube && cat ${KUBE_CONFIG} > ~/.kube/config'\n                sh 'helm repo add apple https://harbor.apple.net/chartrepo/php'\n                sh 'helm repo update'\n                withCredentials([usernamePassword(credentialsId: 'a00b4d01-c2e7-49af-9b1f-fcc382116911', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PWD')]) {\n                    sh 'helm upgrade ${APP_NAME} --install \\\n                    --set image.tag=${APP_TAG} \\\n                    --set gitBranch=${GIT_BRANCH} \\\n                    --set commitId=${GIT_COMMIT_ID} \\\n                    --username ${HARBOR_USER} --password ${HARBOR_PWD} \\\n                    --set nodeSelector.role=\"node\" \\\n                    --force --wait --atomic --debug \\\n                    --namespace=${NAMESPACE} \\\n                    ${CHART_NAME} --version ${CHART_VERSION} '\n                    sh 'echo \"soa.cicd.${APP_NAME}.status $? `date +%s`\" | nc 10.2.4.35 32003'\n                }\n                sh 'helm list'\n            }\n        }\n    }\n  }\n```\n\n\n\n参考：\n\n[Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践](http://blog.jboost.cn/k8s3-cd.html)\n\n[Jenkins CI/CD 集成 Git Secrets](https://www.kubernetes.org.cn/6158.html)\n\n[Jenkins 凭证管理 - 看这一篇就够了~](https://www.cnblogs.com/FLY_DREAM/p/13888423.html)\n\n[Jenkins pipeline 隐藏密码](https://blog.csdn.net/catoop/article/details/100153791)","source":"_posts/jenkins-pipeline.md","raw":"---\nlayout: post\ntitle: \"jenkins k8s pipeline\"\ndescription: \"\"\ndate: 2019-10-30\ntags: [jenkins,pipeline]\ncomments: false\nshare: true\n---\n**docker 启动脚本**\n\n```sh\ndocker run -d \\\n    -p 8090:8080 -p 50000:50000  \\\n    -u root \\\n    -v /root/jenkins:/var/jenkins_home \\\n    -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v $(which docker):/usr/bin/docker \\\n    --name jenkins jenkinszh/jenkins-zh:latest\n```\n\n**pipeline**\n\n```sh\npipeline {\n    agent any \n    environment {\n    \tAPP_NAME = \"api-monitor-new\"\n        GIT_BRANCH = \"test123\"\n        GIT_COMMIT_ID = \"test123456\"\n    \tCHART_NAME = \"apple/api-monitor-new\"\n        CHART_VERSION = 3.0\n        NEW_HARBOR_HOST = \"harbor.apple.net\"\n        BUILD_IMAGES_NAME = \"${NEW_HARBOR_HOST}/php/${APP_NAME}:${GIT_BRANCH}\"\n        KUBE_CONFIG = credentials(\"156485be-dbb8-4f8c-b3a2-15f3535049ad\")\n        NAMESPACE = \"default\"   \n    }\n\n    stages {\n        stage('Build') { \n            agent {\n                docker { image 'harbor.apple.net/php/golang:latest' }\n            }\n            steps { \n                sh 'echo Build stage ...' \n                git credentialsId: '1', url: 'http://gitlaball.apple.net/apple/middle/soa/api-monitor-new.git'\n                sh 'rm -rf ./output'\n                sh 'export CGO_ENABLED=0 ;chmod +x ./build.sh ; ./build.sh'\n                sh 'cd ./output && mkdir ./app && tar -zxvf *.gz -C ./app'\n            }\n        }\n        stage('Build Image') { \n            agent {\n                docker { image 'harbor.apple.net/php/docker:stable' }\n            }\n            steps { \n                withCredentials([usernamePassword(credentialsId: 'a00b4d01-c2e7-49af-9b1f-fcc382116911', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PWD')]) {\n                    sh 'docker login -u \"${HARBOR_USER}\" -p \"${HARBOR_PWD}\" \"${NEW_HARBOR_HOST}\"'\n                }\n                sh 'cd ./output/app'\n                sh 'echo Dockerfile01 > .dockerignore'\n                sh 'echo FROM harbor.apple.net/php/alpine > Dockerfile01 && echo COPY . /app >> Dockerfile01'\n                sh 'docker build -t \"$BUILD_IMAGES_NAME\"  -f Dockerfile01 .'\n                sh 'docker push \"$BUILD_IMAGES_NAME\"'\n                sh 'docker images'\n            }\n        }\n        stage('Deploy') {\n             agent {\n                docker { image 'harbor.apple.net/php/helm:3.0-rc2' }\n            }\n            steps { \n                sh 'mkdir -p ~/.kube && cat ${KUBE_CONFIG} > ~/.kube/config'\n                sh 'helm repo add apple https://harbor.apple.net/chartrepo/php'\n                sh 'helm repo update'\n                withCredentials([usernamePassword(credentialsId: 'a00b4d01-c2e7-49af-9b1f-fcc382116911', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PWD')]) {\n                    sh 'helm upgrade ${APP_NAME} --install \\\n                    --set image.tag=${APP_TAG} \\\n                    --set gitBranch=${GIT_BRANCH} \\\n                    --set commitId=${GIT_COMMIT_ID} \\\n                    --username ${HARBOR_USER} --password ${HARBOR_PWD} \\\n                    --set nodeSelector.role=\"node\" \\\n                    --force --wait --atomic --debug \\\n                    --namespace=${NAMESPACE} \\\n                    ${CHART_NAME} --version ${CHART_VERSION} '\n                    sh 'echo \"soa.cicd.${APP_NAME}.status $? `date +%s`\" | nc 10.2.4.35 32003'\n                }\n                sh 'helm list'\n            }\n        }\n    }\n  }\n```\n\n\n\n参考：\n\n[Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践](http://blog.jboost.cn/k8s3-cd.html)\n\n[Jenkins CI/CD 集成 Git Secrets](https://www.kubernetes.org.cn/6158.html)\n\n[Jenkins 凭证管理 - 看这一篇就够了~](https://www.cnblogs.com/FLY_DREAM/p/13888423.html)\n\n[Jenkins pipeline 隐藏密码](https://blog.csdn.net/catoop/article/details/100153791)","slug":"jenkins-pipeline","published":1,"updated":"2020-11-06T03:07:19.265Z","photos":[],"link":"","_id":"ckj9uenlc000u0wpbz5d741yz","content":"<p><strong>docker 启动脚本</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    -p 8090:8080 -p 50000:50000  \\</span><br><span class=\"line\">    -u root \\</span><br><span class=\"line\">    -v /root/jenkins:/var/jenkins_home \\</span><br><span class=\"line\">    -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -v $(<span class=\"built_in\">which</span> docker):/usr/bin/docker \\</span><br><span class=\"line\">    --name jenkins jenkinszh/jenkins-zh:latest</span><br></pre></td></tr></table></figure>\n<p><strong>pipeline</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any </span><br><span class=\"line\">    environment &#123;</span><br><span class=\"line\">    \tAPP_NAME = <span class=\"string\">\"api-monitor-new\"</span></span><br><span class=\"line\">        GIT_BRANCH = <span class=\"string\">\"test123\"</span></span><br><span class=\"line\">        GIT_COMMIT_ID = <span class=\"string\">\"test123456\"</span></span><br><span class=\"line\">    \tCHART_NAME = <span class=\"string\">\"apple/api-monitor-new\"</span></span><br><span class=\"line\">        CHART_VERSION = 3.0</span><br><span class=\"line\">        NEW_HARBOR_HOST = <span class=\"string\">\"harbor.apple.net\"</span></span><br><span class=\"line\">        BUILD_IMAGES_NAME = <span class=\"string\">\"<span class=\"variable\">$&#123;NEW_HARBOR_HOST&#125;</span>/php/<span class=\"variable\">$&#123;APP_NAME&#125;</span>:<span class=\"variable\">$&#123;GIT_BRANCH&#125;</span>\"</span></span><br><span class=\"line\">        KUBE_CONFIG = credentials(<span class=\"string\">\"156485be-dbb8-4f8c-b3a2-15f3535049ad\"</span>)</span><br><span class=\"line\">        NAMESPACE = <span class=\"string\">\"default\"</span>   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">'Build'</span>) &#123; </span><br><span class=\"line\">            agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/golang:latest'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                sh <span class=\"string\">'echo Build stage ...'</span> </span><br><span class=\"line\">                git credentialsId: <span class=\"string\">'1'</span>, url: <span class=\"string\">'http://gitlaball.apple.net/apple/middle/soa/api-monitor-new.git'</span></span><br><span class=\"line\">                sh <span class=\"string\">'rm -rf ./output'</span></span><br><span class=\"line\">                sh <span class=\"string\">'export CGO_ENABLED=0 ;chmod +x ./build.sh ; ./build.sh'</span></span><br><span class=\"line\">                sh <span class=\"string\">'cd ./output &amp;&amp; mkdir ./app &amp;&amp; tar -zxvf *.gz -C ./app'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'Build Image'</span>) &#123; </span><br><span class=\"line\">            agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/docker:stable'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                withCredentials([usernamePassword(credentialsId: <span class=\"string\">'a00b4d01-c2e7-49af-9b1f-fcc382116911'</span>, usernameVariable: <span class=\"string\">'HARBOR_USER'</span>, passwordVariable: <span class=\"string\">'HARBOR_PWD'</span>)]) &#123;</span><br><span class=\"line\">                    sh <span class=\"string\">'docker login -u \"$&#123;HARBOR_USER&#125;\" -p \"$&#123;HARBOR_PWD&#125;\" \"$&#123;NEW_HARBOR_HOST&#125;\"'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sh <span class=\"string\">'cd ./output/app'</span></span><br><span class=\"line\">                sh <span class=\"string\">'echo Dockerfile01 &gt; .dockerignore'</span></span><br><span class=\"line\">                sh <span class=\"string\">'echo FROM harbor.apple.net/php/alpine &gt; Dockerfile01 &amp;&amp; echo COPY . /app &gt;&gt; Dockerfile01'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker build -t \"$BUILD_IMAGES_NAME\"  -f Dockerfile01 .'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker push \"$BUILD_IMAGES_NAME\"'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker images'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">             agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/helm:3.0-rc2'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                sh <span class=\"string\">'mkdir -p ~/.kube &amp;&amp; cat $&#123;KUBE_CONFIG&#125; &gt; ~/.kube/config'</span></span><br><span class=\"line\">                sh <span class=\"string\">'helm repo add apple https://harbor.apple.net/chartrepo/php'</span></span><br><span class=\"line\">                sh <span class=\"string\">'helm repo update'</span></span><br><span class=\"line\">                withCredentials([usernamePassword(credentialsId: <span class=\"string\">'a00b4d01-c2e7-49af-9b1f-fcc382116911'</span>, usernameVariable: <span class=\"string\">'HARBOR_USER'</span>, passwordVariable: <span class=\"string\">'HARBOR_PWD'</span>)]) &#123;</span><br><span class=\"line\">                    sh <span class=\"string\">'helm upgrade $&#123;APP_NAME&#125; --install \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set image.tag=$&#123;APP_TAG&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set gitBranch=$&#123;GIT_BRANCH&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set commitId=$&#123;GIT_COMMIT_ID&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --username $&#123;HARBOR_USER&#125; --password $&#123;HARBOR_PWD&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set nodeSelector.role=\"node\" \\</span></span><br><span class=\"line\"><span class=\"string\">                    --force --wait --atomic --debug \\</span></span><br><span class=\"line\"><span class=\"string\">                    --namespace=$&#123;NAMESPACE&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    $&#123;CHART_NAME&#125; --version $&#123;CHART_VERSION&#125; '</span></span><br><span class=\"line\">                    sh <span class=\"string\">'echo \"soa.cicd.$&#123;APP_NAME&#125;.status $? `date +%s`\" | nc 10.2.4.35 32003'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sh <span class=\"string\">'helm list'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"http://blog.jboost.cn/k8s3-cd.html\" target=\"_blank\" rel=\"noopener\">Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践</a></p>\n<p><a href=\"https://www.kubernetes.org.cn/6158.html\" target=\"_blank\" rel=\"noopener\">Jenkins CI/CD 集成 Git Secrets</a></p>\n<p><a href=\"https://www.cnblogs.com/FLY_DREAM/p/13888423.html\" target=\"_blank\" rel=\"noopener\">Jenkins 凭证管理 - 看这一篇就够了~</a></p>\n<p><a href=\"https://blog.csdn.net/catoop/article/details/100153791\" target=\"_blank\" rel=\"noopener\">Jenkins pipeline 隐藏密码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>docker 启动脚本</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    -p 8090:8080 -p 50000:50000  \\</span><br><span class=\"line\">    -u root \\</span><br><span class=\"line\">    -v /root/jenkins:/var/jenkins_home \\</span><br><span class=\"line\">    -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -v $(<span class=\"built_in\">which</span> docker):/usr/bin/docker \\</span><br><span class=\"line\">    --name jenkins jenkinszh/jenkins-zh:latest</span><br></pre></td></tr></table></figure>\n<p><strong>pipeline</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any </span><br><span class=\"line\">    environment &#123;</span><br><span class=\"line\">    \tAPP_NAME = <span class=\"string\">\"api-monitor-new\"</span></span><br><span class=\"line\">        GIT_BRANCH = <span class=\"string\">\"test123\"</span></span><br><span class=\"line\">        GIT_COMMIT_ID = <span class=\"string\">\"test123456\"</span></span><br><span class=\"line\">    \tCHART_NAME = <span class=\"string\">\"apple/api-monitor-new\"</span></span><br><span class=\"line\">        CHART_VERSION = 3.0</span><br><span class=\"line\">        NEW_HARBOR_HOST = <span class=\"string\">\"harbor.apple.net\"</span></span><br><span class=\"line\">        BUILD_IMAGES_NAME = <span class=\"string\">\"<span class=\"variable\">$&#123;NEW_HARBOR_HOST&#125;</span>/php/<span class=\"variable\">$&#123;APP_NAME&#125;</span>:<span class=\"variable\">$&#123;GIT_BRANCH&#125;</span>\"</span></span><br><span class=\"line\">        KUBE_CONFIG = credentials(<span class=\"string\">\"156485be-dbb8-4f8c-b3a2-15f3535049ad\"</span>)</span><br><span class=\"line\">        NAMESPACE = <span class=\"string\">\"default\"</span>   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">'Build'</span>) &#123; </span><br><span class=\"line\">            agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/golang:latest'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                sh <span class=\"string\">'echo Build stage ...'</span> </span><br><span class=\"line\">                git credentialsId: <span class=\"string\">'1'</span>, url: <span class=\"string\">'http://gitlaball.apple.net/apple/middle/soa/api-monitor-new.git'</span></span><br><span class=\"line\">                sh <span class=\"string\">'rm -rf ./output'</span></span><br><span class=\"line\">                sh <span class=\"string\">'export CGO_ENABLED=0 ;chmod +x ./build.sh ; ./build.sh'</span></span><br><span class=\"line\">                sh <span class=\"string\">'cd ./output &amp;&amp; mkdir ./app &amp;&amp; tar -zxvf *.gz -C ./app'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'Build Image'</span>) &#123; </span><br><span class=\"line\">            agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/docker:stable'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                withCredentials([usernamePassword(credentialsId: <span class=\"string\">'a00b4d01-c2e7-49af-9b1f-fcc382116911'</span>, usernameVariable: <span class=\"string\">'HARBOR_USER'</span>, passwordVariable: <span class=\"string\">'HARBOR_PWD'</span>)]) &#123;</span><br><span class=\"line\">                    sh <span class=\"string\">'docker login -u \"$&#123;HARBOR_USER&#125;\" -p \"$&#123;HARBOR_PWD&#125;\" \"$&#123;NEW_HARBOR_HOST&#125;\"'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sh <span class=\"string\">'cd ./output/app'</span></span><br><span class=\"line\">                sh <span class=\"string\">'echo Dockerfile01 &gt; .dockerignore'</span></span><br><span class=\"line\">                sh <span class=\"string\">'echo FROM harbor.apple.net/php/alpine &gt; Dockerfile01 &amp;&amp; echo COPY . /app &gt;&gt; Dockerfile01'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker build -t \"$BUILD_IMAGES_NAME\"  -f Dockerfile01 .'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker push \"$BUILD_IMAGES_NAME\"'</span></span><br><span class=\"line\">                sh <span class=\"string\">'docker images'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">             agent &#123;</span><br><span class=\"line\">                docker &#123; image <span class=\"string\">'harbor.apple.net/php/helm:3.0-rc2'</span> &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            steps &#123; </span><br><span class=\"line\">                sh <span class=\"string\">'mkdir -p ~/.kube &amp;&amp; cat $&#123;KUBE_CONFIG&#125; &gt; ~/.kube/config'</span></span><br><span class=\"line\">                sh <span class=\"string\">'helm repo add apple https://harbor.apple.net/chartrepo/php'</span></span><br><span class=\"line\">                sh <span class=\"string\">'helm repo update'</span></span><br><span class=\"line\">                withCredentials([usernamePassword(credentialsId: <span class=\"string\">'a00b4d01-c2e7-49af-9b1f-fcc382116911'</span>, usernameVariable: <span class=\"string\">'HARBOR_USER'</span>, passwordVariable: <span class=\"string\">'HARBOR_PWD'</span>)]) &#123;</span><br><span class=\"line\">                    sh <span class=\"string\">'helm upgrade $&#123;APP_NAME&#125; --install \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set image.tag=$&#123;APP_TAG&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set gitBranch=$&#123;GIT_BRANCH&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set commitId=$&#123;GIT_COMMIT_ID&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --username $&#123;HARBOR_USER&#125; --password $&#123;HARBOR_PWD&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    --set nodeSelector.role=\"node\" \\</span></span><br><span class=\"line\"><span class=\"string\">                    --force --wait --atomic --debug \\</span></span><br><span class=\"line\"><span class=\"string\">                    --namespace=$&#123;NAMESPACE&#125; \\</span></span><br><span class=\"line\"><span class=\"string\">                    $&#123;CHART_NAME&#125; --version $&#123;CHART_VERSION&#125; '</span></span><br><span class=\"line\">                    sh <span class=\"string\">'echo \"soa.cicd.$&#123;APP_NAME&#125;.status $? `date +%s`\" | nc 10.2.4.35 32003'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sh <span class=\"string\">'helm list'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"http://blog.jboost.cn/k8s3-cd.html\" target=\"_blank\" rel=\"noopener\">Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践</a></p>\n<p><a href=\"https://www.kubernetes.org.cn/6158.html\" target=\"_blank\" rel=\"noopener\">Jenkins CI/CD 集成 Git Secrets</a></p>\n<p><a href=\"https://www.cnblogs.com/FLY_DREAM/p/13888423.html\" target=\"_blank\" rel=\"noopener\">Jenkins 凭证管理 - 看这一篇就够了~</a></p>\n<p><a href=\"https://blog.csdn.net/catoop/article/details/100153791\" target=\"_blank\" rel=\"noopener\">Jenkins pipeline 隐藏密码</a></p>\n"},{"title":"K3S","description":"","date":"2020-10-14T11:45:10.000Z","comments":0,"share":true,"_content":"\n\n**在线安装**\n\n```bash\ncurl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -\n```\n\n**离线安装**\n\n```\n#下载离线镜像\nwget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s-airgap-images-amd64.tar\ndocker load < k3s-airgap-images-amd64.tar\n\n#下载k3s 可执行文件\nwget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s\n\n#下载 install.sh\nhttps://github.com/rancher/k3s/blob/master/install.sh\n\nsudo mkdir -p /var/lib/rancher/k3s/agent/images/\n#下载的离线镜像包复制，格式如下\n#sudo cp ./k3s-airgap-images-$ARCH.tar /var/lib/rancher/k3s/agent/images/\nsudo cp ./k3s-airgap-images-amd64.tar /var/lib/rancher/k3s/agent/images/\n\n#授权\nchmod 755 k3s\n#下载的K3S的bin包，格式如下\nsudo cp ./k3s /usr/local/bin && sudo chmod 755 /usr/local/bin/k3s\n\n#授权\nchmod +x ./install.sh\n#跳过镜像下载，使用docker作为运行时\nINSTALL_K3S_SKIP_DOWNLOAD=true  INSTALL_K3S_EXEC=\"--docker\" ./install.sh\n\n# 可能会遇到 k3s.server 换行引起的启动失败问题，修复后systemctl reload && systemctl start k3s\n```\n\n**设置`kubeconfig`文件**\n\n```bash\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\nchown runner:runner -R /etc/rancher/k3s/k3s.yaml\nkubectl get pods --all-namespaces\nhelm ls --all-namespaces\n```\n\n**网络**\n\n支持创建 [LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) 类型的 Service\n\n**重启**\n\nsystemd 下手动重启：\n\n```sh\nsudo systemctl restart k3s\n```\n\nopenrc 下手动重启：\n\n```sh\nsudo service k3s restart\n```\n\n\n\n k3s默认使用containerd, 两者命令对比表：\n\n| id   | containerd 命令                       | docker 命令                           | 备注                      |\n| ---- | ------------------------------------- | ------------------------------------- | ------------------------- |\n| 1    | ctr image ls                          | docker images                         | 获取image信息             |\n| 2    | ctr image pull nginx                  | docker pull nginx                     | pull 一个nginx的image     |\n| 3    | ctr image tag nginx nginx-test        | docker tag nginx nginx-test           | tag 一个nginx的image      |\n| 4    | ctr image push nginx-test             | docker push nginx-test                | push nginx-test的image    |\n| 5    | ctr image pull nginx                  | docker pull nginx                     | pull 一个nginx的image     |\n| 6    | ctr image import nginx.tar            | docker load<nginx.tar.gz              | 导入本地镜像ctr不支持压缩 |\n| 7    | ctr run -d --env 111 nginx-test nginx | docker run -d --name=nginx nginx-test | 运行的一个容器            |\n| 8    | ctr task ls                           | docker ps                             | 查看运行的容器            |\n\n\n\n参考:\n\nhttps://docs.rancher.cn/k3s/\n\n[k3s containerd和docker 命令对比](https://www.cnblogs.com/already/p/12691327.html)\n\n[离线安装K3S](https://www.cnblogs.com/cooper-73/p/12923714.html)\n\n[离线安装K3S Server](https://www.cnblogs.com/weschen/p/12666486.html)\n\n","source":"_posts/k3s.md","raw":"---\ntitle: \"K3S\"\ndescription: \"\"\ndate: 2020-10-14 11:45:10\ntags: [containerd,k3s]\ncomments: false\nshare: true\n---\n\n\n**在线安装**\n\n```bash\ncurl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -\n```\n\n**离线安装**\n\n```\n#下载离线镜像\nwget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s-airgap-images-amd64.tar\ndocker load < k3s-airgap-images-amd64.tar\n\n#下载k3s 可执行文件\nwget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s\n\n#下载 install.sh\nhttps://github.com/rancher/k3s/blob/master/install.sh\n\nsudo mkdir -p /var/lib/rancher/k3s/agent/images/\n#下载的离线镜像包复制，格式如下\n#sudo cp ./k3s-airgap-images-$ARCH.tar /var/lib/rancher/k3s/agent/images/\nsudo cp ./k3s-airgap-images-amd64.tar /var/lib/rancher/k3s/agent/images/\n\n#授权\nchmod 755 k3s\n#下载的K3S的bin包，格式如下\nsudo cp ./k3s /usr/local/bin && sudo chmod 755 /usr/local/bin/k3s\n\n#授权\nchmod +x ./install.sh\n#跳过镜像下载，使用docker作为运行时\nINSTALL_K3S_SKIP_DOWNLOAD=true  INSTALL_K3S_EXEC=\"--docker\" ./install.sh\n\n# 可能会遇到 k3s.server 换行引起的启动失败问题，修复后systemctl reload && systemctl start k3s\n```\n\n**设置`kubeconfig`文件**\n\n```bash\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\nchown runner:runner -R /etc/rancher/k3s/k3s.yaml\nkubectl get pods --all-namespaces\nhelm ls --all-namespaces\n```\n\n**网络**\n\n支持创建 [LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) 类型的 Service\n\n**重启**\n\nsystemd 下手动重启：\n\n```sh\nsudo systemctl restart k3s\n```\n\nopenrc 下手动重启：\n\n```sh\nsudo service k3s restart\n```\n\n\n\n k3s默认使用containerd, 两者命令对比表：\n\n| id   | containerd 命令                       | docker 命令                           | 备注                      |\n| ---- | ------------------------------------- | ------------------------------------- | ------------------------- |\n| 1    | ctr image ls                          | docker images                         | 获取image信息             |\n| 2    | ctr image pull nginx                  | docker pull nginx                     | pull 一个nginx的image     |\n| 3    | ctr image tag nginx nginx-test        | docker tag nginx nginx-test           | tag 一个nginx的image      |\n| 4    | ctr image push nginx-test             | docker push nginx-test                | push nginx-test的image    |\n| 5    | ctr image pull nginx                  | docker pull nginx                     | pull 一个nginx的image     |\n| 6    | ctr image import nginx.tar            | docker load<nginx.tar.gz              | 导入本地镜像ctr不支持压缩 |\n| 7    | ctr run -d --env 111 nginx-test nginx | docker run -d --name=nginx nginx-test | 运行的一个容器            |\n| 8    | ctr task ls                           | docker ps                             | 查看运行的容器            |\n\n\n\n参考:\n\nhttps://docs.rancher.cn/k3s/\n\n[k3s containerd和docker 命令对比](https://www.cnblogs.com/already/p/12691327.html)\n\n[离线安装K3S](https://www.cnblogs.com/cooper-73/p/12923714.html)\n\n[离线安装K3S Server](https://www.cnblogs.com/weschen/p/12666486.html)\n\n","slug":"k3s","published":1,"updated":"2020-10-14T09:20:05.101Z","layout":"post","photos":[],"link":"","_id":"ckj9uenle000x0wpbdsiqalgl","content":"<p><strong>在线安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>\n<p><strong>离线安装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载离线镜像</span><br><span class=\"line\">wget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s-airgap-images-amd64.tar</span><br><span class=\"line\">docker load &lt; k3s-airgap-images-amd64.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#下载k3s 可执行文件</span><br><span class=\"line\">wget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s</span><br><span class=\"line\"></span><br><span class=\"line\">#下载 install.sh</span><br><span class=\"line\">https://github.com/rancher/k3s/blob/master/install.sh</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mkdir -p /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\">#下载的离线镜像包复制，格式如下</span><br><span class=\"line\">#sudo cp ./k3s-airgap-images-$ARCH.tar /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\">sudo cp ./k3s-airgap-images-amd64.tar /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\"></span><br><span class=\"line\">#授权</span><br><span class=\"line\">chmod 755 k3s</span><br><span class=\"line\">#下载的K3S的bin包，格式如下</span><br><span class=\"line\">sudo cp ./k3s /usr/local/bin &amp;&amp; sudo chmod 755 /usr/local/bin/k3s</span><br><span class=\"line\"></span><br><span class=\"line\">#授权</span><br><span class=\"line\">chmod +x ./install.sh</span><br><span class=\"line\">#跳过镜像下载，使用docker作为运行时</span><br><span class=\"line\">INSTALL_K3S_SKIP_DOWNLOAD=true  INSTALL_K3S_EXEC=&quot;--docker&quot; ./install.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 可能会遇到 k3s.server 换行引起的启动失败问题，修复后systemctl reload &amp;&amp; systemctl start k3s</span><br></pre></td></tr></table></figure>\n<p><strong>设置<code>kubeconfig</code>文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br><span class=\"line\">chown runner:runner -R /etc/rancher/k3s/k3s.yaml</span><br><span class=\"line\">kubectl get pods --all-namespaces</span><br><span class=\"line\">helm ls --all-namespaces</span><br></pre></td></tr></table></figure>\n<p><strong>网络</strong></p>\n<p>支持创建 <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\" target=\"_blank\" rel=\"noopener\">LoadBalancer</a> 类型的 Service</p>\n<p><strong>重启</strong></p>\n<p>systemd 下手动重启：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart k3s</span><br></pre></td></tr></table></figure>\n<p>openrc 下手动重启：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service k3s restart</span><br></pre></td></tr></table></figure>\n<p> k3s默认使用containerd, 两者命令对比表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>containerd 命令</th>\n<th>docker 命令</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>ctr image ls</td>\n<td>docker images</td>\n<td>获取image信息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>ctr image pull nginx</td>\n<td>docker pull nginx</td>\n<td>pull 一个nginx的image</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ctr image tag nginx nginx-test</td>\n<td>docker tag nginx nginx-test</td>\n<td>tag 一个nginx的image</td>\n</tr>\n<tr>\n<td>4</td>\n<td>ctr image push nginx-test</td>\n<td>docker push nginx-test</td>\n<td>push nginx-test的image</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ctr image pull nginx</td>\n<td>docker pull nginx</td>\n<td>pull 一个nginx的image</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ctr image import nginx.tar</td>\n<td>docker load&lt;nginx.tar.gz</td>\n<td>导入本地镜像ctr不支持压缩</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ctr run -d –env 111 nginx-test nginx</td>\n<td>docker run -d –name=nginx nginx-test</td>\n<td>运行的一个容器</td>\n</tr>\n<tr>\n<td>8</td>\n<td>ctr task ls</td>\n<td>docker ps</td>\n<td>查看运行的容器</td>\n</tr>\n</tbody>\n</table>\n<p>参考:</p>\n<p><a href=\"https://docs.rancher.cn/k3s/\" target=\"_blank\" rel=\"noopener\">https://docs.rancher.cn/k3s/</a></p>\n<p><a href=\"https://www.cnblogs.com/already/p/12691327.html\" target=\"_blank\" rel=\"noopener\">k3s containerd和docker 命令对比</a></p>\n<p><a href=\"https://www.cnblogs.com/cooper-73/p/12923714.html\" target=\"_blank\" rel=\"noopener\">离线安装K3S</a></p>\n<p><a href=\"https://www.cnblogs.com/weschen/p/12666486.html\" target=\"_blank\" rel=\"noopener\">离线安装K3S Server</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>在线安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>\n<p><strong>离线安装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载离线镜像</span><br><span class=\"line\">wget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s-airgap-images-amd64.tar</span><br><span class=\"line\">docker load &lt; k3s-airgap-images-amd64.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#下载k3s 可执行文件</span><br><span class=\"line\">wget https://github.com/rancher/k3s/releases/download/v1.18.9%2Bk3s1/k3s</span><br><span class=\"line\"></span><br><span class=\"line\">#下载 install.sh</span><br><span class=\"line\">https://github.com/rancher/k3s/blob/master/install.sh</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mkdir -p /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\">#下载的离线镜像包复制，格式如下</span><br><span class=\"line\">#sudo cp ./k3s-airgap-images-$ARCH.tar /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\">sudo cp ./k3s-airgap-images-amd64.tar /var/lib/rancher/k3s/agent/images/</span><br><span class=\"line\"></span><br><span class=\"line\">#授权</span><br><span class=\"line\">chmod 755 k3s</span><br><span class=\"line\">#下载的K3S的bin包，格式如下</span><br><span class=\"line\">sudo cp ./k3s /usr/local/bin &amp;&amp; sudo chmod 755 /usr/local/bin/k3s</span><br><span class=\"line\"></span><br><span class=\"line\">#授权</span><br><span class=\"line\">chmod +x ./install.sh</span><br><span class=\"line\">#跳过镜像下载，使用docker作为运行时</span><br><span class=\"line\">INSTALL_K3S_SKIP_DOWNLOAD=true  INSTALL_K3S_EXEC=&quot;--docker&quot; ./install.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 可能会遇到 k3s.server 换行引起的启动失败问题，修复后systemctl reload &amp;&amp; systemctl start k3s</span><br></pre></td></tr></table></figure>\n<p><strong>设置<code>kubeconfig</code>文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br><span class=\"line\">chown runner:runner -R /etc/rancher/k3s/k3s.yaml</span><br><span class=\"line\">kubectl get pods --all-namespaces</span><br><span class=\"line\">helm ls --all-namespaces</span><br></pre></td></tr></table></figure>\n<p><strong>网络</strong></p>\n<p>支持创建 <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\" target=\"_blank\" rel=\"noopener\">LoadBalancer</a> 类型的 Service</p>\n<p><strong>重启</strong></p>\n<p>systemd 下手动重启：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart k3s</span><br></pre></td></tr></table></figure>\n<p>openrc 下手动重启：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service k3s restart</span><br></pre></td></tr></table></figure>\n<p> k3s默认使用containerd, 两者命令对比表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>containerd 命令</th>\n<th>docker 命令</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>ctr image ls</td>\n<td>docker images</td>\n<td>获取image信息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>ctr image pull nginx</td>\n<td>docker pull nginx</td>\n<td>pull 一个nginx的image</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ctr image tag nginx nginx-test</td>\n<td>docker tag nginx nginx-test</td>\n<td>tag 一个nginx的image</td>\n</tr>\n<tr>\n<td>4</td>\n<td>ctr image push nginx-test</td>\n<td>docker push nginx-test</td>\n<td>push nginx-test的image</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ctr image pull nginx</td>\n<td>docker pull nginx</td>\n<td>pull 一个nginx的image</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ctr image import nginx.tar</td>\n<td>docker load&lt;nginx.tar.gz</td>\n<td>导入本地镜像ctr不支持压缩</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ctr run -d –env 111 nginx-test nginx</td>\n<td>docker run -d –name=nginx nginx-test</td>\n<td>运行的一个容器</td>\n</tr>\n<tr>\n<td>8</td>\n<td>ctr task ls</td>\n<td>docker ps</td>\n<td>查看运行的容器</td>\n</tr>\n</tbody>\n</table>\n<p>参考:</p>\n<p><a href=\"https://docs.rancher.cn/k3s/\" target=\"_blank\" rel=\"noopener\">https://docs.rancher.cn/k3s/</a></p>\n<p><a href=\"https://www.cnblogs.com/already/p/12691327.html\" target=\"_blank\" rel=\"noopener\">k3s containerd和docker 命令对比</a></p>\n<p><a href=\"https://www.cnblogs.com/cooper-73/p/12923714.html\" target=\"_blank\" rel=\"noopener\">离线安装K3S</a></p>\n<p><a href=\"https://www.cnblogs.com/weschen/p/12666486.html\" target=\"_blank\" rel=\"noopener\">离线安装K3S Server</a></p>\n"},{"title":" 测试服务迁移k8s集群记录 (一)","date":"2019-11-08T18:40:10.000Z","share":true,"_content":"\n前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。\n\n已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。\n\n### k8s 集群搭建\n\n因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。\n\n| 主机名        | IP        | 角色     | 服务        |\n| ------------- | --------- | -------- | ----------- |\n| soa-test-a001 | 10.2.4.34 | master01 | 监控、日志  |\n| soa-test-a002 | 10.2.4.35 | master02 | CI、Ingress |\n| soa-test-a003 | 10.2.4.36 | node01   | 业务服务    |\n\n只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：\n\n![kubeadm-ha-topology-stacked-etcd](/img/k8s/5.svg)机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s \n<!-- more -->\n\n**安装 kubeadm**\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\n\nname=Kubernetes\n\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\n\nenabled=1\n\ngpgcheck=1\n\nrepo_gpgcheck=1\n\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\nEOF\n\nsetenforce 0\nyum install -y kubelet kubeadm kubectl\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n**生成初始化 kubeadm 配置文件**\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n使用 master01: 6444 做 api负载，修改如下：\n\n```\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.2.4.34 #master01机器ip\n  bindPort: 6443 #apiServer运行的端口\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: soa-test-a001\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 10.244.0.0/16 #pod网络配置\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2\n\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log\n```\n\n**calico 网络：**\n\n```\nkubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml\n```\n\n**master02加入集群**\n\n```\nkubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\\n    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897\n```\n\n测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。\n\n**haproxy 做负载**\n\n```\nfrontend kube-api-balance\n    bind *:6444\n    maxconn 30000                    #定义此端口上的maxconn\n    default_backend default_servers  #请求定向至后端服务群default_servers\n\nbackend default_servers    #定义后端服务群default_servers\n    balance roundrobin\n    server def.srv1 10.2.4.34:6443\n    server def.srv2 10.2.4.35:6443\n```\n\n运行haproxy\n\n```\ndocker run -d \\\n    --network=host \\\n    --restart=always \\\n    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\\n    --name haproxy \\\n    haproxy -f /etc/haproxy/haproxy.cfg\n```\n\n顺便贴下使用 nginx 转发配置\n\n```\nstream {\n        server {\n                listen     6444;\n                proxy_pass stream_backend;\n        }\n        upstream stream_backend {\n                server 10.2.4.34:6443;\n                server 10.2.4.35:6443;\n        }\n\n}\n```\n遗憾的是这里并没有使用 keepalived 对ip做高可用 :( \n\n\n### Dashboard 安装\n\n主要参考[安装dashboard](https://www.cnblogs.com/bluersw/p/11747161.html )，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 `kube-config` 的生成，我们用这个文件来登录 dashboard\n\n```\nkubectl config view --raw=true > kube-config\n```\n\n使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行\n\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: lGSUNBVE******UtLS0tLQo=\n    server: https://10.2.4.34:6444\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: dashboard-admin  #改为serviceAccount\n  name: kubernetes-admin@kubernetes\ncurrent-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: dashboard-admin  #改为serviceAccount\n  user:  #使用token 认证\n    token: eyJhbGciOiJSUzI******LdK0kpfSw\n```\n\n截图：\n\n![6.png](/img/k8s/6.png)\n\n**遇到的问题：**\n\n遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-\n\n\n\n本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.\n\n\n\n**参考：**\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\nhttps://blog.csdn.net/networken/article/details/89599004\nhttps://www.kubernetes.org.cn/5551.html\n安装dashboard:\nhttps://www.cnblogs.com/bluersw/p/11747161.html \nscp 信任:\nhttps://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html \nkubeadm join 使用的 token 过期之后，如何加入集群:\nhttps://blog.csdn.net/wo18237095579/article/details/89884369 \n\n","source":"_posts/k8s-migration-1.md","raw":"---\ntitle: \" 测试服务迁移k8s集群记录 (一)\"\ndate: 2019-11-08 18:40:10\ntags: [k8s,kubernetes,kube-adm,haproxy]\nshare: true\n---\n\n前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。\n\n已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。\n\n### k8s 集群搭建\n\n因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。\n\n| 主机名        | IP        | 角色     | 服务        |\n| ------------- | --------- | -------- | ----------- |\n| soa-test-a001 | 10.2.4.34 | master01 | 监控、日志  |\n| soa-test-a002 | 10.2.4.35 | master02 | CI、Ingress |\n| soa-test-a003 | 10.2.4.36 | node01   | 业务服务    |\n\n只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：\n\n![kubeadm-ha-topology-stacked-etcd](/img/k8s/5.svg)机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s \n<!-- more -->\n\n**安装 kubeadm**\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\n\nname=Kubernetes\n\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\n\nenabled=1\n\ngpgcheck=1\n\nrepo_gpgcheck=1\n\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\nEOF\n\nsetenforce 0\nyum install -y kubelet kubeadm kubectl\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n**生成初始化 kubeadm 配置文件**\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n使用 master01: 6444 做 api负载，修改如下：\n\n```\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.2.4.34 #master01机器ip\n  bindPort: 6443 #apiServer运行的端口\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: soa-test-a001\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 10.244.0.0/16 #pod网络配置\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2\n\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log\n```\n\n**calico 网络：**\n\n```\nkubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml\n```\n\n**master02加入集群**\n\n```\nkubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\\n    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897\n```\n\n测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。\n\n**haproxy 做负载**\n\n```\nfrontend kube-api-balance\n    bind *:6444\n    maxconn 30000                    #定义此端口上的maxconn\n    default_backend default_servers  #请求定向至后端服务群default_servers\n\nbackend default_servers    #定义后端服务群default_servers\n    balance roundrobin\n    server def.srv1 10.2.4.34:6443\n    server def.srv2 10.2.4.35:6443\n```\n\n运行haproxy\n\n```\ndocker run -d \\\n    --network=host \\\n    --restart=always \\\n    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\\n    --name haproxy \\\n    haproxy -f /etc/haproxy/haproxy.cfg\n```\n\n顺便贴下使用 nginx 转发配置\n\n```\nstream {\n        server {\n                listen     6444;\n                proxy_pass stream_backend;\n        }\n        upstream stream_backend {\n                server 10.2.4.34:6443;\n                server 10.2.4.35:6443;\n        }\n\n}\n```\n遗憾的是这里并没有使用 keepalived 对ip做高可用 :( \n\n\n### Dashboard 安装\n\n主要参考[安装dashboard](https://www.cnblogs.com/bluersw/p/11747161.html )，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 `kube-config` 的生成，我们用这个文件来登录 dashboard\n\n```\nkubectl config view --raw=true > kube-config\n```\n\n使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行\n\n```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: lGSUNBVE******UtLS0tLQo=\n    server: https://10.2.4.34:6444\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: dashboard-admin  #改为serviceAccount\n  name: kubernetes-admin@kubernetes\ncurrent-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: dashboard-admin  #改为serviceAccount\n  user:  #使用token 认证\n    token: eyJhbGciOiJSUzI******LdK0kpfSw\n```\n\n截图：\n\n![6.png](/img/k8s/6.png)\n\n**遇到的问题：**\n\n遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-\n\n\n\n本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.\n\n\n\n**参考：**\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\nhttps://blog.csdn.net/networken/article/details/89599004\nhttps://www.kubernetes.org.cn/5551.html\n安装dashboard:\nhttps://www.cnblogs.com/bluersw/p/11747161.html \nscp 信任:\nhttps://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html \nkubeadm join 使用的 token 过期之后，如何加入集群:\nhttps://blog.csdn.net/wo18237095579/article/details/89884369 \n\n","slug":"k8s-migration-1","published":1,"updated":"2019-11-14T03:42:22.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenlg000z0wpbtgr5nexi","content":"<p>前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。</p>\n<p>已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。</p>\n<h3 id=\"k8s-集群搭建\"><a href=\"#k8s-集群搭建\" class=\"headerlink\" title=\"k8s 集群搭建\"></a>k8s 集群搭建</h3><p>因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n<th>服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>soa-test-a001</td>\n<td>10.2.4.34</td>\n<td>master01</td>\n<td>监控、日志</td>\n</tr>\n<tr>\n<td>soa-test-a002</td>\n<td>10.2.4.35</td>\n<td>master02</td>\n<td>CI、Ingress</td>\n</tr>\n<tr>\n<td>soa-test-a003</td>\n<td>10.2.4.36</td>\n<td>node01</td>\n<td>业务服务</td>\n</tr>\n</tbody>\n</table>\n<p>只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：</p>\n<p><img src=\"/img/k8s/5.svg\" alt=\"kubeadm-ha-topology-stacked-etcd\">机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s<br><a id=\"more\"></a></p>\n<p><strong>安装 kubeadm</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\"></span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\"></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n<p><strong>生成初始化 kubeadm 配置文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n<p>使用 master01: 6444 做 api负载，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 10.2.4.34 #master01机器ip</span><br><span class=\"line\">  bindPort: 6443 #apiServer运行的端口</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: soa-test-a001</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controlPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 #pod网络配置</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure>\n<p><strong>calico 网络：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml</span><br></pre></td></tr></table></figure>\n<p><strong>master02加入集群</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\</span><br><span class=\"line\">    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897</span><br></pre></td></tr></table></figure>\n<p>测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。</p>\n<p><strong>haproxy 做负载</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontend kube-api-balance</span><br><span class=\"line\">    bind *:6444</span><br><span class=\"line\">    maxconn 30000                    #定义此端口上的maxconn</span><br><span class=\"line\">    default_backend default_servers  #请求定向至后端服务群default_servers</span><br><span class=\"line\"></span><br><span class=\"line\">backend default_servers    #定义后端服务群default_servers</span><br><span class=\"line\">    balance roundrobin</span><br><span class=\"line\">    server def.srv1 10.2.4.34:6443</span><br><span class=\"line\">    server def.srv2 10.2.4.35:6443</span><br></pre></td></tr></table></figure>\n<p>运行haproxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\</span><br><span class=\"line\">    --name haproxy \\</span><br><span class=\"line\">    haproxy -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>顺便贴下使用 nginx 转发配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen     6444;</span><br><span class=\"line\">                proxy_pass stream_backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        upstream stream_backend &#123;</span><br><span class=\"line\">                server 10.2.4.34:6443;</span><br><span class=\"line\">                server 10.2.4.35:6443;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遗憾的是这里并没有使用 keepalived 对ip做高可用 :( </p>\n<h3 id=\"Dashboard-安装\"><a href=\"#Dashboard-安装\" class=\"headerlink\" title=\"Dashboard 安装\"></a>Dashboard 安装</h3><p>主要参考<a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">安装dashboard</a>，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 <code>kube-config</code> 的生成，我们用这个文件来登录 dashboard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config view --raw=true &gt; kube-config</span><br></pre></td></tr></table></figure>\n<p>使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: lGSUNBVE******UtLS0tLQo=</span><br><span class=\"line\">    server: https://10.2.4.34:6444</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  name: kubernetes-admin@kubernetes</span><br><span class=\"line\">current-context: kubernetes-admin@kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  user:  #使用token 认证</span><br><span class=\"line\">    token: eyJhbGciOiJSUzI******LdK0kpfSw</span><br></pre></td></tr></table></figure>\n<p>截图：</p>\n<p><img src=\"/img/k8s/6.png\" alt=\"6.png\"></p>\n<p><strong>遇到的问题：</strong></p>\n<p>遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-</p>\n<p>本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.</p>\n<p><strong>参考：</strong><br><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/</a><br><a href=\"https://blog.csdn.net/networken/article/details/89599004\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/networken/article/details/89599004</a><br><a href=\"https://www.kubernetes.org.cn/5551.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/5551.html</a><br>安装dashboard:<br><a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bluersw/p/11747161.html</a><br>scp 信任:<br><a href=\"https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html</a><br>kubeadm join 使用的 token 过期之后，如何加入集群:<br><a href=\"https://blog.csdn.net/wo18237095579/article/details/89884369\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wo18237095579/article/details/89884369</a> </p>\n","site":{"data":{}},"excerpt":"<p>前言: 组内给了3台新机器，要把之前的服务全迁到新机器。共6个服务，2个在之前的 k8s 集群，其他4个在物理机。</p>\n<p>已经迁移完成，记录下实施过程，大致分3步: 新 k8s 集群搭建、监控日志系统部署、业务服务迁移。</p>\n<h3 id=\"k8s-集群搭建\"><a href=\"#k8s-集群搭建\" class=\"headerlink\" title=\"k8s 集群搭建\"></a>k8s 集群搭建</h3><p>因为是新机器，准备尝试下 k8s  master 高可用方案，运维给的3台机器信息如下，两个mastet 建立ssh 信任，服务规划参考老集群。</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n<th>服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>soa-test-a001</td>\n<td>10.2.4.34</td>\n<td>master01</td>\n<td>监控、日志</td>\n</tr>\n<tr>\n<td>soa-test-a002</td>\n<td>10.2.4.35</td>\n<td>master02</td>\n<td>CI、Ingress</td>\n</tr>\n<tr>\n<td>soa-test-a003</td>\n<td>10.2.4.36</td>\n<td>node01</td>\n<td>业务服务</td>\n</tr>\n</tbody>\n</table>\n<p>只有两台master， 我们使用的是堆叠式 etcd 拓扑结构，如图：</p>\n<p><img src=\"/img/k8s/5.svg\" alt=\"kubeadm-ha-topology-stacked-etcd\">机器已经安装 docker ，直接开始使用 kubeadm 安装 k8s<br>","more":"</p>\n<p><strong>安装 kubeadm</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\"></span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\"></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n<p><strong>生成初始化 kubeadm 配置文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n<p>使用 master01: 6444 做 api负载，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 10.2.4.34 #master01机器ip</span><br><span class=\"line\">  bindPort: 6443 #apiServer运行的端口</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: soa-test-a001</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controlPlaneEndpoint: 10.2.4.34:6444 #控制面板api端口，用来做api负载均衡</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers #改为阿里云仓库</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.16.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16 #pod网络配置</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>开始安装，由于使用阿里镜像地址，安装较快，默认是 最新版 1.16.2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure>\n<p><strong>calico 网络：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/master/manifests/calico.yaml</span><br></pre></td></tr></table></figure>\n<p><strong>master02加入集群</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.2.4.34:6444 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:ee24d007b3eb73******bc7385528dcc549105b1e54642d82b7f23f718 \\</span><br><span class=\"line\">    --control-plane --certificate-key febdcefffebcfe60c6******5680f1110a4073ebd1e5c578c5c02a897</span><br></pre></td></tr></table></figure>\n<p>测试 master02 是否提供服务，可以修改master02 上的 ~/.kube/config 文件，修改server 为本机 ip + 6443端口，执行kubectl get nodes 成功，说明master02 同样提供 apiServer 功能。</p>\n<p><strong>haproxy 做负载</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontend kube-api-balance</span><br><span class=\"line\">    bind *:6444</span><br><span class=\"line\">    maxconn 30000                    #定义此端口上的maxconn</span><br><span class=\"line\">    default_backend default_servers  #请求定向至后端服务群default_servers</span><br><span class=\"line\"></span><br><span class=\"line\">backend default_servers    #定义后端服务群default_servers</span><br><span class=\"line\">    balance roundrobin</span><br><span class=\"line\">    server def.srv1 10.2.4.34:6443</span><br><span class=\"line\">    server def.srv2 10.2.4.35:6443</span><br></pre></td></tr></table></figure>\n<p>运行haproxy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart=always \\</span><br><span class=\"line\">    -v /root/sh/haproxy.cfg:/etc/haproxy/haproxy.cfg \\</span><br><span class=\"line\">    --name haproxy \\</span><br><span class=\"line\">    haproxy -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>顺便贴下使用 nginx 转发配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream &#123;</span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen     6444;</span><br><span class=\"line\">                proxy_pass stream_backend;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        upstream stream_backend &#123;</span><br><span class=\"line\">                server 10.2.4.34:6443;</span><br><span class=\"line\">                server 10.2.4.35:6443;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遗憾的是这里并没有使用 keepalived 对ip做高可用 :( </p>\n<h3 id=\"Dashboard-安装\"><a href=\"#Dashboard-安装\" class=\"headerlink\" title=\"Dashboard 安装\"></a>Dashboard 安装</h3><p>主要参考<a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">安装dashboard</a>，之前使用的1.10版，新版提示更友好，资源编辑更方便。贴一下 <code>kube-config</code> 的生成，我们用这个文件来登录 dashboard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config view --raw=true &gt; kube-config</span><br></pre></td></tr></table></figure>\n<p>使用一个有权限的 serviceAccount 来配置，contexts 部分修改 user 为 serviceAccount name，users 部分，修改 name ，增加 token 认证。注意 token:  后面是一个空格，非换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: lGSUNBVE******UtLS0tLQo=</span><br><span class=\"line\">    server: https://10.2.4.34:6444</span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:</span><br><span class=\"line\">    cluster: kubernetes</span><br><span class=\"line\">    user: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  name: kubernetes-admin@kubernetes</span><br><span class=\"line\">current-context: kubernetes-admin@kubernetes</span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: dashboard-admin  #改为serviceAccount</span><br><span class=\"line\">  user:  #使用token 认证</span><br><span class=\"line\">    token: eyJhbGciOiJSUzI******LdK0kpfSw</span><br></pre></td></tr></table></figure>\n<p>截图：</p>\n<p><img src=\"/img/k8s/6.png\" alt=\"6.png\"></p>\n<p><strong>遇到的问题：</strong></p>\n<p>遇到最大的问题是 在 master02 上执行 命令，延时5秒才返回，在上面起的pod，访问外网总提示超时，后来用kube-adm reset 了下，再次加入集群，莫名好了 -__-</p>\n<p>本篇就写到这，后面会更新监控、日志的安装，已经使用 gitlab runner + helm3 来部署服务.</p>\n<p><strong>参考：</strong><br><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/</a><br><a href=\"https://blog.csdn.net/networken/article/details/89599004\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/networken/article/details/89599004</a><br><a href=\"https://www.kubernetes.org.cn/5551.html\" target=\"_blank\" rel=\"noopener\">https://www.kubernetes.org.cn/5551.html</a><br>安装dashboard:<br><a href=\"https://www.cnblogs.com/bluersw/p/11747161.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/bluersw/p/11747161.html</a><br>scp 信任:<br><a href=\"https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mchina/archive/2013/03/15/2956017.html</a><br>kubeadm join 使用的 token 过期之后，如何加入集群:<br><a href=\"https://blog.csdn.net/wo18237095579/article/details/89884369\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wo18237095579/article/details/89884369</a> </p>"},{"layout":"post","title":"迁移gogs用户到openldap","description":"","date":"2019-11-25T20:19:00.000Z","comments":0,"share":true,"_content":"\n公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题\n\n**搭建 openldap 服务器**\n\n查看 [gogs 代码](https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324)，使用的是 [pbkdf2](https://www.php.net/manual/zh/function.hash-pbkdf2.php) 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：\n\n```在\n// EncodePasswd encodes password to safe format.\nfunc (u *User) EncodePasswd() {\n\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)\n\tu.Passwd = fmt.Sprintf(\"%x\", newPasswd)\n}\n```\nopenldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.\n\n按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致\n\n\n```\nFROM ubuntu:18.04\nWORKDIR /root\nENV SALT_SIZE=10 DK_SIZE=50\nRUN apt-get -y update \\\n    && apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\\n    && git clone https://github.com/openldap/openldap.git \\\n    && cd openldap \\\n    && ./configure --enable-modules \\\n    && make \\\n    && make install \\\n    && cd ./contrib/slapd-modules/passwd/pbkdf2 \\\n    && sed -i \"s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE ${SALT_SIZE}/g\" pw-pbkdf2.c \\\n    && sed -i \"s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE ${DK_SIZE}/g\" pw-pbkdf2.c \\\n    && sed '19 a#define HAVE_OPENSSL' -i pw-pbkdf2.c \\\n    && make \\\n    && mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                \n    && make install \\\n    && sed '19 a# moduleload\\tpw-pbkdf2.la' -i /usr/local/etc/openldap/slapd.conf\nCMD [\"sh\", \"-c\", \"/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;\"]\n```\n<!-- more -->\n\n拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：\n\n```\n# Load dynamic backend modules:\nmodulepath\t/usr/local/libexec/openldap\nmoduleload\tpw-pbkdf2.la\n```\n\n启动镜像\n\n```\ndocker run -d \\\n\t--name openldap \\\n\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\\n\tairzhe/openldap:pbkdf2 \\\n\t/bin/bash -c \\\n\t\"mkdir -p /usr/local/var/openldap-data \\\n\t&& /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\\n\t&& tail -f /dev/null\"\n```\n\n生成管理员密码\n\n```\n$ docker exec -it openldap /bin/bash\n$ slappasswd -o module-load=pw-pbkdf2.la -h {PBKDF2-SHA256} -s secret123\n{PBKDF2-SHA256}10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y\n```\n\n改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。\n\n执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)\n\n```\n$ ldapsearch -x -D 'cn=root,dc=youhaodongxi,dc=com' -w 'secret123'\n# extended LDIF\n#\n# LDAPv3\n# base <> (default) with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 32 No such object\n\n# numResponses: 1\n```\n\n**gogs 密码转换**\n\n接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/base64\"\n    \"strings\"\n    _\"strconv\"\n    \"encoding/hex\"\n)\n\nfunc main() {\n    salt    := []byte(\"58R38iUGs7\") #\n    pwd_hex := \"8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7\"\n    pwd_str,_:= hex.DecodeString(pwd_hex)\n    fmt.Printf(\"{PBKDF2-SHA256}10000$%s$%s\",ab64_encode(salt),ab64_encode(pwd_str))\n    fmt.Println()\n}\n\nfunc ab64_encode(pwd_str []byte) string{\n    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))\n    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,\"=\"),\"+\",\".\")\n    return encod\n}\n```\n\n到此，已经解决大多数 gogs 迁移的技术问题了.\n\n\n\n踩坑：\n\n1. github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)\n2. 要修改 [pbkdf2](https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf)  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE\n\n体会：\n\n1. 新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(\n2. ldap 用着真的很爽，可以关联一切系统\n\n\n\n参考：\n\n https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\n https://github.com/osixia/docker-openldap/issues/235\n","source":"_posts/ldap-pbkdf2.md","raw":"---\nlayout: post\ntitle: \"迁移gogs用户到openldap\"\ndescription: \"\"\ndate: 2019-11-25 20:19:00\ntags: [openldap,gogs,pbkdf2]\ncomments: false\nshare: true\n---\n\n公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题\n\n**搭建 openldap 服务器**\n\n查看 [gogs 代码](https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324)，使用的是 [pbkdf2](https://www.php.net/manual/zh/function.hash-pbkdf2.php) 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：\n\n```在\n// EncodePasswd encodes password to safe format.\nfunc (u *User) EncodePasswd() {\n\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)\n\tu.Passwd = fmt.Sprintf(\"%x\", newPasswd)\n}\n```\nopenldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.\n\n按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致\n\n\n```\nFROM ubuntu:18.04\nWORKDIR /root\nENV SALT_SIZE=10 DK_SIZE=50\nRUN apt-get -y update \\\n    && apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\\n    && git clone https://github.com/openldap/openldap.git \\\n    && cd openldap \\\n    && ./configure --enable-modules \\\n    && make \\\n    && make install \\\n    && cd ./contrib/slapd-modules/passwd/pbkdf2 \\\n    && sed -i \"s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE ${SALT_SIZE}/g\" pw-pbkdf2.c \\\n    && sed -i \"s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE ${DK_SIZE}/g\" pw-pbkdf2.c \\\n    && sed '19 a#define HAVE_OPENSSL' -i pw-pbkdf2.c \\\n    && make \\\n    && mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                \n    && make install \\\n    && sed '19 a# moduleload\\tpw-pbkdf2.la' -i /usr/local/etc/openldap/slapd.conf\nCMD [\"sh\", \"-c\", \"/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;\"]\n```\n<!-- more -->\n\n拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：\n\n```\n# Load dynamic backend modules:\nmodulepath\t/usr/local/libexec/openldap\nmoduleload\tpw-pbkdf2.la\n```\n\n启动镜像\n\n```\ndocker run -d \\\n\t--name openldap \\\n\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\\n\tairzhe/openldap:pbkdf2 \\\n\t/bin/bash -c \\\n\t\"mkdir -p /usr/local/var/openldap-data \\\n\t&& /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\\n\t&& tail -f /dev/null\"\n```\n\n生成管理员密码\n\n```\n$ docker exec -it openldap /bin/bash\n$ slappasswd -o module-load=pw-pbkdf2.la -h {PBKDF2-SHA256} -s secret123\n{PBKDF2-SHA256}10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y\n```\n\n改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。\n\n执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)\n\n```\n$ ldapsearch -x -D 'cn=root,dc=youhaodongxi,dc=com' -w 'secret123'\n# extended LDIF\n#\n# LDAPv3\n# base <> (default) with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 32 No such object\n\n# numResponses: 1\n```\n\n**gogs 密码转换**\n\n接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"encoding/base64\"\n    \"strings\"\n    _\"strconv\"\n    \"encoding/hex\"\n)\n\nfunc main() {\n    salt    := []byte(\"58R38iUGs7\") #\n    pwd_hex := \"8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7\"\n    pwd_str,_:= hex.DecodeString(pwd_hex)\n    fmt.Printf(\"{PBKDF2-SHA256}10000$%s$%s\",ab64_encode(salt),ab64_encode(pwd_str))\n    fmt.Println()\n}\n\nfunc ab64_encode(pwd_str []byte) string{\n    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))\n    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,\"=\"),\"+\",\".\")\n    return encod\n}\n```\n\n到此，已经解决大多数 gogs 迁移的技术问题了.\n\n\n\n踩坑：\n\n1. github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)\n2. 要修改 [pbkdf2](https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf)  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE\n\n体会：\n\n1. 新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(\n2. ldap 用着真的很爽，可以关联一切系统\n\n\n\n参考：\n\n https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\n https://github.com/osixia/docker-openldap/issues/235\n","slug":"ldap-pbkdf2","published":1,"updated":"2020-01-19T07:44:32.609Z","photos":[],"link":"","_id":"ckj9uenli00110wpb4j58g8kb","content":"<p>公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题</p>\n<p><strong>搭建 openldap 服务器</strong></p>\n<p>查看 <a href=\"https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324\" target=\"_blank\" rel=\"noopener\">gogs 代码</a>，使用的是 <a href=\"https://www.php.net/manual/zh/function.hash-pbkdf2.php\" target=\"_blank\" rel=\"noopener\">pbkdf2</a> 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// EncodePasswd encodes password to safe format.</span><br><span class=\"line\">func (u *User) EncodePasswd() &#123;</span><br><span class=\"line\">\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)</span><br><span class=\"line\">\tu.Passwd = fmt.Sprintf(&quot;%x&quot;, newPasswd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>openldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.</p>\n<p>按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ENV SALT_SIZE=10 DK_SIZE=50</span><br><span class=\"line\">RUN apt-get -y update \\</span><br><span class=\"line\">    &amp;&amp; apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\</span><br><span class=\"line\">    &amp;&amp; git clone https://github.com/openldap/openldap.git \\</span><br><span class=\"line\">    &amp;&amp; cd openldap \\</span><br><span class=\"line\">    &amp;&amp; ./configure --enable-modules \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; cd ./contrib/slapd-modules/passwd/pbkdf2 \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE $&#123;SALT_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE $&#123;DK_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a#define HAVE_OPENSSL&apos; -i pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                </span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a# moduleload\\tpw-pbkdf2.la&apos; -i /usr/local/etc/openldap/slapd.conf</span><br><span class=\"line\">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;&quot;]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Load dynamic backend modules:</span><br><span class=\"line\">modulepath\t/usr/local/libexec/openldap</span><br><span class=\"line\">moduleload\tpw-pbkdf2.la</span><br></pre></td></tr></table></figure>\n<p>启动镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">\t--name openldap \\</span><br><span class=\"line\">\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\tairzhe/openldap:pbkdf2 \\</span><br><span class=\"line\">\t/bin/bash -c \\</span><br><span class=\"line\">\t&quot;mkdir -p /usr/local/var/openldap-data \\</span><br><span class=\"line\">\t&amp;&amp; /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\t&amp;&amp; tail -f /dev/null&quot;</span><br></pre></td></tr></table></figure>\n<p>生成管理员密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it openldap /bin/bash</span><br><span class=\"line\">$ slappasswd -o module-load=pw-pbkdf2.la -h &#123;PBKDF2-SHA256&#125; -s secret123</span><br><span class=\"line\">&#123;PBKDF2-SHA256&#125;10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y</span><br></pre></td></tr></table></figure>\n<p>改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。</p>\n<p>执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldapsearch -x -D &apos;cn=root,dc=youhaodongxi,dc=com&apos; -w &apos;secret123&apos;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;&gt; (default) with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 32 No such object</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n<p><strong>gogs 密码转换</strong></p>\n<p>接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;encoding/base64&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">    _&quot;strconv&quot;</span><br><span class=\"line\">    &quot;encoding/hex&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    salt    := []byte(&quot;58R38iUGs7&quot;) #</span><br><span class=\"line\">    pwd_hex := &quot;8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7&quot;</span><br><span class=\"line\">    pwd_str,_:= hex.DecodeString(pwd_hex)</span><br><span class=\"line\">    fmt.Printf(&quot;&#123;PBKDF2-SHA256&#125;10000$%s$%s&quot;,ab64_encode(salt),ab64_encode(pwd_str))</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func ab64_encode(pwd_str []byte) string&#123;</span><br><span class=\"line\">    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))</span><br><span class=\"line\">    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,&quot;=&quot;),&quot;+&quot;,&quot;.&quot;)</span><br><span class=\"line\">    return encod</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，已经解决大多数 gogs 迁移的技术问题了.</p>\n<p>踩坑：</p>\n<ol>\n<li>github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)</li>\n<li>要修改 <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">pbkdf2</a>  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE</li>\n</ol>\n<p>体会：</p>\n<ol>\n<li>新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(</li>\n<li>ldap 用着真的很爽，可以关联一切系统</li>\n</ol>\n<p>参考：</p>\n<p> <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf</a><br> <a href=\"https://github.com/osixia/docker-openldap/issues/235\" target=\"_blank\" rel=\"noopener\">https://github.com/osixia/docker-openldap/issues/235</a></p>\n","site":{"data":{}},"excerpt":"<p>公司之前使用 gogs 作为 git 服务器，要改成 gitlab，现在解决帐号迁移问题</p>\n<p><strong>搭建 openldap 服务器</strong></p>\n<p>查看 <a href=\"https://github.com/gogs/gogs/blob/master/internal/db/user.go#L324\" target=\"_blank\" rel=\"noopener\">gogs 代码</a>，使用的是 <a href=\"https://www.php.net/manual/zh/function.hash-pbkdf2.php\" target=\"_blank\" rel=\"noopener\">pbkdf2</a> 加密方式，SALT_SIZE为10 ，迭代次数为10000 ，DK_SIZE为50 ，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// EncodePasswd encodes password to safe format.</span><br><span class=\"line\">func (u *User) EncodePasswd() &#123;</span><br><span class=\"line\">\tnewPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)</span><br><span class=\"line\">\tu.Passwd = fmt.Sprintf(&quot;%x&quot;, newPasswd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>openldap 默认是不支持 pbkdf2 加密的，好在有人贡献了这部分代码，现在已经作为 openldap 的一个模块在项目源码里了.</p>\n<p>按照下面的 Dockerfile 生成镜像，需要注意的是 SALT_SIZE、DK_SIZE 作为环境变量参与编译，和 gogs 的保持一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM ubuntu:18.04</span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ENV SALT_SIZE=10 DK_SIZE=50</span><br><span class=\"line\">RUN apt-get -y update \\</span><br><span class=\"line\">    &amp;&amp; apt-get -y install git gcc libltdl-dev make groff groff-base libssl-dev \\</span><br><span class=\"line\">    &amp;&amp; git clone https://github.com/openldap/openldap.git \\</span><br><span class=\"line\">    &amp;&amp; cd openldap \\</span><br><span class=\"line\">    &amp;&amp; ./configure --enable-modules \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; cd ./contrib/slapd-modules/passwd/pbkdf2 \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SALT_SIZE 16/PBKDF2_SALT_SIZE $&#123;SALT_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed -i &quot;s/PBKDF2_SHA256_DK_SIZE 32/PBKDF2_SHA256_DK_SIZE $&#123;DK_SIZE&#125;/g&quot; pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a#define HAVE_OPENSSL&apos; -i pw-pbkdf2.c \\</span><br><span class=\"line\">    &amp;&amp; make \\</span><br><span class=\"line\">    &amp;&amp; mv slapo-pw-pbkdf2.5 slapd-pw-pbkdf2.5 \\                                </span><br><span class=\"line\">    &amp;&amp; make install \\</span><br><span class=\"line\">    &amp;&amp; sed &apos;19 a# moduleload\\tpw-pbkdf2.la&apos; -i /usr/local/etc/openldap/slapd.conf</span><br><span class=\"line\">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf; tail -f /dev/null;&quot;]</span><br></pre></td></tr></table></figure>","more":"<p>拷贝容器里的 /usr/local/etc/openldap/slapd.conf 到本机，开启 pw-pbkdf2 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Load dynamic backend modules:</span><br><span class=\"line\">modulepath\t/usr/local/libexec/openldap</span><br><span class=\"line\">moduleload\tpw-pbkdf2.la</span><br></pre></td></tr></table></figure>\n<p>启动镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">\t--name openldap \\</span><br><span class=\"line\">\t-v /home/runner/work/openldap/conf/slapd.conf:/usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\tairzhe/openldap:pbkdf2 \\</span><br><span class=\"line\">\t/bin/bash -c \\</span><br><span class=\"line\">\t&quot;mkdir -p /usr/local/var/openldap-data \\</span><br><span class=\"line\">\t&amp;&amp; /usr/local/libexec/slapd -f /usr/local/etc/openldap/slapd.conf \\</span><br><span class=\"line\">\t&amp;&amp; tail -f /dev/null&quot;</span><br></pre></td></tr></table></figure>\n<p>生成管理员密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it openldap /bin/bash</span><br><span class=\"line\">$ slappasswd -o module-load=pw-pbkdf2.la -h &#123;PBKDF2-SHA256&#125; -s secret123</span><br><span class=\"line\">&#123;PBKDF2-SHA256&#125;10000$77QF.RnoGk0ZNA$DKUREgxYak/Qd112JlW3eVNSOmLBih9L0mMmE.ioR/cha0KQTg7TQas/LpPuDDsq43Y</span><br></pre></td></tr></table></figure>\n<p>改写 slapd.conf 配置文件 rootpw 为新生成的密码，重启容器，执行 slaptest 测试配置文件是否正确。</p>\n<p>执行如下 ldapsearch 命令，有返回，没有提示验证错误，说明我们的支持 pw-pbkdf2 加密的 ldap 已经搭起来了 :)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldapsearch -x -D &apos;cn=root,dc=youhaodongxi,dc=com&apos; -w &apos;secret123&apos;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;&gt; (default) with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 32 No such object</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n<p><strong>gogs 密码转换</strong></p>\n<p>接下来给 gogs 用户生成对应的 openldap 密码，go 版本的代码参考：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;encoding/base64&quot;</span><br><span class=\"line\">    &quot;strings&quot;</span><br><span class=\"line\">    _&quot;strconv&quot;</span><br><span class=\"line\">    &quot;encoding/hex&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    salt    := []byte(&quot;58R38iUGs7&quot;) #</span><br><span class=\"line\">    pwd_hex := &quot;8f230e33791bf48cdd5e93d21da7bc6abd8d5cb53ae0cf3eefced0d7095b82d95a5482883aa03fdebafa16a5c865686172c7&quot;</span><br><span class=\"line\">    pwd_str,_:= hex.DecodeString(pwd_hex)</span><br><span class=\"line\">    fmt.Printf(&quot;&#123;PBKDF2-SHA256&#125;10000$%s$%s&quot;,ab64_encode(salt),ab64_encode(pwd_str))</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func ab64_encode(pwd_str []byte) string&#123;</span><br><span class=\"line\">    encodeString := base64.StdEncoding.EncodeToString([]byte(pwd_str))</span><br><span class=\"line\">    encod:=strings.ReplaceAll(strings.TrimRight(encodeString,&quot;=&quot;),&quot;+&quot;,&quot;.&quot;)</span><br><span class=\"line\">    return encod</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，已经解决大多数 gogs 迁移的技术问题了.</p>\n<p>踩坑：</p>\n<ol>\n<li>github 上搜索排第一的 docker-openldap 不能支持这个模块方式的认证，总报错 (也可能是别的原因)</li>\n<li>要修改 <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">pbkdf2</a>  这个模块源码里配置的参数，也就是我上面提到的 SALT_SIZE、DK_SIZE</li>\n</ol>\n<p>体会：</p>\n<ol>\n<li>新版 openldap 安装已经不需要 BerkeleyDB 数据库了，安装难度降到0，之前需要各种查资料，设置环境变量 :(</li>\n<li>ldap 用着真的很爽，可以关联一切系统</li>\n</ol>\n<p>参考：</p>\n<p> <a href=\"https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf\" target=\"_blank\" rel=\"noopener\">https://github.com/openldap/openldap/tree/master/contrib/slapd-modules/passwd/pbkdf</a><br> <a href=\"https://github.com/osixia/docker-openldap/issues/235\" target=\"_blank\" rel=\"noopener\">https://github.com/osixia/docker-openldap/issues/235</a></p>"},{"title":"k8s 笔记","description":"","date":"2019-02-01T19:38:10.000Z","comments":0,"share":true,"_content":"\n**k8s 容器出现大量 Evicted**\n\n```\n$kubectl describe node/runner-e480\n\nNormal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure\n\ndf -h 系统盘使用85%\n\n修改了docker 镜像存储路径\nhttps://blog.csdn.net/glongljl/article/details/80158297\n\n参考:\nhttps://blog.csdn.net/qq_21816375/article/details/82905660\n```\n\n### k8s 命令\n\n```\n#命令行自动补全\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\nkubectl get sa --all-namespaces=true\nkubectl get roles --all-namespaces=true\nkubectl get RoleBinding  --all-namespaces=true\nkubectl get secrets --all-namespaces=true\nkubectl describe  ClusterRole/cluster-admin\n\n\n#端口转发 本地2000端口映射到容器3000端口 &……& 目前只能用localhost访问\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=grafana,release=willing-lamb\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000\n\n\nkubectl get secrets -o json | kubectl update -f -\n\nkubectl exec POD_NAME -c CONTAINER_NAME reboot\nkubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c \"kill 1\"\n\nkubectl explain namespace\n\nkubectl get ns default --show-labels\nkubectl completion -h\n\nkubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force\n\ndocker images | grep '<none>'| awk '{print $3}' | xargs docker rmi\nkubectl -n kube-system get endpoints -o wide\n\n#dns 验证\nkubectl run curl --image=radial/busyboxplus:curl -it\nnslookup docker-dind-svc.gitlab-managed-apps\n\n\n#使用命令快速创建 deployment 和 service\nkubectl run nginx --image=nginx --replicas=2\nkubectl expose deployment nginx --port 80 --external-ip 172.17.8.201\n\nnode 上使用 k8s 的core-dns 服务\ndig @10.152.183.10 grafana.istio-system.svc.cluster.local\n\n\n#查看资源yaml\nkubectl api-resources | grep pod\nkubectl explain podtemplates.template.spec.containers\n\n```\n\n\n**RBAC**\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  namespace: default\n  name: example-sa\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: example-rolebinding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n  \n---\n#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n  \nserviceAccountName\nserviceAccount #pod请求别的命名空间时的帐号\n\nError: release community-feature-haozhe-wei failed: namespaces \"php-sht\" is forbidden: User \"system:serviceaccount:gitlab-managed-apps:default\" cannot get resource \"namespaces\" in API group \"\" in the namespace \"php-sht\"\n\n更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account\n```\n\n**跨namespace授权 **\n\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-view-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-view-php-sht-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: php-sht\nroleRef:\n  kind: Role\n  name: gitlab-view-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n**角色**\n\n```\nadmin\nmaintainer\ndeveloper\nguest/reporter\n```\n\n### Pod\n\n```\n每个 pod 都以mount形式挂载这个 默认的Servcice Account，\n如：mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\"\n\n单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。\n\n可以通过restartPolicy，改变pod的恢复策略\n\nselector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有\"role:frontend\"标签的Pod对象\n\ncommand: [\"sh\",\"-c\",\"mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g 'daemon off;'\"]\n\n#多行配置\nenv:\n    - name: COMMAND_SCRIPT\n      value: |-\n        set -xeo pipefail\n        helm init --upgrade\n        for i in $(seq 1 30); do helm version && break; sleep 1s; echo \"Retrying ($i)...\"; done\n        helm repo add runner https://charts.gitlab.io\n        helm repo update\n        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privileged\nspec:\n  containers:\n    - name: nginx-privileged\n      image: nginx:1.14.2\n      securityContext:\n        privileged: true\n        runAsUser: 1000 #指定容器运行账户\n      \n      \n\npod 的操作只有创建删除\n\n\"hostAliases\": [\n          {\n            \"ip\": \"172.16.101.197\",\n            \"hostnames\": [\n              \"prometheus.local.com\"\n            ]\n          }\n]\n\npod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.\n```\n\n**TLS**\n\n```\ncurl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem\nkubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key\n```\n\n**Namspace**\n\n```\npv 不属于 namespace \npvc 属于\n```\n\n**Label** and Annotations 注释 可以用来检索\n\n```\n#标签一定要有 key 可以没有 value\nkubectl label/annotate <resource> foo=bar\nkubectl label/annotate <resource> foo-\n```\n\n### 健康检查\n\n```\nlivenessProbe:\n  - initialDelaySeconds:5 #容器启动5s后开始执行\n    periodSeconds:5 #每5s执行一次\n\nreadlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期\n```\n\n### ConfigMap Secret Downard Api\n\n```\n\n这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。\n\nprojected volume可以映射很多volume源到相同的目录下\n\n#从配置文件生成 configmap\n<?php\n$c=file_get_contents(\"conf.php\");\necho json_encode($c,JSON_UNESCAPED_UNICODE).\"\\n\";\n```\n\n### k8s  node 节点加入集群\n\n```\nkubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd\n\n节点需要关闭 swap 启动docker服务\n\n\n还需要下载\nk8s.gcr.io/pause:3.1 镜像\nk8s.gcr.io/kube-proxy 镜像\n\n在 master节点观察子节点pod创建情况\n\n移除节点:\nkubectl delete node node-1\n```\n\n### PV\n\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: es-local-pv0\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: local-storage\n  local:\n    path: /data\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - php-cd-node\n```\n\n**redis**\n\n```\n   kubectl run --namespace kube-public redis-client --rm --tty -i --restart='Never' \\\n    --env REDIS_PASSWORD=$REDIS_PASSWORD \\\n   --image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash\n```\n\n### 映射外部服务\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n\n---\n\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nsubsets:\n  - addresses:\n    - ip: 10.111.8.166\n    ports:\n    - port: 8080\n      protocol: TCP\n\n---\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: uic\n  namespace: kube-system\nspec:\n  rules:\n  - host: uic.t1.youhaodongxi.com\n    http:\n      paths:\n      - backend:\n          serviceName: ldap-chang-password\n          servicePort: 80\n        path: /\n```\n\n\n\n**API权限**\n\n```\nhttps://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/\n\nAPISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')\nTOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode )\ncurl $APISERVER/api --header \"Authorization: Bearer $TOKEN\" --insecure\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"10.0.1.149:443\"\n    }\n  ]\n}\n\n```\n\n\n\n**how-to-create-a-kubectl-config-file-for-serviceaccount**\n\n```\nhttps://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount\n```\n\n\n\n**create-kubectl-by-user**\n\n```\nhttps://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/\n```\n\n\n\n**同一个service开2个端口**\n\n一般我们只有一个端口的时候，在service的yaml文件：\n\n```\nports:\n  - nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n\n而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：\n\n```\nports:\n  - name: http\n    nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n","source":"_posts/k8s-notes.md","raw":"---\ntitle: \"k8s 笔记\"\ndescription: \"\"\ndate: 2019-02-01 19:38:10\ntags: [k8s,kubernetes]\ncomments: false\nshare: true\n---\n\n**k8s 容器出现大量 Evicted**\n\n```\n$kubectl describe node/runner-e480\n\nNormal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure\n\ndf -h 系统盘使用85%\n\n修改了docker 镜像存储路径\nhttps://blog.csdn.net/glongljl/article/details/80158297\n\n参考:\nhttps://blog.csdn.net/qq_21816375/article/details/82905660\n```\n\n### k8s 命令\n\n```\n#命令行自动补全\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\nkubectl get sa --all-namespaces=true\nkubectl get roles --all-namespaces=true\nkubectl get RoleBinding  --all-namespaces=true\nkubectl get secrets --all-namespaces=true\nkubectl describe  ClusterRole/cluster-admin\n\n\n#端口转发 本地2000端口映射到容器3000端口 &……& 目前只能用localhost访问\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app=grafana,release=willing-lamb\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000\n\n\nkubectl get secrets -o json | kubectl update -f -\n\nkubectl exec POD_NAME -c CONTAINER_NAME reboot\nkubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c \"kill 1\"\n\nkubectl explain namespace\n\nkubectl get ns default --show-labels\nkubectl completion -h\n\nkubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force\n\ndocker images | grep '<none>'| awk '{print $3}' | xargs docker rmi\nkubectl -n kube-system get endpoints -o wide\n\n#dns 验证\nkubectl run curl --image=radial/busyboxplus:curl -it\nnslookup docker-dind-svc.gitlab-managed-apps\n\n\n#使用命令快速创建 deployment 和 service\nkubectl run nginx --image=nginx --replicas=2\nkubectl expose deployment nginx --port 80 --external-ip 172.17.8.201\n\nnode 上使用 k8s 的core-dns 服务\ndig @10.152.183.10 grafana.istio-system.svc.cluster.local\n\n\n#查看资源yaml\nkubectl api-resources | grep pod\nkubectl explain podtemplates.template.spec.containers\n\n```\n\n\n**RBAC**\n\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  namespace: default\n  name: example-sa\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: example-rolebinding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: example-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: example-role\n  apiGroup: rbac.authorization.k8s.io\n  \n---\n#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: example-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n  \nserviceAccountName\nserviceAccount #pod请求别的命名空间时的帐号\n\nError: release community-feature-haozhe-wei failed: namespaces \"php-sht\" is forbidden: User \"system:serviceaccount:gitlab-managed-apps:default\" cannot get resource \"namespaces\" in API group \"\" in the namespace \"php-sht\"\n\n更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account\n```\n\n**跨namespace授权 **\n\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: gitlab\n  name: gitlab-view-role\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: gitlab-view-php-sht-rolebinding\n  namespace: gitlab\nsubjects:\n- kind: ServiceAccount\n  name: admin\n  namespace: php-sht\nroleRef:\n  kind: Role\n  name: gitlab-view-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n**角色**\n\n```\nadmin\nmaintainer\ndeveloper\nguest/reporter\n```\n\n### Pod\n\n```\n每个 pod 都以mount形式挂载这个 默认的Servcice Account，\n如：mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\"\n\n单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。\n\n可以通过restartPolicy，改变pod的恢复策略\n\nselector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有\"role:frontend\"标签的Pod对象\n\ncommand: [\"sh\",\"-c\",\"mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g 'daemon off;'\"]\n\n#多行配置\nenv:\n    - name: COMMAND_SCRIPT\n      value: |-\n        set -xeo pipefail\n        helm init --upgrade\n        for i in $(seq 1 30); do helm version && break; sleep 1s; echo \"Retrying ($i)...\"; done\n        helm repo add runner https://charts.gitlab.io\n        helm repo update\n        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-privileged\nspec:\n  containers:\n    - name: nginx-privileged\n      image: nginx:1.14.2\n      securityContext:\n        privileged: true\n        runAsUser: 1000 #指定容器运行账户\n      \n      \n\npod 的操作只有创建删除\n\n\"hostAliases\": [\n          {\n            \"ip\": \"172.16.101.197\",\n            \"hostnames\": [\n              \"prometheus.local.com\"\n            ]\n          }\n]\n\npod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.\n```\n\n**TLS**\n\n```\ncurl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem\nkubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key\n```\n\n**Namspace**\n\n```\npv 不属于 namespace \npvc 属于\n```\n\n**Label** and Annotations 注释 可以用来检索\n\n```\n#标签一定要有 key 可以没有 value\nkubectl label/annotate <resource> foo=bar\nkubectl label/annotate <resource> foo-\n```\n\n### 健康检查\n\n```\nlivenessProbe:\n  - initialDelaySeconds:5 #容器启动5s后开始执行\n    periodSeconds:5 #每5s执行一次\n\nreadlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期\n```\n\n### ConfigMap Secret Downard Api\n\n```\n\n这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。\n\nprojected volume可以映射很多volume源到相同的目录下\n\n#从配置文件生成 configmap\n<?php\n$c=file_get_contents(\"conf.php\");\necho json_encode($c,JSON_UNESCAPED_UNICODE).\"\\n\";\n```\n\n### k8s  node 节点加入集群\n\n```\nkubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd\n\n节点需要关闭 swap 启动docker服务\n\n\n还需要下载\nk8s.gcr.io/pause:3.1 镜像\nk8s.gcr.io/kube-proxy 镜像\n\n在 master节点观察子节点pod创建情况\n\n移除节点:\nkubectl delete node node-1\n```\n\n### PV\n\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: es-local-pv0\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: local-storage\n  local:\n    path: /data\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - php-cd-node\n```\n\n**redis**\n\n```\n   kubectl run --namespace kube-public redis-client --rm --tty -i --restart='Never' \\\n    --env REDIS_PASSWORD=$REDIS_PASSWORD \\\n   --image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash\n```\n\n### 映射外部服务\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n\n---\n\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: ldap-chang-password\n  namespace: kube-system\nsubsets:\n  - addresses:\n    - ip: 10.111.8.166\n    ports:\n    - port: 8080\n      protocol: TCP\n\n---\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: uic\n  namespace: kube-system\nspec:\n  rules:\n  - host: uic.t1.youhaodongxi.com\n    http:\n      paths:\n      - backend:\n          serviceName: ldap-chang-password\n          servicePort: 80\n        path: /\n```\n\n\n\n**API权限**\n\n```\nhttps://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/\n\nAPISERVER=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')\nTOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode )\ncurl $APISERVER/api --header \"Authorization: Bearer $TOKEN\" --insecure\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"10.0.1.149:443\"\n    }\n  ]\n}\n\n```\n\n\n\n**how-to-create-a-kubectl-config-file-for-serviceaccount**\n\n```\nhttps://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount\n```\n\n\n\n**create-kubectl-by-user**\n\n```\nhttps://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/\n```\n\n\n\n**同一个service开2个端口**\n\n一般我们只有一个端口的时候，在service的yaml文件：\n\n```\nports:\n  - nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n\n而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：\n\n```\nports:\n  - name: http\n    nodePort: 8482\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n```\n","slug":"k8s-notes","published":1,"updated":"2020-07-15T02:47:52.827Z","layout":"post","photos":[],"link":"","_id":"ckj9uenlm00120wpb0dnf9ehz","content":"<p><strong>k8s 容器出现大量 Evicted</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$kubectl describe node/runner-e480</span><br><span class=\"line\"></span><br><span class=\"line\">Normal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure</span><br><span class=\"line\"></span><br><span class=\"line\">df -h 系统盘使用85%</span><br><span class=\"line\"></span><br><span class=\"line\">修改了docker 镜像存储路径</span><br><span class=\"line\">https://blog.csdn.net/glongljl/article/details/80158297</span><br><span class=\"line\"></span><br><span class=\"line\">参考:</span><br><span class=\"line\">https://blog.csdn.net/qq_21816375/article/details/82905660</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-命令\"><a href=\"#k8s-命令\" class=\"headerlink\" title=\"k8s 命令\"></a>k8s 命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#命令行自动补全</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get sa --all-namespaces=true</span><br><span class=\"line\">kubectl get roles --all-namespaces=true</span><br><span class=\"line\">kubectl get RoleBinding  --all-namespaces=true</span><br><span class=\"line\">kubectl get secrets --all-namespaces=true</span><br><span class=\"line\">kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#端口转发 本地2000端口映射到容器3000端口 &amp;……&amp; 目前只能用localhost访问</span><br><span class=\"line\">export POD_NAME=$(kubectl get pods --namespace default -l &quot;app=grafana,release=willing-lamb&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get secrets -o json | kubectl update -f -</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec POD_NAME -c CONTAINER_NAME reboot</span><br><span class=\"line\">kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c &quot;kill 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl explain namespace</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get ns default --show-labels</span><br><span class=\"line\">kubectl completion -h</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force</span><br><span class=\"line\"></span><br><span class=\"line\">docker images | grep &apos;&lt;none&gt;&apos;| awk &apos;&#123;print $3&#125;&apos; | xargs docker rmi</span><br><span class=\"line\">kubectl -n kube-system get endpoints -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">#dns 验证</span><br><span class=\"line\">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class=\"line\">nslookup docker-dind-svc.gitlab-managed-apps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#使用命令快速创建 deployment 和 service</span><br><span class=\"line\">kubectl run nginx --image=nginx --replicas=2</span><br><span class=\"line\">kubectl expose deployment nginx --port 80 --external-ip 172.17.8.201</span><br><span class=\"line\"></span><br><span class=\"line\">node 上使用 k8s 的core-dns 服务</span><br><span class=\"line\">dig @10.152.183.10 grafana.istio-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#查看资源yaml</span><br><span class=\"line\">kubectl api-resources | grep pod</span><br><span class=\"line\">kubectl explain podtemplates.template.spec.containers</span><br></pre></td></tr></table></figure>\n<p><strong>RBAC</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources: [&quot;pods&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-rolebinding</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">serviceAccountName</span><br><span class=\"line\">serviceAccount #pod请求别的命名空间时的帐号</span><br><span class=\"line\"></span><br><span class=\"line\">Error: release community-feature-haozhe-wei failed: namespaces &quot;php-sht&quot; is forbidden: User &quot;system:serviceaccount:gitlab-managed-apps:default&quot; cannot get resource &quot;namespaces&quot; in API group &quot;&quot; in the namespace &quot;php-sht&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account</span><br></pre></td></tr></table></figure>\n<p><strong>跨namespace授权 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-view-php-sht-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: php-sht</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p><strong>角色</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin</span><br><span class=\"line\">maintainer</span><br><span class=\"line\">developer</span><br><span class=\"line\">guest/reporter</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每个 pod 都以mount形式挂载这个 默认的Servcice Account，</span><br><span class=\"line\">如：mountPath&quot;: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过restartPolicy，改变pod的恢复策略</span><br><span class=\"line\"></span><br><span class=\"line\">selector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有&quot;role:frontend&quot;标签的Pod对象</span><br><span class=\"line\"></span><br><span class=\"line\">command: [&quot;sh&quot;,&quot;-c&quot;,&quot;mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g &apos;daemon off;&apos;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#多行配置</span><br><span class=\"line\">env:</span><br><span class=\"line\">    - name: COMMAND_SCRIPT</span><br><span class=\"line\">      value: |-</span><br><span class=\"line\">        set -xeo pipefail</span><br><span class=\"line\">        helm init --upgrade</span><br><span class=\"line\">        for i in $(seq 1 30); do helm version &amp;&amp; break; sleep 1s; echo &quot;Retrying ($i)...&quot;; done</span><br><span class=\"line\">        helm repo add runner https://charts.gitlab.io</span><br><span class=\"line\">        helm repo update</span><br><span class=\"line\">        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-privileged</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: nginx-privileged</span><br><span class=\"line\">      image: nginx:1.14.2</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        runAsUser: 1000 #指定容器运行账户</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">pod 的操作只有创建删除</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;hostAliases&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;ip&quot;: &quot;172.16.101.197&quot;,</span><br><span class=\"line\">            &quot;hostnames&quot;: [</span><br><span class=\"line\">              &quot;prometheus.local.com&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">pod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.</span><br></pre></td></tr></table></figure>\n<p><strong>TLS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem</span><br><span class=\"line\">kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</span><br></pre></td></tr></table></figure>\n<p><strong>Namspace</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pv 不属于 namespace </span><br><span class=\"line\">pvc 属于</span><br></pre></td></tr></table></figure>\n<p><strong>Label</strong> and Annotations 注释 可以用来检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标签一定要有 key 可以没有 value</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo=bar</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo-</span><br></pre></td></tr></table></figure>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  - initialDelaySeconds:5 #容器启动5s后开始执行</span><br><span class=\"line\">    periodSeconds:5 #每5s执行一次</span><br><span class=\"line\"></span><br><span class=\"line\">readlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期</span><br></pre></td></tr></table></figure>\n<h3 id=\"ConfigMap-Secret-Downard-Api\"><a href=\"#ConfigMap-Secret-Downard-Api\" class=\"headerlink\" title=\"ConfigMap Secret Downard Api\"></a>ConfigMap Secret Downard Api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。</span><br><span class=\"line\"></span><br><span class=\"line\">projected volume可以映射很多volume源到相同的目录下</span><br><span class=\"line\"></span><br><span class=\"line\">#从配置文件生成 configmap</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$c=file_get_contents(&quot;conf.php&quot;);</span><br><span class=\"line\">echo json_encode($c,JSON_UNESCAPED_UNICODE).&quot;\\n&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-node-节点加入集群\"><a href=\"#k8s-node-节点加入集群\" class=\"headerlink\" title=\"k8s  node 节点加入集群\"></a>k8s  node 节点加入集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd</span><br><span class=\"line\"></span><br><span class=\"line\">节点需要关闭 swap 启动docker服务</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还需要下载</span><br><span class=\"line\">k8s.gcr.io/pause:3.1 镜像</span><br><span class=\"line\">k8s.gcr.io/kube-proxy 镜像</span><br><span class=\"line\"></span><br><span class=\"line\">在 master节点观察子节点pod创建情况</span><br><span class=\"line\"></span><br><span class=\"line\">移除节点:</span><br><span class=\"line\">kubectl delete node node-1</span><br></pre></td></tr></table></figure>\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es-local-pv0</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 10Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteOnce</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Retain</span><br><span class=\"line\">  storageClassName: local-storage</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    path: /data</span><br><span class=\"line\">  nodeAffinity:</span><br><span class=\"line\">    required:</span><br><span class=\"line\">      nodeSelectorTerms:</span><br><span class=\"line\">      - matchExpressions:</span><br><span class=\"line\">        - key: kubernetes.io/hostname</span><br><span class=\"line\">          operator: In</span><br><span class=\"line\">          values:</span><br><span class=\"line\">          - php-cd-node</span><br></pre></td></tr></table></figure>\n<p><strong>redis</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl run --namespace kube-public redis-client --rm --tty -i --restart=&apos;Never&apos; \\</span><br><span class=\"line\"> --env REDIS_PASSWORD=$REDIS_PASSWORD \\</span><br><span class=\"line\">--image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射外部服务\"><a href=\"#映射外部服务\" class=\"headerlink\" title=\"映射外部服务\"></a>映射外部服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 10.111.8.166</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - port: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: uic</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: uic.t1.youhaodongxi.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: ldap-chang-password</span><br><span class=\"line\">          servicePort: 80</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n<p><strong>API权限</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/</span><br><span class=\"line\"></span><br><span class=\"line\">APISERVER=$(kubectl config view --minify -o jsonpath=&apos;&#123;.clusters[0].cluster.server&#125;&apos;)</span><br><span class=\"line\">TOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath=&apos;&#123;.secrets[0].name&#125;&apos;) -o jsonpath=&apos;&#123;.data.token&#125;&apos; | base64 --decode )</span><br><span class=\"line\">curl $APISERVER/api --header &quot;Authorization: Bearer $TOKEN&quot; --insecure</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class=\"line\">  &quot;versions&quot;: [</span><br><span class=\"line\">    &quot;v1&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class=\"line\">      &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>how-to-create-a-kubectl-config-file-for-serviceaccount</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount</span><br></pre></td></tr></table></figure>\n<p><strong>create-kubectl-by-user</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/</span><br></pre></td></tr></table></figure>\n<p><strong>同一个service开2个端口</strong></p>\n<p>一般我们只有一个端口的时候，在service的yaml文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n<p>而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>k8s 容器出现大量 Evicted</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$kubectl describe node/runner-e480</span><br><span class=\"line\"></span><br><span class=\"line\">Normal   NodeHasNoDiskPressure    6m19s (x8 over 6m19s)  kubelet, runner-e480     Node runner-e480 status is now: NodeHasNoDiskPressure</span><br><span class=\"line\"></span><br><span class=\"line\">df -h 系统盘使用85%</span><br><span class=\"line\"></span><br><span class=\"line\">修改了docker 镜像存储路径</span><br><span class=\"line\">https://blog.csdn.net/glongljl/article/details/80158297</span><br><span class=\"line\"></span><br><span class=\"line\">参考:</span><br><span class=\"line\">https://blog.csdn.net/qq_21816375/article/details/82905660</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-命令\"><a href=\"#k8s-命令\" class=\"headerlink\" title=\"k8s 命令\"></a>k8s 命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#命令行自动补全</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get sa --all-namespaces=true</span><br><span class=\"line\">kubectl get roles --all-namespaces=true</span><br><span class=\"line\">kubectl get RoleBinding  --all-namespaces=true</span><br><span class=\"line\">kubectl get secrets --all-namespaces=true</span><br><span class=\"line\">kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#端口转发 本地2000端口映射到容器3000端口 &amp;……&amp; 目前只能用localhost访问</span><br><span class=\"line\">export POD_NAME=$(kubectl get pods --namespace default -l &quot;app=grafana,release=willing-lamb&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class=\"line\">kubectl port-forward willing-lamb-grafana-75d49cb58c-7dn6d 2000:3000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get secrets -o json | kubectl update -f -</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec POD_NAME -c CONTAINER_NAME reboot</span><br><span class=\"line\">kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c &quot;kill 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl explain namespace</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get ns default --show-labels</span><br><span class=\"line\">kubectl completion -h</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete pod deviosow-1828 --namespace=kube-system --grace-period=0 --force</span><br><span class=\"line\"></span><br><span class=\"line\">docker images | grep &apos;&lt;none&gt;&apos;| awk &apos;&#123;print $3&#125;&apos; | xargs docker rmi</span><br><span class=\"line\">kubectl -n kube-system get endpoints -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">#dns 验证</span><br><span class=\"line\">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class=\"line\">nslookup docker-dind-svc.gitlab-managed-apps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#使用命令快速创建 deployment 和 service</span><br><span class=\"line\">kubectl run nginx --image=nginx --replicas=2</span><br><span class=\"line\">kubectl expose deployment nginx --port 80 --external-ip 172.17.8.201</span><br><span class=\"line\"></span><br><span class=\"line\">node 上使用 k8s 的core-dns 服务</span><br><span class=\"line\">dig @10.152.183.10 grafana.istio-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#查看资源yaml</span><br><span class=\"line\">kubectl api-resources | grep pod</span><br><span class=\"line\">kubectl explain podtemplates.template.spec.containers</span><br></pre></td></tr></table></figure>\n<p><strong>RBAC</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources: [&quot;pods&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-rolebinding</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: example-sa</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  </span><br><span class=\"line\">---</span><br><span class=\"line\">#管理员，角色配置可以参考 kubectl describe  ClusterRole/cluster-admin</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  name: example-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">serviceAccountName</span><br><span class=\"line\">serviceAccount #pod请求别的命名空间时的帐号</span><br><span class=\"line\"></span><br><span class=\"line\">Error: release community-feature-haozhe-wei failed: namespaces &quot;php-sht&quot; is forbidden: User &quot;system:serviceaccount:gitlab-managed-apps:default&quot; cannot get resource &quot;namespaces&quot; in API group &quot;&quot; in the namespace &quot;php-sht&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">更新密钥要小心，因为帐号token会被其他服务关联，比如 tiller account</span><br></pre></td></tr></table></figure>\n<p><strong>跨namespace授权 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Role</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: gitlab-view-php-sht-rolebinding</span><br><span class=\"line\">  namespace: gitlab</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin</span><br><span class=\"line\">  namespace: php-sht</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: gitlab-view-role</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>\n<p><strong>角色</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin</span><br><span class=\"line\">maintainer</span><br><span class=\"line\">developer</span><br><span class=\"line\">guest/reporter</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每个 pod 都以mount形式挂载这个 默认的Servcice Account，</span><br><span class=\"line\">如：mountPath&quot;: &quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">单独的pod，恢复过程永远发生在当前节点，不会跑到别的节点上去。如果你想让Pod出现在其他的可用节点上，就必须使用 deployment 这样的控制器来管理 pod，哪怕你只需要一个 pod 副本。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过restartPolicy，改变pod的恢复策略</span><br><span class=\"line\"></span><br><span class=\"line\">selector 意味着后面这些追加的定义，只会作用于 selector 所定义的，带有&quot;role:frontend&quot;标签的Pod对象</span><br><span class=\"line\"></span><br><span class=\"line\">command: [&quot;sh&quot;,&quot;-c&quot;,&quot;mkdir /var/www/html ; ln -s /var/www/community/public /var/www/html/public ; nginx -g &apos;daemon off;&apos;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#多行配置</span><br><span class=\"line\">env:</span><br><span class=\"line\">    - name: COMMAND_SCRIPT</span><br><span class=\"line\">      value: |-</span><br><span class=\"line\">        set -xeo pipefail</span><br><span class=\"line\">        helm init --upgrade</span><br><span class=\"line\">        for i in $(seq 1 30); do helm version &amp;&amp; break; sleep 1s; echo &quot;Retrying ($i)...&quot;; done</span><br><span class=\"line\">        helm repo add runner https://charts.gitlab.io</span><br><span class=\"line\">        helm repo update</span><br><span class=\"line\">        helm upgrade runner runner/gitlab-runner --install --reset-values --tls --tls-ca-cert /data/helm/runner/config/ca.pem --tls-cert /data/helm/runner/config/cert.pem --tls-key /data/helm/runner/config/key.pem --version 0.4.1 --set rbac.create\\=true,rbac.enabled\\=true --namespace gitlab-managed-apps -f /data/helm/runner/config/values.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-privileged</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: nginx-privileged</span><br><span class=\"line\">      image: nginx:1.14.2</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        runAsUser: 1000 #指定容器运行账户</span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">pod 的操作只有创建删除</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;hostAliases&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;ip&quot;: &quot;172.16.101.197&quot;,</span><br><span class=\"line\">            &quot;hostnames&quot;: [</span><br><span class=\"line\">              &quot;prometheus.local.com&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">pod 的标签很很重要，loki用来建立索引，prometheus可以用来指定报警分组.</span><br></pre></td></tr></table></figure>\n<p><strong>TLS</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://192.168.207.237:2376/info --cert ./cert.pm --key ./key.pem  --cacert ./ca.pem</span><br><span class=\"line\">kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</span><br></pre></td></tr></table></figure>\n<p><strong>Namspace</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pv 不属于 namespace </span><br><span class=\"line\">pvc 属于</span><br></pre></td></tr></table></figure>\n<p><strong>Label</strong> and Annotations 注释 可以用来检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标签一定要有 key 可以没有 value</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo=bar</span><br><span class=\"line\">kubectl label/annotate &lt;resource&gt; foo-</span><br></pre></td></tr></table></figure>\n<h3 id=\"健康检查\"><a href=\"#健康检查\" class=\"headerlink\" title=\"健康检查\"></a>健康检查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  - initialDelaySeconds:5 #容器启动5s后开始执行</span><br><span class=\"line\">    periodSeconds:5 #每5s执行一次</span><br><span class=\"line\"></span><br><span class=\"line\">readlinessProbe: #健康检查结果决定这个pod是不是能被通过Service的方式访问到，而并不影响Pod的生命周期</span><br></pre></td></tr></table></figure>\n<h3 id=\"ConfigMap-Secret-Downard-Api\"><a href=\"#ConfigMap-Secret-Downard-Api\" class=\"headerlink\" title=\"ConfigMap Secret Downard Api\"></a>ConfigMap Secret Downard Api</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这三种Project Volume 定义的信息，还可以通过环境变量的方式出现在容器里。但环境变量不具备自动更新的能力。所以一般情况下，都建议你好似用 Volume 文件的方式获取这些信息。</span><br><span class=\"line\"></span><br><span class=\"line\">projected volume可以映射很多volume源到相同的目录下</span><br><span class=\"line\"></span><br><span class=\"line\">#从配置文件生成 configmap</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$c=file_get_contents(&quot;conf.php&quot;);</span><br><span class=\"line\">echo json_encode($c,JSON_UNESCAPED_UNICODE).&quot;\\n&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"k8s-node-节点加入集群\"><a href=\"#k8s-node-节点加入集群\" class=\"headerlink\" title=\"k8s  node 节点加入集群\"></a>k8s  node 节点加入集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 172.16.101.197:6443 --token vq0fs8.rzcw1lf6k3lz7986     --discovery-token-ca-cert-hash sha256:68c8228227ae029b091c8d6cdecde4c11ec5dbbbd43fa725060ffdd512fef3cd</span><br><span class=\"line\"></span><br><span class=\"line\">节点需要关闭 swap 启动docker服务</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还需要下载</span><br><span class=\"line\">k8s.gcr.io/pause:3.1 镜像</span><br><span class=\"line\">k8s.gcr.io/kube-proxy 镜像</span><br><span class=\"line\"></span><br><span class=\"line\">在 master节点观察子节点pod创建情况</span><br><span class=\"line\"></span><br><span class=\"line\">移除节点:</span><br><span class=\"line\">kubectl delete node node-1</span><br></pre></td></tr></table></figure>\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es-local-pv0</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  capacity:</span><br><span class=\"line\">    storage: 10Gi</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteOnce</span><br><span class=\"line\">  persistentVolumeReclaimPolicy: Retain</span><br><span class=\"line\">  storageClassName: local-storage</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    path: /data</span><br><span class=\"line\">  nodeAffinity:</span><br><span class=\"line\">    required:</span><br><span class=\"line\">      nodeSelectorTerms:</span><br><span class=\"line\">      - matchExpressions:</span><br><span class=\"line\">        - key: kubernetes.io/hostname</span><br><span class=\"line\">          operator: In</span><br><span class=\"line\">          values:</span><br><span class=\"line\">          - php-cd-node</span><br></pre></td></tr></table></figure>\n<p><strong>redis</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl run --namespace kube-public redis-client --rm --tty -i --restart=&apos;Never&apos; \\</span><br><span class=\"line\"> --env REDIS_PASSWORD=$REDIS_PASSWORD \\</span><br><span class=\"line\">--image docker.io/bitnami/redis:5.0.5-debian-9-r36 -- bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"映射外部服务\"><a href=\"#映射外部服务\" class=\"headerlink\" title=\"映射外部服务\"></a>映射外部服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: ldap-chang-password</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 10.111.8.166</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - port: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: uic</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: uic.t1.youhaodongxi.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: ldap-chang-password</span><br><span class=\"line\">          servicePort: 80</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n<p><strong>API权限</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/</span><br><span class=\"line\"></span><br><span class=\"line\">APISERVER=$(kubectl config view --minify -o jsonpath=&apos;&#123;.clusters[0].cluster.server&#125;&apos;)</span><br><span class=\"line\">TOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath=&apos;&#123;.secrets[0].name&#125;&apos;) -o jsonpath=&apos;&#123;.data.token&#125;&apos; | base64 --decode )</span><br><span class=\"line\">curl $APISERVER/api --header &quot;Authorization: Bearer $TOKEN&quot; --insecure</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;kind&quot;: &quot;APIVersions&quot;,</span><br><span class=\"line\">  &quot;versions&quot;: [</span><br><span class=\"line\">    &quot;v1&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;serverAddressByClientCIDRs&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;,</span><br><span class=\"line\">      &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>how-to-create-a-kubectl-config-file-for-serviceaccount</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://stackoverflow.com/questions/47770676/how-to-create-a-kubectl-config-file-for-serviceaccount</span><br></pre></td></tr></table></figure>\n<p><strong>create-kubectl-by-user</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/</span><br></pre></td></tr></table></figure>\n<p><strong>同一个service开2个端口</strong></p>\n<p>一般我们只有一个端口的时候，在service的yaml文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n<p>而如果你想开两个端口，直接复制粘贴可不行，k8s会提示你必须要加上name。所以,如果要开多端口，要为每个port都指定一个name，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    nodePort: 8482</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br></pre></td></tr></table></figure>\n"},{"title":"ldap 常用命令","description":"","date":"2020-10-14T14:17:00.000Z","comments":0,"share":true,"_content":"\n#### ldapsearch\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"cn=dong.tian,cn=apple,cn=People,dc=apple,dc=com\" \n```\n\n//搜索 cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com 过滤 mail cn sn givenname字段\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com\"  \"(objectClass=*)\" mail cn sn givenname\n```\n\n // 在cn=apple,cn=People,dc=apple,dc=com下搜索 carLicense=IVFISMVKUFXNV6ZF 的记录\n\n```\nldapsearch -x  -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"dc=apple,dc=com\"  \"(carLicense=IVFISMVKUFXNV6ZF)\"\n```\n\n // 导出所有数据\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******'  -H ldap://0.0.0.0:9981 -b 'dc=apple,dc=com' -LLL > /tmp/ldapdb.ldif\n```\n\n-l 5 搜索时间限制为五秒，-z 5 大小限制为五\n\n#### ldapmodify\n\n```\nldapmodify  -x  -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -f /tmp/ldapm\n```\n\n文件内容： \n\n```\ndn:cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com \nchangetype: modify\nreplace: mobile\nmobile: 15101646884\n```\n\n#### ldapdelete\n\n```\nldapdelete -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -v \"cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com\" -v\n```\n\n#### ldapdadd\n\n```\nldapadd -x -D \"cn=admin,dc=apple,dc=com\" -w ****** -H ldap://0.0.0.0:9981  -f /tmp/add.ldif \n```\n<!-- more -->\n\n**PHP 安装 ldap 扩展**\n\n```\nyum install openldap\nyum install openldap-devel\ncp -frp /usr/lib64/libldap* /usr/lib/ \n\nwget http://cn2.php.net/distributions/php-5.6.35.tar.gz\ntar -zxvf php-5.6.35.tar.gz \ncd php-5.6.35/ext/ldap\n/home/work/sky/thirdparty/php/bin/phpize\n./configure --with-php-config=/home/work/sky/thirdparty/php/bin/php-config\nmake && make install\nvim /home/work/sky/thirdparty/php/lib/php.ini\nkill -SIGUSR2 `ps -ef | grep php-fpm | grep master | awk '{print $2}'`\n```\n\n**修改密码**\n\n```\ncat <<EOF |ldapmodify -x -D 'cn=admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:389\ndn: cn=weihaozhe,cn=People,cn=apple,dc=apple,dc=com\nchangetype: modify\nreplace: userPassword\nuserPassword: PBKDF2-SHA256}10000$r0zVLb.7fzLJzBHg1GbC1Q$PVAePYz4pjC8uc31UlzYNZObrWdDYt1blKiR90EvrQ85CgK9FZ4/rPjhETHUx5YXs.E\nEOF\n```\n\n**权限配置**\n\n```\naccess to dn.one=\"cn=People,dc=apple,dc=com\"\nby dn=\"cn=search,cn=People,dc=apple,dc=com\" read\nby self write\nby self read\nby anonymous auth\nby * none\n\naccess to *\nby dn=\"cn=root,dc=apple,dc=com\" write\nby anonymous auth\nby * read\n```\n\n**字段映射**\n\n```\nprotected static $map = [\n        'id'       => 'dn',\n        'username' => 'cn',\n        'realname' => 'sn',\n        'password' => 'userpassword',\n        'ext'      => 'telephonenumber',\n        'phone'    => 'mobile',\n        'email'    => 'mail',\n        'secretkey'=> 'carlicense',\n        'status'   => 'businesscategory',\n        'photoUri' => 'givenname',\n        'department'     => 'departmentnumber',\n        'employeenumber' => 'employeenumber',\n        'workseat'  => 'workseat',\n        'birthday'  => 'birthday',\n        'job'       => 'job',\n        'constellation'  => 'constellation',\n        'bloodtype' => 'bloodtype',\n        'description' => 'description',\n        'haveauth'   => 'haveauth',\n        'msgnotify'  => 'msgnotify',\n        'authkey'    => 'authkey',\n        'jobType'      =>  'employeetype',\n        'secondAuthType' => 'postalcode'\n    ];\n\n\nldapsearch -x -D 'uid=auth,ou=users,dc=apple,dc=com' -w '***' -H ldap://10.0.1.*:389 -b \"uid=weihaozhe,ou=users,dc=apple,dc=com\"\n# extended LDIF\n#\n# LDAPv3\n# base <uid=weihaozhe,ou=users,dc=apple,dc=com> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# weihaozhe, users, apple.com\ndn: uid=weihaozhe,ou=users,dc=apple,dc=com\nobjectClass: posixAccount\nobjectClass: shadowAccount\nobjectClass: inetOrgPerson\ncn:: 6a2P5rWp5ZOy\ngecos: Linux\ngidNumber: 500\ngivenName:: 5rWp5ZOy\nhomeDirectory: /home/weihaozhe/\nloginShell: /bin/bash\nmail: weihaozhe@apple.net\nmobile: 176**10668100\nsn:: 6a2P\nuidNumber: 1761**68100\nuid: weihaozhe\n```\n\n**备份**\n\n```\n* */1 * * * sh /home/work/ldap/backup/bin/run.sh\ncat run.sh\n#!/bin/bash\nBACKUP_PATH=/home/work/ldap/backup\ndocker exec -it openldap /home/work/ldap/sbin/slapcat > ${BACKUP_PATH}/data/openldap-backup.ldif 2>/dev/null\nsh ${BACKUP_PATH}/bin/backuplog.sh -P ${BACKUP_PATH}/data -F openldap-backup.ldif -B ./bak\n\nhttps://gist.githubusercontent.com/kunpengku/f18651f582d84c1756a7/raw/03b001a8ad0c3ba544f07e3d1512d7db60d1dd84/backuplog.sh\n```\n\n**工具**\n\nLdap Admin Tool\n\napache directory studio\n\n\n\n参考：\n\n[openldap+php-ldap操作](https://www.cnblogs.com/dwj97/p/7513509.html)\n\n[基于LDAP进行验证-方法和问题](http://blog.csdn.net/peterwanghao/article/details/7481444) \n\n[Openldap命令详解](https://www.cnblogs.com/xzkzzz/p/9269714.html)","source":"_posts/ldap.md","raw":"---\ntitle: \"ldap 常用命令\"\ndescription: \"\"\ndate: 2020-10-14 14:17:00\ntags: [ldap]\ncomments: false\nshare: true\n---\n\n#### ldapsearch\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"cn=dong.tian,cn=apple,cn=People,dc=apple,dc=com\" \n```\n\n//搜索 cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com 过滤 mail cn sn givenname字段\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com\"  \"(objectClass=*)\" mail cn sn givenname\n```\n\n // 在cn=apple,cn=People,dc=apple,dc=com下搜索 carLicense=IVFISMVKUFXNV6ZF 的记录\n\n```\nldapsearch -x  -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -b \"dc=apple,dc=com\"  \"(carLicense=IVFISMVKUFXNV6ZF)\"\n```\n\n // 导出所有数据\n\n```\nldapsearch -x -D 'cn=Admin,dc=apple,dc=com' -w '******'  -H ldap://0.0.0.0:9981 -b 'dc=apple,dc=com' -LLL > /tmp/ldapdb.ldif\n```\n\n-l 5 搜索时间限制为五秒，-z 5 大小限制为五\n\n#### ldapmodify\n\n```\nldapmodify  -x  -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -f /tmp/ldapm\n```\n\n文件内容： \n\n```\ndn:cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com \nchangetype: modify\nreplace: mobile\nmobile: 15101646884\n```\n\n#### ldapdelete\n\n```\nldapdelete -x -D 'cn=Admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:9981 -v \"cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com\" -v\n```\n\n#### ldapdadd\n\n```\nldapadd -x -D \"cn=admin,dc=apple,dc=com\" -w ****** -H ldap://0.0.0.0:9981  -f /tmp/add.ldif \n```\n<!-- more -->\n\n**PHP 安装 ldap 扩展**\n\n```\nyum install openldap\nyum install openldap-devel\ncp -frp /usr/lib64/libldap* /usr/lib/ \n\nwget http://cn2.php.net/distributions/php-5.6.35.tar.gz\ntar -zxvf php-5.6.35.tar.gz \ncd php-5.6.35/ext/ldap\n/home/work/sky/thirdparty/php/bin/phpize\n./configure --with-php-config=/home/work/sky/thirdparty/php/bin/php-config\nmake && make install\nvim /home/work/sky/thirdparty/php/lib/php.ini\nkill -SIGUSR2 `ps -ef | grep php-fpm | grep master | awk '{print $2}'`\n```\n\n**修改密码**\n\n```\ncat <<EOF |ldapmodify -x -D 'cn=admin,dc=apple,dc=com' -w '******' -H ldap://0.0.0.0:389\ndn: cn=weihaozhe,cn=People,cn=apple,dc=apple,dc=com\nchangetype: modify\nreplace: userPassword\nuserPassword: PBKDF2-SHA256}10000$r0zVLb.7fzLJzBHg1GbC1Q$PVAePYz4pjC8uc31UlzYNZObrWdDYt1blKiR90EvrQ85CgK9FZ4/rPjhETHUx5YXs.E\nEOF\n```\n\n**权限配置**\n\n```\naccess to dn.one=\"cn=People,dc=apple,dc=com\"\nby dn=\"cn=search,cn=People,dc=apple,dc=com\" read\nby self write\nby self read\nby anonymous auth\nby * none\n\naccess to *\nby dn=\"cn=root,dc=apple,dc=com\" write\nby anonymous auth\nby * read\n```\n\n**字段映射**\n\n```\nprotected static $map = [\n        'id'       => 'dn',\n        'username' => 'cn',\n        'realname' => 'sn',\n        'password' => 'userpassword',\n        'ext'      => 'telephonenumber',\n        'phone'    => 'mobile',\n        'email'    => 'mail',\n        'secretkey'=> 'carlicense',\n        'status'   => 'businesscategory',\n        'photoUri' => 'givenname',\n        'department'     => 'departmentnumber',\n        'employeenumber' => 'employeenumber',\n        'workseat'  => 'workseat',\n        'birthday'  => 'birthday',\n        'job'       => 'job',\n        'constellation'  => 'constellation',\n        'bloodtype' => 'bloodtype',\n        'description' => 'description',\n        'haveauth'   => 'haveauth',\n        'msgnotify'  => 'msgnotify',\n        'authkey'    => 'authkey',\n        'jobType'      =>  'employeetype',\n        'secondAuthType' => 'postalcode'\n    ];\n\n\nldapsearch -x -D 'uid=auth,ou=users,dc=apple,dc=com' -w '***' -H ldap://10.0.1.*:389 -b \"uid=weihaozhe,ou=users,dc=apple,dc=com\"\n# extended LDIF\n#\n# LDAPv3\n# base <uid=weihaozhe,ou=users,dc=apple,dc=com> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# weihaozhe, users, apple.com\ndn: uid=weihaozhe,ou=users,dc=apple,dc=com\nobjectClass: posixAccount\nobjectClass: shadowAccount\nobjectClass: inetOrgPerson\ncn:: 6a2P5rWp5ZOy\ngecos: Linux\ngidNumber: 500\ngivenName:: 5rWp5ZOy\nhomeDirectory: /home/weihaozhe/\nloginShell: /bin/bash\nmail: weihaozhe@apple.net\nmobile: 176**10668100\nsn:: 6a2P\nuidNumber: 1761**68100\nuid: weihaozhe\n```\n\n**备份**\n\n```\n* */1 * * * sh /home/work/ldap/backup/bin/run.sh\ncat run.sh\n#!/bin/bash\nBACKUP_PATH=/home/work/ldap/backup\ndocker exec -it openldap /home/work/ldap/sbin/slapcat > ${BACKUP_PATH}/data/openldap-backup.ldif 2>/dev/null\nsh ${BACKUP_PATH}/bin/backuplog.sh -P ${BACKUP_PATH}/data -F openldap-backup.ldif -B ./bak\n\nhttps://gist.githubusercontent.com/kunpengku/f18651f582d84c1756a7/raw/03b001a8ad0c3ba544f07e3d1512d7db60d1dd84/backuplog.sh\n```\n\n**工具**\n\nLdap Admin Tool\n\napache directory studio\n\n\n\n参考：\n\n[openldap+php-ldap操作](https://www.cnblogs.com/dwj97/p/7513509.html)\n\n[基于LDAP进行验证-方法和问题](http://blog.csdn.net/peterwanghao/article/details/7481444) \n\n[Openldap命令详解](https://www.cnblogs.com/xzkzzz/p/9269714.html)","slug":"ldap","published":1,"updated":"2020-10-14T06:25:26.666Z","layout":"post","photos":[],"link":"","_id":"ckj9uenlo00140wpbm675erta","content":"<h4 id=\"ldapsearch\"><a href=\"#ldapsearch\" class=\"headerlink\" title=\"ldapsearch\"></a>ldapsearch</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;cn=dong.tian,cn=apple,cn=People,dc=apple,dc=com&quot;</span><br></pre></td></tr></table></figure>\n<p>//搜索 cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com 过滤 mail cn sn givenname字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com&quot;  &quot;(objectClass=*)&quot; mail cn sn givenname</span><br></pre></td></tr></table></figure>\n<p> // 在cn=apple,cn=People,dc=apple,dc=com下搜索 carLicense=IVFISMVKUFXNV6ZF 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x  -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;dc=apple,dc=com&quot;  &quot;(carLicense=IVFISMVKUFXNV6ZF)&quot;</span><br></pre></td></tr></table></figure>\n<p> // 导出所有数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos;  -H ldap://0.0.0.0:9981 -b &apos;dc=apple,dc=com&apos; -LLL &gt; /tmp/ldapdb.ldif</span><br></pre></td></tr></table></figure>\n<p>-l 5 搜索时间限制为五秒，-z 5 大小限制为五</p>\n<h4 id=\"ldapmodify\"><a href=\"#ldapmodify\" class=\"headerlink\" title=\"ldapmodify\"></a>ldapmodify</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapmodify  -x  -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -f /tmp/ldapm</span><br></pre></td></tr></table></figure>\n<p>文件内容： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn:cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com </span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: mobile</span><br><span class=\"line\">mobile: 15101646884</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldapdelete\"><a href=\"#ldapdelete\" class=\"headerlink\" title=\"ldapdelete\"></a>ldapdelete</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapdelete -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -v &quot;cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com&quot; -v</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldapdadd\"><a href=\"#ldapdadd\" class=\"headerlink\" title=\"ldapdadd\"></a>ldapdadd</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -x -D &quot;cn=admin,dc=apple,dc=com&quot; -w ****** -H ldap://0.0.0.0:9981  -f /tmp/add.ldif</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>PHP 安装 ldap 扩展</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openldap</span><br><span class=\"line\">yum install openldap-devel</span><br><span class=\"line\">cp -frp /usr/lib64/libldap* /usr/lib/ </span><br><span class=\"line\"></span><br><span class=\"line\">wget http://cn2.php.net/distributions/php-5.6.35.tar.gz</span><br><span class=\"line\">tar -zxvf php-5.6.35.tar.gz </span><br><span class=\"line\">cd php-5.6.35/ext/ldap</span><br><span class=\"line\">/home/work/sky/thirdparty/php/bin/phpize</span><br><span class=\"line\">./configure --with-php-config=/home/work/sky/thirdparty/php/bin/php-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">vim /home/work/sky/thirdparty/php/lib/php.ini</span><br><span class=\"line\">kill -SIGUSR2 `ps -ef | grep php-fpm | grep master | awk &apos;&#123;print $2&#125;&apos;`</span><br></pre></td></tr></table></figure>\n<p><strong>修改密码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF |ldapmodify -x -D &apos;cn=admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:389</span><br><span class=\"line\">dn: cn=weihaozhe,cn=People,cn=apple,dc=apple,dc=com</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: userPassword</span><br><span class=\"line\">userPassword: PBKDF2-SHA256&#125;10000$r0zVLb.7fzLJzBHg1GbC1Q$PVAePYz4pjC8uc31UlzYNZObrWdDYt1blKiR90EvrQ85CgK9FZ4/rPjhETHUx5YXs.E</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><strong>权限配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access to dn.one=&quot;cn=People,dc=apple,dc=com&quot;</span><br><span class=\"line\">by dn=&quot;cn=search,cn=People,dc=apple,dc=com&quot; read</span><br><span class=\"line\">by self write</span><br><span class=\"line\">by self read</span><br><span class=\"line\">by anonymous auth</span><br><span class=\"line\">by * none</span><br><span class=\"line\"></span><br><span class=\"line\">access to *</span><br><span class=\"line\">by dn=&quot;cn=root,dc=apple,dc=com&quot; write</span><br><span class=\"line\">by anonymous auth</span><br><span class=\"line\">by * read</span><br></pre></td></tr></table></figure>\n<p><strong>字段映射</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected static $map = [</span><br><span class=\"line\">        &apos;id&apos;       =&gt; &apos;dn&apos;,</span><br><span class=\"line\">        &apos;username&apos; =&gt; &apos;cn&apos;,</span><br><span class=\"line\">        &apos;realname&apos; =&gt; &apos;sn&apos;,</span><br><span class=\"line\">        &apos;password&apos; =&gt; &apos;userpassword&apos;,</span><br><span class=\"line\">        &apos;ext&apos;      =&gt; &apos;telephonenumber&apos;,</span><br><span class=\"line\">        &apos;phone&apos;    =&gt; &apos;mobile&apos;,</span><br><span class=\"line\">        &apos;email&apos;    =&gt; &apos;mail&apos;,</span><br><span class=\"line\">        &apos;secretkey&apos;=&gt; &apos;carlicense&apos;,</span><br><span class=\"line\">        &apos;status&apos;   =&gt; &apos;businesscategory&apos;,</span><br><span class=\"line\">        &apos;photoUri&apos; =&gt; &apos;givenname&apos;,</span><br><span class=\"line\">        &apos;department&apos;     =&gt; &apos;departmentnumber&apos;,</span><br><span class=\"line\">        &apos;employeenumber&apos; =&gt; &apos;employeenumber&apos;,</span><br><span class=\"line\">        &apos;workseat&apos;  =&gt; &apos;workseat&apos;,</span><br><span class=\"line\">        &apos;birthday&apos;  =&gt; &apos;birthday&apos;,</span><br><span class=\"line\">        &apos;job&apos;       =&gt; &apos;job&apos;,</span><br><span class=\"line\">        &apos;constellation&apos;  =&gt; &apos;constellation&apos;,</span><br><span class=\"line\">        &apos;bloodtype&apos; =&gt; &apos;bloodtype&apos;,</span><br><span class=\"line\">        &apos;description&apos; =&gt; &apos;description&apos;,</span><br><span class=\"line\">        &apos;haveauth&apos;   =&gt; &apos;haveauth&apos;,</span><br><span class=\"line\">        &apos;msgnotify&apos;  =&gt; &apos;msgnotify&apos;,</span><br><span class=\"line\">        &apos;authkey&apos;    =&gt; &apos;authkey&apos;,</span><br><span class=\"line\">        &apos;jobType&apos;      =&gt;  &apos;employeetype&apos;,</span><br><span class=\"line\">        &apos;secondAuthType&apos; =&gt; &apos;postalcode&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ldapsearch -x -D &apos;uid=auth,ou=users,dc=apple,dc=com&apos; -w &apos;***&apos; -H ldap://10.0.1.*:389 -b &quot;uid=weihaozhe,ou=users,dc=apple,dc=com&quot;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;uid=weihaozhe,ou=users,dc=apple,dc=com&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># weihaozhe, users, apple.com</span><br><span class=\"line\">dn: uid=weihaozhe,ou=users,dc=apple,dc=com</span><br><span class=\"line\">objectClass: posixAccount</span><br><span class=\"line\">objectClass: shadowAccount</span><br><span class=\"line\">objectClass: inetOrgPerson</span><br><span class=\"line\">cn:: 6a2P5rWp5ZOy</span><br><span class=\"line\">gecos: Linux</span><br><span class=\"line\">gidNumber: 500</span><br><span class=\"line\">givenName:: 5rWp5ZOy</span><br><span class=\"line\">homeDirectory: /home/weihaozhe/</span><br><span class=\"line\">loginShell: /bin/bash</span><br><span class=\"line\">mail: weihaozhe@apple.net</span><br><span class=\"line\">mobile: 176**10668100</span><br><span class=\"line\">sn:: 6a2P</span><br><span class=\"line\">uidNumber: 1761**68100</span><br><span class=\"line\">uid: weihaozhe</span><br></pre></td></tr></table></figure>\n<p><strong>备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* */1 * * * sh /home/work/ldap/backup/bin/run.sh</span><br><span class=\"line\">cat run.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">BACKUP_PATH=/home/work/ldap/backup</span><br><span class=\"line\">docker exec -it openldap /home/work/ldap/sbin/slapcat &gt; $&#123;BACKUP_PATH&#125;/data/openldap-backup.ldif 2&gt;/dev/null</span><br><span class=\"line\">sh $&#123;BACKUP_PATH&#125;/bin/backuplog.sh -P $&#123;BACKUP_PATH&#125;/data -F openldap-backup.ldif -B ./bak</span><br><span class=\"line\"></span><br><span class=\"line\">https://gist.githubusercontent.com/kunpengku/f18651f582d84c1756a7/raw/03b001a8ad0c3ba544f07e3d1512d7db60d1dd84/backuplog.sh</span><br></pre></td></tr></table></figure>\n<p><strong>工具</strong></p>\n<p>Ldap Admin Tool</p>\n<p>apache directory studio</p>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/dwj97/p/7513509.html\" target=\"_blank\" rel=\"noopener\">openldap+php-ldap操作</a></p>\n<p><a href=\"http://blog.csdn.net/peterwanghao/article/details/7481444\" target=\"_blank\" rel=\"noopener\">基于LDAP进行验证-方法和问题</a> </p>\n<p><a href=\"https://www.cnblogs.com/xzkzzz/p/9269714.html\" target=\"_blank\" rel=\"noopener\">Openldap命令详解</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"ldapsearch\"><a href=\"#ldapsearch\" class=\"headerlink\" title=\"ldapsearch\"></a>ldapsearch</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;cn=dong.tian,cn=apple,cn=People,dc=apple,dc=com&quot;</span><br></pre></td></tr></table></figure>\n<p>//搜索 cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com 过滤 mail cn sn givenname字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com&quot;  &quot;(objectClass=*)&quot; mail cn sn givenname</span><br></pre></td></tr></table></figure>\n<p> // 在cn=apple,cn=People,dc=apple,dc=com下搜索 carLicense=IVFISMVKUFXNV6ZF 的记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x  -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -b &quot;dc=apple,dc=com&quot;  &quot;(carLicense=IVFISMVKUFXNV6ZF)&quot;</span><br></pre></td></tr></table></figure>\n<p> // 导出所有数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapsearch -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos;  -H ldap://0.0.0.0:9981 -b &apos;dc=apple,dc=com&apos; -LLL &gt; /tmp/ldapdb.ldif</span><br></pre></td></tr></table></figure>\n<p>-l 5 搜索时间限制为五秒，-z 5 大小限制为五</p>\n<h4 id=\"ldapmodify\"><a href=\"#ldapmodify\" class=\"headerlink\" title=\"ldapmodify\"></a>ldapmodify</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapmodify  -x  -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -f /tmp/ldapm</span><br></pre></td></tr></table></figure>\n<p>文件内容： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn:cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com </span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: mobile</span><br><span class=\"line\">mobile: 15101646884</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldapdelete\"><a href=\"#ldapdelete\" class=\"headerlink\" title=\"ldapdelete\"></a>ldapdelete</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapdelete -x -D &apos;cn=Admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:9981 -v &quot;cn=haozhe.wei,cn=apple,cn=People,dc=apple,dc=com&quot; -v</span><br></pre></td></tr></table></figure>\n<h4 id=\"ldapdadd\"><a href=\"#ldapdadd\" class=\"headerlink\" title=\"ldapdadd\"></a>ldapdadd</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -x -D &quot;cn=admin,dc=apple,dc=com&quot; -w ****** -H ldap://0.0.0.0:9981  -f /tmp/add.ldif</span><br></pre></td></tr></table></figure>","more":"<p><strong>PHP 安装 ldap 扩展</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openldap</span><br><span class=\"line\">yum install openldap-devel</span><br><span class=\"line\">cp -frp /usr/lib64/libldap* /usr/lib/ </span><br><span class=\"line\"></span><br><span class=\"line\">wget http://cn2.php.net/distributions/php-5.6.35.tar.gz</span><br><span class=\"line\">tar -zxvf php-5.6.35.tar.gz </span><br><span class=\"line\">cd php-5.6.35/ext/ldap</span><br><span class=\"line\">/home/work/sky/thirdparty/php/bin/phpize</span><br><span class=\"line\">./configure --with-php-config=/home/work/sky/thirdparty/php/bin/php-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">vim /home/work/sky/thirdparty/php/lib/php.ini</span><br><span class=\"line\">kill -SIGUSR2 `ps -ef | grep php-fpm | grep master | awk &apos;&#123;print $2&#125;&apos;`</span><br></pre></td></tr></table></figure>\n<p><strong>修改密码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF |ldapmodify -x -D &apos;cn=admin,dc=apple,dc=com&apos; -w &apos;******&apos; -H ldap://0.0.0.0:389</span><br><span class=\"line\">dn: cn=weihaozhe,cn=People,cn=apple,dc=apple,dc=com</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: userPassword</span><br><span class=\"line\">userPassword: PBKDF2-SHA256&#125;10000$r0zVLb.7fzLJzBHg1GbC1Q$PVAePYz4pjC8uc31UlzYNZObrWdDYt1blKiR90EvrQ85CgK9FZ4/rPjhETHUx5YXs.E</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><strong>权限配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access to dn.one=&quot;cn=People,dc=apple,dc=com&quot;</span><br><span class=\"line\">by dn=&quot;cn=search,cn=People,dc=apple,dc=com&quot; read</span><br><span class=\"line\">by self write</span><br><span class=\"line\">by self read</span><br><span class=\"line\">by anonymous auth</span><br><span class=\"line\">by * none</span><br><span class=\"line\"></span><br><span class=\"line\">access to *</span><br><span class=\"line\">by dn=&quot;cn=root,dc=apple,dc=com&quot; write</span><br><span class=\"line\">by anonymous auth</span><br><span class=\"line\">by * read</span><br></pre></td></tr></table></figure>\n<p><strong>字段映射</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected static $map = [</span><br><span class=\"line\">        &apos;id&apos;       =&gt; &apos;dn&apos;,</span><br><span class=\"line\">        &apos;username&apos; =&gt; &apos;cn&apos;,</span><br><span class=\"line\">        &apos;realname&apos; =&gt; &apos;sn&apos;,</span><br><span class=\"line\">        &apos;password&apos; =&gt; &apos;userpassword&apos;,</span><br><span class=\"line\">        &apos;ext&apos;      =&gt; &apos;telephonenumber&apos;,</span><br><span class=\"line\">        &apos;phone&apos;    =&gt; &apos;mobile&apos;,</span><br><span class=\"line\">        &apos;email&apos;    =&gt; &apos;mail&apos;,</span><br><span class=\"line\">        &apos;secretkey&apos;=&gt; &apos;carlicense&apos;,</span><br><span class=\"line\">        &apos;status&apos;   =&gt; &apos;businesscategory&apos;,</span><br><span class=\"line\">        &apos;photoUri&apos; =&gt; &apos;givenname&apos;,</span><br><span class=\"line\">        &apos;department&apos;     =&gt; &apos;departmentnumber&apos;,</span><br><span class=\"line\">        &apos;employeenumber&apos; =&gt; &apos;employeenumber&apos;,</span><br><span class=\"line\">        &apos;workseat&apos;  =&gt; &apos;workseat&apos;,</span><br><span class=\"line\">        &apos;birthday&apos;  =&gt; &apos;birthday&apos;,</span><br><span class=\"line\">        &apos;job&apos;       =&gt; &apos;job&apos;,</span><br><span class=\"line\">        &apos;constellation&apos;  =&gt; &apos;constellation&apos;,</span><br><span class=\"line\">        &apos;bloodtype&apos; =&gt; &apos;bloodtype&apos;,</span><br><span class=\"line\">        &apos;description&apos; =&gt; &apos;description&apos;,</span><br><span class=\"line\">        &apos;haveauth&apos;   =&gt; &apos;haveauth&apos;,</span><br><span class=\"line\">        &apos;msgnotify&apos;  =&gt; &apos;msgnotify&apos;,</span><br><span class=\"line\">        &apos;authkey&apos;    =&gt; &apos;authkey&apos;,</span><br><span class=\"line\">        &apos;jobType&apos;      =&gt;  &apos;employeetype&apos;,</span><br><span class=\"line\">        &apos;secondAuthType&apos; =&gt; &apos;postalcode&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ldapsearch -x -D &apos;uid=auth,ou=users,dc=apple,dc=com&apos; -w &apos;***&apos; -H ldap://10.0.1.*:389 -b &quot;uid=weihaozhe,ou=users,dc=apple,dc=com&quot;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;uid=weihaozhe,ou=users,dc=apple,dc=com&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># weihaozhe, users, apple.com</span><br><span class=\"line\">dn: uid=weihaozhe,ou=users,dc=apple,dc=com</span><br><span class=\"line\">objectClass: posixAccount</span><br><span class=\"line\">objectClass: shadowAccount</span><br><span class=\"line\">objectClass: inetOrgPerson</span><br><span class=\"line\">cn:: 6a2P5rWp5ZOy</span><br><span class=\"line\">gecos: Linux</span><br><span class=\"line\">gidNumber: 500</span><br><span class=\"line\">givenName:: 5rWp5ZOy</span><br><span class=\"line\">homeDirectory: /home/weihaozhe/</span><br><span class=\"line\">loginShell: /bin/bash</span><br><span class=\"line\">mail: weihaozhe@apple.net</span><br><span class=\"line\">mobile: 176**10668100</span><br><span class=\"line\">sn:: 6a2P</span><br><span class=\"line\">uidNumber: 1761**68100</span><br><span class=\"line\">uid: weihaozhe</span><br></pre></td></tr></table></figure>\n<p><strong>备份</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* */1 * * * sh /home/work/ldap/backup/bin/run.sh</span><br><span class=\"line\">cat run.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">BACKUP_PATH=/home/work/ldap/backup</span><br><span class=\"line\">docker exec -it openldap /home/work/ldap/sbin/slapcat &gt; $&#123;BACKUP_PATH&#125;/data/openldap-backup.ldif 2&gt;/dev/null</span><br><span class=\"line\">sh $&#123;BACKUP_PATH&#125;/bin/backuplog.sh -P $&#123;BACKUP_PATH&#125;/data -F openldap-backup.ldif -B ./bak</span><br><span class=\"line\"></span><br><span class=\"line\">https://gist.githubusercontent.com/kunpengku/f18651f582d84c1756a7/raw/03b001a8ad0c3ba544f07e3d1512d7db60d1dd84/backuplog.sh</span><br></pre></td></tr></table></figure>\n<p><strong>工具</strong></p>\n<p>Ldap Admin Tool</p>\n<p>apache directory studio</p>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/dwj97/p/7513509.html\" target=\"_blank\" rel=\"noopener\">openldap+php-ldap操作</a></p>\n<p><a href=\"http://blog.csdn.net/peterwanghao/article/details/7481444\" target=\"_blank\" rel=\"noopener\">基于LDAP进行验证-方法和问题</a> </p>\n<p><a href=\"https://www.cnblogs.com/xzkzzz/p/9269714.html\" target=\"_blank\" rel=\"noopener\">Openldap命令详解</a></p>"},{"title":"MicroK8s 笔记","description":"","date":"2019-11-01T19:38:10.000Z","comments":0,"share":true,"_content":"\nMicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。\n\n**修改默认镜像**\n\n- 修改`/var/snap/microk8s/current/args/kubelet`。 添加`--pod-infra-container-image=s7799653/pause:3.1`\n- 修改`/var/snap/microk8s/current/args/containerd-template.toml`的`plugins -> plugins.cri -> sandbox_image`为`s7799653/pause:3.1`\n- 重启服务 `microk8s.stop`,`microk8s.start`\n\n```\nexport PATH=$PATH:/snap/bin #临时写入\necho \"export PATH=$PATH:/snap/bin\" >> ~/.bashrc #永久写入\nsnap alias microk8s.kubectl kubectl\nsnap alias microk8s.ctr ctr\nsudo usermod -a -G microk8s ${USER}\n```\n\n**dashboard**\n\n```\nmicrok8s.enable dns dashboard\n\ntoken=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d \" \" -f1)\nmicrok8s.kubectl -n kube-system describe secret $token\n```\n\n**配置~/.kube/config**\n\n```\nmicrok8s.config\nmicrok8s.kubectl config view --raw > $HOME/.kube/config\n修改 user,name 为kubernetes-dashboard\n修改 username,passwod 为token\n```\n\n\n**helm3**\n\n```\nhelm install nginx bitnami/nginx\n```\n\n**prometheus**\n\n```\n* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.\n\npersistentVolume\n```\n\n**常用命令**\n\n```\n$ microk8s.enable dashboard dns metrics-server registry istio\n$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest\n$ microk8s.ctr -namespace k8s.io images rm docker.io/yandex/clickhouse-server:20 --sync\n$ microk8s.ctr --namespace k8s.io images ls | grep -v @sha256 | awk '{print $1,$4$5}'\n```\n\n**nginx-ingress 部署的两种方式**\n\n```\nexternalIPs: \n  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听\n或者\nhostNetwork: true\n```\n\n参考：\n\nhttps://github.com/ubuntu/microk8s\n\nhttps://www.jianshu.com/p/02fd2540fab2\n\nhttps://github.com/projectatomic/containerd/blob/master/docs/cli.md\n\n","source":"_posts/microk8s.md","raw":"---\ntitle: \"MicroK8s 笔记\"\ndescription: \"\"\ndate: 2019-11-01 19:38:10\ntags: [k8s,microk8s]\ncomments: false\nshare: true\n---\n\nMicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。\n\n**修改默认镜像**\n\n- 修改`/var/snap/microk8s/current/args/kubelet`。 添加`--pod-infra-container-image=s7799653/pause:3.1`\n- 修改`/var/snap/microk8s/current/args/containerd-template.toml`的`plugins -> plugins.cri -> sandbox_image`为`s7799653/pause:3.1`\n- 重启服务 `microk8s.stop`,`microk8s.start`\n\n```\nexport PATH=$PATH:/snap/bin #临时写入\necho \"export PATH=$PATH:/snap/bin\" >> ~/.bashrc #永久写入\nsnap alias microk8s.kubectl kubectl\nsnap alias microk8s.ctr ctr\nsudo usermod -a -G microk8s ${USER}\n```\n\n**dashboard**\n\n```\nmicrok8s.enable dns dashboard\n\ntoken=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d \" \" -f1)\nmicrok8s.kubectl -n kube-system describe secret $token\n```\n\n**配置~/.kube/config**\n\n```\nmicrok8s.config\nmicrok8s.kubectl config view --raw > $HOME/.kube/config\n修改 user,name 为kubernetes-dashboard\n修改 username,passwod 为token\n```\n\n\n**helm3**\n\n```\nhelm install nginx bitnami/nginx\n```\n\n**prometheus**\n\n```\n* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.\n\npersistentVolume\n```\n\n**常用命令**\n\n```\n$ microk8s.enable dashboard dns metrics-server registry istio\n$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest\n$ microk8s.ctr -namespace k8s.io images rm docker.io/yandex/clickhouse-server:20 --sync\n$ microk8s.ctr --namespace k8s.io images ls | grep -v @sha256 | awk '{print $1,$4$5}'\n```\n\n**nginx-ingress 部署的两种方式**\n\n```\nexternalIPs: \n  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听\n或者\nhostNetwork: true\n```\n\n参考：\n\nhttps://github.com/ubuntu/microk8s\n\nhttps://www.jianshu.com/p/02fd2540fab2\n\nhttps://github.com/projectatomic/containerd/blob/master/docs/cli.md\n\n","slug":"microk8s","published":1,"updated":"2020-02-14T07:43:30.534Z","layout":"post","photos":[],"link":"","_id":"ckj9uenlr00160wpb1yryekkt","content":"<p>MicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。</p>\n<p><strong>修改默认镜像</strong></p>\n<ul>\n<li>修改<code>/var/snap/microk8s/current/args/kubelet</code>。 添加<code>--pod-infra-container-image=s7799653/pause:3.1</code></li>\n<li>修改<code>/var/snap/microk8s/current/args/containerd-template.toml</code>的<code>plugins -&gt; plugins.cri -&gt; sandbox_image</code>为<code>s7799653/pause:3.1</code></li>\n<li>重启服务 <code>microk8s.stop</code>,<code>microk8s.start</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/snap/bin #临时写入</span><br><span class=\"line\">echo &quot;export PATH=$PATH:/snap/bin&quot; &gt;&gt; ~/.bashrc #永久写入</span><br><span class=\"line\">snap alias microk8s.kubectl kubectl</span><br><span class=\"line\">snap alias microk8s.ctr ctr</span><br><span class=\"line\">sudo usermod -a -G microk8s $&#123;USER&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dashboard</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.enable dns dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d &quot; &quot; -f1)</span><br><span class=\"line\">microk8s.kubectl -n kube-system describe secret $token</span><br></pre></td></tr></table></figure>\n<p><strong>配置~/.kube/config</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.config</span><br><span class=\"line\">microk8s.kubectl config view --raw &gt; $HOME/.kube/config</span><br><span class=\"line\">修改 user,name 为kubernetes-dashboard</span><br><span class=\"line\">修改 username,passwod 为token</span><br></pre></td></tr></table></figure>\n<p><strong>helm3</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nginx bitnami/nginx</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.</span><br><span class=\"line\"></span><br><span class=\"line\">persistentVolume</span><br></pre></td></tr></table></figure>\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ microk8s.enable dashboard dns metrics-server registry istio</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest</span><br><span class=\"line\">$ microk8s.ctr -namespace k8s.io images rm docker.io/yandex/clickhouse-server:20 --sync</span><br><span class=\"line\">$ microk8s.ctr --namespace k8s.io images ls | grep -v @sha256 | awk &apos;&#123;print $1,$4$5&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>nginx-ingress 部署的两种方式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externalIPs: </span><br><span class=\"line\">  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听</span><br><span class=\"line\">或者</span><br><span class=\"line\">hostNetwork: true</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://github.com/ubuntu/microk8s\" target=\"_blank\" rel=\"noopener\">https://github.com/ubuntu/microk8s</a></p>\n<p><a href=\"https://www.jianshu.com/p/02fd2540fab2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/02fd2540fab2</a></p>\n<p><a href=\"https://github.com/projectatomic/containerd/blob/master/docs/cli.md\" target=\"_blank\" rel=\"noopener\">https://github.com/projectatomic/containerd/blob/master/docs/cli.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MicroK8s是一种小型，快速，安全的单节点Kubernetes，几乎可以安装在任何Linux机器上。使用它进行脱机开发，原型制作，测试或在VM上用作CI / CD的小型，便宜，可靠的k8。对于设备来说，它也是一个很棒的k8-为k8开发您的IoT应用并将其部署到您的盒子上的MicroK8。</p>\n<p><strong>修改默认镜像</strong></p>\n<ul>\n<li>修改<code>/var/snap/microk8s/current/args/kubelet</code>。 添加<code>--pod-infra-container-image=s7799653/pause:3.1</code></li>\n<li>修改<code>/var/snap/microk8s/current/args/containerd-template.toml</code>的<code>plugins -&gt; plugins.cri -&gt; sandbox_image</code>为<code>s7799653/pause:3.1</code></li>\n<li>重启服务 <code>microk8s.stop</code>,<code>microk8s.start</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/snap/bin #临时写入</span><br><span class=\"line\">echo &quot;export PATH=$PATH:/snap/bin&quot; &gt;&gt; ~/.bashrc #永久写入</span><br><span class=\"line\">snap alias microk8s.kubectl kubectl</span><br><span class=\"line\">snap alias microk8s.ctr ctr</span><br><span class=\"line\">sudo usermod -a -G microk8s $&#123;USER&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dashboard</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.enable dns dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d &quot; &quot; -f1)</span><br><span class=\"line\">microk8s.kubectl -n kube-system describe secret $token</span><br></pre></td></tr></table></figure>\n<p><strong>配置~/.kube/config</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">microk8s.config</span><br><span class=\"line\">microk8s.kubectl config view --raw &gt; $HOME/.kube/config</span><br><span class=\"line\">修改 user,name 为kubernetes-dashboard</span><br><span class=\"line\">修改 username,passwod 为token</span><br></pre></td></tr></table></figure>\n<p><strong>helm3</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nginx bitnami/nginx</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DaemonSet, Deployment, StatefulSet, and ReplicaSet resources will no longer be served from extensions/v1beta1, apps/v1beta1, or apps/v1beta2 by default in v1.16. Migrate to the apps/v1 API, available since v1.9. Existing persisted data can be retrieved/updated via the apps/v1 API.</span><br><span class=\"line\"></span><br><span class=\"line\">persistentVolume</span><br></pre></td></tr></table></figure>\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ microk8s.enable dashboard dns metrics-server registry istio</span><br><span class=\"line\">$ microk8s.ctr -n k8s.io images pull docker.io/library/cassandra:latest</span><br><span class=\"line\">$ microk8s.ctr -namespace k8s.io images rm docker.io/yandex/clickhouse-server:20 --sync</span><br><span class=\"line\">$ microk8s.ctr --namespace k8s.io images ls | grep -v @sha256 | awk &apos;&#123;print $1,$4$5&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>nginx-ingress 部署的两种方式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externalIPs: </span><br><span class=\"line\">  - 192.168.2.12 #这是我的一台node的ip，通过kube-proxy监听</span><br><span class=\"line\">或者</span><br><span class=\"line\">hostNetwork: true</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://github.com/ubuntu/microk8s\" target=\"_blank\" rel=\"noopener\">https://github.com/ubuntu/microk8s</a></p>\n<p><a href=\"https://www.jianshu.com/p/02fd2540fab2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/02fd2540fab2</a></p>\n<p><a href=\"https://github.com/projectatomic/containerd/blob/master/docs/cli.md\" target=\"_blank\" rel=\"noopener\">https://github.com/projectatomic/containerd/blob/master/docs/cli.md</a></p>\n"},{"layout":"post","title":"nginx 学习","description":"","date":"2019-02-27T00:00:00.000Z","comments":0,"share":true,"_content":"\nPOST_READ 阶段：\n\nx-forwarded-for x-real-ip \n\nrealip 模块启用 \n\nreturn 302 /a.html\n\n302 浏览器缓存\n\nerror_page 404=/404.php\n\nrewrite regex replacement\n\n如果 replacement 是以http开头，直接返回302\n\nlast 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301\n\nhttp permanent 同时出现返回301\n\nrewrite log 指令 开启rewrite 日志\n\n\n**if 使用场景**\n\n1. 检查变量为空或者值是否为0，直接使用\n2. 将变量和字符串做匹配，使用=或者!=\n3. 将变量与正则表达式做匹配 ~ 或~*\n4. 检查文件是否存在 -f\n5. 检查目录是否存在 -d\n6. 检查文件、目录、软连是否存在 -e \n7. 检查是否为可执行文件 -x\n\n- 忽略大小写\n- ^~ 禁止正则表达式匹配\n---\n- limit_conn 限制并发连接数以ip为单位\n- limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前\n- mirror 流量拷贝\n- sub 替换\n- sub_filter \n- additon 模块在响应前或后添加 自请求的内容\n- referer 模块 对于大多数网站来说都是有效的\n- valid_referers  if($invalid_referer){return 403}\n- secure_link\n- rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url\n- mirror_request body off\n- map 模块\n---\n\n- nginx  Upstream Consistent Hash\n- proxy_cache_use_state\n- strace -p\n- ngx_http_cache_purge_module 清除nginx缓存\n\n\n","source":"_posts/nginx.md","raw":"---\nlayout: post\ntitle: \"nginx 学习\"\ndescription: \"\"\ndate: 2019-02-27\ntags: [nginx,openresty]\ncomments: false\nshare: true\n---\n\nPOST_READ 阶段：\n\nx-forwarded-for x-real-ip \n\nrealip 模块启用 \n\nreturn 302 /a.html\n\n302 浏览器缓存\n\nerror_page 404=/404.php\n\nrewrite regex replacement\n\n如果 replacement 是以http开头，直接返回302\n\nlast 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301\n\nhttp permanent 同时出现返回301\n\nrewrite log 指令 开启rewrite 日志\n\n\n**if 使用场景**\n\n1. 检查变量为空或者值是否为0，直接使用\n2. 将变量和字符串做匹配，使用=或者!=\n3. 将变量与正则表达式做匹配 ~ 或~*\n4. 检查文件是否存在 -f\n5. 检查目录是否存在 -d\n6. 检查文件、目录、软连是否存在 -e \n7. 检查是否为可执行文件 -x\n\n- 忽略大小写\n- ^~ 禁止正则表达式匹配\n---\n- limit_conn 限制并发连接数以ip为单位\n- limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前\n- mirror 流量拷贝\n- sub 替换\n- sub_filter \n- additon 模块在响应前或后添加 自请求的内容\n- referer 模块 对于大多数网站来说都是有效的\n- valid_referers  if($invalid_referer){return 403}\n- secure_link\n- rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url\n- mirror_request body off\n- map 模块\n---\n\n- nginx  Upstream Consistent Hash\n- proxy_cache_use_state\n- strace -p\n- ngx_http_cache_purge_module 清除nginx缓存\n\n\n","slug":"nginx","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ckj9uenlu00190wpbq6gikqc4","content":"<p>POST_READ 阶段：</p>\n<p>x-forwarded-for x-real-ip </p>\n<p>realip 模块启用 </p>\n<p>return 302 /a.html</p>\n<p>302 浏览器缓存</p>\n<p>error_page 404=/404.php</p>\n<p>rewrite regex replacement</p>\n<p>如果 replacement 是以http开头，直接返回302</p>\n<p>last 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301</p>\n<p>http permanent 同时出现返回301</p>\n<p>rewrite log 指令 开启rewrite 日志</p>\n<p><strong>if 使用场景</strong></p>\n<ol>\n<li>检查变量为空或者值是否为0，直接使用</li>\n<li>将变量和字符串做匹配，使用=或者!=</li>\n<li>将变量与正则表达式做匹配 ~ 或~*</li>\n<li>检查文件是否存在 -f</li>\n<li>检查目录是否存在 -d</li>\n<li>检查文件、目录、软连是否存在 -e </li>\n<li>检查是否为可执行文件 -x</li>\n</ol>\n<ul>\n<li>忽略大小写</li>\n<li>^~ 禁止正则表达式匹配</li>\n</ul>\n<hr>\n<ul>\n<li>limit_conn 限制并发连接数以ip为单位</li>\n<li>limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前</li>\n<li>mirror 流量拷贝</li>\n<li>sub 替换</li>\n<li>sub_filter </li>\n<li>additon 模块在响应前或后添加 自请求的内容</li>\n<li>referer 模块 对于大多数网站来说都是有效的</li>\n<li>valid_referers  if($invalid_referer){return 403}</li>\n<li>secure_link</li>\n<li>rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url</li>\n<li>mirror_request body off</li>\n<li>map 模块</li>\n</ul>\n<hr>\n<ul>\n<li>nginx  Upstream Consistent Hash</li>\n<li>proxy_cache_use_state</li>\n<li>strace -p</li>\n<li>ngx_http_cache_purge_module 清除nginx缓存</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>POST_READ 阶段：</p>\n<p>x-forwarded-for x-real-ip </p>\n<p>realip 模块启用 </p>\n<p>return 302 /a.html</p>\n<p>302 浏览器缓存</p>\n<p>error_page 404=/404.php</p>\n<p>rewrite regex replacement</p>\n<p>如果 replacement 是以http开头，直接返回302</p>\n<p>last 持续 break 停止当前脚本指令执行,后面的指令不会执行，直接读取文件返回  redirect 302 permant 301</p>\n<p>http permanent 同时出现返回301</p>\n<p>rewrite log 指令 开启rewrite 日志</p>\n<p><strong>if 使用场景</strong></p>\n<ol>\n<li>检查变量为空或者值是否为0，直接使用</li>\n<li>将变量和字符串做匹配，使用=或者!=</li>\n<li>将变量与正则表达式做匹配 ~ 或~*</li>\n<li>检查文件是否存在 -f</li>\n<li>检查目录是否存在 -d</li>\n<li>检查文件、目录、软连是否存在 -e </li>\n<li>检查是否为可执行文件 -x</li>\n</ol>\n<ul>\n<li>忽略大小写</li>\n<li>^~ 禁止正则表达式匹配</li>\n</ul>\n<hr>\n<ul>\n<li>limit_conn 限制并发连接数以ip为单位</li>\n<li>limit_req 把突发的 流量限制为每秒多少请求 用户请求会变慢，不会被拒绝 nodelay 盆里的请求是否立即返回 burst=3没分钟请求3次，在limit_conn 之前</li>\n<li>mirror 流量拷贝</li>\n<li>sub 替换</li>\n<li>sub_filter </li>\n<li>additon 模块在响应前或后添加 自请求的内容</li>\n<li>referer 模块 对于大多数网站来说都是有效的</li>\n<li>valid_referers  if($invalid_referer){return 403}</li>\n<li>secure_link</li>\n<li>rewrite 不会修改 url地址，如dns cname记录 ，proxy_pass 会修改请求的url</li>\n<li>mirror_request body off</li>\n<li>map 模块</li>\n</ul>\n<hr>\n<ul>\n<li>nginx  Upstream Consistent Hash</li>\n<li>proxy_cache_use_state</li>\n<li>strace -p</li>\n<li>ngx_http_cache_purge_module 清除nginx缓存</li>\n</ul>\n"},{"title":"使用Loki查询日志","date":"2019-10-17T19:25:10.000Z","share":true,"_content":"![1.png](/img/loki/logo.png)\n\nloki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。\n\n![1.png](/img/loki/1.png)\n\nhelm 源\n\n```\nhelm repo add loki https://grafana.github.io/loki/charts\nhelm repo update\n\nloki 可以设置nodeSelector， promtail不要设置\n```\n\n[查询语句](https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md)：\n\n```\n{job=\"ingress-nginx/nginx-ingress\"} |=\"php-sht-payment-develop-http\" |=\"refund/create\"\n{job=\"php-sht/payment-develop\",stream=\"neo-log\"} !=\"ShopNotifyJob\" \n{job=~\"php-sht/payment-develop.*\"} |~\"shop_refund\" !~\"15712\" #正则\n```\n\n**promtail** 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.\n\npromtail.yaml 普通配置\n```\nserver:\n  http_listen_port: 3101\nscrape_configs:\n  - job_name: payment-develop\n    entry_parser: raw\n    static_configs:\n      - targets:\n         - localhost\n        labels:\n          job: php-sht/payment-develop\n          stream: neo-log\n          __path__: /var/www/payment/runtime/logs/*.log\n```\n<!-- more -->\n自定义metrics [pipeline 配置](https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics)\n\n```\nserver:\n  http_listen_port: 3101\nclient:\n  url: http://172.16.101.117:3100/api/prom/push\nscrape_configs:\n- job_name: payment-develop #不参与查询\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: php-sht/payment-develop #生成查询标签\n      stream: neo-log\n      __path__: /var/www/payment/runtime/logs/*.log\n  pipeline_stages:\n  - match:\n      selector: '{stream=\"neo-log\"}'\n      stages:\n       - regex:\n          expression: \"^(?P<message>.*)$\" \n       - regex:\n          expression: \"^.*(?P<warning_msg>(warning|WARNING)).*$\" \n       - regex:\n          expression: \"^.*(?P<error_msg>(error|ERROR)).*$\" \n       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job\n           log_lines_total:\n             type: Counter\n             description: \"log total\"\n             source: message\n             config:\n               action: inc\n           error_log_total:  #统计错误日志总数\n             type: Counter\n             description: \"error message total\"\n             source: error_msg\n             config:\n               action: inc \n           warning_log_total:  #统计warning日志总数\n             type: Counter\n             description: \"warning message total\"\n             source: warning_msg\n             config:\n               action: inc \n```\n服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total\n\nk8s中配置prometheus服务发现，在service 中配置：\n```\nannotations:\n  prometheus.io/port: \"3101\"\n  prometheus.io/scrape: \"true\"\n```\n\n在 grafana 新建监控指标:\n\n![2.png](/img/loki/2.png)\n\n监控日志总数，warning日志、error日志增长速率:\n\n![3.png](/img/loki/3.png)\n\n使用minio存储chunk\n```\n schema_config:\n    configs:\n    - from: 2020-10-24\n      store: boltdb-shipper\n      object_store: aws\n      schema: v11\n      index:\n        prefix: index_\n        period: 24h\n  server:\n    http_listen_port: 3100\n  storage_config:\n    boltdb_shipper:\n      active_index_directory: /data/loki/boltdb-shipper-active\n      cache_location: /data/loki/boltdb-shipper-cache\n      cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space\n      shared_store: s3\n    aws:\n      s3: http://***:***@10.2.4.3:9000/loki\n      s3forcepathstyle: true\n```\n\n参考：\n\nhttps://github.com/google/re2/wiki/Syntax","source":"_posts/loki.md","raw":"---\ntitle: \"使用Loki查询日志\"\ndate: 2019-10-17 19:25:10\ntags: [loki,promtal,grafana,日志]\nshare: true\n---\n![1.png](/img/loki/logo.png)\n\nloki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。\n\n![1.png](/img/loki/1.png)\n\nhelm 源\n\n```\nhelm repo add loki https://grafana.github.io/loki/charts\nhelm repo update\n\nloki 可以设置nodeSelector， promtail不要设置\n```\n\n[查询语句](https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md)：\n\n```\n{job=\"ingress-nginx/nginx-ingress\"} |=\"php-sht-payment-develop-http\" |=\"refund/create\"\n{job=\"php-sht/payment-develop\",stream=\"neo-log\"} !=\"ShopNotifyJob\" \n{job=~\"php-sht/payment-develop.*\"} |~\"shop_refund\" !~\"15712\" #正则\n```\n\n**promtail** 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.\n\npromtail.yaml 普通配置\n```\nserver:\n  http_listen_port: 3101\nscrape_configs:\n  - job_name: payment-develop\n    entry_parser: raw\n    static_configs:\n      - targets:\n         - localhost\n        labels:\n          job: php-sht/payment-develop\n          stream: neo-log\n          __path__: /var/www/payment/runtime/logs/*.log\n```\n<!-- more -->\n自定义metrics [pipeline 配置](https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics)\n\n```\nserver:\n  http_listen_port: 3101\nclient:\n  url: http://172.16.101.117:3100/api/prom/push\nscrape_configs:\n- job_name: payment-develop #不参与查询\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: php-sht/payment-develop #生成查询标签\n      stream: neo-log\n      __path__: /var/www/payment/runtime/logs/*.log\n  pipeline_stages:\n  - match:\n      selector: '{stream=\"neo-log\"}'\n      stages:\n       - regex:\n          expression: \"^(?P<message>.*)$\" \n       - regex:\n          expression: \"^.*(?P<warning_msg>(warning|WARNING)).*$\" \n       - regex:\n          expression: \"^.*(?P<error_msg>(error|ERROR)).*$\" \n       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job\n           log_lines_total:\n             type: Counter\n             description: \"log total\"\n             source: message\n             config:\n               action: inc\n           error_log_total:  #统计错误日志总数\n             type: Counter\n             description: \"error message total\"\n             source: error_msg\n             config:\n               action: inc \n           warning_log_total:  #统计warning日志总数\n             type: Counter\n             description: \"warning message total\"\n             source: warning_msg\n             config:\n               action: inc \n```\n服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total\n\nk8s中配置prometheus服务发现，在service 中配置：\n```\nannotations:\n  prometheus.io/port: \"3101\"\n  prometheus.io/scrape: \"true\"\n```\n\n在 grafana 新建监控指标:\n\n![2.png](/img/loki/2.png)\n\n监控日志总数，warning日志、error日志增长速率:\n\n![3.png](/img/loki/3.png)\n\n使用minio存储chunk\n```\n schema_config:\n    configs:\n    - from: 2020-10-24\n      store: boltdb-shipper\n      object_store: aws\n      schema: v11\n      index:\n        prefix: index_\n        period: 24h\n  server:\n    http_listen_port: 3100\n  storage_config:\n    boltdb_shipper:\n      active_index_directory: /data/loki/boltdb-shipper-active\n      cache_location: /data/loki/boltdb-shipper-cache\n      cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space\n      shared_store: s3\n    aws:\n      s3: http://***:***@10.2.4.3:9000/loki\n      s3forcepathstyle: true\n```\n\n参考：\n\nhttps://github.com/google/re2/wiki/Syntax","slug":"loki","published":1,"updated":"2020-11-27T12:33:01.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenly001a0wpbsxcz8qlj","content":"<p><img src=\"/img/loki/logo.png\" alt=\"1.png\"></p>\n<p>loki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。</p>\n<p><img src=\"/img/loki/1.png\" alt=\"1.png\"></p>\n<p>helm 源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add loki https://grafana.github.io/loki/charts</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"></span><br><span class=\"line\">loki 可以设置nodeSelector， promtail不要设置</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md\" target=\"_blank\" rel=\"noopener\">查询语句</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;job=&quot;ingress-nginx/nginx-ingress&quot;&#125; |=&quot;php-sht-payment-develop-http&quot; |=&quot;refund/create&quot;</span><br><span class=\"line\">&#123;job=&quot;php-sht/payment-develop&quot;,stream=&quot;neo-log&quot;&#125; !=&quot;ShopNotifyJob&quot; </span><br><span class=\"line\">&#123;job=~&quot;php-sht/payment-develop.*&quot;&#125; |~&quot;shop_refund&quot; !~&quot;15712&quot; #正则</span><br></pre></td></tr></table></figure>\n<p><strong>promtail</strong> 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.</p>\n<p>promtail.yaml 普通配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: payment-develop</span><br><span class=\"line\">    entry_parser: raw</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets:</span><br><span class=\"line\">         - localhost</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          job: php-sht/payment-develop</span><br><span class=\"line\">          stream: neo-log</span><br><span class=\"line\">          __path__: /var/www/payment/runtime/logs/*.log</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>自定义metrics <a href=\"https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics\" target=\"_blank\" rel=\"noopener\">pipeline 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">client:</span><br><span class=\"line\">  url: http://172.16.101.117:3100/api/prom/push</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">- job_name: payment-develop #不参与查询</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets:</span><br><span class=\"line\">      - localhost</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      job: php-sht/payment-develop #生成查询标签</span><br><span class=\"line\">      stream: neo-log</span><br><span class=\"line\">      __path__: /var/www/payment/runtime/logs/*.log</span><br><span class=\"line\">  pipeline_stages:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      selector: &apos;&#123;stream=&quot;neo-log&quot;&#125;&apos;</span><br><span class=\"line\">      stages:</span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^(?P&lt;message&gt;.*)$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;warning_msg&gt;(warning|WARNING)).*$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;error_msg&gt;(error|ERROR)).*$&quot; </span><br><span class=\"line\">       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job</span><br><span class=\"line\">           log_lines_total:</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;log total&quot;</span><br><span class=\"line\">             source: message</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br><span class=\"line\">           error_log_total:  #统计错误日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;error message total&quot;</span><br><span class=\"line\">             source: error_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc </span><br><span class=\"line\">           warning_log_total:  #统计warning日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;warning message total&quot;</span><br><span class=\"line\">             source: warning_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br></pre></td></tr></table></figure>\n<p>服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total</p>\n<p>k8s中配置prometheus服务发现，在service 中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotations:</span><br><span class=\"line\">  prometheus.io/port: &quot;3101&quot;</span><br><span class=\"line\">  prometheus.io/scrape: &quot;true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>在 grafana 新建监控指标:</p>\n<p><img src=\"/img/loki/2.png\" alt=\"2.png\"></p>\n<p>监控日志总数，warning日志、error日志增长速率:</p>\n<p><img src=\"/img/loki/3.png\" alt=\"3.png\"></p>\n<p>使用minio存储chunk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema_config:</span><br><span class=\"line\">   configs:</span><br><span class=\"line\">   - from: 2020-10-24</span><br><span class=\"line\">     store: boltdb-shipper</span><br><span class=\"line\">     object_store: aws</span><br><span class=\"line\">     schema: v11</span><br><span class=\"line\">     index:</span><br><span class=\"line\">       prefix: index_</span><br><span class=\"line\">       period: 24h</span><br><span class=\"line\"> server:</span><br><span class=\"line\">   http_listen_port: 3100</span><br><span class=\"line\"> storage_config:</span><br><span class=\"line\">   boltdb_shipper:</span><br><span class=\"line\">     active_index_directory: /data/loki/boltdb-shipper-active</span><br><span class=\"line\">     cache_location: /data/loki/boltdb-shipper-cache</span><br><span class=\"line\">     cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space</span><br><span class=\"line\">     shared_store: s3</span><br><span class=\"line\">   aws:</span><br><span class=\"line\">     s3: http://***:***@10.2.4.3:9000/loki</span><br><span class=\"line\">     s3forcepathstyle: true</span><br></pre></td></tr></table></figure></p>\n<p>参考：</p>\n<p><a href=\"https://github.com/google/re2/wiki/Syntax\" target=\"_blank\" rel=\"noopener\">https://github.com/google/re2/wiki/Syntax</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/loki/logo.png\" alt=\"1.png\"></p>\n<p>loki 是 grafana 公司出的日志查询工具，区别es，只对标签不对数据做索引，更轻量。</p>\n<p><img src=\"/img/loki/1.png\" alt=\"1.png\"></p>\n<p>helm 源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add loki https://grafana.github.io/loki/charts</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"></span><br><span class=\"line\">loki 可以设置nodeSelector， promtail不要设置</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/grafana/loki/blob/65ba42a6e7dc975d6f25b15fc6f9b8d72446b3e2/docs/logql.md\" target=\"_blank\" rel=\"noopener\">查询语句</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;job=&quot;ingress-nginx/nginx-ingress&quot;&#125; |=&quot;php-sht-payment-develop-http&quot; |=&quot;refund/create&quot;</span><br><span class=\"line\">&#123;job=&quot;php-sht/payment-develop&quot;,stream=&quot;neo-log&quot;&#125; !=&quot;ShopNotifyJob&quot; </span><br><span class=\"line\">&#123;job=~&quot;php-sht/payment-develop.*&quot;&#125; |~&quot;shop_refund&quot; !~&quot;15712&quot; #正则</span><br></pre></td></tr></table></figure>\n<p><strong>promtail</strong> 作为loki的数据采集客户端，在k8s部署采用服务发现的形式监控所有容器标准输入输出。业务日志监控可以采用sidecar方式放在服务pod里，把日志文件mount 到本地，推给loki.</p>\n<p>promtail.yaml 普通配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: payment-develop</span><br><span class=\"line\">    entry_parser: raw</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets:</span><br><span class=\"line\">         - localhost</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          job: php-sht/payment-develop</span><br><span class=\"line\">          stream: neo-log</span><br><span class=\"line\">          __path__: /var/www/payment/runtime/logs/*.log</span><br></pre></td></tr></table></figure></p>","more":"<p>自定义metrics <a href=\"https://github.com/grafana/loki/blob/b74db24a007511d437c459aa36c693dc7dae8409/docs/logentry/processing-log-lines.md#metrics\" target=\"_blank\" rel=\"noopener\">pipeline 配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  http_listen_port: 3101</span><br><span class=\"line\">client:</span><br><span class=\"line\">  url: http://172.16.101.117:3100/api/prom/push</span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">- job_name: payment-develop #不参与查询</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets:</span><br><span class=\"line\">      - localhost</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      job: php-sht/payment-develop #生成查询标签</span><br><span class=\"line\">      stream: neo-log</span><br><span class=\"line\">      __path__: /var/www/payment/runtime/logs/*.log</span><br><span class=\"line\">  pipeline_stages:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      selector: &apos;&#123;stream=&quot;neo-log&quot;&#125;&apos;</span><br><span class=\"line\">      stages:</span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^(?P&lt;message&gt;.*)$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;warning_msg&gt;(warning|WARNING)).*$&quot; </span><br><span class=\"line\">       - regex:</span><br><span class=\"line\">          expression: &quot;^.*(?P&lt;error_msg&gt;(error|ERROR)).*$&quot; </span><br><span class=\"line\">       - metrics: #根据日志生成mertrics,注意此统计只能针对当前job</span><br><span class=\"line\">           log_lines_total:</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;log total&quot;</span><br><span class=\"line\">             source: message</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br><span class=\"line\">           error_log_total:  #统计错误日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;error message total&quot;</span><br><span class=\"line\">             source: error_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc </span><br><span class=\"line\">           warning_log_total:  #统计warning日志总数</span><br><span class=\"line\">             type: Counter</span><br><span class=\"line\">             description: &quot;warning message total&quot;</span><br><span class=\"line\">             source: warning_msg</span><br><span class=\"line\">             config:</span><br><span class=\"line\">               action: inc</span><br></pre></td></tr></table></figure>\n<p>服务启动后会在 3101 端口产生自定义metrics数据，以promtail_custom开头，如:promtail_custom_log_lines_total</p>\n<p>k8s中配置prometheus服务发现，在service 中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">annotations:</span><br><span class=\"line\">  prometheus.io/port: &quot;3101&quot;</span><br><span class=\"line\">  prometheus.io/scrape: &quot;true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>在 grafana 新建监控指标:</p>\n<p><img src=\"/img/loki/2.png\" alt=\"2.png\"></p>\n<p>监控日志总数，warning日志、error日志增长速率:</p>\n<p><img src=\"/img/loki/3.png\" alt=\"3.png\"></p>\n<p>使用minio存储chunk<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema_config:</span><br><span class=\"line\">   configs:</span><br><span class=\"line\">   - from: 2020-10-24</span><br><span class=\"line\">     store: boltdb-shipper</span><br><span class=\"line\">     object_store: aws</span><br><span class=\"line\">     schema: v11</span><br><span class=\"line\">     index:</span><br><span class=\"line\">       prefix: index_</span><br><span class=\"line\">       period: 24h</span><br><span class=\"line\"> server:</span><br><span class=\"line\">   http_listen_port: 3100</span><br><span class=\"line\"> storage_config:</span><br><span class=\"line\">   boltdb_shipper:</span><br><span class=\"line\">     active_index_directory: /data/loki/boltdb-shipper-active</span><br><span class=\"line\">     cache_location: /data/loki/boltdb-shipper-cache</span><br><span class=\"line\">     cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space</span><br><span class=\"line\">     shared_store: s3</span><br><span class=\"line\">   aws:</span><br><span class=\"line\">     s3: http://***:***@10.2.4.3:9000/loki</span><br><span class=\"line\">     s3forcepathstyle: true</span><br></pre></td></tr></table></figure></p>\n<p>参考：</p>\n<p><a href=\"https://github.com/google/re2/wiki/Syntax\" target=\"_blank\" rel=\"noopener\">https://github.com/google/re2/wiki/Syntax</a></p>"},{"layout":"post","title":"k8s 介绍","description":"","date":"2019-01-31T00:00:00.000Z","comments":0,"share":true,"_content":"## Kubernetes\n\nKubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效_powerful__Kubernetes提供了应用部署_规划_更新_维护的一种机制\n\n\n## 架构\n![image](/img/k8s/1.png)\n\n\n集群中的机器划分为一个Master 节点和一群工作节点(Node)\n\nMaster 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 **kube-apiserver**、负责调度的 **kube-scheduler**，以及负责容器编排的 **kube-controller-manager**。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 **Ectd** 中。\n\nnode上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。\n\n在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 **CRI** 接入到 Kubernetes 项目当中。(比如 rkt)\n\n而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。\n<!-- more -->\n\n#### kubernetes 核心概念\n![image](/img/k8s/2.png)\n\n\n\n## 概念\n\n\n## Namespace\n\nNamespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理\n\n**ResourceQuota**\n\nResource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.\n\n| 字符串                      | API对象                  |\n| ------------------------ | ---------------------- |\n| \"pods\"                   | Pod                    |\n| \"services                | Service                |\n| \"replicationcontrollers\" | ReplicationController  |\n| \"resourcequotas\"         | ResourceQuota          |\n| \"secrets\"                | Secret                 |\n| \"configmaps\"             | ConfigMap              |\n| \"persistentvolumeclaims\" | PersistentVolumeClaim  |\n| \"services.nodeports\"     | NodePort类型的Service     |\n| \"services.loadbalancers\" | LoadBalancer类型的Service |\n\n\n## label\n\nlabel 和 labelSelctor 是 k8s 中的只要分组机制\n\nKubernetes目前支持两种类型的Label Selector：\n\n- 基于等式的Selector（Equality-based）\n- 基于集合的Selector（Set-based）\n\n\n## Pod\n\nPod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。\n\n为什么k8s使用Pod在容器之上再封装一层呢？\n\n#### Pod 中几个重要字段的含义和用法\n\n1. NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段\n2. NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度\n3. HostAliases：定义了 Pod 的 hosts\n4. ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。\n5. Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。\n\n\n\n#### Pod 具体的创建步骤包括：\n\n![images](/img/k8s/3.jpg)\n\n1. 客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。\n2. API Server处理用户请求，存储Pod数据到etcd。\n3. 调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。\n4. 过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。\n5. 主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。\n6. 选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。\n7. kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。\n   ​\n\n\nPod模板是pod规范，包含在其他对象中，例如 [Replication Controllers](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/)，[Jobs](https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/)和 [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)\n\n\npod 也支持host网络的设置，如spec->hostNetwork=true\n\n\n\n**Pause Container**\n\n每个pod 里运行着一个特殊的被称为\nPause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。\n\n\n可以通过api手动管理pod，也可以委托给控制器来管理pod。\n\n\n\n**Init Container**\n\n在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。\n\n比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色\n\n\n\n## Service\n\n一个service 对象拥有如下关键特征\n拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号\n\n通过 label selector 筛选关联 pod\n\n创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了\n\n\n\nspec \ntype=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式\n\nport\ntargetPort 默认与pord 相同\n\n\n\n## API Server\n\nkubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.\n\n组件之间的所有操作和通信均由API Server处理的REST API调用.\n\nAPI Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：\n\n- 整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行\n- 集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作\n- 集群安全控制：API Server 提供的验证和授权保证了整个集群的安全\n\n**kubectl客户端**\n\n命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。\n\n\n\n**kubelet与API Server交互**\n\n每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。\n\n| 监听信息             | kubelet动作          | 备注   |\n| ---------------- | ------------------ | ---- |\n| 新的POD副本被调度绑定到本节点 | 执行POD对应的容器的创建和启动逻辑 | -    |\n| POD对象被删除         | 删除本节点上相应的POD容器     | -    |\n| 修改POD信息          | 修改本节点的POD容器        | -    |\n\n**kube-controller-manager与API Server交互**\n\nkube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。\n\n**kube-scheduler与API Server交互**\n\nScheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上\n\n**Watch API**\n\nWatch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event\n\n\n\n## Controller Manager\n\ncontroller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。\ncontroller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token \ncontroller，service controller，endpoint controller，serviceaccount controller。\n\n控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”\n\n\n\n#### k8s RC(Replication Controller)\n\nRC 的定义包含如下几个部分：\npod 期待的副本数\n用于筛选目标pod的 Label Selector\n当pod副本数小于预期时，用于创建新pod的pod模板\n\n Replica Set\n\n官方解释为“下一代的RC”\n唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的\n\nReplica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用\n\nReplica Set 和 Deployment 逐步替换了之前RC 的作用\n\n\n\n#### Deployment Controller\n\n扩容:\n\n**使用场景**：\n\n1. 重新调度\n2. 弹性伸缩\n3. 滚动更新\n\n使用场景有以下几个：\n创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程\n检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)\n更新Deployment 以创建新pod 比如镜像升级\n回滚早先 Deployment 版本\n暂停修改 \n查看Deployment的状态，以此作为发布是否成功的指标\n\n\n#### ResourceQuota Controller\n\n目前 k8s 支持 三个层次的资源配额管理\n\n1. 容器级别 ，可以对 cpu ，memory 进行限制\n\n2. Pod 级别，对pod内所有容器进行资源限制\n\n3. Namespace 级别，对Namespace(多租户)级别的资源限制，包括：\n   - pod 数量\n   - service 数量\n   - resourceQuota 数量 等\n\n**Endpoints Controller** 检测到pod的事件，则会更新对应Service 的Endpoints\n\n#### Job Controller && CronJob Controller\n\nJob Controller 控制的对象，直接就是 Pod。\n\n#### DeamonSet controller\n\n\n\n## Scheduler\n\n\nscheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。\n\n整个过程涉及三个对象：**待调度pod列表**(podQueue)，**可用node列表**，以及**调度算法和调度策略**.\n\n![image](/img/k8s/4.png)\n\n\n1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中\n\n2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。\n\n\n\n#### 调度资源监听\n\n`kube-apiserver` 提供了一套 `Watch` 机制给 `kubelet`、`kube-controller-manager`、 `kube-scheduler` 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， `kube-apiserver` 能够**主动通知**这些组件。\n\n\n\n#### 调度节点分配：\n\n调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。\n\npredicate 有一系列的算法可以使用：\n\n- `PodFitsResources`：节点上剩余的资源是否大于 pod 请求的资源\n- `PodFitsHost`：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配\n- `PodFitsHostPorts`：节点上已经使用的 port 是否和 pod 申请的 port 冲突\n- `PodSelectorMatches`：过滤掉和 pod 指定的 label 不匹配的节点\n- `NoDiskConflict`：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读\n\n如果在 predicate 过程中没有合适的节点，pod 会一直在 `pending` 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：\n按照优先级大小对节点排序。\n\n优选（ priority)\n\n优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：\n\n- `LeastRequestedPriority`：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点\n- `ImageLocalityPriority`：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高\n\n通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 `kube-apiserver` 写入 `etcd`；\n\n\n\n#### 调度策略\n\n**NodeSelector**\n\n`nodeSelector` 是最简单的控制方式。 `nodeSelector` 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。\n\n列出 node 的时候指定 `--show-labels` 参数就能查看 node 都添加了哪些 label：\n\n\n除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：\n\n- `kubernetes.io/hostname`：节点的 hostname 名称\n- `beta.kubernetes.io/os`： 节点安装的操作系统\n- `beta.kubernetes.io/arch`：节点的架构类型\n\n除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是**建议使用Node Selector**，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。\n\n\n\n**亲和性**特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。\n\n\n\n**亲和性调度（Affinity）**\n\nNode Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution\n- 软亲和性：preferredDuringSchedulingIgnoredDuringExecution \n   - 如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。\n\n\nPod Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution \n- preferredDuringSchedulingIgnoredDuringExecution\n\n**反亲和性（Anti-affinity）**\n\n\n\n**Taint 和 toleration** （比如label idc=idc1,比如GPU资源）\n\n```\n#添加一个 taint\nkubectl taint nodes node1 key=value:NoSchedule\n#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule\n```\n\nPodSpec 指定一个 toleration\n\n```\ntolerations: \n- key: key\n  operator: Exists\n  value: value\n  effect: NoSchedule\n```\n\nPreferNoSchedule （软亲和性）\n\n\n\n## kubelet\n\n在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。\n\n**容器健康检查**\n\n提供Probe 机制，以更精确的判断Pod和容器：\n**Liveness Prode** ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。\n**Readiness Probe** ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。\n\n目前有三种类型检查方式\nHttp 健康检查 ：返回200～399认为成功\nContainer Exec：容器内执行命令，状态0退出，则视为成功\nTcp：如果可以建立连接则认为成功，否则失败。\n\n\n\n**资源上报**\n\n继承 cAdvisor 定时上报节点信息\n\n健康检查监视器由kubelet 代理\n\n\n\n#### kube-proxy\n\nService 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。\n\n在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。\n\n由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。\n\nkube-proxy  更新iptables 会在本机的 **Iptables** 的NAT表中添加4条规则链路。\n\n1. 从容器中通过 serviceClusterIp 和端口访问Service 的请求\n2. 从主机中通过ServiceClusterIp和端口访问Service的请求\n3. 从容器中通过 Service 的NodePort 端口访问Service的请求\n4. 从主机中通过Service 的NodePort 端口号访问Service的请求\n\n\n运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。\n\n简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。\n\n采用 iptables 来实现LB\n实现方式：\nkube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。\n\n默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。\n\n\n\n## yaml配置\n\nDeployment yaml\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80\n        resources:\n           requests:\n             cpu: 0.05\n             memory: 16Mi\n```\n\nService yaml\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\nspec:\n  type: NodePort\n  selector:\n      app: nginx\n  ports:\n      - protocol: TCP\n        port: 8881\n        targetPort: 80\n```\n\n#### 部分命令\n\n```\nkubectl get  all  --all-namespaces=true\nkubectl describe ***\nkubectl get pods -n kube-system\nkubectl apply -f  *.yaml\nkubectl get *** -o yaml\nkubectl edit deployment.apps/nginx-deployment\nkubectl exec ${POD_NAME} -c ${CONTAINER_NAME} -- ${CMD} ${ARG1} ${ARG2} ... ${ARGN}\n```\n\n\n","source":"_posts/k8s-introduction.md","raw":"---\nlayout: post\ntitle: \"k8s 介绍\"\ndescription: \"\"\ndate: 2019-01-31\ntags: [docker,k8s,kubernetes]\ncomments: false\nshare: true\n---\n## Kubernetes\n\nKubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效_powerful__Kubernetes提供了应用部署_规划_更新_维护的一种机制\n\n\n## 架构\n![image](/img/k8s/1.png)\n\n\n集群中的机器划分为一个Master 节点和一群工作节点(Node)\n\nMaster 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 **kube-apiserver**、负责调度的 **kube-scheduler**，以及负责容器编排的 **kube-controller-manager**。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 **Ectd** 中。\n\nnode上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。\n\n在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 **CRI** 接入到 Kubernetes 项目当中。(比如 rkt)\n\n而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。\n<!-- more -->\n\n#### kubernetes 核心概念\n![image](/img/k8s/2.png)\n\n\n\n## 概念\n\n\n## Namespace\n\nNamespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理\n\n**ResourceQuota**\n\nResource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.\n\n| 字符串                      | API对象                  |\n| ------------------------ | ---------------------- |\n| \"pods\"                   | Pod                    |\n| \"services                | Service                |\n| \"replicationcontrollers\" | ReplicationController  |\n| \"resourcequotas\"         | ResourceQuota          |\n| \"secrets\"                | Secret                 |\n| \"configmaps\"             | ConfigMap              |\n| \"persistentvolumeclaims\" | PersistentVolumeClaim  |\n| \"services.nodeports\"     | NodePort类型的Service     |\n| \"services.loadbalancers\" | LoadBalancer类型的Service |\n\n\n## label\n\nlabel 和 labelSelctor 是 k8s 中的只要分组机制\n\nKubernetes目前支持两种类型的Label Selector：\n\n- 基于等式的Selector（Equality-based）\n- 基于集合的Selector（Set-based）\n\n\n## Pod\n\nPod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。\n\n为什么k8s使用Pod在容器之上再封装一层呢？\n\n#### Pod 中几个重要字段的含义和用法\n\n1. NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段\n2. NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度\n3. HostAliases：定义了 Pod 的 hosts\n4. ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。\n5. Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。\n\n\n\n#### Pod 具体的创建步骤包括：\n\n![images](/img/k8s/3.jpg)\n\n1. 客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。\n2. API Server处理用户请求，存储Pod数据到etcd。\n3. 调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。\n4. 过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。\n5. 主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。\n6. 选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。\n7. kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。\n   ​\n\n\nPod模板是pod规范，包含在其他对象中，例如 [Replication Controllers](https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/)，[Jobs](https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/)和 [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)\n\n\npod 也支持host网络的设置，如spec->hostNetwork=true\n\n\n\n**Pause Container**\n\n每个pod 里运行着一个特殊的被称为\nPause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。\n\n\n可以通过api手动管理pod，也可以委托给控制器来管理pod。\n\n\n\n**Init Container**\n\n在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。\n\n比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色\n\n\n\n## Service\n\n一个service 对象拥有如下关键特征\n拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号\n\n通过 label selector 筛选关联 pod\n\n创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了\n\n\n\nspec \ntype=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式\n\nport\ntargetPort 默认与pord 相同\n\n\n\n## API Server\n\nkubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.\n\n组件之间的所有操作和通信均由API Server处理的REST API调用.\n\nAPI Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：\n\n- 整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行\n- 集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作\n- 集群安全控制：API Server 提供的验证和授权保证了整个集群的安全\n\n**kubectl客户端**\n\n命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。\n\n\n\n**kubelet与API Server交互**\n\n每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。\n\n| 监听信息             | kubelet动作          | 备注   |\n| ---------------- | ------------------ | ---- |\n| 新的POD副本被调度绑定到本节点 | 执行POD对应的容器的创建和启动逻辑 | -    |\n| POD对象被删除         | 删除本节点上相应的POD容器     | -    |\n| 修改POD信息          | 修改本节点的POD容器        | -    |\n\n**kube-controller-manager与API Server交互**\n\nkube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。\n\n**kube-scheduler与API Server交互**\n\nScheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上\n\n**Watch API**\n\nWatch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event\n\n\n\n## Controller Manager\n\ncontroller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。\ncontroller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token \ncontroller，service controller，endpoint controller，serviceaccount controller。\n\n控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”\n\n\n\n#### k8s RC(Replication Controller)\n\nRC 的定义包含如下几个部分：\npod 期待的副本数\n用于筛选目标pod的 Label Selector\n当pod副本数小于预期时，用于创建新pod的pod模板\n\n Replica Set\n\n官方解释为“下一代的RC”\n唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的\n\nReplica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用\n\nReplica Set 和 Deployment 逐步替换了之前RC 的作用\n\n\n\n#### Deployment Controller\n\n扩容:\n\n**使用场景**：\n\n1. 重新调度\n2. 弹性伸缩\n3. 滚动更新\n\n使用场景有以下几个：\n创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程\n检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)\n更新Deployment 以创建新pod 比如镜像升级\n回滚早先 Deployment 版本\n暂停修改 \n查看Deployment的状态，以此作为发布是否成功的指标\n\n\n#### ResourceQuota Controller\n\n目前 k8s 支持 三个层次的资源配额管理\n\n1. 容器级别 ，可以对 cpu ，memory 进行限制\n\n2. Pod 级别，对pod内所有容器进行资源限制\n\n3. Namespace 级别，对Namespace(多租户)级别的资源限制，包括：\n   - pod 数量\n   - service 数量\n   - resourceQuota 数量 等\n\n**Endpoints Controller** 检测到pod的事件，则会更新对应Service 的Endpoints\n\n#### Job Controller && CronJob Controller\n\nJob Controller 控制的对象，直接就是 Pod。\n\n#### DeamonSet controller\n\n\n\n## Scheduler\n\n\nscheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。\n\n整个过程涉及三个对象：**待调度pod列表**(podQueue)，**可用node列表**，以及**调度算法和调度策略**.\n\n![image](/img/k8s/4.png)\n\n\n1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中\n\n2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。\n\n\n\n#### 调度资源监听\n\n`kube-apiserver` 提供了一套 `Watch` 机制给 `kubelet`、`kube-controller-manager`、 `kube-scheduler` 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， `kube-apiserver` 能够**主动通知**这些组件。\n\n\n\n#### 调度节点分配：\n\n调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。\n\npredicate 有一系列的算法可以使用：\n\n- `PodFitsResources`：节点上剩余的资源是否大于 pod 请求的资源\n- `PodFitsHost`：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配\n- `PodFitsHostPorts`：节点上已经使用的 port 是否和 pod 申请的 port 冲突\n- `PodSelectorMatches`：过滤掉和 pod 指定的 label 不匹配的节点\n- `NoDiskConflict`：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读\n\n如果在 predicate 过程中没有合适的节点，pod 会一直在 `pending` 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：\n按照优先级大小对节点排序。\n\n优选（ priority)\n\n优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：\n\n- `LeastRequestedPriority`：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点\n- `ImageLocalityPriority`：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高\n\n通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 `kube-apiserver` 写入 `etcd`；\n\n\n\n#### 调度策略\n\n**NodeSelector**\n\n`nodeSelector` 是最简单的控制方式。 `nodeSelector` 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。\n\n列出 node 的时候指定 `--show-labels` 参数就能查看 node 都添加了哪些 label：\n\n\n除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：\n\n- `kubernetes.io/hostname`：节点的 hostname 名称\n- `beta.kubernetes.io/os`： 节点安装的操作系统\n- `beta.kubernetes.io/arch`：节点的架构类型\n\n除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是**建议使用Node Selector**，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。\n\n\n\n**亲和性**特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。\n\n\n\n**亲和性调度（Affinity）**\n\nNode Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution\n- 软亲和性：preferredDuringSchedulingIgnoredDuringExecution \n   - 如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。\n\n\nPod Affinity\n\n- 硬亲和性：requiredDuringSchedulingIgnoredDuringExecution \n- preferredDuringSchedulingIgnoredDuringExecution\n\n**反亲和性（Anti-affinity）**\n\n\n\n**Taint 和 toleration** （比如label idc=idc1,比如GPU资源）\n\n```\n#添加一个 taint\nkubectl taint nodes node1 key=value:NoSchedule\n#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule\n```\n\nPodSpec 指定一个 toleration\n\n```\ntolerations: \n- key: key\n  operator: Exists\n  value: value\n  effect: NoSchedule\n```\n\nPreferNoSchedule （软亲和性）\n\n\n\n## kubelet\n\n在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。\n\n**容器健康检查**\n\n提供Probe 机制，以更精确的判断Pod和容器：\n**Liveness Prode** ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。\n**Readiness Probe** ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。\n\n目前有三种类型检查方式\nHttp 健康检查 ：返回200～399认为成功\nContainer Exec：容器内执行命令，状态0退出，则视为成功\nTcp：如果可以建立连接则认为成功，否则失败。\n\n\n\n**资源上报**\n\n继承 cAdvisor 定时上报节点信息\n\n健康检查监视器由kubelet 代理\n\n\n\n#### kube-proxy\n\nService 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。\n\n在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。\n\n由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。\n\nkube-proxy  更新iptables 会在本机的 **Iptables** 的NAT表中添加4条规则链路。\n\n1. 从容器中通过 serviceClusterIp 和端口访问Service 的请求\n2. 从主机中通过ServiceClusterIp和端口访问Service的请求\n3. 从容器中通过 Service 的NodePort 端口访问Service的请求\n4. 从主机中通过Service 的NodePort 端口号访问Service的请求\n\n\n运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。\n\n简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。\n\n采用 iptables 来实现LB\n实现方式：\nkube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。\n\n默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。\n\n\n\n## yaml配置\n\nDeployment yaml\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80\n        resources:\n           requests:\n             cpu: 0.05\n             memory: 16Mi\n```\n\nService yaml\n\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\nspec:\n  type: NodePort\n  selector:\n      app: nginx\n  ports:\n      - protocol: TCP\n        port: 8881\n        targetPort: 80\n```\n\n#### 部分命令\n\n```\nkubectl get  all  --all-namespaces=true\nkubectl describe ***\nkubectl get pods -n kube-system\nkubectl apply -f  *.yaml\nkubectl get *** -o yaml\nkubectl edit deployment.apps/nginx-deployment\nkubectl exec ${POD_NAME} -c ${CONTAINER_NAME} -- ${CMD} ${ARG1} ${ARG2} ... ${ARGN}\n```\n\n\n","slug":"k8s-introduction","published":1,"updated":"2019-11-14T03:42:28.626Z","photos":[],"link":"","_id":"ckj9uenm2001c0wpbd5wpa6mn","content":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>Kubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效<em>powerful__Kubernetes提供了应用部署</em>规划_更新_维护的一种机制</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p><img src=\"/img/k8s/1.png\" alt=\"image\"></p>\n<p>集群中的机器划分为一个Master 节点和一群工作节点(Node)</p>\n<p>Master 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 <strong>kube-apiserver</strong>、负责调度的 <strong>kube-scheduler</strong>，以及负责容器编排的 <strong>kube-controller-manager</strong>。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 <strong>Ectd</strong> 中。</p>\n<p>node上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。</p>\n<p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 <strong>CRI</strong> 接入到 Kubernetes 项目当中。(比如 rkt)</p>\n<p>而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。<br><a id=\"more\"></a></p>\n<h4 id=\"kubernetes-核心概念\"><a href=\"#kubernetes-核心概念\" class=\"headerlink\" title=\"kubernetes 核心概念\"></a>kubernetes 核心概念</h4><p><img src=\"/img/k8s/2.png\" alt=\"image\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><p>Namespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理</p>\n<p><strong>ResourceQuota</strong></p>\n<p>Resource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.</p>\n<table>\n<thead>\n<tr>\n<th>字符串</th>\n<th>API对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“pods”</td>\n<td>Pod</td>\n</tr>\n<tr>\n<td>“services</td>\n<td>Service</td>\n</tr>\n<tr>\n<td>“replicationcontrollers”</td>\n<td>ReplicationController</td>\n</tr>\n<tr>\n<td>“resourcequotas”</td>\n<td>ResourceQuota</td>\n</tr>\n<tr>\n<td>“secrets”</td>\n<td>Secret</td>\n</tr>\n<tr>\n<td>“configmaps”</td>\n<td>ConfigMap</td>\n</tr>\n<tr>\n<td>“persistentvolumeclaims”</td>\n<td>PersistentVolumeClaim</td>\n</tr>\n<tr>\n<td>“services.nodeports”</td>\n<td>NodePort类型的Service</td>\n</tr>\n<tr>\n<td>“services.loadbalancers”</td>\n<td>LoadBalancer类型的Service</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h2><p>label 和 labelSelctor 是 k8s 中的只要分组机制</p>\n<p>Kubernetes目前支持两种类型的Label Selector：</p>\n<ul>\n<li>基于等式的Selector（Equality-based）</li>\n<li>基于集合的Selector（Set-based）</li>\n</ul>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。</p>\n<p>为什么k8s使用Pod在容器之上再封装一层呢？</p>\n<h4 id=\"Pod-中几个重要字段的含义和用法\"><a href=\"#Pod-中几个重要字段的含义和用法\" class=\"headerlink\" title=\"Pod 中几个重要字段的含义和用法\"></a>Pod 中几个重要字段的含义和用法</h4><ol>\n<li>NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段</li>\n<li>NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度</li>\n<li>HostAliases：定义了 Pod 的 hosts</li>\n<li>ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。</li>\n<li>Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。</li>\n</ol>\n<h4 id=\"Pod-具体的创建步骤包括：\"><a href=\"#Pod-具体的创建步骤包括：\" class=\"headerlink\" title=\"Pod 具体的创建步骤包括：\"></a>Pod 具体的创建步骤包括：</h4><p><img src=\"/img/k8s/3.jpg\" alt=\"images\"></p>\n<ol>\n<li>客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。</li>\n<li>API Server处理用户请求，存储Pod数据到etcd。</li>\n<li>调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。</li>\n<li>过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。</li>\n<li>主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。</li>\n<li>选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。</li>\n<li>kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。<br>​</li>\n</ol>\n<p>Pod模板是pod规范，包含在其他对象中，例如 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/\" target=\"_blank\" rel=\"noopener\">Replication Controllers</a>，<a href=\"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/\" target=\"_blank\" rel=\"noopener\">Jobs</a>和 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\" target=\"_blank\" rel=\"noopener\">DaemonSet</a></p>\n<p>pod 也支持host网络的设置，如spec-&gt;hostNetwork=true</p>\n<p><strong>Pause Container</strong></p>\n<p>每个pod 里运行着一个特殊的被称为<br>Pause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。</p>\n<p>可以通过api手动管理pod，也可以委托给控制器来管理pod。</p>\n<p><strong>Init Container</strong></p>\n<p>在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。</p>\n<p>比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>一个service 对象拥有如下关键特征<br>拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号</p>\n<p>通过 label selector 筛选关联 pod</p>\n<p>创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了</p>\n<p>spec<br>type=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式</p>\n<p>port<br>targetPort 默认与pord 相同</p>\n<h2 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h2><p>kubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.</p>\n<p>组件之间的所有操作和通信均由API Server处理的REST API调用.</p>\n<p>API Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：</p>\n<ul>\n<li>整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行</li>\n<li>集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作</li>\n<li>集群安全控制：API Server 提供的验证和授权保证了整个集群的安全</li>\n</ul>\n<p><strong>kubectl客户端</strong></p>\n<p>命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。</p>\n<p><strong>kubelet与API Server交互</strong></p>\n<p>每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。</p>\n<table>\n<thead>\n<tr>\n<th>监听信息</th>\n<th>kubelet动作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新的POD副本被调度绑定到本节点</td>\n<td>执行POD对应的容器的创建和启动逻辑</td>\n<td>-</td>\n</tr>\n<tr>\n<td>POD对象被删除</td>\n<td>删除本节点上相应的POD容器</td>\n<td>-</td>\n</tr>\n<tr>\n<td>修改POD信息</td>\n<td>修改本节点的POD容器</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><strong>kube-controller-manager与API Server交互</strong></p>\n<p>kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。</p>\n<p><strong>kube-scheduler与API Server交互</strong></p>\n<p>Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上</p>\n<p><strong>Watch API</strong></p>\n<p>Watch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event</p>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><p>controller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。<br>controller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token<br>controller，service controller，endpoint controller，serviceaccount controller。</p>\n<p>控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”</p>\n<h4 id=\"k8s-RC-Replication-Controller\"><a href=\"#k8s-RC-Replication-Controller\" class=\"headerlink\" title=\"k8s RC(Replication Controller)\"></a>k8s RC(Replication Controller)</h4><p>RC 的定义包含如下几个部分：<br>pod 期待的副本数<br>用于筛选目标pod的 Label Selector<br>当pod副本数小于预期时，用于创建新pod的pod模板</p>\n<p> Replica Set</p>\n<p>官方解释为“下一代的RC”<br>唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的</p>\n<p>Replica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用</p>\n<p>Replica Set 和 Deployment 逐步替换了之前RC 的作用</p>\n<h4 id=\"Deployment-Controller\"><a href=\"#Deployment-Controller\" class=\"headerlink\" title=\"Deployment Controller\"></a>Deployment Controller</h4><p>扩容:</p>\n<p><strong>使用场景</strong>：</p>\n<ol>\n<li>重新调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n</ol>\n<p>使用场景有以下几个：<br>创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程<br>检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)<br>更新Deployment 以创建新pod 比如镜像升级<br>回滚早先 Deployment 版本<br>暂停修改<br>查看Deployment的状态，以此作为发布是否成功的指标</p>\n<h4 id=\"ResourceQuota-Controller\"><a href=\"#ResourceQuota-Controller\" class=\"headerlink\" title=\"ResourceQuota Controller\"></a>ResourceQuota Controller</h4><p>目前 k8s 支持 三个层次的资源配额管理</p>\n<ol>\n<li><p>容器级别 ，可以对 cpu ，memory 进行限制</p>\n</li>\n<li><p>Pod 级别，对pod内所有容器进行资源限制</p>\n</li>\n<li><p>Namespace 级别，对Namespace(多租户)级别的资源限制，包括：</p>\n<ul>\n<li>pod 数量</li>\n<li>service 数量</li>\n<li>resourceQuota 数量 等</li>\n</ul>\n</li>\n</ol>\n<p><strong>Endpoints Controller</strong> 检测到pod的事件，则会更新对应Service 的Endpoints</p>\n<h4 id=\"Job-Controller-amp-amp-CronJob-Controller\"><a href=\"#Job-Controller-amp-amp-CronJob-Controller\" class=\"headerlink\" title=\"Job Controller &amp;&amp; CronJob Controller\"></a>Job Controller &amp;&amp; CronJob Controller</h4><p>Job Controller 控制的对象，直接就是 Pod。</p>\n<h4 id=\"DeamonSet-controller\"><a href=\"#DeamonSet-controller\" class=\"headerlink\" title=\"DeamonSet controller\"></a>DeamonSet controller</h4><h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>scheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。</p>\n<p>整个过程涉及三个对象：<strong>待调度pod列表</strong>(podQueue)，<strong>可用node列表</strong>，以及<strong>调度算法和调度策略</strong>.</p>\n<p><img src=\"/img/k8s/4.png\" alt=\"image\"></p>\n<p>1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中</p>\n<p>2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。</p>\n<h4 id=\"调度资源监听\"><a href=\"#调度资源监听\" class=\"headerlink\" title=\"调度资源监听\"></a>调度资源监听</h4><p><code>kube-apiserver</code> 提供了一套 <code>Watch</code> 机制给 <code>kubelet</code>、<code>kube-controller-manager</code>、 <code>kube-scheduler</code> 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， <code>kube-apiserver</code> 能够<strong>主动通知</strong>这些组件。</p>\n<h4 id=\"调度节点分配：\"><a href=\"#调度节点分配：\" class=\"headerlink\" title=\"调度节点分配：\"></a>调度节点分配：</h4><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p>\n<p>predicate 有一系列的算法可以使用：</p>\n<ul>\n<li><code>PodFitsResources</code>：节点上剩余的资源是否大于 pod 请求的资源</li>\n<li><code>PodFitsHost</code>：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li>\n<li><code>PodFitsHostPorts</code>：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li>\n<li><code>PodSelectorMatches</code>：过滤掉和 pod 指定的 label 不匹配的节点</li>\n<li><code>NoDiskConflict</code>：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li>\n</ul>\n<p>如果在 predicate 过程中没有合适的节点，pod 会一直在 <code>pending</code> 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：<br>按照优先级大小对节点排序。</p>\n<p>优选（ priority)</p>\n<p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p>\n<ul>\n<li><code>LeastRequestedPriority</code>：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li>\n<li><code>ImageLocalityPriority</code>：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li>\n</ul>\n<p>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 <code>kube-apiserver</code> 写入 <code>etcd</code>；</p>\n<h4 id=\"调度策略\"><a href=\"#调度策略\" class=\"headerlink\" title=\"调度策略\"></a>调度策略</h4><p><strong>NodeSelector</strong></p>\n<p><code>nodeSelector</code> 是最简单的控制方式。 <code>nodeSelector</code> 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。</p>\n<p>列出 node 的时候指定 <code>--show-labels</code> 参数就能查看 node 都添加了哪些 label：</p>\n<p>除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：</p>\n<ul>\n<li><code>kubernetes.io/hostname</code>：节点的 hostname 名称</li>\n<li><code>beta.kubernetes.io/os</code>： 节点安装的操作系统</li>\n<li><code>beta.kubernetes.io/arch</code>：节点的架构类型</li>\n</ul>\n<p>除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是<strong>建议使用Node Selector</strong>，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。</p>\n<p><strong>亲和性</strong>特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。</p>\n<p><strong>亲和性调度（Affinity）</strong></p>\n<p>Node Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution</li>\n<li>软亲和性：preferredDuringSchedulingIgnoredDuringExecution <ul>\n<li>如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。</li>\n</ul>\n</li>\n</ul>\n<p>Pod Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution </li>\n<li>preferredDuringSchedulingIgnoredDuringExecution</li>\n</ul>\n<p><strong>反亲和性（Anti-affinity）</strong></p>\n<p><strong>Taint 和 toleration</strong> （比如label idc=idc1,比如GPU资源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加一个 taint</span><br><span class=\"line\">kubectl taint nodes node1 key=value:NoSchedule</span><br><span class=\"line\">#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PodSpec 指定一个 toleration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tolerations: </span><br><span class=\"line\">- key: key</span><br><span class=\"line\">  operator: Exists</span><br><span class=\"line\">  value: value</span><br><span class=\"line\">  effect: NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PreferNoSchedule （软亲和性）</p>\n<h2 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h2><p>在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。</p>\n<p><strong>容器健康检查</strong></p>\n<p>提供Probe 机制，以更精确的判断Pod和容器：<br><strong>Liveness Prode</strong> ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。<br><strong>Readiness Probe</strong> ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。</p>\n<p>目前有三种类型检查方式<br>Http 健康检查 ：返回200～399认为成功<br>Container Exec：容器内执行命令，状态0退出，则视为成功<br>Tcp：如果可以建立连接则认为成功，否则失败。</p>\n<p><strong>资源上报</strong></p>\n<p>继承 cAdvisor 定时上报节点信息</p>\n<p>健康检查监视器由kubelet 代理</p>\n<h4 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h4><p>Service 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。</p>\n<p>在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。</p>\n<p>由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。</p>\n<p>kube-proxy  更新iptables 会在本机的 <strong>Iptables</strong> 的NAT表中添加4条规则链路。</p>\n<ol>\n<li>从容器中通过 serviceClusterIp 和端口访问Service 的请求</li>\n<li>从主机中通过ServiceClusterIp和端口访问Service的请求</li>\n<li>从容器中通过 Service 的NodePort 端口访问Service的请求</li>\n<li>从主机中通过Service 的NodePort 端口号访问Service的请求</li>\n</ol>\n<p>运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。</p>\n<p>简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。</p>\n<p>采用 iptables 来实现LB<br>实现方式：<br>kube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。</p>\n<p>默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。</p>\n<h2 id=\"yaml配置\"><a href=\"#yaml配置\" class=\"headerlink\" title=\"yaml配置\"></a>yaml配置</h2><p>Deployment yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-deployment</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx</span><br><span class=\"line\">        image: nginx:1.7.9</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">           requests:</span><br><span class=\"line\">             cpu: 0.05</span><br><span class=\"line\">             memory: 16Mi</span><br></pre></td></tr></table></figure>\n<p>Service yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-svc</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">      - protocol: TCP</span><br><span class=\"line\">        port: 8881</span><br><span class=\"line\">        targetPort: 80</span><br></pre></td></tr></table></figure>\n<h4 id=\"部分命令\"><a href=\"#部分命令\" class=\"headerlink\" title=\"部分命令\"></a>部分命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get  all  --all-namespaces=true</span><br><span class=\"line\">kubectl describe ***</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br><span class=\"line\">kubectl apply -f  *.yaml</span><br><span class=\"line\">kubectl get *** -o yaml</span><br><span class=\"line\">kubectl edit deployment.apps/nginx-deployment</span><br><span class=\"line\">kubectl exec $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125; -- $&#123;CMD&#125; $&#123;ARG1&#125; $&#123;ARG2&#125; ... $&#123;ARGN&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>Kubernetes是一个开源的_用于管理云平台中多个主机上的容器化的应用_Kubernetes的目标是让部署容器化的应用简单并且高效<em>powerful__Kubernetes提供了应用部署</em>规划_更新_维护的一种机制</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p><img src=\"/img/k8s/1.png\" alt=\"image\"></p>\n<p>集群中的机器划分为一个Master 节点和一群工作节点(Node)</p>\n<p>Master 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 <strong>kube-apiserver</strong>、负责调度的 <strong>kube-scheduler</strong>，以及负责容器编排的 <strong>kube-controller-manager</strong>。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 <strong>Ectd</strong> 中。</p>\n<p>node上运行着 kubelet、kube-proxy服务进程，负责pod的创建、启动、监控、重启、销毁、以及实现软件模式的负载均衡器。</p>\n<p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 <strong>CRI</strong> 接入到 Kubernetes 项目当中。(比如 rkt)</p>\n<p>而kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。<br>","more":"</p>\n<h4 id=\"kubernetes-核心概念\"><a href=\"#kubernetes-核心概念\" class=\"headerlink\" title=\"kubernetes 核心概念\"></a>kubernetes 核心概念</h4><p><img src=\"/img/k8s/2.png\" alt=\"image\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><p>Namespace 通过将系统内部的对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理</p>\n<p><strong>ResourceQuota</strong></p>\n<p>Resource Quotas（资源配额，简称quota）是对namespace进行资源配额，限制资源使用的一种策略.</p>\n<table>\n<thead>\n<tr>\n<th>字符串</th>\n<th>API对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“pods”</td>\n<td>Pod</td>\n</tr>\n<tr>\n<td>“services</td>\n<td>Service</td>\n</tr>\n<tr>\n<td>“replicationcontrollers”</td>\n<td>ReplicationController</td>\n</tr>\n<tr>\n<td>“resourcequotas”</td>\n<td>ResourceQuota</td>\n</tr>\n<tr>\n<td>“secrets”</td>\n<td>Secret</td>\n</tr>\n<tr>\n<td>“configmaps”</td>\n<td>ConfigMap</td>\n</tr>\n<tr>\n<td>“persistentvolumeclaims”</td>\n<td>PersistentVolumeClaim</td>\n</tr>\n<tr>\n<td>“services.nodeports”</td>\n<td>NodePort类型的Service</td>\n</tr>\n<tr>\n<td>“services.loadbalancers”</td>\n<td>LoadBalancer类型的Service</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"label\"><a href=\"#label\" class=\"headerlink\" title=\"label\"></a>label</h2><p>label 和 labelSelctor 是 k8s 中的只要分组机制</p>\n<p>Kubernetes目前支持两种类型的Label Selector：</p>\n<ul>\n<li>基于等式的Selector（Equality-based）</li>\n<li>基于集合的Selector（Set-based）</li>\n</ul>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod是k8s的最基本的操作单元，包含一个或多个紧密相关的容器，类似于豌豆荚的概念。</p>\n<p>为什么k8s使用Pod在容器之上再封装一层呢？</p>\n<h4 id=\"Pod-中几个重要字段的含义和用法\"><a href=\"#Pod-中几个重要字段的含义和用法\" class=\"headerlink\" title=\"Pod 中几个重要字段的含义和用法\"></a>Pod 中几个重要字段的含义和用法</h4><ol>\n<li>NodeSelector： 是一个供用户将 Pod 与 Node 进行绑定的字段</li>\n<li>NodeName：一旦 Pod 的这个字段被赋值，Kubernetes 项目就会被认为这个 Pod 已经经过了调度</li>\n<li>HostAliases：定义了 Pod 的 hosts</li>\n<li>ImagePullPolicy： 的值默认是 Always，即每次创建 Pod 都重新拉取一次镜像，而如果它的值被定义为 Never 或者 IfNotPresent，则意味着 Pod 永远不会主动拉取这个镜像，或者只在宿主机上不存在这个镜像时才拉取。</li>\n<li>Lifecycle 字段。它定义的是 Container Lifecycle Hooks 是在容器状态发生变化时触发一系列“钩子。</li>\n</ol>\n<h4 id=\"Pod-具体的创建步骤包括：\"><a href=\"#Pod-具体的创建步骤包括：\" class=\"headerlink\" title=\"Pod 具体的创建步骤包括：\"></a>Pod 具体的创建步骤包括：</h4><p><img src=\"/img/k8s/3.jpg\" alt=\"images\"></p>\n<ol>\n<li>客户端提交创建请求，可以通过API Server的Restful API，也可以使用kubectl命令行工具。支持的数据类型包括JSON和YAML。</li>\n<li>API Server处理用户请求，存储Pod数据到etcd。</li>\n<li>调度器通过API Server查看未绑定的Pod。尝试为Pod分配主机。</li>\n<li>过滤主机 (调度预选)：调度器用一组规则过滤掉不符合要求的主机。比如Pod指定了所需要的资源量，那么可用资源比Pod需要的资源量少的主机会被过滤掉。</li>\n<li>主机打分(调度优选)：对第一步筛选出的符合要求的主机进行打分，在主机打分阶段，调度器会考虑一些整体优化策略，比如把容一个Replication Controller的副本分布到不同的主机上，使用最低负载的主机等。</li>\n<li>选择主机：选择打分最高的主机，进行binding操作，结果存储到etcd中。</li>\n<li>kubelet根据调度结果执行Pod创建操作： 绑定成功后，scheduler会调用APIServer的API在etcd中创建一个boundpod对象，描述在一个工作节点上绑定运行的所有pod信息。运行在每个工作节点上的kubelet也会定期与etcd同步boundpod信息，一旦发现应该在该工作节点上运行的boundpod对象没有更新，则调用Docker API创建并启动pod内的容器。<br>​</li>\n</ol>\n<p>Pod模板是pod规范，包含在其他对象中，例如 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/\" target=\"_blank\" rel=\"noopener\">Replication Controllers</a>，<a href=\"https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/\" target=\"_blank\" rel=\"noopener\">Jobs</a>和 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\" target=\"_blank\" rel=\"noopener\">DaemonSet</a></p>\n<p>pod 也支持host网络的设置，如spec-&gt;hostNetwork=true</p>\n<p><strong>Pause Container</strong></p>\n<p>每个pod 里运行着一个特殊的被称为<br>Pause 的容器(业务无关且不容易死亡)，其他容器则为业务容器，业务容器共享 Pause 容器的网络栈和Volume挂载卷，创建pod 会自动创建 pause容器。每个pod 都被分配一个唯一的ip地址。</p>\n<p>可以通过api手动管理pod，也可以委托给控制器来管理pod。</p>\n<p><strong>Init Container</strong></p>\n<p>在 Pod 中，所有 Init Container 定义的容器，都会比 spec.containers 定义的用户容器先启动。</p>\n<p>比如，在我们的这个应用 Pod 中，Tomcat 容器是我们要使用的主容器，而 WAR 包容器的存在，只是为了给它提供一个 WAR 包而已。所以，我们用 Init Container 的方式优先运行 WAR 包容器，扮演了一个 sidecar 的角色</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>一个service 对象拥有如下关键特征<br>拥有一个虚拟ip(Cluster ip 、Service ip 或 Vip)和端口号</p>\n<p>通过 label selector 筛选关联 pod</p>\n<p>创建好service 后集群中其他新创建的pod就可以通过service 的Cluster ip+端口号来连接和访问它了</p>\n<p>spec<br>type=NodePort 和nodePort=30001的两个属性，表明service开启了NodePort方式的外网访问模式</p>\n<p>port<br>targetPort 默认与pord 相同</p>\n<h2 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h2><p>kubernets Api Server 本身也是一个Service，它的名字就是  ”kubernets“.</p>\n<p>组件之间的所有操作和通信均由API Server处理的REST API调用.</p>\n<p>API Server 负责和 /etcd 交互（其他组件不会直接操作 etcd，只有 API Server 这么做），是整个 kubernetes 集群的数据中心，所有的交互都是以 API Server 为核心的。简单来说，API Server 提供了一下的功能：</p>\n<ul>\n<li>整个集群管理的 API 接口：所有对集群进行的查询和管理都要通过 API 来进行</li>\n<li>集群内部各个模块之间通信的枢纽：所有模块之前并不会之间互相调用，而是通过和 API Server 打交道来完成自己那部分的工作</li>\n<li>集群安全控制：API Server 提供的验证和授权保证了整个集群的安全</li>\n</ul>\n<p><strong>kubectl客户端</strong></p>\n<p>命令行工具kubectl客户端，通过命令行参数转换为对API Server的REST API调用，并将调用结果输出。</p>\n<p><strong>kubelet与API Server交互</strong></p>\n<p>每个Node节点上的kubelet定期就会调用API Server的REST接口报告自身状态，API Server接收这些信息后，将节点状态信息更新到etcd中。kubelet也通过API Server的Watch接口监听Pod信息，从而对Node机器上的POD进行管理。</p>\n<table>\n<thead>\n<tr>\n<th>监听信息</th>\n<th>kubelet动作</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新的POD副本被调度绑定到本节点</td>\n<td>执行POD对应的容器的创建和启动逻辑</td>\n<td>-</td>\n</tr>\n<tr>\n<td>POD对象被删除</td>\n<td>删除本节点上相应的POD容器</td>\n<td>-</td>\n</tr>\n<tr>\n<td>修改POD信息</td>\n<td>修改本节点的POD容器</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p><strong>kube-controller-manager与API Server交互</strong></p>\n<p>kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口，实时监控Node的信息，并做相应处理。</p>\n<p><strong>kube-scheduler与API Server交互</strong></p>\n<p>Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，它会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑。调度成功后将Pod绑定到目标节点上</p>\n<p><strong>Watch API</strong></p>\n<p>Watch API其实就是一种GET请求，只是在query参数里面加了watch。kube-apiserver那边接受到用户的client请求后，可以通过两种方式发送watch event，一种是通过websocket协议发送，另一种就是通过Transfer-Encoding=chunked的方式建立一个长连接，然后发送watch event</p>\n<h2 id=\"Controller-Manager\"><a href=\"#Controller-Manager\" class=\"headerlink\" title=\"Controller Manager\"></a>Controller Manager</h2><p>controller manager是集群内部控制中心，负责集群内的node，pod，服务端点，服务，资源配额，命名空间，服务账号等资源的管理、自动化部署健康监测，异常修复，确保个资源始终处于预期的工作状态。<br>controller manager 是一个控制器集合包含：rc，node controller，resourcequota controller，namespace conttoller，token<br>controller，service controller，endpoint controller，serviceaccount controller。</p>\n<p>控制器核心工作原理是，每个控制器通过api服务器来查看系统运行状态，并尝试从将系统状态从“现有状态”修正到“期望状态”</p>\n<h4 id=\"k8s-RC-Replication-Controller\"><a href=\"#k8s-RC-Replication-Controller\" class=\"headerlink\" title=\"k8s RC(Replication Controller)\"></a>k8s RC(Replication Controller)</h4><p>RC 的定义包含如下几个部分：<br>pod 期待的副本数<br>用于筛选目标pod的 Label Selector<br>当pod副本数小于预期时，用于创建新pod的pod模板</p>\n<p> Replica Set</p>\n<p>官方解释为“下一代的RC”<br>唯一区别是Replica Sets支持基于集合的Label selector 而RC 只支持基于等式的</p>\n<p>Replica Set 很少单独使用，主要被Deployment 这个更高级的资源对象所使用</p>\n<p>Replica Set 和 Deployment 逐步替换了之前RC 的作用</p>\n<h4 id=\"Deployment-Controller\"><a href=\"#Deployment-Controller\" class=\"headerlink\" title=\"Deployment Controller\"></a>Deployment Controller</h4><p>扩容:</p>\n<p><strong>使用场景</strong>：</p>\n<ol>\n<li>重新调度</li>\n<li>弹性伸缩</li>\n<li>滚动更新</li>\n</ol>\n<p>使用场景有以下几个：<br>创建Deployment对象来生产对应 Replica Set 并完成 Pod 副本的创建过程<br>检查Deployment 的状态来看部署是否完成(pod数量是否达到预期值)<br>更新Deployment 以创建新pod 比如镜像升级<br>回滚早先 Deployment 版本<br>暂停修改<br>查看Deployment的状态，以此作为发布是否成功的指标</p>\n<h4 id=\"ResourceQuota-Controller\"><a href=\"#ResourceQuota-Controller\" class=\"headerlink\" title=\"ResourceQuota Controller\"></a>ResourceQuota Controller</h4><p>目前 k8s 支持 三个层次的资源配额管理</p>\n<ol>\n<li><p>容器级别 ，可以对 cpu ，memory 进行限制</p>\n</li>\n<li><p>Pod 级别，对pod内所有容器进行资源限制</p>\n</li>\n<li><p>Namespace 级别，对Namespace(多租户)级别的资源限制，包括：</p>\n<ul>\n<li>pod 数量</li>\n<li>service 数量</li>\n<li>resourceQuota 数量 等</li>\n</ul>\n</li>\n</ol>\n<p><strong>Endpoints Controller</strong> 检测到pod的事件，则会更新对应Service 的Endpoints</p>\n<h4 id=\"Job-Controller-amp-amp-CronJob-Controller\"><a href=\"#Job-Controller-amp-amp-CronJob-Controller\" class=\"headerlink\" title=\"Job Controller &amp;&amp; CronJob Controller\"></a>Job Controller &amp;&amp; CronJob Controller</h4><p>Job Controller 控制的对象，直接就是 Pod。</p>\n<h4 id=\"DeamonSet-controller\"><a href=\"#DeamonSet-controller\" class=\"headerlink\" title=\"DeamonSet controller\"></a>DeamonSet controller</h4><h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>scheduler 的作用是将待调度的 pod（新建的pod，rs为补足副本而创建的pod等）按照待定的调度算法和调度策略绑定（Binding)到集群中的某个合适的Node上，并将绑定信息写入 etcd。</p>\n<p>整个过程涉及三个对象：<strong>待调度pod列表</strong>(podQueue)，<strong>可用node列表</strong>，以及<strong>调度算法和调度策略</strong>.</p>\n<p><img src=\"/img/k8s/4.png\" alt=\"image\"></p>\n<p>1）通过调度算法为待调度Pod列表的每个Pod从Node列表中选择一个最适合的Node，并将信息写入etcd中</p>\n<p>2）kubelet通过API Server监听到kubernetes Scheduler产生的Pod绑定信息，然后获取对应的Pod清单，下载Image，并启动容器。</p>\n<h4 id=\"调度资源监听\"><a href=\"#调度资源监听\" class=\"headerlink\" title=\"调度资源监听\"></a>调度资源监听</h4><p><code>kube-apiserver</code> 提供了一套 <code>Watch</code> 机制给 <code>kubelet</code>、<code>kube-controller-manager</code>、 <code>kube-scheduler</code> 等组件用来监控各种资源(Pod、Node、Service等)的变化，类似于消息中间件里的发布-订阅模式（Push）， <code>kube-apiserver</code> 能够<strong>主动通知</strong>这些组件。</p>\n<h4 id=\"调度节点分配：\"><a href=\"#调度节点分配：\" class=\"headerlink\" title=\"调度节点分配：\"></a>调度节点分配：</h4><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为预选（ predicate）；然后对通过的节点按照优先级排序，这个是优选（ priority）；最后从中选择优先级最高的节点。如果中间任何一步骤有错误，就直接返回错误。</p>\n<p>predicate 有一系列的算法可以使用：</p>\n<ul>\n<li><code>PodFitsResources</code>：节点上剩余的资源是否大于 pod 请求的资源</li>\n<li><code>PodFitsHost</code>：如果 pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配</li>\n<li><code>PodFitsHostPorts</code>：节点上已经使用的 port 是否和 pod 申请的 port 冲突</li>\n<li><code>PodSelectorMatches</code>：过滤掉和 pod 指定的 label 不匹配的节点</li>\n<li><code>NoDiskConflict</code>：已经 mount 的 volume 和 pod 指定的 volume 不冲突，除非它们都是只读</li>\n</ul>\n<p>如果在 predicate 过程中没有合适的节点，pod 会一直在 <code>pending</code> 状态，不断重试调度，直到有节点满足条件。经过这个步骤，如果有多个节点满足条件，就继续 priorities 过程：<br>按照优先级大小对节点排序。</p>\n<p>优选（ priority)</p>\n<p>优先级由一系列键值对组成，键是该优先级项的名称，值是它的权重（该项的重要性）。这些优先级选项包括：</p>\n<ul>\n<li><code>LeastRequestedPriority</code>：通过计算 CPU 和 Memory 的使用率来决定权重，使用率越低权重越高。换句话说，这个优先级指标倾向于资源使用比例更低的节点</li>\n<li><code>ImageLocalityPriority</code>：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高</li>\n</ul>\n<p>通过算法对所有的优先级项目和权重进行计算，得出最终的结果。为待调度的 Pod 分配一个 Node ，同时将分配结果通过 <code>kube-apiserver</code> 写入 <code>etcd</code>；</p>\n<h4 id=\"调度策略\"><a href=\"#调度策略\" class=\"headerlink\" title=\"调度策略\"></a>调度策略</h4><p><strong>NodeSelector</strong></p>\n<p><code>nodeSelector</code> 是最简单的控制方式。 <code>nodeSelector</code> 是 PodSpec 中的一个字段，它指定了键-值对的映射。如果想要 pod 能够运行在某个 node 上，那么这个 node 必须具有所有指定的键-值对的标签（node 也能拥有其它标签）。</p>\n<p>列出 node 的时候指定 <code>--show-labels</code> 参数就能查看 node 都添加了哪些 label：</p>\n<p>除了自己定义的 label 之外，kubernetes 还会自动给集群中的节点添加一些 label，比如：</p>\n<ul>\n<li><code>kubernetes.io/hostname</code>：节点的 hostname 名称</li>\n<li><code>beta.kubernetes.io/os</code>： 节点安装的操作系统</li>\n<li><code>beta.kubernetes.io/arch</code>：节点的架构类型</li>\n</ul>\n<p>除了设置Node Selector之外，还可以通过Node Name 直接指定Node，但还是<strong>建议使用Node Selector</strong>，label进行选择是一种弱绑定，直接指定Node Name是强绑定，Node失效时会导致Pod无法调度。</p>\n<p><strong>亲和性</strong>特性包含了两种类型的亲和性，”node 亲和性” 和 “pod 间的亲和性/反亲和性”，Pod 间以 pod 标签作为约束。</p>\n<p><strong>亲和性调度（Affinity）</strong></p>\n<p>Node Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution</li>\n<li>软亲和性：preferredDuringSchedulingIgnoredDuringExecution <ul>\n<li>如果一个 node 的标签在运行时发生改变，从而导致 pod 的亲和性规则不再被满足时，pod 也仍然会继续运行在 node 上。</li>\n</ul>\n</li>\n</ul>\n<p>Pod Affinity</p>\n<ul>\n<li>硬亲和性：requiredDuringSchedulingIgnoredDuringExecution </li>\n<li>preferredDuringSchedulingIgnoredDuringExecution</li>\n</ul>\n<p><strong>反亲和性（Anti-affinity）</strong></p>\n<p><strong>Taint 和 toleration</strong> （比如label idc=idc1,比如GPU资源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加一个 taint</span><br><span class=\"line\">kubectl taint nodes node1 key=value:NoSchedule</span><br><span class=\"line\">#这个 taint 的 key 为 key 且 value 为 value，并且这个 taint 的作用是 NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PodSpec 指定一个 toleration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tolerations: </span><br><span class=\"line\">- key: key</span><br><span class=\"line\">  operator: Exists</span><br><span class=\"line\">  value: value</span><br><span class=\"line\">  effect: NoSchedule</span><br></pre></td></tr></table></figure>\n<p>PreferNoSchedule （软亲和性）</p>\n<h2 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h2><p>在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。kubelet会在API Server上注册节点信息，定期向Master汇报节点资源使用情况，并通过cAdvisor监控容器和节点资源。可以把kubelet理解成【Server-Agent】架构中的agent，是Node上的pod管家。</p>\n<p><strong>容器健康检查</strong></p>\n<p>提供Probe 机制，以更精确的判断Pod和容器：<br><strong>Liveness Prode</strong> ：用于容器的自定义健康检查，如果检查失败，将杀死容器，然后根据pod的重启策略了来决定是否重启容器。还可以指定initialDelaySeconds，用于确定状态检查的宽限期，以便容器执行必要的初始化。<br><strong>Readiness Probe</strong> ：如果检查失败，会将该pod 从服务代理的分发后端去除，不再发送请求给pod。</p>\n<p>目前有三种类型检查方式<br>Http 健康检查 ：返回200～399认为成功<br>Container Exec：容器内执行命令，状态0退出，则视为成功<br>Tcp：如果可以建立连接则认为成功，否则失败。</p>\n<p><strong>资源上报</strong></p>\n<p>继承 cAdvisor 定时上报节点信息</p>\n<p>健康检查监视器由kubelet 代理</p>\n<h4 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h4><p>Service 在很多情况下知识一个概念，而真正将Service 的作用落实的是背后的 kube-proxy服务进程。</p>\n<p>在k8s 集群的每个Node上都会运行一个 kube-proxy 服务进程，可以看作Service 的透明代理兼负载均衡器，核心是讲到某个 service 的访问请求转移到后端的多个pod 实例上。</p>\n<p>由于iptables 机制针对的是本都的kube-proxy端口，所以每个Node上都要运行 kube-proxy 组件，这样，在集群内部，我们可以再任意Node上发起对 Service 的访问请求。</p>\n<p>kube-proxy  更新iptables 会在本机的 <strong>Iptables</strong> 的NAT表中添加4条规则链路。</p>\n<ol>\n<li>从容器中通过 serviceClusterIp 和端口访问Service 的请求</li>\n<li>从主机中通过ServiceClusterIp和端口访问Service的请求</li>\n<li>从容器中通过 Service 的NodePort 端口访问Service的请求</li>\n<li>从主机中通过Service 的NodePort 端口号访问Service的请求</li>\n</ol>\n<p>运行在每个Node 上的kube-proxy进程其实就是一个智能的软件负载均衡器。</p>\n<p>简单的网络代理和负载均衡器，负责Service的实现：实现从Pod到Service，以及NodePort向Service的访问。</p>\n<p>采用 iptables 来实现LB<br>实现方式：<br>kube-proxy 监控服务/端点增删改，对每个服务配置ipitables规则，捕获Service 的ClusterIp 和端口的流量，并将流量重定向到服务的后端之一。默认后端的选择是随机的,可以设置基于客户端ip的会话关联。</p>\n<p>默认通过iptables来配置对应的NAT转发，自身不再参与转发过程。</p>\n<h2 id=\"yaml配置\"><a href=\"#yaml配置\" class=\"headerlink\" title=\"yaml配置\"></a>yaml配置</h2><p>Deployment yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-deployment</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx</span><br><span class=\"line\">        image: nginx:1.7.9</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">           requests:</span><br><span class=\"line\">             cpu: 0.05</span><br><span class=\"line\">             memory: 16Mi</span><br></pre></td></tr></table></figure>\n<p>Service yaml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-svc</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">      - protocol: TCP</span><br><span class=\"line\">        port: 8881</span><br><span class=\"line\">        targetPort: 80</span><br></pre></td></tr></table></figure>\n<h4 id=\"部分命令\"><a href=\"#部分命令\" class=\"headerlink\" title=\"部分命令\"></a>部分命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get  all  --all-namespaces=true</span><br><span class=\"line\">kubectl describe ***</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br><span class=\"line\">kubectl apply -f  *.yaml</span><br><span class=\"line\">kubectl get *** -o yaml</span><br><span class=\"line\">kubectl edit deployment.apps/nginx-deployment</span><br><span class=\"line\">kubectl exec $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125; -- $&#123;CMD&#125; $&#123;ARG1&#125; $&#123;ARG2&#125; ... $&#123;ARGN&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Linux高性能服务器编程","description":"","date":"2019-02-27T00:00:00.000Z","comments":0,"share":true,"_content":"## Linux高性能服务器编程\n\n网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。\n\n封装和分用\n\n\n经过TCP封装后的数据称为TCP报文段(TCP message segment)\n\nUDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。\n\n经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。\n\n经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。\n\n帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。\n\n以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。\n\n因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。\n\nTCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用\n\n帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。\n\narp -a  查看 arp 缓存\n\n即使是同一台机器上的两个进程通信，也要考虑字节序的问题\n\ninet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反\n\npipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1\n\n自linux2.6.11内核起，管道容量的大小默认是 65536 字节\n\nsendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。\n\n大部分后台进程都在 /var/log 目录下用于自己的目录日志\n\nlsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符\n\n\n字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。\n\n当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。\n\n当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。\n\n发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。\n\nTCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。\n\n**TCP头部结构如下：**\n\n16位源端口号、16位目的端口号\n\n32位序号\n\n32位确认号\n\n4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小\n\n16位校验和、16位紧急指针\n\n选项，最多40字节\n\n16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\n\n我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s\n\n服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。\n当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。\n\n**扩大因子**\n\nTCP 紧急数据成为带外数据，仅支持一个字节。\n\n在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。\n\n由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 \n\n带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。\n\n发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。\n\nftp命令用使带 外 数据 来中断一个件文的输传。\n\n16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。\n","source":"_posts/tcp.md","raw":"---\nlayout: post\ntitle: \"Linux高性能服务器编程\"\ndescription: \"\"\ndate: 2019-02-27\ntags: [linux,tcp/ip]\ncomments: false\nshare: true\n---\n## Linux高性能服务器编程\n\n网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。\n\n封装和分用\n\n\n经过TCP封装后的数据称为TCP报文段(TCP message segment)\n\nUDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。\n\n经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。\n\n经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。\n\n帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。\n\n以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。\n\n因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。\n\nTCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用\n\n帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。\n\narp -a  查看 arp 缓存\n\n即使是同一台机器上的两个进程通信，也要考虑字节序的问题\n\ninet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反\n\npipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1\n\n自linux2.6.11内核起，管道容量的大小默认是 65536 字节\n\nsendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。\n\n大部分后台进程都在 /var/log 目录下用于自己的目录日志\n\nlsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符\n\n\n字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。\n\n当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。\n\n当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。\n\n发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。\n\nTCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。\n\n**TCP头部结构如下：**\n\n16位源端口号、16位目的端口号\n\n32位序号\n\n32位确认号\n\n4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小\n\n16位校验和、16位紧急指针\n\n选项，最多40字节\n\n16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\n\n我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s\n\n服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。\n当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。\n\n**扩大因子**\n\nTCP 紧急数据成为带外数据，仅支持一个字节。\n\n在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。\n\n由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 \n\n带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。\n\n发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。\n\nftp命令用使带 外 数据 来中断一个件文的输传。\n\n16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。\n","slug":"tcp","published":1,"updated":"2019-11-14T03:33:28.579Z","photos":[],"link":"","_id":"ckj9uenm4001e0wpbgihg9w81","content":"<h2 id=\"Linux高性能服务器编程\"><a href=\"#Linux高性能服务器编程\" class=\"headerlink\" title=\"Linux高性能服务器编程\"></a>Linux高性能服务器编程</h2><p>网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。</p>\n<p>封装和分用</p>\n<p>经过TCP封装后的数据称为TCP报文段(TCP message segment)</p>\n<p>UDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。</p>\n<p>经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。</p>\n<p>经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。</p>\n<p>帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。</p>\n<p>以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。</p>\n<p>因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。</p>\n<p>TCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用</p>\n<p>帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。</p>\n<p>arp -a  查看 arp 缓存</p>\n<p>即使是同一台机器上的两个进程通信，也要考虑字节序的问题</p>\n<p>inet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反</p>\n<p>pipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1</p>\n<p>自linux2.6.11内核起，管道容量的大小默认是 65536 字节</p>\n<p>sendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。</p>\n<p>大部分后台进程都在 /var/log 目录下用于自己的目录日志</p>\n<p>lsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符</p>\n<p>字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。</p>\n<p>当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。</p>\n<p>当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。</p>\n<p>发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。</p>\n<p>TCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。</p>\n<p><strong>TCP头部结构如下：</strong></p>\n<p>16位源端口号、16位目的端口号</p>\n<p>32位序号</p>\n<p>32位确认号</p>\n<p>4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小</p>\n<p>16位校验和、16位紧急指针</p>\n<p>选项，最多40字节</p>\n<p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>\n<p>我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s</p>\n<p>服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。<br>当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。</p>\n<p><strong>扩大因子</strong></p>\n<p>TCP 紧急数据成为带外数据，仅支持一个字节。</p>\n<p>在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。</p>\n<p>由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 </p>\n<p>带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。</p>\n<p>发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。</p>\n<p>ftp命令用使带 外 数据 来中断一个件文的输传。</p>\n<p>16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux高性能服务器编程\"><a href=\"#Linux高性能服务器编程\" class=\"headerlink\" title=\"Linux高性能服务器编程\"></a>Linux高性能服务器编程</h2><p>网络层使用IP地址寻址一台机器，而数据链路层使用物理地址寻址一台机器，因此网络层必须先将目标机器的IP地址转换成其物理地址，才能使用数据链路层提供的服务，这就是 ARP 协议的用途。</p>\n<p>封装和分用</p>\n<p>经过TCP封装后的数据称为TCP报文段(TCP message segment)</p>\n<p>UDP无需为应用层数据保存副本，因此它提供的服务是不可靠的，当一个UDP数据报被成功发送之后，UDP内核缓冲区中的该数据报就被丢弃了，如果应用程序检测到该数据报未能正确接收，则需要从用户控件将该数据报拷贝到 UDP 内核发送缓冲区中。</p>\n<p>经过 IP 封装后的数据成为 IP 数据报（IP datagram）,IP数据报也包括头部信息和数据部分，其中数据部分就是一个 TCP 报文段，UDP报文段或ICMP报文。</p>\n<p>经过数据链路层封装的数据成为帧（frame)，以太网上传输的是以太网帧（ethernet frame），令牌环网络上传输的是令牌环帧(token ring frame)。</p>\n<p>帧的最大传输单位（MTU),即帧最多能携带多少上层协议数据（比如IP数据报），同程收到网络网络类型的限制，如果所示 以太网帧的MTU是1500字节，正因为如此，过长的IP数据可能需要被分片（fragment) 传输。</p>\n<p>以太网帧使用2字节的类型字段来标识上层协议，如果帧类型字段值为 0x800,则为 IP数据报，0x806为ARP请求或应答报文，0x835 帧的类型部分为 RARP 请求或者应答报文。</p>\n<p>因为ICMP 、TCP 和 UDP 都是用ip协议，所以 IP数据报的头部采用16位协议字段来区分它们。</p>\n<p>TCP 报文段和UDP数据报通过其头部中的16位端口号来区分上层应用</p>\n<p>帧通过上述分用步骤后，最终将封装前的原始数据送至目标服务，这样在顶层目标服务看来，封装和分用似乎没有发生过。</p>\n<p>arp -a  查看 arp 缓存</p>\n<p>即使是同一台机器上的两个进程通信，也要考虑字节序的问题</p>\n<p>inet_addr把点分十进制字符串的ipv4地址转换为网络字节序煮熟表示的 ipv4 地址。 inet_aton 相反</p>\n<p>pipe 函数的参数是一个包含两个 int 型整数的数组指针，该函数成功返回0，并将一对打开的文件描述符值填入其参数指向的数组。失败返回 -1</p>\n<p>自linux2.6.11内核起，管道容量的大小默认是 65536 字节</p>\n<p>sendfile 函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免额内核缓冲区和用户缓冲区之间的数据拷贝，sendfile 几乎是专门为在网络上传输文件而设计的。</p>\n<p>大部分后台进程都在 /var/log 目录下用于自己的目录日志</p>\n<p>lsof 是一个列出当前系统打开的文件描述符的工具 -i 显示 socket 文件描述符</p>\n<p>字节流服务和数据报服务的区别，实际编程中体现为通信双方是否必须执行相同次数的读、写操作。</p>\n<p>当发送端应用程序连续执行多次写操作时，TCP模块先将哲学数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据时，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。因此，TCP模块发送出的TCP报文段的个数和应用程序执行的写操作次数之间没有固定的数量关系。</p>\n<p>当接收端收到一个或多个TCP报文段后，TCP模块将它们携带的应用程序数据按照TCP报文段的序号依次放入TCP接收缓冲区中，并通知应用程序读取数据。接收端应用程序可以一次性将TCP接收缓冲区中的数据全部读出，也可以分多次读取，这取决于用户指定的应用程序读取缓冲区的大小。因此，应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系。</p>\n<p>发送端执行的写操作和接收端执行的读操作之间没有任何数量关系，这就是字节流的概念；应用程序对数据的发送和接收是没有边界线制的。UDP则不然。发送端应用程序每执行一次写操作，UDP模块就要将其分装成一个 UDP 数据报并发送之。接收端必须及时针对每一个 UDP 数据报执行读操作，否则就会丢包。并且，如果用户没有指定足够的应用程序缓冲区来读取UDP数据，则UDP数据将被截断。</p>\n<p>TCP 协议采用超时重传机制，发送端在发送出一个TCP报文段之后启动定时器，如果在定时时间内未收到应答，它将重发该把文段。TCP协议还会对接收到的TCP报文段重排、整理，再交付给应用层。</p>\n<p><strong>TCP头部结构如下：</strong></p>\n<p>16位源端口号、16位目的端口号</p>\n<p>32位序号</p>\n<p>32位确认号</p>\n<p>4位头部长度、6位保留、URG、ACK、PSH、RST、SYN、FIN、16位窗口大小</p>\n<p>16位校验和、16位紧急指针</p>\n<p>选项，最多40字节</p>\n<p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>\n<p>我们一共抓取到了6个TCP报文段，它们是同步报文段，并且具有相同的序号值，这说明后面5个同步报文段都是超时重连接报文段。它们间隔时间分别为1s,2s,4s,8s和16s</p>\n<p>服务器通过listen系统调用进入LISTEN状态，被动等待客户端连接，因此执行的是所谓的被动打开。服务器一旦监听到某个连接请求（收到同步报文段），就将该连接放入内核等待队列中，并向客户端发送带 SYN 标志的确认报文段。此时该连接处于 SYN_REVD 状态。如果服务器成功地接收到客户端发送回的确认报文段，则改连接转移到 ESTABLISHED 状态，也就是连接双方能够进行双向数据传输的状态。<br>当客户端主动关闭连接时，服务器通过返回确认报文段使连接进入 CLOSE_WAIT 状态。服务器检测到客户端关闭连接后，也会立即给客户端发送一个结束报文段来关闭连接。这将使连接装移到 LAST_ACK 状态。</p>\n<p><strong>扩大因子</strong></p>\n<p>TCP 紧急数据成为带外数据，仅支持一个字节。</p>\n<p>在某些特殊条件下，TCP连接的一端回会向另一端发送携带RST标志的报文段，即复位报文段，以通知对方关闭连接或重新建立连接。</p>\n<p>由于服务器程序已经被中断，所以对客户端发送的数据回应了一个复位报文段 </p>\n<p>带外数据比普通数据（也成为带内数据）有更高的优先级，它应该总是立即发送，而不论发送缓冲区中是否有排队等待发送的普通数据。带外数据的使用很少见，已知的仅有telnet、ftp等远程非活跃程序。</p>\n<p>发送端一次发送的多字节的带外数据中只有最后一个字节被当作带外数据，其他数据被当成了普通数据。</p>\n<p>ftp命令用使带 外 数据 来中断一个件文的输传。</p>\n<p>16位紧急指针，它是配合 URG 标志位一起使用的，言外之意就是这个字段只有在URG被置位时才有意义。因为只有一个紧急指针，这也意味着它只能表示一个字节的数据。这个指针指向了紧急数据最后一个自己的下一个字节。</p>\n"},{"title":"小米mysql中间件shaza源码注释","date":"2020-07-28T10:36:10.000Z","share":true,"_content":"\n\n**main.go**\n\n```\n//45 init config of shazam proxy\ncfg, err := models.ParseProxyConfigFromFile(*configFile)\n\n//57 init manager\nmgr, err := server.LoadAndCreateManager(cfg)\n```\n\n```\nmanager.go\n//46\nmgr, err := CreateManager(cfg, namespaceConfigs)\n//154 init namespace\nm.namespaces[current] = CreateNamespaceManager(namespaceConfigs)\n//422\nnamespace, err := NewNamespace(config)\n```\n```\nnamespace.go\n//82 NewNamespace init namespace\nfunc NewNamespace(namespaceConfig *models.Namespace) (*Namespace, error) {\n\t//151 init router\n\tnamespace.router, err = router.NewRouter(namespaceConfig)\n}\n```\n\n```\nrouter.go\n//29\nfunc NewRouter(namespace *models.Namespace) (*Router, error) {\n//63 \nrule, err := parseRule(shard)\n```\n\n```\nrule.go\n//310 生成初始化数据subTableIndexs、tableToSlice等\n// subTableIndexs 所有子表index，走全表查询时候用到; tableToSlice 根据index获取slice ，再根据 index获取database，或者tableindex获取database\nsubTableIndexs, tableToSlice, shard, err := parseRuleSliceInfos(cfg)\n\t//400 判断是mycatmod规则\n\tcase MycatModRuleType:\n\t\tsubTableIndexs, tableToSlice, err := parseMycatHashRuleSliceInfos(cfg.Locations, cfg.Slices, cfg.Databases)\n\t\t//479\n\t\tif len(locations) != len(slices) {\n\t\t\treturn nil, nil, errors.ErrLocationsCount\n\t\t}\t\n```\n<!-- more -->\n**server.go**  \n\n```\nonConnc //106 处理连接\ncc := newSession(s, c) //107 新建一个session,初始化部分字段\nHandshark //121 认证 \n```\n```\nsession.go\n//56\ncc.c = NewClientConn(mysql.NewConn(tcpConn), s.manager) //66 每个客户端连接包装成结构体，包含salt加密字段\ncc.proxy = s\ncc.manager = s.manager\ncc.executor = newSessionExecutor(s.manager)\n\n//148 通过握手确定session db、namespace等信息\nfunc (cc *Session) handleHandshakeResponse(info HandshakeResponseInfo) error {//148 \n\t//设置认证握手时传入的 db 值\n\tcc.executor.SetDatabase(info.Database)\n    //set namespace\n    namespace := cc.manager.GetNamespaceByUser(user, password)\n    cc.namespace = namespace\n    cc.executor.namespace = namespace\n} \n```\n```\ns.tw.Add(s.sessionTimeout, cc, cc.Close) //137 加入时间轮循，超时关闭\ncc.Run() //139 \n```\n\n**session.go**\n\n```\ntype Session struct {\n\tsync.Mutex\n\tc     *ClientConn\n\tproxy *Server\n\tmanager *Manager\n\tnamespace string\n\texecutor *SessionExecutor\n\tclosed atomic.Value\n}\n\ndata, err := cc.c.ReadEphemeralPacket() //226 读客户端发来的文本数据\ncc.proxy.tw.Add(cc.proxy.sessionTimeout, cc, cc.Close)  //232 会话超时关闭\nrs := cc.executor.ExecuteCommand(cmd, data) //237 执行客户发来的数据\n```\n\n**executor.go** (start)\n\n```\n// SessionExecutor is bound to a session, so requests are serializable\ntype SessionExecutor struct {\n\tmanager *Manager\n\n\tnamespace string\n\tuser      string\n\tdb        string\n\n\tstatus       uint16\n\tlastInsertID uint64\n\n\tcollation        mysql.CollationID\n\tcharset          string\n\tsessionVariables *mysql.SessionVariables\n\n\ttxConns map[string]*backend.PooledConnection\n\ttxLock  sync.Mutex\n\n\tstmtID uint32\n\tstmts  map[uint32]*Stmt //prepare相关,client端到proxy的stmt\n\n\tparser *parser.Parser\n}\n\nswitch cmd { //256 判断sql是哪种操作类型（见参考#1）\nse.handleQuery(sql) //266 如果是查询类型，执行 handleQuery\n```\n\n**executor_handle.go** (start)\n\n```\nreqCtx := util.NewRequestContext() //62 创建请求上下文\nif !ns.IsSQLAllowed(reqCtx, sql)  //65 黑名单检查\n```\n\n```\nnamespace.go\n\nfingerprint := mysql.GetFingerprint(sql) //235 格式化sql，去空格，大小写等\nmd5 := mysql.GetMd5(fingerprint) //237 返回格式化后的md5 然后比较，是否在黑名单\n```\n\n```\nstmtType := parser.Preview(sql) //75 预处理 判断 query 是增删改查哪一种 查询返回 StmtSelect（int 0)\nreqCtx.Set(util.StmtType, stmtType) //76 类型写入 reqCtx 上下文\nr, err = se.doQuery(reqCtx, sql) //78 \n\nif isSQLNotAllowedByUser(se, stmtType) //86 如果是只读用户, 且SQL是INSERT, UPDATE, DELETE, 则拒绝执行, 返回true\nif canHandleWithoutPlan(stmtType) //90 判断是否简单sql, 如show,set,begin,use等可以不走执行计划\n\ndb := se.db //94 默认为认证时传入的db值，执行use db后，为选择的db\n\np, err := se.getPlan(se.GetNamespace(), db, sql) //96 获取执行计划\n\nn, err := se.Parse(sql) //155 分析sql返回 ast.StmtNode 重要!\n\np, err := plan.BuildPlan(n, phyDBs, db, sql, rt, seq) //163 根据ast，物理db，当前db,sql，分片路由，seq 构建 plan\n```\n\n**plan.go**\n\n```\n//171 BuildPlan build plan for ast\nfunc BuildPlan(stmt ast.StmtNode, phyDBs map[string]string, db, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) {\n\t//180 NewChecker db为use db中设置的db名. 如果没有执行use db, 则为空字符串\n\tchecker := NewChecker(db, router)\n\tstmt.Accept(checker)\n\tif checker.IsDatabaseInvalid() { //检查db是否可用，比如没有选db执行执行sql\n\t\treturn nil, fmt.Errorf(\"no database selected\") // TODO: return standard MySQL error\n\t}\n\tif checker.IsShard() { //187 检查是否走分片，(根据db和table判断是否需要分表) 构建分片执行计划\n\t\treturn buildShardPlan(stmt, db, sql, router, seq)\n\t}\n\t//190 构建不需要分片的执行计划，不需要分片的走 DefaultSlice Node\n\treturn CreateUnshardPlan(stmt, phyDBs, db, checker.GetUnshardTableNames())\n}\n\n//126\nfunc (s *Checker) hasShardTableInTableName(n *ast.TableName) bool {\n\t_, ok := s.router.GetShardRule(db, table)//132 router 根据db和table判断是否需要分表\n}\n```\n\n```\nrouter.go\nrule, ok := r.rules[db][table] //109 返回分片规则\n```\n\n```\n//193 返回查询类型的 查询计划\nfunc buildShardPlan(stmt ast.StmtNode, db string, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) {\n\tswitch s := stmt.(type) {\n\tcase *ast.SelectStmt:\n\t\tplan := NewSelectPlan(db, sql, router) //196 新建查询计划\n\t\tif err := HandleSelectStmt(plan, s); err != nil { //197 处理查询计划\n\t\t\treturn nil, err\n\t\t}\n\t\treturn plan, nil\n}\n```\n\n**plan_select.go**\n\n```\n//155 处理SelectStmt语法树, 改写其中一些节点, 并获取路由信息和结果聚合函数\nfunc HandleSelectStmt(p *SelectPlan, stmt *ast.SelectStmt) error  \n\n//160 如果这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点,在此步骤返回所有subTableIndex\nhandleTableRefs\n\t//322\n\tfunc handleJoin(p *TableAliasStmtInfo, join *ast.Join) error {\n\t//332\n\tif err := rewriteTableSource(p, left); err != nil {\n\t//400\n\treturn rewriteTableNameInTableSource(p, tableSource)\n\t//433 这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点\n\td, err := CreateTableNameDecorator(tableName, rule, p.GetRouteResult())\n//190 \nhandleWhere\n\t//370\n\thas, result, decorator, err := handleComparisonExpr(p.TableAliasStmtInfo, stmt.Where)\n\t// 576 BinaryOperationExpr结构和json输出的一样\n\tcase *ast.BinaryOperationExpr \n\t//637 判断操作符号\n\tcase opcode.EQ, opcode.NE, opcode.GT, opcode.GE, opcode.LT, opcode.LE:\n\t//700\n\tif lType == ColumnNameExpr  {\n\t//873\n\tfunc handleBinaryOperationExprCompareLeftColumnRightValue\n\t//875 根据列判断是否需要装饰ColumnName, 获取对应的rule规则 where payorder.id=refund.pid\n\trule, need, isAlias, err := NeedCreateColumnNameExprDecoratorInCondition(p, column)\n\t//883 创建列装饰器\n\tdecorator := CreateColumnNameExprDecorator(column, rule, isAlias, p.GetRouteResult())\n\t//896\n\ttableIndexes, err := findTableIndexes(rule, column.Name.Name.L, v)\n\t//793 根据规则计算出表index\n\tindex, err := rule.FindTableIndex(v)\n\t\n\t//374 把result写入routerResult，覆盖 handleTableRefs 阶段的 subTableIndex\n\tif has {\n\t\t//设置 index 到 RouteResult 也可以在此存入其他值\n\t\tp.GetRouteResult().Inter(result)\n\t\t\n\t\tutil.go\n\t\t//116 行判断index是否合法\n\t\tfunc interList(l1 []int, l2 []int) []int {\n\t}\n\n//210 生成sql 返回\nsqls, err := generateShardingSQLs(p.stmt, p.result, p.router)\n\t//504 \n    if err := stmt.Restore(ctx); err != nil {\n  \n```\n\n```\ndecorator_table_name.go\n\n//78\nfunc (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error {\n\n//88 如果原sql里带了dbName，mycat需要改写\nif t.origin.Schema.String() != \"\" {\n\t\n//115 如果是 kingshard 类型，重写表名\nctx.WriteName(fmt.Sprintf(\"%s_%04d\", t.origin.Name.String(), tableIndex))\n```\n\n```\n\t//513 根据 index 获取slice dbName\n    sliceIndex := rule.GetSliceIndexFromTableIndex(index)\n\tsliceName := rule.GetSlice(sliceIndex)\n\tdbName, _ := rule.GetDatabaseNameByTableIndex(index)\t\n```\n\n**executor_handler.go** (end)\n\n```\n//101 判断是否能在从库上执行\nif canExecuteFromSlave(se, sql) {\n\treqCtx.Set(util.FromSlave, 1)\n}\n//105 执行执行计划\nr, err := p.ExecuteIn(reqCtx, se)\n```\n\n\n```\nplan_select.go\n\n//65 ExecuteIn implement Plan\nfunc (s *SelectPlan) ExecuteIn(reqCtx *util.RequestContext, sess Executor) (*mysql.Result, error) {\n\tsqls := s.GetSQLs()\n\trs, err := sess.ExecuteSQLs(reqCtx, sqls) //80 执行sql \n\tr, err := MergeSelectResult(s, s.stmt, rs) //85 merge查询结果\n}\n\nexector.go\n\n//695\nfunc (se *SessionExecutor) ExecuteSQLs\n//707\nrs, err := se.executeInMultiSlices(reqCtx, pcs, sqls)\n```\n\n```\nmodifyResultStatus(r, se)\n```\n\n**executor.go** (end)\n\n```\nreturn CreateResultResponse(se.status, r) //270\n```\n\n**session.go** (end)\n\n```\nif err = cc.writeResponse(rs); err != nil  //240\n```\n\n\n\n**调试技巧**\n\n```\ngolang解决cannot convert a (type interface {}) to type *: need type assertion\n\nvar a interface{} = int(10)\nvar b MyInt = a.(MyInt)\n\n可以对对象分别使用 Printf(\"%#v\") 和  json.Marshal 输出观察\n```\n\n\n\n使用tidb生成ast树，改写sql例子\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/pingcap/parser\"\n\t\"github.com/pingcap/parser/ast\"\n\t\"github.com/pingcap/parser/format\"\n\t_ \"github.com/pingcap/parser/test_driver\"\n)\n\n//TableNameDecorator test\ntype TableNameDecorator struct {\n\torigin *ast.TableName\n}\n\n// Restore implement ast.Node\nfunc (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error {\n\tctx.WriteName(t.origin.Name.String() + \"_202006\")\n\treturn nil\n}\n\n// Accept implement ast.Node\n// do nothing and return current decorator\nfunc (t *TableNameDecorator) Accept(v ast.Visitor) (ast.Node, bool) {\n\treturn t, true\n}\n\n// Text implement ast.Node\nfunc (t *TableNameDecorator) Text() string {\n\treturn t.origin.Text()\n}\n\n// SetText implement ast.Node\nfunc (t *TableNameDecorator) SetText(text string) {\n\tt.origin.SetText(text)\n}\n\nfunc main() {\n\t//原始sql\n\tsql := \"SELECT /*+ TIDB_SMJ(employees) */ emp_no, first_name, last_name \" +\n\t\t\"FROM employees USE INDEX (last_name) \" +\n\t\t\"where last_name='Aamodt' and gender='F' and birth_date > '1960-01-01'\"\n\n\tp := parser.New()\n\n\t//解析sql成一颗ast树\n\toneStmt, err := p.ParseOneStmt(sql, \"\", \"\")\n\tif err != nil {\n\t\tfmt.Printf(\"parse error:\\n%v\\n%s\", err, sql)\n\t\treturn\n\t}\n\n\t//如果是select查询转换成ast.SelectStmt类型\n\tvar tmp interface{}\n\ttmp = oneStmt\n\tvar stmt *ast.SelectStmt = tmp.(*ast.SelectStmt)\n\n\ttableRefs := stmt.From\n\tjoin := tableRefs.TableRefs\n\n\t//判断jon.Left节点是否ast.TableSource类型，如果是新建tableName装饰器，替换left.Source节点\n\tswitch left := join.Left.(type) {\n\tcase *ast.TableSource:\n\t\ttableName, _ := left.Source.(*ast.TableName)\n\t\td := &TableNameDecorator{tableName}\n\t\tleft.Source = d\n\t}\n\n\t//创建builder\n\tsb := &strings.Builder{}\n\tctx := format.NewRestoreCtx(269, sb)\n\n\t//遍历 ast 树各节点的 Restore 方法组装成sql\n\tif err := stmt.Restore(ctx); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t//原始sql\n\tfmt.Println(sql)\n\t//输出最后组装的sql\n\tfmt.Println(sb)\n\n}\n```\n\n```\n$ cat go.mod \nmodule tidb\n\ngo 1.13\n\nrequire github.com/pingcap/parser v0.0.0-20200424075042-8222d8b724a4\n```\n\n\n\n\n\n参考：\n\n1. https://dev.mysql.com/doc/internals/en/text-protocol.html\n2. https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/ \n\n","source":"_posts/shazam_source_code.md","raw":"---\ntitle: \"小米mysql中间件shaza源码注释\"\ndate: 2020-07-28 10:36:10\ntags: [shazam,gaea]\nshare: true\n---\n\n\n**main.go**\n\n```\n//45 init config of shazam proxy\ncfg, err := models.ParseProxyConfigFromFile(*configFile)\n\n//57 init manager\nmgr, err := server.LoadAndCreateManager(cfg)\n```\n\n```\nmanager.go\n//46\nmgr, err := CreateManager(cfg, namespaceConfigs)\n//154 init namespace\nm.namespaces[current] = CreateNamespaceManager(namespaceConfigs)\n//422\nnamespace, err := NewNamespace(config)\n```\n```\nnamespace.go\n//82 NewNamespace init namespace\nfunc NewNamespace(namespaceConfig *models.Namespace) (*Namespace, error) {\n\t//151 init router\n\tnamespace.router, err = router.NewRouter(namespaceConfig)\n}\n```\n\n```\nrouter.go\n//29\nfunc NewRouter(namespace *models.Namespace) (*Router, error) {\n//63 \nrule, err := parseRule(shard)\n```\n\n```\nrule.go\n//310 生成初始化数据subTableIndexs、tableToSlice等\n// subTableIndexs 所有子表index，走全表查询时候用到; tableToSlice 根据index获取slice ，再根据 index获取database，或者tableindex获取database\nsubTableIndexs, tableToSlice, shard, err := parseRuleSliceInfos(cfg)\n\t//400 判断是mycatmod规则\n\tcase MycatModRuleType:\n\t\tsubTableIndexs, tableToSlice, err := parseMycatHashRuleSliceInfos(cfg.Locations, cfg.Slices, cfg.Databases)\n\t\t//479\n\t\tif len(locations) != len(slices) {\n\t\t\treturn nil, nil, errors.ErrLocationsCount\n\t\t}\t\n```\n<!-- more -->\n**server.go**  \n\n```\nonConnc //106 处理连接\ncc := newSession(s, c) //107 新建一个session,初始化部分字段\nHandshark //121 认证 \n```\n```\nsession.go\n//56\ncc.c = NewClientConn(mysql.NewConn(tcpConn), s.manager) //66 每个客户端连接包装成结构体，包含salt加密字段\ncc.proxy = s\ncc.manager = s.manager\ncc.executor = newSessionExecutor(s.manager)\n\n//148 通过握手确定session db、namespace等信息\nfunc (cc *Session) handleHandshakeResponse(info HandshakeResponseInfo) error {//148 \n\t//设置认证握手时传入的 db 值\n\tcc.executor.SetDatabase(info.Database)\n    //set namespace\n    namespace := cc.manager.GetNamespaceByUser(user, password)\n    cc.namespace = namespace\n    cc.executor.namespace = namespace\n} \n```\n```\ns.tw.Add(s.sessionTimeout, cc, cc.Close) //137 加入时间轮循，超时关闭\ncc.Run() //139 \n```\n\n**session.go**\n\n```\ntype Session struct {\n\tsync.Mutex\n\tc     *ClientConn\n\tproxy *Server\n\tmanager *Manager\n\tnamespace string\n\texecutor *SessionExecutor\n\tclosed atomic.Value\n}\n\ndata, err := cc.c.ReadEphemeralPacket() //226 读客户端发来的文本数据\ncc.proxy.tw.Add(cc.proxy.sessionTimeout, cc, cc.Close)  //232 会话超时关闭\nrs := cc.executor.ExecuteCommand(cmd, data) //237 执行客户发来的数据\n```\n\n**executor.go** (start)\n\n```\n// SessionExecutor is bound to a session, so requests are serializable\ntype SessionExecutor struct {\n\tmanager *Manager\n\n\tnamespace string\n\tuser      string\n\tdb        string\n\n\tstatus       uint16\n\tlastInsertID uint64\n\n\tcollation        mysql.CollationID\n\tcharset          string\n\tsessionVariables *mysql.SessionVariables\n\n\ttxConns map[string]*backend.PooledConnection\n\ttxLock  sync.Mutex\n\n\tstmtID uint32\n\tstmts  map[uint32]*Stmt //prepare相关,client端到proxy的stmt\n\n\tparser *parser.Parser\n}\n\nswitch cmd { //256 判断sql是哪种操作类型（见参考#1）\nse.handleQuery(sql) //266 如果是查询类型，执行 handleQuery\n```\n\n**executor_handle.go** (start)\n\n```\nreqCtx := util.NewRequestContext() //62 创建请求上下文\nif !ns.IsSQLAllowed(reqCtx, sql)  //65 黑名单检查\n```\n\n```\nnamespace.go\n\nfingerprint := mysql.GetFingerprint(sql) //235 格式化sql，去空格，大小写等\nmd5 := mysql.GetMd5(fingerprint) //237 返回格式化后的md5 然后比较，是否在黑名单\n```\n\n```\nstmtType := parser.Preview(sql) //75 预处理 判断 query 是增删改查哪一种 查询返回 StmtSelect（int 0)\nreqCtx.Set(util.StmtType, stmtType) //76 类型写入 reqCtx 上下文\nr, err = se.doQuery(reqCtx, sql) //78 \n\nif isSQLNotAllowedByUser(se, stmtType) //86 如果是只读用户, 且SQL是INSERT, UPDATE, DELETE, 则拒绝执行, 返回true\nif canHandleWithoutPlan(stmtType) //90 判断是否简单sql, 如show,set,begin,use等可以不走执行计划\n\ndb := se.db //94 默认为认证时传入的db值，执行use db后，为选择的db\n\np, err := se.getPlan(se.GetNamespace(), db, sql) //96 获取执行计划\n\nn, err := se.Parse(sql) //155 分析sql返回 ast.StmtNode 重要!\n\np, err := plan.BuildPlan(n, phyDBs, db, sql, rt, seq) //163 根据ast，物理db，当前db,sql，分片路由，seq 构建 plan\n```\n\n**plan.go**\n\n```\n//171 BuildPlan build plan for ast\nfunc BuildPlan(stmt ast.StmtNode, phyDBs map[string]string, db, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) {\n\t//180 NewChecker db为use db中设置的db名. 如果没有执行use db, 则为空字符串\n\tchecker := NewChecker(db, router)\n\tstmt.Accept(checker)\n\tif checker.IsDatabaseInvalid() { //检查db是否可用，比如没有选db执行执行sql\n\t\treturn nil, fmt.Errorf(\"no database selected\") // TODO: return standard MySQL error\n\t}\n\tif checker.IsShard() { //187 检查是否走分片，(根据db和table判断是否需要分表) 构建分片执行计划\n\t\treturn buildShardPlan(stmt, db, sql, router, seq)\n\t}\n\t//190 构建不需要分片的执行计划，不需要分片的走 DefaultSlice Node\n\treturn CreateUnshardPlan(stmt, phyDBs, db, checker.GetUnshardTableNames())\n}\n\n//126\nfunc (s *Checker) hasShardTableInTableName(n *ast.TableName) bool {\n\t_, ok := s.router.GetShardRule(db, table)//132 router 根据db和table判断是否需要分表\n}\n```\n\n```\nrouter.go\nrule, ok := r.rules[db][table] //109 返回分片规则\n```\n\n```\n//193 返回查询类型的 查询计划\nfunc buildShardPlan(stmt ast.StmtNode, db string, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) {\n\tswitch s := stmt.(type) {\n\tcase *ast.SelectStmt:\n\t\tplan := NewSelectPlan(db, sql, router) //196 新建查询计划\n\t\tif err := HandleSelectStmt(plan, s); err != nil { //197 处理查询计划\n\t\t\treturn nil, err\n\t\t}\n\t\treturn plan, nil\n}\n```\n\n**plan_select.go**\n\n```\n//155 处理SelectStmt语法树, 改写其中一些节点, 并获取路由信息和结果聚合函数\nfunc HandleSelectStmt(p *SelectPlan, stmt *ast.SelectStmt) error  \n\n//160 如果这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点,在此步骤返回所有subTableIndex\nhandleTableRefs\n\t//322\n\tfunc handleJoin(p *TableAliasStmtInfo, join *ast.Join) error {\n\t//332\n\tif err := rewriteTableSource(p, left); err != nil {\n\t//400\n\treturn rewriteTableNameInTableSource(p, tableSource)\n\t//433 这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点\n\td, err := CreateTableNameDecorator(tableName, rule, p.GetRouteResult())\n//190 \nhandleWhere\n\t//370\n\thas, result, decorator, err := handleComparisonExpr(p.TableAliasStmtInfo, stmt.Where)\n\t// 576 BinaryOperationExpr结构和json输出的一样\n\tcase *ast.BinaryOperationExpr \n\t//637 判断操作符号\n\tcase opcode.EQ, opcode.NE, opcode.GT, opcode.GE, opcode.LT, opcode.LE:\n\t//700\n\tif lType == ColumnNameExpr  {\n\t//873\n\tfunc handleBinaryOperationExprCompareLeftColumnRightValue\n\t//875 根据列判断是否需要装饰ColumnName, 获取对应的rule规则 where payorder.id=refund.pid\n\trule, need, isAlias, err := NeedCreateColumnNameExprDecoratorInCondition(p, column)\n\t//883 创建列装饰器\n\tdecorator := CreateColumnNameExprDecorator(column, rule, isAlias, p.GetRouteResult())\n\t//896\n\ttableIndexes, err := findTableIndexes(rule, column.Name.Name.L, v)\n\t//793 根据规则计算出表index\n\tindex, err := rule.FindTableIndex(v)\n\t\n\t//374 把result写入routerResult，覆盖 handleTableRefs 阶段的 subTableIndex\n\tif has {\n\t\t//设置 index 到 RouteResult 也可以在此存入其他值\n\t\tp.GetRouteResult().Inter(result)\n\t\t\n\t\tutil.go\n\t\t//116 行判断index是否合法\n\t\tfunc interList(l1 []int, l2 []int) []int {\n\t}\n\n//210 生成sql 返回\nsqls, err := generateShardingSQLs(p.stmt, p.result, p.router)\n\t//504 \n    if err := stmt.Restore(ctx); err != nil {\n  \n```\n\n```\ndecorator_table_name.go\n\n//78\nfunc (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error {\n\n//88 如果原sql里带了dbName，mycat需要改写\nif t.origin.Schema.String() != \"\" {\n\t\n//115 如果是 kingshard 类型，重写表名\nctx.WriteName(fmt.Sprintf(\"%s_%04d\", t.origin.Name.String(), tableIndex))\n```\n\n```\n\t//513 根据 index 获取slice dbName\n    sliceIndex := rule.GetSliceIndexFromTableIndex(index)\n\tsliceName := rule.GetSlice(sliceIndex)\n\tdbName, _ := rule.GetDatabaseNameByTableIndex(index)\t\n```\n\n**executor_handler.go** (end)\n\n```\n//101 判断是否能在从库上执行\nif canExecuteFromSlave(se, sql) {\n\treqCtx.Set(util.FromSlave, 1)\n}\n//105 执行执行计划\nr, err := p.ExecuteIn(reqCtx, se)\n```\n\n\n```\nplan_select.go\n\n//65 ExecuteIn implement Plan\nfunc (s *SelectPlan) ExecuteIn(reqCtx *util.RequestContext, sess Executor) (*mysql.Result, error) {\n\tsqls := s.GetSQLs()\n\trs, err := sess.ExecuteSQLs(reqCtx, sqls) //80 执行sql \n\tr, err := MergeSelectResult(s, s.stmt, rs) //85 merge查询结果\n}\n\nexector.go\n\n//695\nfunc (se *SessionExecutor) ExecuteSQLs\n//707\nrs, err := se.executeInMultiSlices(reqCtx, pcs, sqls)\n```\n\n```\nmodifyResultStatus(r, se)\n```\n\n**executor.go** (end)\n\n```\nreturn CreateResultResponse(se.status, r) //270\n```\n\n**session.go** (end)\n\n```\nif err = cc.writeResponse(rs); err != nil  //240\n```\n\n\n\n**调试技巧**\n\n```\ngolang解决cannot convert a (type interface {}) to type *: need type assertion\n\nvar a interface{} = int(10)\nvar b MyInt = a.(MyInt)\n\n可以对对象分别使用 Printf(\"%#v\") 和  json.Marshal 输出观察\n```\n\n\n\n使用tidb生成ast树，改写sql例子\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/pingcap/parser\"\n\t\"github.com/pingcap/parser/ast\"\n\t\"github.com/pingcap/parser/format\"\n\t_ \"github.com/pingcap/parser/test_driver\"\n)\n\n//TableNameDecorator test\ntype TableNameDecorator struct {\n\torigin *ast.TableName\n}\n\n// Restore implement ast.Node\nfunc (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error {\n\tctx.WriteName(t.origin.Name.String() + \"_202006\")\n\treturn nil\n}\n\n// Accept implement ast.Node\n// do nothing and return current decorator\nfunc (t *TableNameDecorator) Accept(v ast.Visitor) (ast.Node, bool) {\n\treturn t, true\n}\n\n// Text implement ast.Node\nfunc (t *TableNameDecorator) Text() string {\n\treturn t.origin.Text()\n}\n\n// SetText implement ast.Node\nfunc (t *TableNameDecorator) SetText(text string) {\n\tt.origin.SetText(text)\n}\n\nfunc main() {\n\t//原始sql\n\tsql := \"SELECT /*+ TIDB_SMJ(employees) */ emp_no, first_name, last_name \" +\n\t\t\"FROM employees USE INDEX (last_name) \" +\n\t\t\"where last_name='Aamodt' and gender='F' and birth_date > '1960-01-01'\"\n\n\tp := parser.New()\n\n\t//解析sql成一颗ast树\n\toneStmt, err := p.ParseOneStmt(sql, \"\", \"\")\n\tif err != nil {\n\t\tfmt.Printf(\"parse error:\\n%v\\n%s\", err, sql)\n\t\treturn\n\t}\n\n\t//如果是select查询转换成ast.SelectStmt类型\n\tvar tmp interface{}\n\ttmp = oneStmt\n\tvar stmt *ast.SelectStmt = tmp.(*ast.SelectStmt)\n\n\ttableRefs := stmt.From\n\tjoin := tableRefs.TableRefs\n\n\t//判断jon.Left节点是否ast.TableSource类型，如果是新建tableName装饰器，替换left.Source节点\n\tswitch left := join.Left.(type) {\n\tcase *ast.TableSource:\n\t\ttableName, _ := left.Source.(*ast.TableName)\n\t\td := &TableNameDecorator{tableName}\n\t\tleft.Source = d\n\t}\n\n\t//创建builder\n\tsb := &strings.Builder{}\n\tctx := format.NewRestoreCtx(269, sb)\n\n\t//遍历 ast 树各节点的 Restore 方法组装成sql\n\tif err := stmt.Restore(ctx); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t//原始sql\n\tfmt.Println(sql)\n\t//输出最后组装的sql\n\tfmt.Println(sb)\n\n}\n```\n\n```\n$ cat go.mod \nmodule tidb\n\ngo 1.13\n\nrequire github.com/pingcap/parser v0.0.0-20200424075042-8222d8b724a4\n```\n\n\n\n\n\n参考：\n\n1. https://dev.mysql.com/doc/internals/en/text-protocol.html\n2. https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/ \n\n","slug":"shazam_source_code","published":1,"updated":"2020-08-21T08:40:41.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenm6001h0wpbopxouo4b","content":"<p><strong>main.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//45 init config of shazam proxy</span><br><span class=\"line\">cfg, err := models.ParseProxyConfigFromFile(*configFile)</span><br><span class=\"line\"></span><br><span class=\"line\">//57 init manager</span><br><span class=\"line\">mgr, err := server.LoadAndCreateManager(cfg)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.go</span><br><span class=\"line\">//46</span><br><span class=\"line\">mgr, err := CreateManager(cfg, namespaceConfigs)</span><br><span class=\"line\">//154 init namespace</span><br><span class=\"line\">m.namespaces[current] = CreateNamespaceManager(namespaceConfigs)</span><br><span class=\"line\">//422</span><br><span class=\"line\">namespace, err := NewNamespace(config)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace.go</span><br><span class=\"line\">//82 NewNamespace init namespace</span><br><span class=\"line\">func NewNamespace(namespaceConfig *models.Namespace) (*Namespace, error) &#123;</span><br><span class=\"line\">\t//151 init router</span><br><span class=\"line\">\tnamespace.router, err = router.NewRouter(namespaceConfig)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go</span><br><span class=\"line\">//29</span><br><span class=\"line\">func NewRouter(namespace *models.Namespace) (*Router, error) &#123;</span><br><span class=\"line\">//63 </span><br><span class=\"line\">rule, err := parseRule(shard)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule.go</span><br><span class=\"line\">//310 生成初始化数据subTableIndexs、tableToSlice等</span><br><span class=\"line\">// subTableIndexs 所有子表index，走全表查询时候用到; tableToSlice 根据index获取slice ，再根据 index获取database，或者tableindex获取database</span><br><span class=\"line\">subTableIndexs, tableToSlice, shard, err := parseRuleSliceInfos(cfg)</span><br><span class=\"line\">\t//400 判断是mycatmod规则</span><br><span class=\"line\">\tcase MycatModRuleType:</span><br><span class=\"line\">\t\tsubTableIndexs, tableToSlice, err := parseMycatHashRuleSliceInfos(cfg.Locations, cfg.Slices, cfg.Databases)</span><br><span class=\"line\">\t\t//479</span><br><span class=\"line\">\t\tif len(locations) != len(slices) &#123;</span><br><span class=\"line\">\t\t\treturn nil, nil, errors.ErrLocationsCount</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>server.go</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onConnc //106 处理连接</span><br><span class=\"line\">cc := newSession(s, c) //107 新建一个session,初始化部分字段</span><br><span class=\"line\">Handshark //121 认证</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.go</span><br><span class=\"line\">//56</span><br><span class=\"line\">cc.c = NewClientConn(mysql.NewConn(tcpConn), s.manager) //66 每个客户端连接包装成结构体，包含salt加密字段</span><br><span class=\"line\">cc.proxy = s</span><br><span class=\"line\">cc.manager = s.manager</span><br><span class=\"line\">cc.executor = newSessionExecutor(s.manager)</span><br><span class=\"line\"></span><br><span class=\"line\">//148 通过握手确定session db、namespace等信息</span><br><span class=\"line\">func (cc *Session) handleHandshakeResponse(info HandshakeResponseInfo) error &#123;//148 </span><br><span class=\"line\">\t//设置认证握手时传入的 db 值</span><br><span class=\"line\">\tcc.executor.SetDatabase(info.Database)</span><br><span class=\"line\">    //set namespace</span><br><span class=\"line\">    namespace := cc.manager.GetNamespaceByUser(user, password)</span><br><span class=\"line\">    cc.namespace = namespace</span><br><span class=\"line\">    cc.executor.namespace = namespace</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.tw.Add(s.sessionTimeout, cc, cc.Close) //137 加入时间轮循，超时关闭</span><br><span class=\"line\">cc.Run() //139</span><br></pre></td></tr></table></figure>\n<p><strong>session.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Session struct &#123;</span><br><span class=\"line\">\tsync.Mutex</span><br><span class=\"line\">\tc     *ClientConn</span><br><span class=\"line\">\tproxy *Server</span><br><span class=\"line\">\tmanager *Manager</span><br><span class=\"line\">\tnamespace string</span><br><span class=\"line\">\texecutor *SessionExecutor</span><br><span class=\"line\">\tclosed atomic.Value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data, err := cc.c.ReadEphemeralPacket() //226 读客户端发来的文本数据</span><br><span class=\"line\">cc.proxy.tw.Add(cc.proxy.sessionTimeout, cc, cc.Close)  //232 会话超时关闭</span><br><span class=\"line\">rs := cc.executor.ExecuteCommand(cmd, data) //237 执行客户发来的数据</span><br></pre></td></tr></table></figure>\n<p><strong>executor.go</strong> (start)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SessionExecutor is bound to a session, so requests are serializable</span><br><span class=\"line\">type SessionExecutor struct &#123;</span><br><span class=\"line\">\tmanager *Manager</span><br><span class=\"line\"></span><br><span class=\"line\">\tnamespace string</span><br><span class=\"line\">\tuser      string</span><br><span class=\"line\">\tdb        string</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatus       uint16</span><br><span class=\"line\">\tlastInsertID uint64</span><br><span class=\"line\"></span><br><span class=\"line\">\tcollation        mysql.CollationID</span><br><span class=\"line\">\tcharset          string</span><br><span class=\"line\">\tsessionVariables *mysql.SessionVariables</span><br><span class=\"line\"></span><br><span class=\"line\">\ttxConns map[string]*backend.PooledConnection</span><br><span class=\"line\">\ttxLock  sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">\tstmtID uint32</span><br><span class=\"line\">\tstmts  map[uint32]*Stmt //prepare相关,client端到proxy的stmt</span><br><span class=\"line\"></span><br><span class=\"line\">\tparser *parser.Parser</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">switch cmd &#123; //256 判断sql是哪种操作类型（见参考#1）</span><br><span class=\"line\">se.handleQuery(sql) //266 如果是查询类型，执行 handleQuery</span><br></pre></td></tr></table></figure>\n<p><strong>executor_handle.go</strong> (start)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reqCtx := util.NewRequestContext() //62 创建请求上下文</span><br><span class=\"line\">if !ns.IsSQLAllowed(reqCtx, sql)  //65 黑名单检查</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace.go</span><br><span class=\"line\"></span><br><span class=\"line\">fingerprint := mysql.GetFingerprint(sql) //235 格式化sql，去空格，大小写等</span><br><span class=\"line\">md5 := mysql.GetMd5(fingerprint) //237 返回格式化后的md5 然后比较，是否在黑名单</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmtType := parser.Preview(sql) //75 预处理 判断 query 是增删改查哪一种 查询返回 StmtSelect（int 0)</span><br><span class=\"line\">reqCtx.Set(util.StmtType, stmtType) //76 类型写入 reqCtx 上下文</span><br><span class=\"line\">r, err = se.doQuery(reqCtx, sql) //78 </span><br><span class=\"line\"></span><br><span class=\"line\">if isSQLNotAllowedByUser(se, stmtType) //86 如果是只读用户, 且SQL是INSERT, UPDATE, DELETE, 则拒绝执行, 返回true</span><br><span class=\"line\">if canHandleWithoutPlan(stmtType) //90 判断是否简单sql, 如show,set,begin,use等可以不走执行计划</span><br><span class=\"line\"></span><br><span class=\"line\">db := se.db //94 默认为认证时传入的db值，执行use db后，为选择的db</span><br><span class=\"line\"></span><br><span class=\"line\">p, err := se.getPlan(se.GetNamespace(), db, sql) //96 获取执行计划</span><br><span class=\"line\"></span><br><span class=\"line\">n, err := se.Parse(sql) //155 分析sql返回 ast.StmtNode 重要!</span><br><span class=\"line\"></span><br><span class=\"line\">p, err := plan.BuildPlan(n, phyDBs, db, sql, rt, seq) //163 根据ast，物理db，当前db,sql，分片路由，seq 构建 plan</span><br></pre></td></tr></table></figure>\n<p><strong>plan.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//171 BuildPlan build plan for ast</span><br><span class=\"line\">func BuildPlan(stmt ast.StmtNode, phyDBs map[string]string, db, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) &#123;</span><br><span class=\"line\">\t//180 NewChecker db为use db中设置的db名. 如果没有执行use db, 则为空字符串</span><br><span class=\"line\">\tchecker := NewChecker(db, router)</span><br><span class=\"line\">\tstmt.Accept(checker)</span><br><span class=\"line\">\tif checker.IsDatabaseInvalid() &#123; //检查db是否可用，比如没有选db执行执行sql</span><br><span class=\"line\">\t\treturn nil, fmt.Errorf(&quot;no database selected&quot;) // TODO: return standard MySQL error</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif checker.IsShard() &#123; //187 检查是否走分片，(根据db和table判断是否需要分表) 构建分片执行计划</span><br><span class=\"line\">\t\treturn buildShardPlan(stmt, db, sql, router, seq)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//190 构建不需要分片的执行计划，不需要分片的走 DefaultSlice Node</span><br><span class=\"line\">\treturn CreateUnshardPlan(stmt, phyDBs, db, checker.GetUnshardTableNames())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//126</span><br><span class=\"line\">func (s *Checker) hasShardTableInTableName(n *ast.TableName) bool &#123;</span><br><span class=\"line\">\t_, ok := s.router.GetShardRule(db, table)//132 router 根据db和table判断是否需要分表</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go</span><br><span class=\"line\">rule, ok := r.rules[db][table] //109 返回分片规则</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//193 返回查询类型的 查询计划</span><br><span class=\"line\">func buildShardPlan(stmt ast.StmtNode, db string, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) &#123;</span><br><span class=\"line\">\tswitch s := stmt.(type) &#123;</span><br><span class=\"line\">\tcase *ast.SelectStmt:</span><br><span class=\"line\">\t\tplan := NewSelectPlan(db, sql, router) //196 新建查询计划</span><br><span class=\"line\">\t\tif err := HandleSelectStmt(plan, s); err != nil &#123; //197 处理查询计划</span><br><span class=\"line\">\t\t\treturn nil, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn plan, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>plan_select.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//155 处理SelectStmt语法树, 改写其中一些节点, 并获取路由信息和结果聚合函数</span><br><span class=\"line\">func HandleSelectStmt(p *SelectPlan, stmt *ast.SelectStmt) error  </span><br><span class=\"line\"></span><br><span class=\"line\">//160 如果这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点,在此步骤返回所有subTableIndex</span><br><span class=\"line\">handleTableRefs</span><br><span class=\"line\">\t//322</span><br><span class=\"line\">\tfunc handleJoin(p *TableAliasStmtInfo, join *ast.Join) error &#123;</span><br><span class=\"line\">\t//332</span><br><span class=\"line\">\tif err := rewriteTableSource(p, left); err != nil &#123;</span><br><span class=\"line\">\t//400</span><br><span class=\"line\">\treturn rewriteTableNameInTableSource(p, tableSource)</span><br><span class=\"line\">\t//433 这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点</span><br><span class=\"line\">\td, err := CreateTableNameDecorator(tableName, rule, p.GetRouteResult())</span><br><span class=\"line\">//190 </span><br><span class=\"line\">handleWhere</span><br><span class=\"line\">\t//370</span><br><span class=\"line\">\thas, result, decorator, err := handleComparisonExpr(p.TableAliasStmtInfo, stmt.Where)</span><br><span class=\"line\">\t// 576 BinaryOperationExpr结构和json输出的一样</span><br><span class=\"line\">\tcase *ast.BinaryOperationExpr </span><br><span class=\"line\">\t//637 判断操作符号</span><br><span class=\"line\">\tcase opcode.EQ, opcode.NE, opcode.GT, opcode.GE, opcode.LT, opcode.LE:</span><br><span class=\"line\">\t//700</span><br><span class=\"line\">\tif lType == ColumnNameExpr  &#123;</span><br><span class=\"line\">\t//873</span><br><span class=\"line\">\tfunc handleBinaryOperationExprCompareLeftColumnRightValue</span><br><span class=\"line\">\t//875 根据列判断是否需要装饰ColumnName, 获取对应的rule规则 where payorder.id=refund.pid</span><br><span class=\"line\">\trule, need, isAlias, err := NeedCreateColumnNameExprDecoratorInCondition(p, column)</span><br><span class=\"line\">\t//883 创建列装饰器</span><br><span class=\"line\">\tdecorator := CreateColumnNameExprDecorator(column, rule, isAlias, p.GetRouteResult())</span><br><span class=\"line\">\t//896</span><br><span class=\"line\">\ttableIndexes, err := findTableIndexes(rule, column.Name.Name.L, v)</span><br><span class=\"line\">\t//793 根据规则计算出表index</span><br><span class=\"line\">\tindex, err := rule.FindTableIndex(v)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//374 把result写入routerResult，覆盖 handleTableRefs 阶段的 subTableIndex</span><br><span class=\"line\">\tif has &#123;</span><br><span class=\"line\">\t\t//设置 index 到 RouteResult 也可以在此存入其他值</span><br><span class=\"line\">\t\tp.GetRouteResult().Inter(result)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tutil.go</span><br><span class=\"line\">\t\t//116 行判断index是否合法</span><br><span class=\"line\">\t\tfunc interList(l1 []int, l2 []int) []int &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//210 生成sql 返回</span><br><span class=\"line\">sqls, err := generateShardingSQLs(p.stmt, p.result, p.router)</span><br><span class=\"line\">\t//504 </span><br><span class=\"line\">    if err := stmt.Restore(ctx); err != nil &#123;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decorator_table_name.go</span><br><span class=\"line\"></span><br><span class=\"line\">//78</span><br><span class=\"line\">func (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">//88 如果原sql里带了dbName，mycat需要改写</span><br><span class=\"line\">if t.origin.Schema.String() != &quot;&quot; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">//115 如果是 kingshard 类型，重写表名</span><br><span class=\"line\">ctx.WriteName(fmt.Sprintf(&quot;%s_%04d&quot;, t.origin.Name.String(), tableIndex))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//513 根据 index 获取slice dbName</span><br><span class=\"line\">   sliceIndex := rule.GetSliceIndexFromTableIndex(index)</span><br><span class=\"line\">sliceName := rule.GetSlice(sliceIndex)</span><br><span class=\"line\">dbName, _ := rule.GetDatabaseNameByTableIndex(index)</span><br></pre></td></tr></table></figure>\n<p><strong>executor_handler.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//101 判断是否能在从库上执行</span><br><span class=\"line\">if canExecuteFromSlave(se, sql) &#123;</span><br><span class=\"line\">\treqCtx.Set(util.FromSlave, 1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//105 执行执行计划</span><br><span class=\"line\">r, err := p.ExecuteIn(reqCtx, se)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plan_select.go</span><br><span class=\"line\"></span><br><span class=\"line\">//65 ExecuteIn implement Plan</span><br><span class=\"line\">func (s *SelectPlan) ExecuteIn(reqCtx *util.RequestContext, sess Executor) (*mysql.Result, error) &#123;</span><br><span class=\"line\">\tsqls := s.GetSQLs()</span><br><span class=\"line\">\trs, err := sess.ExecuteSQLs(reqCtx, sqls) //80 执行sql </span><br><span class=\"line\">\tr, err := MergeSelectResult(s, s.stmt, rs) //85 merge查询结果</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exector.go</span><br><span class=\"line\"></span><br><span class=\"line\">//695</span><br><span class=\"line\">func (se *SessionExecutor) ExecuteSQLs</span><br><span class=\"line\">//707</span><br><span class=\"line\">rs, err := se.executeInMultiSlices(reqCtx, pcs, sqls)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifyResultStatus(r, se)</span><br></pre></td></tr></table></figure>\n<p><strong>executor.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return CreateResultResponse(se.status, r) //270</span><br></pre></td></tr></table></figure>\n<p><strong>session.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if err = cc.writeResponse(rs); err != nil  //240</span><br></pre></td></tr></table></figure>\n<p><strong>调试技巧</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang解决cannot convert a (type interface &#123;&#125;) to type *: need type assertion</span><br><span class=\"line\"></span><br><span class=\"line\">var a interface&#123;&#125; = int(10)</span><br><span class=\"line\">var b MyInt = a.(MyInt)</span><br><span class=\"line\"></span><br><span class=\"line\">可以对对象分别使用 Printf(&quot;%#v&quot;) 和  json.Marshal 输出观察</span><br></pre></td></tr></table></figure>\n<p>使用tidb生成ast树，改写sql例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/pingcap/parser&quot;</span><br><span class=\"line\">\t&quot;github.com/pingcap/parser/ast&quot;</span><br><span class=\"line\">\t&quot;github.com/pingcap/parser/format&quot;</span><br><span class=\"line\">\t_ &quot;github.com/pingcap/parser/test_driver&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//TableNameDecorator test</span><br><span class=\"line\">type TableNameDecorator struct &#123;</span><br><span class=\"line\">\torigin *ast.TableName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Restore implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error &#123;</span><br><span class=\"line\">\tctx.WriteName(t.origin.Name.String() + &quot;_202006&quot;)</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Accept implement ast.Node</span><br><span class=\"line\">// do nothing and return current decorator</span><br><span class=\"line\">func (t *TableNameDecorator) Accept(v ast.Visitor) (ast.Node, bool) &#123;</span><br><span class=\"line\">\treturn t, true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Text implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) Text() string &#123;</span><br><span class=\"line\">\treturn t.origin.Text()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// SetText implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) SetText(text string) &#123;</span><br><span class=\"line\">\tt.origin.SetText(text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t//原始sql</span><br><span class=\"line\">\tsql := &quot;SELECT /*+ TIDB_SMJ(employees) */ emp_no, first_name, last_name &quot; +</span><br><span class=\"line\">\t\t&quot;FROM employees USE INDEX (last_name) &quot; +</span><br><span class=\"line\">\t\t&quot;where last_name=&apos;Aamodt&apos; and gender=&apos;F&apos; and birth_date &gt; &apos;1960-01-01&apos;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := parser.New()</span><br><span class=\"line\"></span><br><span class=\"line\">\t//解析sql成一颗ast树</span><br><span class=\"line\">\toneStmt, err := p.ParseOneStmt(sql, &quot;&quot;, &quot;&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;parse error:\\n%v\\n%s&quot;, err, sql)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//如果是select查询转换成ast.SelectStmt类型</span><br><span class=\"line\">\tvar tmp interface&#123;&#125;</span><br><span class=\"line\">\ttmp = oneStmt</span><br><span class=\"line\">\tvar stmt *ast.SelectStmt = tmp.(*ast.SelectStmt)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttableRefs := stmt.From</span><br><span class=\"line\">\tjoin := tableRefs.TableRefs</span><br><span class=\"line\"></span><br><span class=\"line\">\t//判断jon.Left节点是否ast.TableSource类型，如果是新建tableName装饰器，替换left.Source节点</span><br><span class=\"line\">\tswitch left := join.Left.(type) &#123;</span><br><span class=\"line\">\tcase *ast.TableSource:</span><br><span class=\"line\">\t\ttableName, _ := left.Source.(*ast.TableName)</span><br><span class=\"line\">\t\td := &amp;TableNameDecorator&#123;tableName&#125;</span><br><span class=\"line\">\t\tleft.Source = d</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//创建builder</span><br><span class=\"line\">\tsb := &amp;strings.Builder&#123;&#125;</span><br><span class=\"line\">\tctx := format.NewRestoreCtx(269, sb)</span><br><span class=\"line\"></span><br><span class=\"line\">\t//遍历 ast 树各节点的 Restore 方法组装成sql</span><br><span class=\"line\">\tif err := stmt.Restore(ctx); err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//原始sql</span><br><span class=\"line\">\tfmt.Println(sql)</span><br><span class=\"line\">\t//输出最后组装的sql</span><br><span class=\"line\">\tfmt.Println(sb)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat go.mod </span><br><span class=\"line\">module tidb</span><br><span class=\"line\"></span><br><span class=\"line\">go 1.13</span><br><span class=\"line\"></span><br><span class=\"line\">require github.com/pingcap/parser v0.0.0-20200424075042-8222d8b724a4</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://dev.mysql.com/doc/internals/en/text-protocol.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/internals/en/text-protocol.html</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/\" target=\"_blank\" rel=\"noopener\">https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/</a> </li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>main.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//45 init config of shazam proxy</span><br><span class=\"line\">cfg, err := models.ParseProxyConfigFromFile(*configFile)</span><br><span class=\"line\"></span><br><span class=\"line\">//57 init manager</span><br><span class=\"line\">mgr, err := server.LoadAndCreateManager(cfg)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.go</span><br><span class=\"line\">//46</span><br><span class=\"line\">mgr, err := CreateManager(cfg, namespaceConfigs)</span><br><span class=\"line\">//154 init namespace</span><br><span class=\"line\">m.namespaces[current] = CreateNamespaceManager(namespaceConfigs)</span><br><span class=\"line\">//422</span><br><span class=\"line\">namespace, err := NewNamespace(config)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace.go</span><br><span class=\"line\">//82 NewNamespace init namespace</span><br><span class=\"line\">func NewNamespace(namespaceConfig *models.Namespace) (*Namespace, error) &#123;</span><br><span class=\"line\">\t//151 init router</span><br><span class=\"line\">\tnamespace.router, err = router.NewRouter(namespaceConfig)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go</span><br><span class=\"line\">//29</span><br><span class=\"line\">func NewRouter(namespace *models.Namespace) (*Router, error) &#123;</span><br><span class=\"line\">//63 </span><br><span class=\"line\">rule, err := parseRule(shard)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule.go</span><br><span class=\"line\">//310 生成初始化数据subTableIndexs、tableToSlice等</span><br><span class=\"line\">// subTableIndexs 所有子表index，走全表查询时候用到; tableToSlice 根据index获取slice ，再根据 index获取database，或者tableindex获取database</span><br><span class=\"line\">subTableIndexs, tableToSlice, shard, err := parseRuleSliceInfos(cfg)</span><br><span class=\"line\">\t//400 判断是mycatmod规则</span><br><span class=\"line\">\tcase MycatModRuleType:</span><br><span class=\"line\">\t\tsubTableIndexs, tableToSlice, err := parseMycatHashRuleSliceInfos(cfg.Locations, cfg.Slices, cfg.Databases)</span><br><span class=\"line\">\t\t//479</span><br><span class=\"line\">\t\tif len(locations) != len(slices) &#123;</span><br><span class=\"line\">\t\t\treturn nil, nil, errors.ErrLocationsCount</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>","more":"<p><strong>server.go</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onConnc //106 处理连接</span><br><span class=\"line\">cc := newSession(s, c) //107 新建一个session,初始化部分字段</span><br><span class=\"line\">Handshark //121 认证</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.go</span><br><span class=\"line\">//56</span><br><span class=\"line\">cc.c = NewClientConn(mysql.NewConn(tcpConn), s.manager) //66 每个客户端连接包装成结构体，包含salt加密字段</span><br><span class=\"line\">cc.proxy = s</span><br><span class=\"line\">cc.manager = s.manager</span><br><span class=\"line\">cc.executor = newSessionExecutor(s.manager)</span><br><span class=\"line\"></span><br><span class=\"line\">//148 通过握手确定session db、namespace等信息</span><br><span class=\"line\">func (cc *Session) handleHandshakeResponse(info HandshakeResponseInfo) error &#123;//148 </span><br><span class=\"line\">\t//设置认证握手时传入的 db 值</span><br><span class=\"line\">\tcc.executor.SetDatabase(info.Database)</span><br><span class=\"line\">    //set namespace</span><br><span class=\"line\">    namespace := cc.manager.GetNamespaceByUser(user, password)</span><br><span class=\"line\">    cc.namespace = namespace</span><br><span class=\"line\">    cc.executor.namespace = namespace</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.tw.Add(s.sessionTimeout, cc, cc.Close) //137 加入时间轮循，超时关闭</span><br><span class=\"line\">cc.Run() //139</span><br></pre></td></tr></table></figure>\n<p><strong>session.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Session struct &#123;</span><br><span class=\"line\">\tsync.Mutex</span><br><span class=\"line\">\tc     *ClientConn</span><br><span class=\"line\">\tproxy *Server</span><br><span class=\"line\">\tmanager *Manager</span><br><span class=\"line\">\tnamespace string</span><br><span class=\"line\">\texecutor *SessionExecutor</span><br><span class=\"line\">\tclosed atomic.Value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data, err := cc.c.ReadEphemeralPacket() //226 读客户端发来的文本数据</span><br><span class=\"line\">cc.proxy.tw.Add(cc.proxy.sessionTimeout, cc, cc.Close)  //232 会话超时关闭</span><br><span class=\"line\">rs := cc.executor.ExecuteCommand(cmd, data) //237 执行客户发来的数据</span><br></pre></td></tr></table></figure>\n<p><strong>executor.go</strong> (start)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SessionExecutor is bound to a session, so requests are serializable</span><br><span class=\"line\">type SessionExecutor struct &#123;</span><br><span class=\"line\">\tmanager *Manager</span><br><span class=\"line\"></span><br><span class=\"line\">\tnamespace string</span><br><span class=\"line\">\tuser      string</span><br><span class=\"line\">\tdb        string</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatus       uint16</span><br><span class=\"line\">\tlastInsertID uint64</span><br><span class=\"line\"></span><br><span class=\"line\">\tcollation        mysql.CollationID</span><br><span class=\"line\">\tcharset          string</span><br><span class=\"line\">\tsessionVariables *mysql.SessionVariables</span><br><span class=\"line\"></span><br><span class=\"line\">\ttxConns map[string]*backend.PooledConnection</span><br><span class=\"line\">\ttxLock  sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">\tstmtID uint32</span><br><span class=\"line\">\tstmts  map[uint32]*Stmt //prepare相关,client端到proxy的stmt</span><br><span class=\"line\"></span><br><span class=\"line\">\tparser *parser.Parser</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">switch cmd &#123; //256 判断sql是哪种操作类型（见参考#1）</span><br><span class=\"line\">se.handleQuery(sql) //266 如果是查询类型，执行 handleQuery</span><br></pre></td></tr></table></figure>\n<p><strong>executor_handle.go</strong> (start)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reqCtx := util.NewRequestContext() //62 创建请求上下文</span><br><span class=\"line\">if !ns.IsSQLAllowed(reqCtx, sql)  //65 黑名单检查</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace.go</span><br><span class=\"line\"></span><br><span class=\"line\">fingerprint := mysql.GetFingerprint(sql) //235 格式化sql，去空格，大小写等</span><br><span class=\"line\">md5 := mysql.GetMd5(fingerprint) //237 返回格式化后的md5 然后比较，是否在黑名单</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmtType := parser.Preview(sql) //75 预处理 判断 query 是增删改查哪一种 查询返回 StmtSelect（int 0)</span><br><span class=\"line\">reqCtx.Set(util.StmtType, stmtType) //76 类型写入 reqCtx 上下文</span><br><span class=\"line\">r, err = se.doQuery(reqCtx, sql) //78 </span><br><span class=\"line\"></span><br><span class=\"line\">if isSQLNotAllowedByUser(se, stmtType) //86 如果是只读用户, 且SQL是INSERT, UPDATE, DELETE, 则拒绝执行, 返回true</span><br><span class=\"line\">if canHandleWithoutPlan(stmtType) //90 判断是否简单sql, 如show,set,begin,use等可以不走执行计划</span><br><span class=\"line\"></span><br><span class=\"line\">db := se.db //94 默认为认证时传入的db值，执行use db后，为选择的db</span><br><span class=\"line\"></span><br><span class=\"line\">p, err := se.getPlan(se.GetNamespace(), db, sql) //96 获取执行计划</span><br><span class=\"line\"></span><br><span class=\"line\">n, err := se.Parse(sql) //155 分析sql返回 ast.StmtNode 重要!</span><br><span class=\"line\"></span><br><span class=\"line\">p, err := plan.BuildPlan(n, phyDBs, db, sql, rt, seq) //163 根据ast，物理db，当前db,sql，分片路由，seq 构建 plan</span><br></pre></td></tr></table></figure>\n<p><strong>plan.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//171 BuildPlan build plan for ast</span><br><span class=\"line\">func BuildPlan(stmt ast.StmtNode, phyDBs map[string]string, db, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) &#123;</span><br><span class=\"line\">\t//180 NewChecker db为use db中设置的db名. 如果没有执行use db, 则为空字符串</span><br><span class=\"line\">\tchecker := NewChecker(db, router)</span><br><span class=\"line\">\tstmt.Accept(checker)</span><br><span class=\"line\">\tif checker.IsDatabaseInvalid() &#123; //检查db是否可用，比如没有选db执行执行sql</span><br><span class=\"line\">\t\treturn nil, fmt.Errorf(&quot;no database selected&quot;) // TODO: return standard MySQL error</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif checker.IsShard() &#123; //187 检查是否走分片，(根据db和table判断是否需要分表) 构建分片执行计划</span><br><span class=\"line\">\t\treturn buildShardPlan(stmt, db, sql, router, seq)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//190 构建不需要分片的执行计划，不需要分片的走 DefaultSlice Node</span><br><span class=\"line\">\treturn CreateUnshardPlan(stmt, phyDBs, db, checker.GetUnshardTableNames())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//126</span><br><span class=\"line\">func (s *Checker) hasShardTableInTableName(n *ast.TableName) bool &#123;</span><br><span class=\"line\">\t_, ok := s.router.GetShardRule(db, table)//132 router 根据db和table判断是否需要分表</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.go</span><br><span class=\"line\">rule, ok := r.rules[db][table] //109 返回分片规则</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//193 返回查询类型的 查询计划</span><br><span class=\"line\">func buildShardPlan(stmt ast.StmtNode, db string, sql string, router *router.Router, seq *sequence.SequenceManager) (Plan, error) &#123;</span><br><span class=\"line\">\tswitch s := stmt.(type) &#123;</span><br><span class=\"line\">\tcase *ast.SelectStmt:</span><br><span class=\"line\">\t\tplan := NewSelectPlan(db, sql, router) //196 新建查询计划</span><br><span class=\"line\">\t\tif err := HandleSelectStmt(plan, s); err != nil &#123; //197 处理查询计划</span><br><span class=\"line\">\t\t\treturn nil, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn plan, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>plan_select.go</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//155 处理SelectStmt语法树, 改写其中一些节点, 并获取路由信息和结果聚合函数</span><br><span class=\"line\">func HandleSelectStmt(p *SelectPlan, stmt *ast.SelectStmt) error  </span><br><span class=\"line\"></span><br><span class=\"line\">//160 如果这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点,在此步骤返回所有subTableIndex</span><br><span class=\"line\">handleTableRefs</span><br><span class=\"line\">\t//322</span><br><span class=\"line\">\tfunc handleJoin(p *TableAliasStmtInfo, join *ast.Join) error &#123;</span><br><span class=\"line\">\t//332</span><br><span class=\"line\">\tif err := rewriteTableSource(p, left); err != nil &#123;</span><br><span class=\"line\">\t//400</span><br><span class=\"line\">\treturn rewriteTableNameInTableSource(p, tableSource)</span><br><span class=\"line\">\t//433 这是一个分片表或关联表, 创建一个TableName的装饰器, 并替换原有节点</span><br><span class=\"line\">\td, err := CreateTableNameDecorator(tableName, rule, p.GetRouteResult())</span><br><span class=\"line\">//190 </span><br><span class=\"line\">handleWhere</span><br><span class=\"line\">\t//370</span><br><span class=\"line\">\thas, result, decorator, err := handleComparisonExpr(p.TableAliasStmtInfo, stmt.Where)</span><br><span class=\"line\">\t// 576 BinaryOperationExpr结构和json输出的一样</span><br><span class=\"line\">\tcase *ast.BinaryOperationExpr </span><br><span class=\"line\">\t//637 判断操作符号</span><br><span class=\"line\">\tcase opcode.EQ, opcode.NE, opcode.GT, opcode.GE, opcode.LT, opcode.LE:</span><br><span class=\"line\">\t//700</span><br><span class=\"line\">\tif lType == ColumnNameExpr  &#123;</span><br><span class=\"line\">\t//873</span><br><span class=\"line\">\tfunc handleBinaryOperationExprCompareLeftColumnRightValue</span><br><span class=\"line\">\t//875 根据列判断是否需要装饰ColumnName, 获取对应的rule规则 where payorder.id=refund.pid</span><br><span class=\"line\">\trule, need, isAlias, err := NeedCreateColumnNameExprDecoratorInCondition(p, column)</span><br><span class=\"line\">\t//883 创建列装饰器</span><br><span class=\"line\">\tdecorator := CreateColumnNameExprDecorator(column, rule, isAlias, p.GetRouteResult())</span><br><span class=\"line\">\t//896</span><br><span class=\"line\">\ttableIndexes, err := findTableIndexes(rule, column.Name.Name.L, v)</span><br><span class=\"line\">\t//793 根据规则计算出表index</span><br><span class=\"line\">\tindex, err := rule.FindTableIndex(v)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//374 把result写入routerResult，覆盖 handleTableRefs 阶段的 subTableIndex</span><br><span class=\"line\">\tif has &#123;</span><br><span class=\"line\">\t\t//设置 index 到 RouteResult 也可以在此存入其他值</span><br><span class=\"line\">\t\tp.GetRouteResult().Inter(result)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tutil.go</span><br><span class=\"line\">\t\t//116 行判断index是否合法</span><br><span class=\"line\">\t\tfunc interList(l1 []int, l2 []int) []int &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//210 生成sql 返回</span><br><span class=\"line\">sqls, err := generateShardingSQLs(p.stmt, p.result, p.router)</span><br><span class=\"line\">\t//504 </span><br><span class=\"line\">    if err := stmt.Restore(ctx); err != nil &#123;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decorator_table_name.go</span><br><span class=\"line\"></span><br><span class=\"line\">//78</span><br><span class=\"line\">func (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">//88 如果原sql里带了dbName，mycat需要改写</span><br><span class=\"line\">if t.origin.Schema.String() != &quot;&quot; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">//115 如果是 kingshard 类型，重写表名</span><br><span class=\"line\">ctx.WriteName(fmt.Sprintf(&quot;%s_%04d&quot;, t.origin.Name.String(), tableIndex))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//513 根据 index 获取slice dbName</span><br><span class=\"line\">   sliceIndex := rule.GetSliceIndexFromTableIndex(index)</span><br><span class=\"line\">sliceName := rule.GetSlice(sliceIndex)</span><br><span class=\"line\">dbName, _ := rule.GetDatabaseNameByTableIndex(index)</span><br></pre></td></tr></table></figure>\n<p><strong>executor_handler.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//101 判断是否能在从库上执行</span><br><span class=\"line\">if canExecuteFromSlave(se, sql) &#123;</span><br><span class=\"line\">\treqCtx.Set(util.FromSlave, 1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//105 执行执行计划</span><br><span class=\"line\">r, err := p.ExecuteIn(reqCtx, se)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plan_select.go</span><br><span class=\"line\"></span><br><span class=\"line\">//65 ExecuteIn implement Plan</span><br><span class=\"line\">func (s *SelectPlan) ExecuteIn(reqCtx *util.RequestContext, sess Executor) (*mysql.Result, error) &#123;</span><br><span class=\"line\">\tsqls := s.GetSQLs()</span><br><span class=\"line\">\trs, err := sess.ExecuteSQLs(reqCtx, sqls) //80 执行sql </span><br><span class=\"line\">\tr, err := MergeSelectResult(s, s.stmt, rs) //85 merge查询结果</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exector.go</span><br><span class=\"line\"></span><br><span class=\"line\">//695</span><br><span class=\"line\">func (se *SessionExecutor) ExecuteSQLs</span><br><span class=\"line\">//707</span><br><span class=\"line\">rs, err := se.executeInMultiSlices(reqCtx, pcs, sqls)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifyResultStatus(r, se)</span><br></pre></td></tr></table></figure>\n<p><strong>executor.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return CreateResultResponse(se.status, r) //270</span><br></pre></td></tr></table></figure>\n<p><strong>session.go</strong> (end)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if err = cc.writeResponse(rs); err != nil  //240</span><br></pre></td></tr></table></figure>\n<p><strong>调试技巧</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">golang解决cannot convert a (type interface &#123;&#125;) to type *: need type assertion</span><br><span class=\"line\"></span><br><span class=\"line\">var a interface&#123;&#125; = int(10)</span><br><span class=\"line\">var b MyInt = a.(MyInt)</span><br><span class=\"line\"></span><br><span class=\"line\">可以对对象分别使用 Printf(&quot;%#v&quot;) 和  json.Marshal 输出观察</span><br></pre></td></tr></table></figure>\n<p>使用tidb生成ast树，改写sql例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&quot;github.com/pingcap/parser&quot;</span><br><span class=\"line\">\t&quot;github.com/pingcap/parser/ast&quot;</span><br><span class=\"line\">\t&quot;github.com/pingcap/parser/format&quot;</span><br><span class=\"line\">\t_ &quot;github.com/pingcap/parser/test_driver&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">//TableNameDecorator test</span><br><span class=\"line\">type TableNameDecorator struct &#123;</span><br><span class=\"line\">\torigin *ast.TableName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Restore implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) Restore(ctx *format.RestoreCtx) error &#123;</span><br><span class=\"line\">\tctx.WriteName(t.origin.Name.String() + &quot;_202006&quot;)</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Accept implement ast.Node</span><br><span class=\"line\">// do nothing and return current decorator</span><br><span class=\"line\">func (t *TableNameDecorator) Accept(v ast.Visitor) (ast.Node, bool) &#123;</span><br><span class=\"line\">\treturn t, true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Text implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) Text() string &#123;</span><br><span class=\"line\">\treturn t.origin.Text()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// SetText implement ast.Node</span><br><span class=\"line\">func (t *TableNameDecorator) SetText(text string) &#123;</span><br><span class=\"line\">\tt.origin.SetText(text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t//原始sql</span><br><span class=\"line\">\tsql := &quot;SELECT /*+ TIDB_SMJ(employees) */ emp_no, first_name, last_name &quot; +</span><br><span class=\"line\">\t\t&quot;FROM employees USE INDEX (last_name) &quot; +</span><br><span class=\"line\">\t\t&quot;where last_name=&apos;Aamodt&apos; and gender=&apos;F&apos; and birth_date &gt; &apos;1960-01-01&apos;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := parser.New()</span><br><span class=\"line\"></span><br><span class=\"line\">\t//解析sql成一颗ast树</span><br><span class=\"line\">\toneStmt, err := p.ParseOneStmt(sql, &quot;&quot;, &quot;&quot;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;parse error:\\n%v\\n%s&quot;, err, sql)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//如果是select查询转换成ast.SelectStmt类型</span><br><span class=\"line\">\tvar tmp interface&#123;&#125;</span><br><span class=\"line\">\ttmp = oneStmt</span><br><span class=\"line\">\tvar stmt *ast.SelectStmt = tmp.(*ast.SelectStmt)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttableRefs := stmt.From</span><br><span class=\"line\">\tjoin := tableRefs.TableRefs</span><br><span class=\"line\"></span><br><span class=\"line\">\t//判断jon.Left节点是否ast.TableSource类型，如果是新建tableName装饰器，替换left.Source节点</span><br><span class=\"line\">\tswitch left := join.Left.(type) &#123;</span><br><span class=\"line\">\tcase *ast.TableSource:</span><br><span class=\"line\">\t\ttableName, _ := left.Source.(*ast.TableName)</span><br><span class=\"line\">\t\td := &amp;TableNameDecorator&#123;tableName&#125;</span><br><span class=\"line\">\t\tleft.Source = d</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//创建builder</span><br><span class=\"line\">\tsb := &amp;strings.Builder&#123;&#125;</span><br><span class=\"line\">\tctx := format.NewRestoreCtx(269, sb)</span><br><span class=\"line\"></span><br><span class=\"line\">\t//遍历 ast 树各节点的 Restore 方法组装成sql</span><br><span class=\"line\">\tif err := stmt.Restore(ctx); err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//原始sql</span><br><span class=\"line\">\tfmt.Println(sql)</span><br><span class=\"line\">\t//输出最后组装的sql</span><br><span class=\"line\">\tfmt.Println(sb)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat go.mod </span><br><span class=\"line\">module tidb</span><br><span class=\"line\"></span><br><span class=\"line\">go 1.13</span><br><span class=\"line\"></span><br><span class=\"line\">require github.com/pingcap/parser v0.0.0-20200424075042-8222d8b724a4</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://dev.mysql.com/doc/internals/en/text-protocol.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/internals/en/text-protocol.html</a></li>\n<li><a href=\"https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/\" target=\"_blank\" rel=\"noopener\">https://pingcap.com/docs-cn/stable/sql-statements/sql-statement-select/</a> </li>\n</ol>"},{"title":"ubuntu18.04安装","description":"","date":"2019-11-14T20:53:10.000Z","comments":0,"share":true,"_content":"\n**镜像制作**\n\n工具：https://rufus.ie/ \n\n**分区：**\n\n```\n/ 50G 根分区(一般分配30G就可以)\n/boot 500MB 引导分区\nefi 500MB\nswap 4G 交换分区\n/home 个人数据分区\n```\n\n安装完成重启\n\n**修改163源并更新**\n\n```\n$ cat /etc/apt/sources.list\ndeb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n**安装网卡驱动 :(**\n\n```\nhttps://github.com/tomaspinho/rtl8821ce\n```\n\n**常用软件**\n\n- chrome\n- [Nutstore](https://www.jianguoyun.com/)  #坚果网盘 导入备份数据\n- [google 拼音](https://ywnz.com/linuxjc/2891.html) \n- sublime\n- vim\n- git 别名设置\n- [typora](http://typora.io/) #markdown工具\n- docker.io\n- postman\n- gimp\n- bleachbit\n- vsCode\n- [flameshot](https://flameshot.js.org/)\n\n![1.png](/img/ubuntu/1.png)\n\n\n总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。","source":"_posts/ubuntu-install.md","raw":"---\ntitle: \"ubuntu18.04安装\"\ndescription: \"\"\ndate: 2019-11-14 20:53:10\ntags: [ubuntu]\ncomments: false\nshare: true\n---\n\n**镜像制作**\n\n工具：https://rufus.ie/ \n\n**分区：**\n\n```\n/ 50G 根分区(一般分配30G就可以)\n/boot 500MB 引导分区\nefi 500MB\nswap 4G 交换分区\n/home 个人数据分区\n```\n\n安装完成重启\n\n**修改163源并更新**\n\n```\n$ cat /etc/apt/sources.list\ndeb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse\n$ sudo apt update\n$ sudo apt upgrade\n```\n\n**安装网卡驱动 :(**\n\n```\nhttps://github.com/tomaspinho/rtl8821ce\n```\n\n**常用软件**\n\n- chrome\n- [Nutstore](https://www.jianguoyun.com/)  #坚果网盘 导入备份数据\n- [google 拼音](https://ywnz.com/linuxjc/2891.html) \n- sublime\n- vim\n- git 别名设置\n- [typora](http://typora.io/) #markdown工具\n- docker.io\n- postman\n- gimp\n- bleachbit\n- vsCode\n- [flameshot](https://flameshot.js.org/)\n\n![1.png](/img/ubuntu/1.png)\n\n\n总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。","slug":"ubuntu-install","published":1,"updated":"2020-08-04T07:35:10.985Z","layout":"post","photos":[],"link":"","_id":"ckj9uenm9001i0wpbctpf6r06","content":"<p><strong>镜像制作</strong></p>\n<p>工具：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">https://rufus.ie/</a> </p>\n<p><strong>分区：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 50G 根分区(一般分配30G就可以)</span><br><span class=\"line\">/boot 500MB 引导分区</span><br><span class=\"line\">efi 500MB</span><br><span class=\"line\">swap 4G 交换分区</span><br><span class=\"line\">/home 个人数据分区</span><br></pre></td></tr></table></figure>\n<p>安装完成重启</p>\n<p><strong>修改163源并更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/apt/sources.list</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">$ sudo apt update</span><br><span class=\"line\">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<p><strong>安装网卡驱动 :(</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tomaspinho/rtl8821ce</span><br></pre></td></tr></table></figure>\n<p><strong>常用软件</strong></p>\n<ul>\n<li>chrome</li>\n<li><a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"noopener\">Nutstore</a>  #坚果网盘 导入备份数据</li>\n<li><a href=\"https://ywnz.com/linuxjc/2891.html\" target=\"_blank\" rel=\"noopener\">google 拼音</a> </li>\n<li>sublime</li>\n<li>vim</li>\n<li>git 别名设置</li>\n<li><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">typora</a> #markdown工具</li>\n<li>docker.io</li>\n<li>postman</li>\n<li>gimp</li>\n<li>bleachbit</li>\n<li>vsCode</li>\n<li><a href=\"https://flameshot.js.org/\" target=\"_blank\" rel=\"noopener\">flameshot</a></li>\n</ul>\n<p><img src=\"/img/ubuntu/1.png\" alt=\"1.png\"></p>\n<p>总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>镜像制作</strong></p>\n<p>工具：<a href=\"https://rufus.ie/\" target=\"_blank\" rel=\"noopener\">https://rufus.ie/</a> </p>\n<p><strong>分区：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 50G 根分区(一般分配30G就可以)</span><br><span class=\"line\">/boot 500MB 引导分区</span><br><span class=\"line\">efi 500MB</span><br><span class=\"line\">swap 4G 交换分区</span><br><span class=\"line\">/home 个人数据分区</span><br></pre></td></tr></table></figure>\n<p>安装完成重启</p>\n<p><strong>修改163源并更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/apt/sources.list</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">$ sudo apt update</span><br><span class=\"line\">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<p><strong>安装网卡驱动 :(</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/tomaspinho/rtl8821ce</span><br></pre></td></tr></table></figure>\n<p><strong>常用软件</strong></p>\n<ul>\n<li>chrome</li>\n<li><a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"noopener\">Nutstore</a>  #坚果网盘 导入备份数据</li>\n<li><a href=\"https://ywnz.com/linuxjc/2891.html\" target=\"_blank\" rel=\"noopener\">google 拼音</a> </li>\n<li>sublime</li>\n<li>vim</li>\n<li>git 别名设置</li>\n<li><a href=\"http://typora.io/\" target=\"_blank\" rel=\"noopener\">typora</a> #markdown工具</li>\n<li>docker.io</li>\n<li>postman</li>\n<li>gimp</li>\n<li>bleachbit</li>\n<li>vsCode</li>\n<li><a href=\"https://flameshot.js.org/\" target=\"_blank\" rel=\"noopener\">flameshot</a></li>\n</ul>\n<p><img src=\"/img/ubuntu/1.png\" alt=\"1.png\"></p>\n<p>总结：装个系统还是比较容易的，数据备份很重要，坚果网盘真的好用。</p>\n"},{"title":"xorm结合logrus记录traceId","date":"2020-04-09T19:17:10.000Z","share":true,"_content":"\n\n通用 `traceId` 写日志，来查看一次请求的处理过程，是我们常用的排错方式。日志一般包括我们自定义的日志，和数据库日志。\n\n比较了常用的 go orm 包，发现 xorm 可以自定义上下文 ，满足我们的需求。通过`engine.SetDefaultContext(ctx)`，我们可以把一次请求产生的 traceId 通过 context.WithValue 的方式传递，在sql 执行结束时打印出来。\n\nxorm 包本身的日志是不输出上下文变量的，但是 `engine.SetLogger()` 方法支持自定义 log ，我们通过重写log来实现自定义日志打印。需要实现如下 ContextLogger 接口，主要重写了 AfterSQL 方法。\n\n```go\n// ContextLogger represents a logger interface with context\ntype ContextLogger interface {\n\tSQLLogger\n\n\tDebugf(format string, v ...interface{})\n\tErrorf(format string, v ...interface{})\n\tInfof(format string, v ...interface{})\n\tWarnf(format string, v ...interface{})\n\n\tLevel() LogLevel\n\tSetLevel(l LogLevel)\n\n\tShowSQL(show ...bool)\n\tIsShowSQL() bool\n}\n```\n\n我们通过自定义结构体，使用 `logrus` 日志包来实现这个接口\n\n```go\ntype LoggerAdapter struct {\n\tlogger *logrus.Logger\n}\n\nfunc NewLoggerAdapter() *LoggerAdapter {\n\treturn &LoggerAdapter{\n\t\tlogger: logrus.New(),\n\t}\n}\n\nfunc (l *LoggerAdapter) BeforeSQL(ctx xlog.LogContext) {}\n\nfunc (l *LoggerAdapter) AfterSQL(ctx xlog.LogContext) {\n\t#在这里打印了上下文环境里的traceId\n\ttraceId := ctx.Ctx.Value(\"traceId\") \n\tif ctx.ExecuteTime > 0 {\n\t\tl.logger.Infof(\"[SQL] %v %v - %v %v\", ctx.SQL, ctx.Args, ctx.ExecuteTime, traceId)\n\t} else {\n\t\tl.logger.Infof(\"[SQL] %v %v\", ctx.SQL, ctx.Args, traceId)\n\t}\n}\n\nfunc (l *LoggerAdapter) Debugf(format string, v ...interface{}) {\n\tl.logger.Debugf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Errorf(format string, v ...interface{}) {\n\tl.logger.Errorf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Infof(format string, v ...interface{}) {\n\tl.logger.Infof(format, v...)\n}\n\nfunc (l *LoggerAdapter) Warnf(format string, v ...interface{}) {\n\tl.logger.Warnf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Level() xlog.LogLevel {\n\treturn xlog.LogLevel(l.logger.GetLevel())\n}\n\nfunc (l *LoggerAdapter) SetLevel(lv xlog.LogLevel) {\n\tl.logger.SetLevel(logrus.Level(lv))\n}\n\nfunc (l *LoggerAdapter) ShowSQL(show ...bool) {}\n\nfunc (l *LoggerAdapter) IsShowSQL() bool {\n\treturn true\n}\n```\n\n测试一下\n\n```go\n\tengine, _ = xorm.NewEngine(\"mysql\", \"dev_w:*****@(172.16.200.40:3306)/api_monitor?charset=utf8\")\n\tdblog := NewLoggerAdapter()\n\n\tengine.SetLogger(dblog)\n\n\ttype Group struct {\n\t\tId         int       `xorm:\"not null pk autoincr INT(11)\"`\n\t\tName       string    `xorm:\"not null default '' comment('分组名称') VARCHAR(50)\"`\n\t\tMaintainer string    `xorm:\"not null default '' comment('维护者') VARCHAR(50)\"`\n\t\tCreatedAt  time.Time `xorm:\"not null TIMESTAMP\"`\n\t\tUpdatedAt  time.Time `xorm:\"not null TIMESTAMP\"`\n\t\tDeletedAt  time.Time `xorm:\"TIMESTAMP\"`\n\t}\n\n\tgroups := []Group{}\n\n\tgo func() {\n\t\tctx := context.WithValue(context.Background(), \"traceId\", \"11111111111111\")\n\t\tengine.SetDefaultContext(ctx)\n\t\tengine.Where(\"name = ? or name = ?\", \"cms\", \"biw\").Find(&groups)\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tctx := context.WithValue(context.Background(), \"traceId\", \"2222222222222\")\n\t\tengine.SetDefaultContext(ctx)\n\n\t\tengine.Where(\"name = ? or name = ?\", \"cms\", \"tt\").Find(&groups)\n\n\t}()\n\tfor {\n\n\t}\n```\n\n查看日志，可以看到末尾记录了我们本次执行的 traceId\n\n```shell\nINFO[0000] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms biw] - 187.773683ms 1111111\n1111111 \nINFO[0001] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms tt] - 92.988533ms 222222222\n2222 \n```\n\n\n\n参考资料：\n\n[logrus日志使用详解](https://www.cnblogs.com/shijingjing07/p/10316444.html)\n\n[xorm中文文档](http://gobook.io/read/gitea.com/xorm/manual-zh-CN/)\n\n[快速掌握 Golang context 包，简单示例](https://deepzz.com/post/golang-context-package-notes.html)\n","source":"_posts/xorm_traceid.md","raw":"---\ntitle: \"xorm结合logrus记录traceId\"\ndate: 2020-04-09 19:17:10\ntags: [xorm,golang,logrus]\nshare: true\n---\n\n\n通用 `traceId` 写日志，来查看一次请求的处理过程，是我们常用的排错方式。日志一般包括我们自定义的日志，和数据库日志。\n\n比较了常用的 go orm 包，发现 xorm 可以自定义上下文 ，满足我们的需求。通过`engine.SetDefaultContext(ctx)`，我们可以把一次请求产生的 traceId 通过 context.WithValue 的方式传递，在sql 执行结束时打印出来。\n\nxorm 包本身的日志是不输出上下文变量的，但是 `engine.SetLogger()` 方法支持自定义 log ，我们通过重写log来实现自定义日志打印。需要实现如下 ContextLogger 接口，主要重写了 AfterSQL 方法。\n\n```go\n// ContextLogger represents a logger interface with context\ntype ContextLogger interface {\n\tSQLLogger\n\n\tDebugf(format string, v ...interface{})\n\tErrorf(format string, v ...interface{})\n\tInfof(format string, v ...interface{})\n\tWarnf(format string, v ...interface{})\n\n\tLevel() LogLevel\n\tSetLevel(l LogLevel)\n\n\tShowSQL(show ...bool)\n\tIsShowSQL() bool\n}\n```\n\n我们通过自定义结构体，使用 `logrus` 日志包来实现这个接口\n\n```go\ntype LoggerAdapter struct {\n\tlogger *logrus.Logger\n}\n\nfunc NewLoggerAdapter() *LoggerAdapter {\n\treturn &LoggerAdapter{\n\t\tlogger: logrus.New(),\n\t}\n}\n\nfunc (l *LoggerAdapter) BeforeSQL(ctx xlog.LogContext) {}\n\nfunc (l *LoggerAdapter) AfterSQL(ctx xlog.LogContext) {\n\t#在这里打印了上下文环境里的traceId\n\ttraceId := ctx.Ctx.Value(\"traceId\") \n\tif ctx.ExecuteTime > 0 {\n\t\tl.logger.Infof(\"[SQL] %v %v - %v %v\", ctx.SQL, ctx.Args, ctx.ExecuteTime, traceId)\n\t} else {\n\t\tl.logger.Infof(\"[SQL] %v %v\", ctx.SQL, ctx.Args, traceId)\n\t}\n}\n\nfunc (l *LoggerAdapter) Debugf(format string, v ...interface{}) {\n\tl.logger.Debugf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Errorf(format string, v ...interface{}) {\n\tl.logger.Errorf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Infof(format string, v ...interface{}) {\n\tl.logger.Infof(format, v...)\n}\n\nfunc (l *LoggerAdapter) Warnf(format string, v ...interface{}) {\n\tl.logger.Warnf(format, v...)\n}\n\nfunc (l *LoggerAdapter) Level() xlog.LogLevel {\n\treturn xlog.LogLevel(l.logger.GetLevel())\n}\n\nfunc (l *LoggerAdapter) SetLevel(lv xlog.LogLevel) {\n\tl.logger.SetLevel(logrus.Level(lv))\n}\n\nfunc (l *LoggerAdapter) ShowSQL(show ...bool) {}\n\nfunc (l *LoggerAdapter) IsShowSQL() bool {\n\treturn true\n}\n```\n\n测试一下\n\n```go\n\tengine, _ = xorm.NewEngine(\"mysql\", \"dev_w:*****@(172.16.200.40:3306)/api_monitor?charset=utf8\")\n\tdblog := NewLoggerAdapter()\n\n\tengine.SetLogger(dblog)\n\n\ttype Group struct {\n\t\tId         int       `xorm:\"not null pk autoincr INT(11)\"`\n\t\tName       string    `xorm:\"not null default '' comment('分组名称') VARCHAR(50)\"`\n\t\tMaintainer string    `xorm:\"not null default '' comment('维护者') VARCHAR(50)\"`\n\t\tCreatedAt  time.Time `xorm:\"not null TIMESTAMP\"`\n\t\tUpdatedAt  time.Time `xorm:\"not null TIMESTAMP\"`\n\t\tDeletedAt  time.Time `xorm:\"TIMESTAMP\"`\n\t}\n\n\tgroups := []Group{}\n\n\tgo func() {\n\t\tctx := context.WithValue(context.Background(), \"traceId\", \"11111111111111\")\n\t\tengine.SetDefaultContext(ctx)\n\t\tengine.Where(\"name = ? or name = ?\", \"cms\", \"biw\").Find(&groups)\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tctx := context.WithValue(context.Background(), \"traceId\", \"2222222222222\")\n\t\tengine.SetDefaultContext(ctx)\n\n\t\tengine.Where(\"name = ? or name = ?\", \"cms\", \"tt\").Find(&groups)\n\n\t}()\n\tfor {\n\n\t}\n```\n\n查看日志，可以看到末尾记录了我们本次执行的 traceId\n\n```shell\nINFO[0000] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms biw] - 187.773683ms 1111111\n1111111 \nINFO[0001] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms tt] - 92.988533ms 222222222\n2222 \n```\n\n\n\n参考资料：\n\n[logrus日志使用详解](https://www.cnblogs.com/shijingjing07/p/10316444.html)\n\n[xorm中文文档](http://gobook.io/read/gitea.com/xorm/manual-zh-CN/)\n\n[快速掌握 Golang context 包，简单示例](https://deepzz.com/post/golang-context-package-notes.html)\n","slug":"xorm_traceid","published":1,"updated":"2020-04-09T11:17:18.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj9uenmb001j0wpb2343s1bv","content":"<p>通用 <code>traceId</code> 写日志，来查看一次请求的处理过程，是我们常用的排错方式。日志一般包括我们自定义的日志，和数据库日志。</p>\n<p>比较了常用的 go orm 包，发现 xorm 可以自定义上下文 ，满足我们的需求。通过<code>engine.SetDefaultContext(ctx)</code>，我们可以把一次请求产生的 traceId 通过 context.WithValue 的方式传递，在sql 执行结束时打印出来。</p>\n<p>xorm 包本身的日志是不输出上下文变量的，但是 <code>engine.SetLogger()</code> 方法支持自定义 log ，我们通过重写log来实现自定义日志打印。需要实现如下 ContextLogger 接口，主要重写了 AfterSQL 方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ContextLogger represents a logger interface with context</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ContextLogger <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSQLLogger</span><br><span class=\"line\"></span><br><span class=\"line\">\tDebugf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tErrorf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tInfof(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tWarnf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tLevel() LogLevel</span><br><span class=\"line\">\tSetLevel(l LogLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tShowSQL(show ...<span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tIsShowSQL() <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过自定义结构体，使用 <code>logrus</code> 日志包来实现这个接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LoggerAdapter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tlogger *logrus.Logger</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLoggerAdapter</span><span class=\"params\">()</span> *<span class=\"title\">LoggerAdapter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;LoggerAdapter&#123;</span><br><span class=\"line\">\t\tlogger: logrus.New(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">BeforeSQL</span><span class=\"params\">(ctx xlog.LogContext)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">AfterSQL</span><span class=\"params\">(ctx xlog.LogContext)</span></span> &#123;</span><br><span class=\"line\">\t#在这里打印了上下文环境里的traceId</span><br><span class=\"line\">\ttraceId := ctx.Ctx.Value(<span class=\"string\">\"traceId\"</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ctx.ExecuteTime &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tl.logger.Infof(<span class=\"string\">\"[SQL] %v %v - %v %v\"</span>, ctx.SQL, ctx.Args, ctx.ExecuteTime, traceId)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.logger.Infof(<span class=\"string\">\"[SQL] %v %v\"</span>, ctx.SQL, ctx.Args, traceId)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Debugf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Debugf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Errorf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Errorf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Infof</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Infof(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Warnf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Warnf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Level</span><span class=\"params\">()</span> <span class=\"title\">xlog</span>.<span class=\"title\">LogLevel</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xlog.LogLevel(l.logger.GetLevel())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">SetLevel</span><span class=\"params\">(lv xlog.LogLevel)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.SetLevel(logrus.Level(lv))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">ShowSQL</span><span class=\"params\">(show ...<span class=\"keyword\">bool</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">IsShowSQL</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">engine, _ = xorm.NewEngine(<span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"dev_w:*****@(172.16.200.40:3306)/api_monitor?charset=utf8\"</span>)</span><br><span class=\"line\">dblog := NewLoggerAdapter()</span><br><span class=\"line\"></span><br><span class=\"line\">engine.SetLogger(dblog)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Group <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId         <span class=\"keyword\">int</span>       <span class=\"string\">`xorm:\"not null pk autoincr INT(11)\"`</span></span><br><span class=\"line\">\tName       <span class=\"keyword\">string</span>    <span class=\"string\">`xorm:\"not null default '' comment('分组名称') VARCHAR(50)\"`</span></span><br><span class=\"line\">\tMaintainer <span class=\"keyword\">string</span>    <span class=\"string\">`xorm:\"not null default '' comment('维护者') VARCHAR(50)\"`</span></span><br><span class=\"line\">\tCreatedAt  time.Time <span class=\"string\">`xorm:\"not null TIMESTAMP\"`</span></span><br><span class=\"line\">\tUpdatedAt  time.Time <span class=\"string\">`xorm:\"not null TIMESTAMP\"`</span></span><br><span class=\"line\">\tDeletedAt  time.Time <span class=\"string\">`xorm:\"TIMESTAMP\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">groups := []Group&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx := context.WithValue(context.Background(), <span class=\"string\">\"traceId\"</span>, <span class=\"string\">\"11111111111111\"</span>)</span><br><span class=\"line\">\tengine.SetDefaultContext(ctx)</span><br><span class=\"line\">\tengine.Where(<span class=\"string\">\"name = ? or name = ?\"</span>, <span class=\"string\">\"cms\"</span>, <span class=\"string\">\"biw\"</span>).Find(&amp;groups)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\tctx := context.WithValue(context.Background(), <span class=\"string\">\"traceId\"</span>, <span class=\"string\">\"2222222222222\"</span>)</span><br><span class=\"line\">\tengine.SetDefaultContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.Where(<span class=\"string\">\"name = ? or name = ?\"</span>, <span class=\"string\">\"cms\"</span>, <span class=\"string\">\"tt\"</span>).Find(&amp;groups)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看日志，可以看到末尾记录了我们本次执行的 traceId</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO[0000] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms biw] - 187.773683ms 1111111</span><br><span class=\"line\">1111111 </span><br><span class=\"line\">INFO[0001] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms tt] - 92.988533ms 222222222</span><br><span class=\"line\">2222</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.cnblogs.com/shijingjing07/p/10316444.html\" target=\"_blank\" rel=\"noopener\">logrus日志使用详解</a></p>\n<p><a href=\"http://gobook.io/read/gitea.com/xorm/manual-zh-CN/\" target=\"_blank\" rel=\"noopener\">xorm中文文档</a></p>\n<p><a href=\"https://deepzz.com/post/golang-context-package-notes.html\" target=\"_blank\" rel=\"noopener\">快速掌握 Golang context 包，简单示例</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>通用 <code>traceId</code> 写日志，来查看一次请求的处理过程，是我们常用的排错方式。日志一般包括我们自定义的日志，和数据库日志。</p>\n<p>比较了常用的 go orm 包，发现 xorm 可以自定义上下文 ，满足我们的需求。通过<code>engine.SetDefaultContext(ctx)</code>，我们可以把一次请求产生的 traceId 通过 context.WithValue 的方式传递，在sql 执行结束时打印出来。</p>\n<p>xorm 包本身的日志是不输出上下文变量的，但是 <code>engine.SetLogger()</code> 方法支持自定义 log ，我们通过重写log来实现自定义日志打印。需要实现如下 ContextLogger 接口，主要重写了 AfterSQL 方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ContextLogger represents a logger interface with context</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ContextLogger <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSQLLogger</span><br><span class=\"line\"></span><br><span class=\"line\">\tDebugf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tErrorf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tInfof(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tWarnf(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\tLevel() LogLevel</span><br><span class=\"line\">\tSetLevel(l LogLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tShowSQL(show ...<span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tIsShowSQL() <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过自定义结构体，使用 <code>logrus</code> 日志包来实现这个接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LoggerAdapter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tlogger *logrus.Logger</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLoggerAdapter</span><span class=\"params\">()</span> *<span class=\"title\">LoggerAdapter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;LoggerAdapter&#123;</span><br><span class=\"line\">\t\tlogger: logrus.New(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">BeforeSQL</span><span class=\"params\">(ctx xlog.LogContext)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">AfterSQL</span><span class=\"params\">(ctx xlog.LogContext)</span></span> &#123;</span><br><span class=\"line\">\t#在这里打印了上下文环境里的traceId</span><br><span class=\"line\">\ttraceId := ctx.Ctx.Value(<span class=\"string\">\"traceId\"</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ctx.ExecuteTime &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tl.logger.Infof(<span class=\"string\">\"[SQL] %v %v - %v %v\"</span>, ctx.SQL, ctx.Args, ctx.ExecuteTime, traceId)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.logger.Infof(<span class=\"string\">\"[SQL] %v %v\"</span>, ctx.SQL, ctx.Args, traceId)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Debugf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Debugf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Errorf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Errorf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Infof</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Infof(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Warnf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, v ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.Warnf(format, v...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">Level</span><span class=\"params\">()</span> <span class=\"title\">xlog</span>.<span class=\"title\">LogLevel</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xlog.LogLevel(l.logger.GetLevel())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">SetLevel</span><span class=\"params\">(lv xlog.LogLevel)</span></span> &#123;</span><br><span class=\"line\">\tl.logger.SetLevel(logrus.Level(lv))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">ShowSQL</span><span class=\"params\">(show ...<span class=\"keyword\">bool</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LoggerAdapter)</span> <span class=\"title\">IsShowSQL</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试一下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">engine, _ = xorm.NewEngine(<span class=\"string\">\"mysql\"</span>, <span class=\"string\">\"dev_w:*****@(172.16.200.40:3306)/api_monitor?charset=utf8\"</span>)</span><br><span class=\"line\">dblog := NewLoggerAdapter()</span><br><span class=\"line\"></span><br><span class=\"line\">engine.SetLogger(dblog)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Group <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId         <span class=\"keyword\">int</span>       <span class=\"string\">`xorm:\"not null pk autoincr INT(11)\"`</span></span><br><span class=\"line\">\tName       <span class=\"keyword\">string</span>    <span class=\"string\">`xorm:\"not null default '' comment('分组名称') VARCHAR(50)\"`</span></span><br><span class=\"line\">\tMaintainer <span class=\"keyword\">string</span>    <span class=\"string\">`xorm:\"not null default '' comment('维护者') VARCHAR(50)\"`</span></span><br><span class=\"line\">\tCreatedAt  time.Time <span class=\"string\">`xorm:\"not null TIMESTAMP\"`</span></span><br><span class=\"line\">\tUpdatedAt  time.Time <span class=\"string\">`xorm:\"not null TIMESTAMP\"`</span></span><br><span class=\"line\">\tDeletedAt  time.Time <span class=\"string\">`xorm:\"TIMESTAMP\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">groups := []Group&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx := context.WithValue(context.Background(), <span class=\"string\">\"traceId\"</span>, <span class=\"string\">\"11111111111111\"</span>)</span><br><span class=\"line\">\tengine.SetDefaultContext(ctx)</span><br><span class=\"line\">\tengine.Where(<span class=\"string\">\"name = ? or name = ?\"</span>, <span class=\"string\">\"cms\"</span>, <span class=\"string\">\"biw\"</span>).Find(&amp;groups)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\tctx := context.WithValue(context.Background(), <span class=\"string\">\"traceId\"</span>, <span class=\"string\">\"2222222222222\"</span>)</span><br><span class=\"line\">\tengine.SetDefaultContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">\tengine.Where(<span class=\"string\">\"name = ? or name = ?\"</span>, <span class=\"string\">\"cms\"</span>, <span class=\"string\">\"tt\"</span>).Find(&amp;groups)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看日志，可以看到末尾记录了我们本次执行的 traceId</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO[0000] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms biw] - 187.773683ms 1111111</span><br><span class=\"line\">1111111 </span><br><span class=\"line\">INFO[0001] [SQL] SELECT `id`, `name`, `maintainer`, `created_at`, `updated_at`, `deleted_at` FROM `group` WHERE (name = ? or name = ?) [cms tt] - 92.988533ms 222222222</span><br><span class=\"line\">2222</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<p><a href=\"https://www.cnblogs.com/shijingjing07/p/10316444.html\" target=\"_blank\" rel=\"noopener\">logrus日志使用详解</a></p>\n<p><a href=\"http://gobook.io/read/gitea.com/xorm/manual-zh-CN/\" target=\"_blank\" rel=\"noopener\">xorm中文文档</a></p>\n<p><a href=\"https://deepzz.com/post/golang-context-package-notes.html\" target=\"_blank\" rel=\"noopener\">快速掌握 Golang context 包，简单示例</a></p>\n"},{"title":"vue 入门笔记","description":"","date":"2020-08-21T16:32:10.000Z","comments":0,"share":true,"_content":"**和 Angularjs 比较**\n\n组件开发有更好的生态圈，如Element UI\n\n\n### 指令\n\n```\nv-bind:class=\"[classA,classB]\" 绑定属性 简写 :class=\"[classA,classB]\"\n# 对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n# 绑定对象，也可以设置成变量\n:class=\"{current:true,focus:false}\"\n# 绑定style\n:style=\"{color:'red',fontSize:'18px'}\"\n<span v-html=\"rawHtml\"></span>\n\n# 返回对象的计算属性。这是一个常用且强大的模式：\n<div v-bind:class=\"classObject\"></div>\n\nv-if\nv-else-if\nv-else\n// 对一组元素进行if判断\n<template v-if=\"\">\n\t<div></div>\n\t<div></div>\n</template>\n\n<p v-for=\"{(num,index) in items}\" :key=\"index\">{{k + '-' +v}}</p>\n<p v-for=\"{(value,key,index) in obj}\" :key=\"index\">{{k + '-' +v}}</p>\n类似于 v-if，你也可以利用带有 v-for 的 <template> 来循环渲染一段包含多个元素的内容。\n\nv-on:click=\"add\" 简写 @:click=\"add\"\nthis.$set(newLlist,0,{})  修改数组0索引值\n<div v-once></div> 确保这些内容只计算一次\n```\n<!-- more -->\n### 组件\n\n**computed计算属性**\n\n```\n使用场景: 某个数据受多个数据影响，不推荐使用函数计算，因为 computed 可以缓存，函数会反复调用，性能低\nget()\nset() 触发函数\n```\n\n**侦听属性,对象改变触发** \n\n```js\n使用场景: 一个数据变化会影响多个数据\nwatch: {\n    language:{\n        handler (newval) {\t\n    \t},\n    },\n    immediate:true # watch 页面加载就立即执行\n}\n```\n\n**组件传参** \n\n父传子\n\n```\n# 子\n<template>\n\t<p>{{text}}</p>\n</template>\n<script>\n\texport default{\n\t\tname: \"MyCoponent1\"\n\t\t//props: [\"text\"]\n        props:{\n        \ttext:{\n        \t\ttype: String,\n        \t\trequired: true,\n        \t\tdefault: \"默认字符串\"\n    \t\t}\n    \t}\n\t}\n</script>\n\n# 父\n<template>\n\t<my-compoent text=\"abcdef\"></my-compoent>\n</template>\n<script>\n    import MyCompoent from '../compoents/compoent1'\n    export default{\n        name:\"demo12\"\n        compoents:{\n        \tMyCompoent\n    \t}\n    }\n</script>\n```\n\n子传父\n\n```\n# 子\n<template>\n\t<div>\n        <input type=\"text\" v-model=\"val\">\n        <button @click=\"submit\">提交</button>\n    </div>\n</template>\n<script>\n    export default{\n        name:\"Compoent2\",\n        props: ['msg'], //接收父组件参数\n        model: {\n            prpo: 'msg',\n            event: 'on-callback'\n        },\n        data(){\n            return{\n                val: this.msg\n            }\n        },\n        methods:{\n            submit(){\n                this.$emit('on-callback',this.val)//submit事件触发后，自动触发on-callback事件\n            }\n        }\n    }\n</script>\n\n# 父\n<template>\n  <div class=\"demo\">\n    <h1>子组件与父组件通信</h1>\n\t<my-component\n\t\t@on-callback=\"getData\"\n\t></my-component> \n\t<div>{{content}}</div>\n  </div>\n</template>\n<script>\nimport MyComponent from '../components/component2'\nexport default {\n  name: \"demo13\",\n  data() {\n    return {\n      content: \"\"\n    }\n  },\n  components: {\n  \tMyComponent\n  },\n  methods: {\n  \tgetData(val) {\n  \t\tthis.content = val\n  \t}\n  }\n}\n</script>\n\n```\n\n**组件插槽 solt**\n\n占位符作用，可以用来接收父组建传递过来的html\n\n```\n# 父\n<template>\n\t<sloat-demo title=\"这是标题\">\n        <template v-slot:default>\n             <div>这是内容</div>\n\t\t</template>\n        <template v-sloat:demo>\n            <button>按钮</button>\n\t\t\t<button>按钮2</button>\n\t\t</template>\n    </sloat-demo>\n</template>\n<script>\n    import SlotDemo from '../compoents/...'\n    export default{\n        name: \"demo15\",\n        compoents: {\n            SlotDemo\n        }\n    }\n</script>\n# 子\n<slot></slot>\n<slot name=\"btns\"></slot>\n```\n\n**动态组件**\n\n```html\n<button @click=\"currentCompoent = 'Dynamic1'\">组件1</button>\n<button @click=\"currentCompoent = 'Dynamic2'\">组件2</button>\n<!-- 保持组件状态 -->\n<keep-alive>\n    <compoent :is=\"currentCompoent\"\n</keep-alive>\n    \n<script>\n    import DynamicDemo1 from '../compoents/..'\n    import DynamicDemo2 from '../compoents/..'\n</script>\n```\n\n**组件注册**\n\n全局注册\n\n```\nVue.component('my-component-name', { /* ... */ })\n```\n\n局部注册\n\n```js\nvar ComponentA = { /* ... */ }\n\nvar ComponentB = {\n  components: {\n    'component-a': ComponentA\n  },\n  // ...\n}\n```\n切换 `loginType` 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 `key` attribute 即可\n```\n<input placeholder=\"Enter your username\" key=\"username-input\">\n```\n\n\n**transition 动画**\n\n`<transition name=\"slide\"></transition>标签`，会在包括组件 `v-enter`、`v-enter-active`、`v-enter-to`、`v-leave`、`v-leave-to`阶段添加class，可以通过 transform来做动画效果, 如：\n\n```css\n.slide-enter-active,\n.slide-leave-active {\n\ttranstion: all 300ms\n}\n.slide-enter,\n.slide-leave-to {\n\topacity: 0;\n\ttransform: translate(-50%,-100%)\n}\n```\n\n### Vuex\n\n简单的 store 模式\n\n```js\nvar store = {\n  debug: true,\n  state: {\n    message: 'Hello!'\n  },\n  setMessageAction (newValue) {\n    if (this.debug) console.log('setMessageAction triggered with', newValue)\n    this.state.message = newValue\n  },\n  clearMessageAction () {\n    if (this.debug) console.log('clearMessageAction triggered')\n    this.state.message = ''\n  }\n}\n# 所有 store 中 state 的变更，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的变更将会发生\n```\n\n### 路由\n\nconst 异步加载 、import 同步加载\n\n子路由，页面需要添加: `<router-view/>`\n\n```js\n{\n\tpath:/demo17/:id?,\n\tname:'demo17',\n\tcompoent: Demo17，\n\t// redirect: 'demo6', //重定向\n\t// 别名\n\talias: '/demo17777777',\n\tchildren: [\n\t\t{\n\t\t\tpath: ':detail',\n\t\t\tname: 'detail',\n\t\t\tcompoent: Detail\n\t\t}\n\t]\n}\n// 通过js切换路由\nthis.$router.push(\"/demo5\")\n// 通过name切换路由\nthis.$router.push({\n\t//path: 'demo5/1234/abcd' //通过path切换路由不能传 params\n\tname: 'demo5'，\n\tparams: {\n\t\tid: 1234,\n\t\ttype: 'abcd'\n\t},\n\tquery:{\n\t\tkey:'abcedf'\n\t},\n\thash:\"#ppp\"\n})\n// replae用法和push一样，replace不会产生历史记录\nthis.$router.replace(\"/demo5\")\n\nthis.$router.go(-1)\n// router-link的to属性也能跟push一样使用\n<router-link :to=\"{}\">link</router-link>\n```\n\n 路由匹配从上到下，匹配不到就到 404 这条\n\n```\n{\n\tpath:'*',\n\tname:'Notfound',\n\tcomponent: NotFound\n}\n```\n\n**全局路由钩子函数**\n\n```js\n// 路由跳转前钩子函数\nrouter.beforeEach((to, from, next)  =>  {\n\tconsole.log('beforeEach 即将进入' + to.path + '页面')\n\t// to 目标路由\n\t// from前一个路由\n\t// next 必须执行next方法，才能跳转路由\n\t\t// 执行next(),跳转到to对应路由\n\t\t// 执行next(false),不跳转，停留在当前页面\n\t\t// 执行next(xxx),跳转到xxx页面\n\tif(to.name ==== 'demo6'){\n\t\tnext('demo5')\n\t}else{\n\t\tnext()\n\t}\n})\n// 路由跳转后钩子函数\nrouter.afterEach((to,from) => {\n\tconsole.log('afterEach 进入了' + to.path + '页面')\n})\n```\n\n单独路由钩子\n\n```js\n{\n\tpath: '/demo6',\n\tname: 'demo6',\n\tcomponent: Demo6,\n\tbeforeEnter(to,from,next){\n\t\tconsole.log('beforeEnter: 即将进入demo6')\n\t\tnext()\n\t}\n}\n```\n\n组件里单独写钩子函数\n\n```vue\nbeforeRouterEnter(to,from,next) {\n\t// beforeRouterEnter 读取不到this\n\tconsole.log('beforeRouterEnter: 即将进入')\n\tnext(vm =>{\n\t\tconsole.log(vm.text)\n\t})\n}\n// 路由更新，参数有变化时候触发\nbeforeRouterUpdate(to,from,next) {\n\t// beforeRouterUpdate 可以读取到this\n\tnext()\n}\n```\n**组件生命周期**\n\n1. `beforeCreate`：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n2. `created`：在实例创建完成后被立即调用。在这一步，实例已完成数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。\n3. `beforeMount`：在挂载开始之前被调用：相关的 `render` 函数首次被调用。\n4. `mounted`：实例被挂载后调用，这时 `el` 被新创建的 `vm.$el` 替换了。\n5. `beforeUpdate`：数据更新时调用，发生在虚拟 DOM 打补丁之前。\n6. `updated`：虚拟 DOM 重新渲染和打补丁之后。\n7. `beforeDestory`：实例销毁之前调用。在这一步，实例仍然完全可用。\n8. `destoryed`：实例销毁后调用。对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n\n**http 请求**\n```\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => (this.info = response))\n  }\n})\n<div id=\"app\">\n  {{ info }}\n</div>\n```\n\n### 其他\n\n**箭头函数**\n\n```js\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n**Vue-cli**\n\n```js\ndocker pull kolaente/yarn\n// yarn add [package]@[version]\nyarn global add @vue/cli\nvue create hello-world\ncd hello-word && yarn serve\n\n$vue --version\n@vue/cli 4.5.3\n```\n**vue-cli 修改打包路径**\n\n```\nnode_modules/@vue/cli-service/lib/options.js:83:  publicPath: './',\n```\n\n**Element**\n\n``` sh\nnpm i element-ui -S\n# 按需引入\nnpm install babel-plugin-component -D\nbabel.config.js 里添加\n\"plugins\": [\n    [\n      \"component\",\n      {\n        \"libraryName\": \"element-ui\",\n        \"styleLibraryName\": \"theme-chalk\"\n      }\n    ]\n  ]\n```\n\n## 组件开发\n\n**button**\n\n```\n组件里的内容使用 solt 定义\n通过 props 定义按钮type 如: primary、success、info、warning\n:class=\"[`hm-button--${type}`,{'is_plain':plain}]\" #ES6 引入了模板字符串\n<i v-if=\"icon\" :class=\"icon\"></i> \n<span v-if=\"$slots.default\"><slot></slot></span> #判断插槽是否传值\n#父\n<hm-button @click=\"fn\"></hm-button>\n#子\n@click=\"handleClick\"\nmethods:{\n\thandleClick(e){\n\t\tthis.$emit('click',e)\n\t}\n}\n```\n\n**dialog**\n\n```\n# 父组件传solt参数就覆盖，不传就显示span里的内容\n<slot name=\"title\">\n\t<span>{{title}}</span>\n</slot>\n<div :style=\"{width:width,top:top}\"></div>\n\n# 提示框内容使用默认插槽\n<h-dialog>内容</h-dialog>\n\n@click.self=\"fun3\" # 阻止冒泡\n```\n\n**sync修饰符** 子组件修改父组件数据\n\n```\n@click=\"fn\"\nthis.$emit('aa',200 )\n\n# sync 语法糖，直接修改父组件值相当于\n<hm-dialog :visable=\"visable\" @update:visable=\"fn1\"></hm-dialog> \n<hm-dialog :visable.sync=\"visable\"></hm-dialog> \n```\n\n**vue.compoent vs vue.use**\n\n```\nVue.use(plugin), plugin格式为{install: function () {}}，则运行install方法，若plugin本身是function则直接运行。Vue.component才是真正的去注册组件。很多UI库用Vue.use来注册组件是因为在plugin的install方法中去执行Vue.component罢了\n```\n\n**v-model 是个语法糖**\n\n```\n<input type=\"text\" v-model=\"username\">\n<input type=\"text\" :value=\"username\" @input=\"username=$event.targe.value\"\n\n实现 v-model\n# 子\n:value=\"value\"\n@input=\"handleInput\"\nhandleInput(e){\n\tthis.$emit('input',e.target.value)\n}\n# 父\nv-model=\"user\"\n\n// 切换input type\n:type=\"showPassword ? (passwordVisable ? 'text':'password') : type\"\n```\n\n\n参考：\n\n[关于* core-js/modules/es.array.fill in](https://www.jianshu.com/p/7fbdd031fe85)\n\n[组件传参数](https://blog.csdn.net/l284969634/article/details/78595077)\n\n[表单输入绑定](https://cn.vuejs.org/v2/guide/forms.html)","source":"_posts/vue.md","raw":"---\ntitle: \"vue 入门笔记\"\ndescription: \"\"\ndate: 2020-08-21 16:32:10\ntags: [vue,vuejs]\ncomments: false\nshare: true\n---\n**和 Angularjs 比较**\n\n组件开发有更好的生态圈，如Element UI\n\n\n### 指令\n\n```\nv-bind:class=\"[classA,classB]\" 绑定属性 简写 :class=\"[classA,classB]\"\n# 对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n# 绑定对象，也可以设置成变量\n:class=\"{current:true,focus:false}\"\n# 绑定style\n:style=\"{color:'red',fontSize:'18px'}\"\n<span v-html=\"rawHtml\"></span>\n\n# 返回对象的计算属性。这是一个常用且强大的模式：\n<div v-bind:class=\"classObject\"></div>\n\nv-if\nv-else-if\nv-else\n// 对一组元素进行if判断\n<template v-if=\"\">\n\t<div></div>\n\t<div></div>\n</template>\n\n<p v-for=\"{(num,index) in items}\" :key=\"index\">{{k + '-' +v}}</p>\n<p v-for=\"{(value,key,index) in obj}\" :key=\"index\">{{k + '-' +v}}</p>\n类似于 v-if，你也可以利用带有 v-for 的 <template> 来循环渲染一段包含多个元素的内容。\n\nv-on:click=\"add\" 简写 @:click=\"add\"\nthis.$set(newLlist,0,{})  修改数组0索引值\n<div v-once></div> 确保这些内容只计算一次\n```\n<!-- more -->\n### 组件\n\n**computed计算属性**\n\n```\n使用场景: 某个数据受多个数据影响，不推荐使用函数计算，因为 computed 可以缓存，函数会反复调用，性能低\nget()\nset() 触发函数\n```\n\n**侦听属性,对象改变触发** \n\n```js\n使用场景: 一个数据变化会影响多个数据\nwatch: {\n    language:{\n        handler (newval) {\t\n    \t},\n    },\n    immediate:true # watch 页面加载就立即执行\n}\n```\n\n**组件传参** \n\n父传子\n\n```\n# 子\n<template>\n\t<p>{{text}}</p>\n</template>\n<script>\n\texport default{\n\t\tname: \"MyCoponent1\"\n\t\t//props: [\"text\"]\n        props:{\n        \ttext:{\n        \t\ttype: String,\n        \t\trequired: true,\n        \t\tdefault: \"默认字符串\"\n    \t\t}\n    \t}\n\t}\n</script>\n\n# 父\n<template>\n\t<my-compoent text=\"abcdef\"></my-compoent>\n</template>\n<script>\n    import MyCompoent from '../compoents/compoent1'\n    export default{\n        name:\"demo12\"\n        compoents:{\n        \tMyCompoent\n    \t}\n    }\n</script>\n```\n\n子传父\n\n```\n# 子\n<template>\n\t<div>\n        <input type=\"text\" v-model=\"val\">\n        <button @click=\"submit\">提交</button>\n    </div>\n</template>\n<script>\n    export default{\n        name:\"Compoent2\",\n        props: ['msg'], //接收父组件参数\n        model: {\n            prpo: 'msg',\n            event: 'on-callback'\n        },\n        data(){\n            return{\n                val: this.msg\n            }\n        },\n        methods:{\n            submit(){\n                this.$emit('on-callback',this.val)//submit事件触发后，自动触发on-callback事件\n            }\n        }\n    }\n</script>\n\n# 父\n<template>\n  <div class=\"demo\">\n    <h1>子组件与父组件通信</h1>\n\t<my-component\n\t\t@on-callback=\"getData\"\n\t></my-component> \n\t<div>{{content}}</div>\n  </div>\n</template>\n<script>\nimport MyComponent from '../components/component2'\nexport default {\n  name: \"demo13\",\n  data() {\n    return {\n      content: \"\"\n    }\n  },\n  components: {\n  \tMyComponent\n  },\n  methods: {\n  \tgetData(val) {\n  \t\tthis.content = val\n  \t}\n  }\n}\n</script>\n\n```\n\n**组件插槽 solt**\n\n占位符作用，可以用来接收父组建传递过来的html\n\n```\n# 父\n<template>\n\t<sloat-demo title=\"这是标题\">\n        <template v-slot:default>\n             <div>这是内容</div>\n\t\t</template>\n        <template v-sloat:demo>\n            <button>按钮</button>\n\t\t\t<button>按钮2</button>\n\t\t</template>\n    </sloat-demo>\n</template>\n<script>\n    import SlotDemo from '../compoents/...'\n    export default{\n        name: \"demo15\",\n        compoents: {\n            SlotDemo\n        }\n    }\n</script>\n# 子\n<slot></slot>\n<slot name=\"btns\"></slot>\n```\n\n**动态组件**\n\n```html\n<button @click=\"currentCompoent = 'Dynamic1'\">组件1</button>\n<button @click=\"currentCompoent = 'Dynamic2'\">组件2</button>\n<!-- 保持组件状态 -->\n<keep-alive>\n    <compoent :is=\"currentCompoent\"\n</keep-alive>\n    \n<script>\n    import DynamicDemo1 from '../compoents/..'\n    import DynamicDemo2 from '../compoents/..'\n</script>\n```\n\n**组件注册**\n\n全局注册\n\n```\nVue.component('my-component-name', { /* ... */ })\n```\n\n局部注册\n\n```js\nvar ComponentA = { /* ... */ }\n\nvar ComponentB = {\n  components: {\n    'component-a': ComponentA\n  },\n  // ...\n}\n```\n切换 `loginType` 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 `key` attribute 即可\n```\n<input placeholder=\"Enter your username\" key=\"username-input\">\n```\n\n\n**transition 动画**\n\n`<transition name=\"slide\"></transition>标签`，会在包括组件 `v-enter`、`v-enter-active`、`v-enter-to`、`v-leave`、`v-leave-to`阶段添加class，可以通过 transform来做动画效果, 如：\n\n```css\n.slide-enter-active,\n.slide-leave-active {\n\ttranstion: all 300ms\n}\n.slide-enter,\n.slide-leave-to {\n\topacity: 0;\n\ttransform: translate(-50%,-100%)\n}\n```\n\n### Vuex\n\n简单的 store 模式\n\n```js\nvar store = {\n  debug: true,\n  state: {\n    message: 'Hello!'\n  },\n  setMessageAction (newValue) {\n    if (this.debug) console.log('setMessageAction triggered with', newValue)\n    this.state.message = newValue\n  },\n  clearMessageAction () {\n    if (this.debug) console.log('clearMessageAction triggered')\n    this.state.message = ''\n  }\n}\n# 所有 store 中 state 的变更，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的变更将会发生\n```\n\n### 路由\n\nconst 异步加载 、import 同步加载\n\n子路由，页面需要添加: `<router-view/>`\n\n```js\n{\n\tpath:/demo17/:id?,\n\tname:'demo17',\n\tcompoent: Demo17，\n\t// redirect: 'demo6', //重定向\n\t// 别名\n\talias: '/demo17777777',\n\tchildren: [\n\t\t{\n\t\t\tpath: ':detail',\n\t\t\tname: 'detail',\n\t\t\tcompoent: Detail\n\t\t}\n\t]\n}\n// 通过js切换路由\nthis.$router.push(\"/demo5\")\n// 通过name切换路由\nthis.$router.push({\n\t//path: 'demo5/1234/abcd' //通过path切换路由不能传 params\n\tname: 'demo5'，\n\tparams: {\n\t\tid: 1234,\n\t\ttype: 'abcd'\n\t},\n\tquery:{\n\t\tkey:'abcedf'\n\t},\n\thash:\"#ppp\"\n})\n// replae用法和push一样，replace不会产生历史记录\nthis.$router.replace(\"/demo5\")\n\nthis.$router.go(-1)\n// router-link的to属性也能跟push一样使用\n<router-link :to=\"{}\">link</router-link>\n```\n\n 路由匹配从上到下，匹配不到就到 404 这条\n\n```\n{\n\tpath:'*',\n\tname:'Notfound',\n\tcomponent: NotFound\n}\n```\n\n**全局路由钩子函数**\n\n```js\n// 路由跳转前钩子函数\nrouter.beforeEach((to, from, next)  =>  {\n\tconsole.log('beforeEach 即将进入' + to.path + '页面')\n\t// to 目标路由\n\t// from前一个路由\n\t// next 必须执行next方法，才能跳转路由\n\t\t// 执行next(),跳转到to对应路由\n\t\t// 执行next(false),不跳转，停留在当前页面\n\t\t// 执行next(xxx),跳转到xxx页面\n\tif(to.name ==== 'demo6'){\n\t\tnext('demo5')\n\t}else{\n\t\tnext()\n\t}\n})\n// 路由跳转后钩子函数\nrouter.afterEach((to,from) => {\n\tconsole.log('afterEach 进入了' + to.path + '页面')\n})\n```\n\n单独路由钩子\n\n```js\n{\n\tpath: '/demo6',\n\tname: 'demo6',\n\tcomponent: Demo6,\n\tbeforeEnter(to,from,next){\n\t\tconsole.log('beforeEnter: 即将进入demo6')\n\t\tnext()\n\t}\n}\n```\n\n组件里单独写钩子函数\n\n```vue\nbeforeRouterEnter(to,from,next) {\n\t// beforeRouterEnter 读取不到this\n\tconsole.log('beforeRouterEnter: 即将进入')\n\tnext(vm =>{\n\t\tconsole.log(vm.text)\n\t})\n}\n// 路由更新，参数有变化时候触发\nbeforeRouterUpdate(to,from,next) {\n\t// beforeRouterUpdate 可以读取到this\n\tnext()\n}\n```\n**组件生命周期**\n\n1. `beforeCreate`：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n2. `created`：在实例创建完成后被立即调用。在这一步，实例已完成数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。\n3. `beforeMount`：在挂载开始之前被调用：相关的 `render` 函数首次被调用。\n4. `mounted`：实例被挂载后调用，这时 `el` 被新创建的 `vm.$el` 替换了。\n5. `beforeUpdate`：数据更新时调用，发生在虚拟 DOM 打补丁之前。\n6. `updated`：虚拟 DOM 重新渲染和打补丁之后。\n7. `beforeDestory`：实例销毁之前调用。在这一步，实例仍然完全可用。\n8. `destoryed`：实例销毁后调用。对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n\n**http 请求**\n```\nnew Vue({\n  el: '#app',\n  data () {\n    return {\n      info: null\n    }\n  },\n  mounted () {\n    axios\n      .get('https://api.coindesk.com/v1/bpi/currentprice.json')\n      .then(response => (this.info = response))\n  }\n})\n<div id=\"app\">\n  {{ info }}\n</div>\n```\n\n### 其他\n\n**箭头函数**\n\n```js\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n**Vue-cli**\n\n```js\ndocker pull kolaente/yarn\n// yarn add [package]@[version]\nyarn global add @vue/cli\nvue create hello-world\ncd hello-word && yarn serve\n\n$vue --version\n@vue/cli 4.5.3\n```\n**vue-cli 修改打包路径**\n\n```\nnode_modules/@vue/cli-service/lib/options.js:83:  publicPath: './',\n```\n\n**Element**\n\n``` sh\nnpm i element-ui -S\n# 按需引入\nnpm install babel-plugin-component -D\nbabel.config.js 里添加\n\"plugins\": [\n    [\n      \"component\",\n      {\n        \"libraryName\": \"element-ui\",\n        \"styleLibraryName\": \"theme-chalk\"\n      }\n    ]\n  ]\n```\n\n## 组件开发\n\n**button**\n\n```\n组件里的内容使用 solt 定义\n通过 props 定义按钮type 如: primary、success、info、warning\n:class=\"[`hm-button--${type}`,{'is_plain':plain}]\" #ES6 引入了模板字符串\n<i v-if=\"icon\" :class=\"icon\"></i> \n<span v-if=\"$slots.default\"><slot></slot></span> #判断插槽是否传值\n#父\n<hm-button @click=\"fn\"></hm-button>\n#子\n@click=\"handleClick\"\nmethods:{\n\thandleClick(e){\n\t\tthis.$emit('click',e)\n\t}\n}\n```\n\n**dialog**\n\n```\n# 父组件传solt参数就覆盖，不传就显示span里的内容\n<slot name=\"title\">\n\t<span>{{title}}</span>\n</slot>\n<div :style=\"{width:width,top:top}\"></div>\n\n# 提示框内容使用默认插槽\n<h-dialog>内容</h-dialog>\n\n@click.self=\"fun3\" # 阻止冒泡\n```\n\n**sync修饰符** 子组件修改父组件数据\n\n```\n@click=\"fn\"\nthis.$emit('aa',200 )\n\n# sync 语法糖，直接修改父组件值相当于\n<hm-dialog :visable=\"visable\" @update:visable=\"fn1\"></hm-dialog> \n<hm-dialog :visable.sync=\"visable\"></hm-dialog> \n```\n\n**vue.compoent vs vue.use**\n\n```\nVue.use(plugin), plugin格式为{install: function () {}}，则运行install方法，若plugin本身是function则直接运行。Vue.component才是真正的去注册组件。很多UI库用Vue.use来注册组件是因为在plugin的install方法中去执行Vue.component罢了\n```\n\n**v-model 是个语法糖**\n\n```\n<input type=\"text\" v-model=\"username\">\n<input type=\"text\" :value=\"username\" @input=\"username=$event.targe.value\"\n\n实现 v-model\n# 子\n:value=\"value\"\n@input=\"handleInput\"\nhandleInput(e){\n\tthis.$emit('input',e.target.value)\n}\n# 父\nv-model=\"user\"\n\n// 切换input type\n:type=\"showPassword ? (passwordVisable ? 'text':'password') : type\"\n```\n\n\n参考：\n\n[关于* core-js/modules/es.array.fill in](https://www.jianshu.com/p/7fbdd031fe85)\n\n[组件传参数](https://blog.csdn.net/l284969634/article/details/78595077)\n\n[表单输入绑定](https://cn.vuejs.org/v2/guide/forms.html)","slug":"vue","published":1,"updated":"2020-10-14T03:46:28.557Z","layout":"post","photos":[],"link":"","_id":"ckj9uenmd001m0wpbuxymb61s","content":"<p><strong>和 Angularjs 比较</strong></p>\n<p>组件开发有更好的生态圈，如Element UI</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-bind:class=&quot;[classA,classB]&quot; 绑定属性 简写 :class=&quot;[classA,classB]&quot;</span><br><span class=\"line\"># 对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</span><br><span class=\"line\">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class=\"line\"># 绑定对象，也可以设置成变量</span><br><span class=\"line\">:class=&quot;&#123;current:true,focus:false&#125;&quot;</span><br><span class=\"line\"># 绑定style</span><br><span class=\"line\">:style=&quot;&#123;color:&apos;red&apos;,fontSize:&apos;18px&apos;&#125;&quot;</span><br><span class=\"line\">&lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回对象的计算属性。这是一个常用且强大的模式：</span><br><span class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">v-if</span><br><span class=\"line\">v-else-if</span><br><span class=\"line\">v-else</span><br><span class=\"line\">// 对一组元素进行if判断</span><br><span class=\"line\">&lt;template v-if=&quot;&quot;&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for=&quot;&#123;(num,index) in items&#125;&quot; :key=&quot;index&quot;&gt;&#123;&#123;k + &apos;-&apos; +v&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p v-for=&quot;&#123;(value,key,index) in obj&#125;&quot; :key=&quot;index&quot;&gt;&#123;&#123;k + &apos;-&apos; +v&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">类似于 v-if，你也可以利用带有 v-for 的 &lt;template&gt; 来循环渲染一段包含多个元素的内容。</span><br><span class=\"line\"></span><br><span class=\"line\">v-on:click=&quot;add&quot; 简写 @:click=&quot;add&quot;</span><br><span class=\"line\">this.$set(newLlist,0,&#123;&#125;)  修改数组0索引值</span><br><span class=\"line\">&lt;div v-once&gt;&lt;/div&gt; 确保这些内容只计算一次</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p><strong>computed计算属性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场景: 某个数据受多个数据影响，不推荐使用函数计算，因为 computed 可以缓存，函数会反复调用，性能低</span><br><span class=\"line\">get()</span><br><span class=\"line\">set() 触发函数</span><br></pre></td></tr></table></figure>\n<p><strong>侦听属性,对象改变触发</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场景: 一个数据变化会影响多个数据</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    language:&#123;</span><br><span class=\"line\">        handler (newval) &#123;\t</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate:true # watch 页面加载就立即执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>组件传参</strong> </p>\n<p>父传子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default&#123;</span><br><span class=\"line\">\t\tname: &quot;MyCoponent1&quot;</span><br><span class=\"line\">\t\t//props: [&quot;text&quot;]</span><br><span class=\"line\">        props:&#123;</span><br><span class=\"line\">        \ttext:&#123;</span><br><span class=\"line\">        \t\ttype: String,</span><br><span class=\"line\">        \t\trequired: true,</span><br><span class=\"line\">        \t\tdefault: &quot;默认字符串&quot;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;my-compoent text=&quot;abcdef&quot;&gt;&lt;/my-compoent&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import MyCompoent from &apos;../compoents/compoent1&apos;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name:&quot;demo12&quot;</span><br><span class=\"line\">        compoents:&#123;</span><br><span class=\"line\">        \tMyCompoent</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>子传父</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;val&quot;&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name:&quot;Compoent2&quot;,</span><br><span class=\"line\">        props: [&apos;msg&apos;], //接收父组件参数</span><br><span class=\"line\">        model: &#123;</span><br><span class=\"line\">            prpo: &apos;msg&apos;,</span><br><span class=\"line\">            event: &apos;on-callback&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return&#123;</span><br><span class=\"line\">                val: this.msg</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            submit()&#123;</span><br><span class=\"line\">                this.$emit(&apos;on-callback&apos;,this.val)//submit事件触发后，自动触发on-callback事件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;子组件与父组件通信&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;my-component</span><br><span class=\"line\">\t\t@on-callback=&quot;getData&quot;</span><br><span class=\"line\">\t&gt;&lt;/my-component&gt; </span><br><span class=\"line\">\t&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MyComponent from &apos;../components/component2&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;demo13&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      content: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">  \tMyComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tgetData(val) &#123;</span><br><span class=\"line\">  \t\tthis.content = val</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>组件插槽 solt</strong></p>\n<p>占位符作用，可以用来接收父组建传递过来的html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;sloat-demo title=&quot;这是标题&quot;&gt;</span><br><span class=\"line\">        &lt;template v-slot:default&gt;</span><br><span class=\"line\">             &lt;div&gt;这是内容&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">        &lt;template v-sloat:demo&gt;</span><br><span class=\"line\">            &lt;button&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">\t\t\t&lt;button&gt;按钮2&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/sloat-demo&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import SlotDemo from &apos;../compoents/...&apos;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name: &quot;demo15&quot;,</span><br><span class=\"line\">        compoents: &#123;</span><br><span class=\"line\">            SlotDemo</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"># 子</span><br><span class=\"line\">&lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">&lt;slot name=&quot;btns&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>动态组件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"currentCompoent = 'Dynamic1'\"</span>&gt;</span>组件1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"currentCompoent = 'Dynamic2'\"</span>&gt;</span>组件2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 保持组件状态 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">compoent</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentCompoent\"</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> DynamicDemo1 <span class=\"keyword\">from</span> <span class=\"string\">'../compoents/..'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> DynamicDemo2 <span class=\"keyword\">from</span> <span class=\"string\">'../compoents/..'</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>组件注册</strong></p>\n<p>全局注册</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&apos;my-component-name&apos;, &#123; /* ... */ &#125;)</span><br></pre></td></tr></table></figure>\n<p>局部注册</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> attribute 即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>transition 动画</strong></p>\n<p><code>&lt;transition name=&quot;slide&quot;&gt;&lt;/transition&gt;标签</code>，会在包括组件 <code>v-enter</code>、<code>v-enter-active</code>、<code>v-enter-to</code>、<code>v-leave</code>、<code>v-leave-to</code>阶段添加class，可以通过 transform来做动画效果, 如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.slide-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.slide-leave-active</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transtion</span>: all <span class=\"number\">300ms</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.slide-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.slide-leave-to</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-100%)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>简单的 store 模式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = &#123;</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setMessageAction (newValue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'setMessageAction triggered with'</span>, newValue)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = newValue</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clearMessageAction () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'clearMessageAction triggered'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 所有 store 中 state 的变更，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的变更将会发生</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>const 异步加载 、import 同步加载</p>\n<p>子路由，页面需要添加: <code>&lt;router-view/&gt;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"regexp\">/demo17/</span>:id?,</span><br><span class=\"line\">\tname:<span class=\"string\">'demo17'</span>,</span><br><span class=\"line\">\tcompoent: Demo17，</span><br><span class=\"line\">\t<span class=\"comment\">// redirect: 'demo6', //重定向</span></span><br><span class=\"line\">\t<span class=\"comment\">// 别名</span></span><br><span class=\"line\">\talias: <span class=\"string\">'/demo17777777'</span>,</span><br><span class=\"line\">\tchildren: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath: <span class=\"string\">':detail'</span>,</span><br><span class=\"line\">\t\t\tname: <span class=\"string\">'detail'</span>,</span><br><span class=\"line\">\t\t\tcompoent: Detail</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过js切换路由</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 通过name切换路由</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path: 'demo5/1234/abcd' //通过path切换路由不能传 params</span></span><br><span class=\"line\">\tname: <span class=\"string\">'demo5'</span>，</span><br><span class=\"line\">\tparams: &#123;</span><br><span class=\"line\">\t\tid: <span class=\"number\">1234</span>,</span><br><span class=\"line\">\t\ttype: <span class=\"string\">'abcd'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tquery:&#123;</span><br><span class=\"line\">\t\tkey:<span class=\"string\">'abcedf'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\thash:<span class=\"string\">\"#ppp\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// replae用法和push一样，replace不会产生历史记录</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// router-link的to属性也能跟push一样使用</span></span><br><span class=\"line\">&lt;router-link :to=<span class=\"string\">\"&#123;&#125;\"</span>&gt;link&lt;<span class=\"regexp\">/router-link&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 路由匹配从上到下，匹配不到就到 404 这条</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:&apos;*&apos;,</span><br><span class=\"line\">\tname:&apos;Notfound&apos;,</span><br><span class=\"line\">\tcomponent: NotFound</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>全局路由钩子函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由跳转前钩子函数</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)  =&gt;</span>  &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEach 即将进入'</span> + to.path + <span class=\"string\">'页面'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// to 目标路由</span></span><br><span class=\"line\">\t<span class=\"comment\">// from前一个路由</span></span><br><span class=\"line\">\t<span class=\"comment\">// next 必须执行next方法，才能跳转路由</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(),跳转到to对应路由</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(false),不跳转，停留在当前页面</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(xxx),跳转到xxx页面</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.name ==== <span class=\"string\">'demo6'</span>)&#123;</span><br><span class=\"line\">\t\tnext(<span class=\"string\">'demo5'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnext()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 路由跳转后钩子函数</span></span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'afterEach 进入了'</span> + to.path + <span class=\"string\">'页面'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>单独路由钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">'/demo6'</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">'demo6'</span>,</span><br><span class=\"line\">\tcomponent: Demo6,</span><br><span class=\"line\">\tbeforeEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEnter: 即将进入demo6'</span>)</span><br><span class=\"line\">\t\tnext()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件里单独写钩子函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouterEnter(to,from,next) &#123;</span><br><span class=\"line\">\t// beforeRouterEnter 读取不到this</span><br><span class=\"line\">\tconsole.log(&apos;beforeRouterEnter: 即将进入&apos;)</span><br><span class=\"line\">\tnext(vm =&gt;&#123;</span><br><span class=\"line\">\t\tconsole.log(vm.text)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 路由更新，参数有变化时候触发</span><br><span class=\"line\">beforeRouterUpdate(to,from,next) &#123;</span><br><span class=\"line\">\t// beforeRouterUpdate 可以读取到this</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>组件生命周期</strong></p>\n<ol>\n<li><code>beforeCreate</code>：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li>\n<li><code>created</code>：在实例创建完成后被立即调用。在这一步，实例已完成数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。</li>\n<li><code>beforeMount</code>：在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</li>\n<li><code>mounted</code>：实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。</li>\n<li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 打补丁之前。</li>\n<li><code>updated</code>：虚拟 DOM 重新渲染和打补丁之后。</li>\n<li><code>beforeDestory</code>：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destoryed</code>：实例销毁后调用。对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</li>\n</ol>\n<p><strong>http 请求</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      info: null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(&apos;https://api.coindesk.com/v1/bpi/currentprice.json&apos;)</span><br><span class=\"line\">      .then(response =&gt; (this.info = response))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; info &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p><strong>箭头函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Vue-cli</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kolaente/yarn</span><br><span class=\"line\"><span class=\"comment\">// yarn add [package]@[version]</span></span><br><span class=\"line\">yarn global add @vue/cli</span><br><span class=\"line\">vue create hello-world</span><br><span class=\"line\">cd hello-word &amp;&amp; yarn serve</span><br><span class=\"line\"></span><br><span class=\"line\">$vue --version</span><br><span class=\"line\">@vue/cli <span class=\"number\">4.5</span><span class=\"number\">.3</span></span><br></pre></td></tr></table></figure>\n<p><strong>vue-cli 修改打包路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/@vue/cli-service/lib/options.js:83:  publicPath: &apos;./&apos;,</span><br></pre></td></tr></table></figure>\n<p><strong>Element</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S</span><br><span class=\"line\"><span class=\"comment\"># 按需引入</span></span><br><span class=\"line\">npm install babel-plugin-component -D</span><br><span class=\"line\">babel.config.js 里添加</span><br><span class=\"line\"><span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"component\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">\"element-ui\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"styleLibraryName\"</span>: <span class=\"string\">\"theme-chalk\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><p><strong>button</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组件里的内容使用 solt 定义</span><br><span class=\"line\">通过 props 定义按钮type 如: primary、success、info、warning</span><br><span class=\"line\">:class=&quot;[`hm-button--$&#123;type&#125;`,&#123;&apos;is_plain&apos;:plain&#125;]&quot; #ES6 引入了模板字符串</span><br><span class=\"line\">&lt;i v-if=&quot;icon&quot; :class=&quot;icon&quot;&gt;&lt;/i&gt; </span><br><span class=\"line\">&lt;span v-if=&quot;$slots.default&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt; #判断插槽是否传值</span><br><span class=\"line\">#父</span><br><span class=\"line\">&lt;hm-button @click=&quot;fn&quot;&gt;&lt;/hm-button&gt;</span><br><span class=\"line\">#子</span><br><span class=\"line\">@click=&quot;handleClick&quot;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\thandleClick(e)&#123;</span><br><span class=\"line\">\t\tthis.$emit(&apos;click&apos;,e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dialog</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 父组件传solt参数就覆盖，不传就显示span里的内容</span><br><span class=\"line\">&lt;slot name=&quot;title&quot;&gt;</span><br><span class=\"line\">\t&lt;span&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/slot&gt;</span><br><span class=\"line\">&lt;div :style=&quot;&#123;width:width,top:top&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 提示框内容使用默认插槽</span><br><span class=\"line\">&lt;h-dialog&gt;内容&lt;/h-dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@click.self=&quot;fun3&quot; # 阻止冒泡</span><br></pre></td></tr></table></figure>\n<p><strong>sync修饰符</strong> 子组件修改父组件数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@click=&quot;fn&quot;</span><br><span class=\"line\">this.$emit(&apos;aa&apos;,200 )</span><br><span class=\"line\"></span><br><span class=\"line\"># sync 语法糖，直接修改父组件值相当于</span><br><span class=\"line\">&lt;hm-dialog :visable=&quot;visable&quot; @update:visable=&quot;fn1&quot;&gt;&lt;/hm-dialog&gt; </span><br><span class=\"line\">&lt;hm-dialog :visable.sync=&quot;visable&quot;&gt;&lt;/hm-dialog&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>vue.compoent vs vue.use</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(plugin), plugin格式为&#123;install: function () &#123;&#125;&#125;，则运行install方法，若plugin本身是function则直接运行。Vue.component才是真正的去注册组件。很多UI库用Vue.use来注册组件是因为在plugin的install方法中去执行Vue.component罢了</span><br></pre></td></tr></table></figure>\n<p><strong>v-model 是个语法糖</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; :value=&quot;username&quot; @input=&quot;username=$event.targe.value&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">实现 v-model</span><br><span class=\"line\"># 子</span><br><span class=\"line\">:value=&quot;value&quot;</span><br><span class=\"line\">@input=&quot;handleInput&quot;</span><br><span class=\"line\">handleInput(e)&#123;</span><br><span class=\"line\">\tthis.$emit(&apos;input&apos;,e.target.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 父</span><br><span class=\"line\">v-model=&quot;user&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换input type</span><br><span class=\"line\">:type=&quot;showPassword ? (passwordVisable ? &apos;text&apos;:&apos;password&apos;) : type&quot;</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/7fbdd031fe85\" target=\"_blank\" rel=\"noopener\">关于* core-js/modules/es.array.fill in</a></p>\n<p><a href=\"https://blog.csdn.net/l284969634/article/details/78595077\" target=\"_blank\" rel=\"noopener\">组件传参数</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">表单输入绑定</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>和 Angularjs 比较</strong></p>\n<p>组件开发有更好的生态圈，如Element UI</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-bind:class=&quot;[classA,classB]&quot; 绑定属性 简写 :class=&quot;[classA,classB]&quot;</span><br><span class=\"line\"># 对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</span><br><span class=\"line\">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class=\"line\"># 绑定对象，也可以设置成变量</span><br><span class=\"line\">:class=&quot;&#123;current:true,focus:false&#125;&quot;</span><br><span class=\"line\"># 绑定style</span><br><span class=\"line\">:style=&quot;&#123;color:&apos;red&apos;,fontSize:&apos;18px&apos;&#125;&quot;</span><br><span class=\"line\">&lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回对象的计算属性。这是一个常用且强大的模式：</span><br><span class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">v-if</span><br><span class=\"line\">v-else-if</span><br><span class=\"line\">v-else</span><br><span class=\"line\">// 对一组元素进行if判断</span><br><span class=\"line\">&lt;template v-if=&quot;&quot;&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for=&quot;&#123;(num,index) in items&#125;&quot; :key=&quot;index&quot;&gt;&#123;&#123;k + &apos;-&apos; +v&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p v-for=&quot;&#123;(value,key,index) in obj&#125;&quot; :key=&quot;index&quot;&gt;&#123;&#123;k + &apos;-&apos; +v&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">类似于 v-if，你也可以利用带有 v-for 的 &lt;template&gt; 来循环渲染一段包含多个元素的内容。</span><br><span class=\"line\"></span><br><span class=\"line\">v-on:click=&quot;add&quot; 简写 @:click=&quot;add&quot;</span><br><span class=\"line\">this.$set(newLlist,0,&#123;&#125;)  修改数组0索引值</span><br><span class=\"line\">&lt;div v-once&gt;&lt;/div&gt; 确保这些内容只计算一次</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p><strong>computed计算属性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场景: 某个数据受多个数据影响，不推荐使用函数计算，因为 computed 可以缓存，函数会反复调用，性能低</span><br><span class=\"line\">get()</span><br><span class=\"line\">set() 触发函数</span><br></pre></td></tr></table></figure>\n<p><strong>侦听属性,对象改变触发</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场景: 一个数据变化会影响多个数据</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    language:&#123;</span><br><span class=\"line\">        handler (newval) &#123;\t</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate:true # watch 页面加载就立即执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>组件传参</strong> </p>\n<p>父传子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;p&gt;&#123;&#123;text&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\texport default&#123;</span><br><span class=\"line\">\t\tname: &quot;MyCoponent1&quot;</span><br><span class=\"line\">\t\t//props: [&quot;text&quot;]</span><br><span class=\"line\">        props:&#123;</span><br><span class=\"line\">        \ttext:&#123;</span><br><span class=\"line\">        \t\ttype: String,</span><br><span class=\"line\">        \t\trequired: true,</span><br><span class=\"line\">        \t\tdefault: &quot;默认字符串&quot;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;my-compoent text=&quot;abcdef&quot;&gt;&lt;/my-compoent&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import MyCompoent from &apos;../compoents/compoent1&apos;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name:&quot;demo12&quot;</span><br><span class=\"line\">        compoents:&#123;</span><br><span class=\"line\">        \tMyCompoent</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>子传父</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 子</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;val&quot;&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name:&quot;Compoent2&quot;,</span><br><span class=\"line\">        props: [&apos;msg&apos;], //接收父组件参数</span><br><span class=\"line\">        model: &#123;</span><br><span class=\"line\">            prpo: &apos;msg&apos;,</span><br><span class=\"line\">            event: &apos;on-callback&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\">            return&#123;</span><br><span class=\"line\">                val: this.msg</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            submit()&#123;</span><br><span class=\"line\">                this.$emit(&apos;on-callback&apos;,this.val)//submit事件触发后，自动触发on-callback事件</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;子组件与父组件通信&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;my-component</span><br><span class=\"line\">\t\t@on-callback=&quot;getData&quot;</span><br><span class=\"line\">\t&gt;&lt;/my-component&gt; </span><br><span class=\"line\">\t&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MyComponent from &apos;../components/component2&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;demo13&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      content: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">  \tMyComponent</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tgetData(val) &#123;</span><br><span class=\"line\">  \t\tthis.content = val</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>组件插槽 solt</strong></p>\n<p>占位符作用，可以用来接收父组建传递过来的html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 父</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;sloat-demo title=&quot;这是标题&quot;&gt;</span><br><span class=\"line\">        &lt;template v-slot:default&gt;</span><br><span class=\"line\">             &lt;div&gt;这是内容&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">        &lt;template v-sloat:demo&gt;</span><br><span class=\"line\">            &lt;button&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">\t\t\t&lt;button&gt;按钮2&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">    &lt;/sloat-demo&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import SlotDemo from &apos;../compoents/...&apos;</span><br><span class=\"line\">    export default&#123;</span><br><span class=\"line\">        name: &quot;demo15&quot;,</span><br><span class=\"line\">        compoents: &#123;</span><br><span class=\"line\">            SlotDemo</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"># 子</span><br><span class=\"line\">&lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">&lt;slot name=&quot;btns&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>动态组件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"currentCompoent = 'Dynamic1'\"</span>&gt;</span>组件1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"currentCompoent = 'Dynamic2'\"</span>&gt;</span>组件2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 保持组件状态 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">compoent</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentCompoent\"</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> DynamicDemo1 <span class=\"keyword\">from</span> <span class=\"string\">'../compoents/..'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">import</span> DynamicDemo2 <span class=\"keyword\">from</span> <span class=\"string\">'../compoents/..'</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>组件注册</strong></p>\n<p>全局注册</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&apos;my-component-name&apos;, &#123; /* ... */ &#125;)</span><br></pre></td></tr></table></figure>\n<p>局部注册</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ComponentA = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ComponentB = &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'component-a'</span>: ComponentA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> attribute 即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>transition 动画</strong></p>\n<p><code>&lt;transition name=&quot;slide&quot;&gt;&lt;/transition&gt;标签</code>，会在包括组件 <code>v-enter</code>、<code>v-enter-active</code>、<code>v-enter-to</code>、<code>v-leave</code>、<code>v-leave-to</code>阶段添加class，可以通过 transform来做动画效果, 如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.slide-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.slide-leave-active</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">transtion</span>: all <span class=\"number\">300ms</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.slide-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.slide-leave-to</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-100%)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>简单的 store 模式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = &#123;</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">'Hello!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setMessageAction (newValue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'setMessageAction triggered with'</span>, newValue)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = newValue</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  clearMessageAction () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.debug) <span class=\"built_in\">console</span>.log(<span class=\"string\">'clearMessageAction triggered'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.message = <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 所有 store 中 state 的变更，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的变更将会发生</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>const 异步加载 、import 同步加载</p>\n<p>子路由，页面需要添加: <code>&lt;router-view/&gt;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"regexp\">/demo17/</span>:id?,</span><br><span class=\"line\">\tname:<span class=\"string\">'demo17'</span>,</span><br><span class=\"line\">\tcompoent: Demo17，</span><br><span class=\"line\">\t<span class=\"comment\">// redirect: 'demo6', //重定向</span></span><br><span class=\"line\">\t<span class=\"comment\">// 别名</span></span><br><span class=\"line\">\talias: <span class=\"string\">'/demo17777777'</span>,</span><br><span class=\"line\">\tchildren: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath: <span class=\"string\">':detail'</span>,</span><br><span class=\"line\">\t\t\tname: <span class=\"string\">'detail'</span>,</span><br><span class=\"line\">\t\t\tcompoent: Detail</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过js切换路由</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 通过name切换路由</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path: 'demo5/1234/abcd' //通过path切换路由不能传 params</span></span><br><span class=\"line\">\tname: <span class=\"string\">'demo5'</span>，</span><br><span class=\"line\">\tparams: &#123;</span><br><span class=\"line\">\t\tid: <span class=\"number\">1234</span>,</span><br><span class=\"line\">\t\ttype: <span class=\"string\">'abcd'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tquery:&#123;</span><br><span class=\"line\">\t\tkey:<span class=\"string\">'abcedf'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\thash:<span class=\"string\">\"#ppp\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// replae用法和push一样，replace不会产生历史记录</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// router-link的to属性也能跟push一样使用</span></span><br><span class=\"line\">&lt;router-link :to=<span class=\"string\">\"&#123;&#125;\"</span>&gt;link&lt;<span class=\"regexp\">/router-link&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 路由匹配从上到下，匹配不到就到 404 这条</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:&apos;*&apos;,</span><br><span class=\"line\">\tname:&apos;Notfound&apos;,</span><br><span class=\"line\">\tcomponent: NotFound</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>全局路由钩子函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由跳转前钩子函数</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)  =&gt;</span>  &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEach 即将进入'</span> + to.path + <span class=\"string\">'页面'</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// to 目标路由</span></span><br><span class=\"line\">\t<span class=\"comment\">// from前一个路由</span></span><br><span class=\"line\">\t<span class=\"comment\">// next 必须执行next方法，才能跳转路由</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(),跳转到to对应路由</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(false),不跳转，停留在当前页面</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行next(xxx),跳转到xxx页面</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.name ==== <span class=\"string\">'demo6'</span>)&#123;</span><br><span class=\"line\">\t\tnext(<span class=\"string\">'demo5'</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnext()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 路由跳转后钩子函数</span></span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'afterEach 进入了'</span> + to.path + <span class=\"string\">'页面'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>单独路由钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath: <span class=\"string\">'/demo6'</span>,</span><br><span class=\"line\">\tname: <span class=\"string\">'demo6'</span>,</span><br><span class=\"line\">\tcomponent: Demo6,</span><br><span class=\"line\">\tbeforeEnter(to,<span class=\"keyword\">from</span>,next)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEnter: 即将进入demo6'</span>)</span><br><span class=\"line\">\t\tnext()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件里单独写钩子函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouterEnter(to,from,next) &#123;</span><br><span class=\"line\">\t// beforeRouterEnter 读取不到this</span><br><span class=\"line\">\tconsole.log(&apos;beforeRouterEnter: 即将进入&apos;)</span><br><span class=\"line\">\tnext(vm =&gt;&#123;</span><br><span class=\"line\">\t\tconsole.log(vm.text)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 路由更新，参数有变化时候触发</span><br><span class=\"line\">beforeRouterUpdate(to,from,next) &#123;</span><br><span class=\"line\">\t// beforeRouterUpdate 可以读取到this</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>组件生命周期</strong></p>\n<ol>\n<li><code>beforeCreate</code>：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li>\n<li><code>created</code>：在实例创建完成后被立即调用。在这一步，实例已完成数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。</li>\n<li><code>beforeMount</code>：在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</li>\n<li><code>mounted</code>：实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。</li>\n<li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 打补丁之前。</li>\n<li><code>updated</code>：虚拟 DOM 重新渲染和打补丁之后。</li>\n<li><code>beforeDestory</code>：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li><code>destoryed</code>：实例销毁后调用。对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</li>\n</ol>\n<p><strong>http 请求</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      info: null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(&apos;https://api.coindesk.com/v1/bpi/currentprice.json&apos;)</span><br><span class=\"line\">      .then(response =&gt; (this.info = response))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; info &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p><strong>箭头函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>Vue-cli</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull kolaente/yarn</span><br><span class=\"line\"><span class=\"comment\">// yarn add [package]@[version]</span></span><br><span class=\"line\">yarn global add @vue/cli</span><br><span class=\"line\">vue create hello-world</span><br><span class=\"line\">cd hello-word &amp;&amp; yarn serve</span><br><span class=\"line\"></span><br><span class=\"line\">$vue --version</span><br><span class=\"line\">@vue/cli <span class=\"number\">4.5</span><span class=\"number\">.3</span></span><br></pre></td></tr></table></figure>\n<p><strong>vue-cli 修改打包路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/@vue/cli-service/lib/options.js:83:  publicPath: &apos;./&apos;,</span><br></pre></td></tr></table></figure>\n<p><strong>Element</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S</span><br><span class=\"line\"><span class=\"comment\"># 按需引入</span></span><br><span class=\"line\">npm install babel-plugin-component -D</span><br><span class=\"line\">babel.config.js 里添加</span><br><span class=\"line\"><span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"component\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">\"element-ui\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"styleLibraryName\"</span>: <span class=\"string\">\"theme-chalk\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h2 id=\"组件开发\"><a href=\"#组件开发\" class=\"headerlink\" title=\"组件开发\"></a>组件开发</h2><p><strong>button</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组件里的内容使用 solt 定义</span><br><span class=\"line\">通过 props 定义按钮type 如: primary、success、info、warning</span><br><span class=\"line\">:class=&quot;[`hm-button--$&#123;type&#125;`,&#123;&apos;is_plain&apos;:plain&#125;]&quot; #ES6 引入了模板字符串</span><br><span class=\"line\">&lt;i v-if=&quot;icon&quot; :class=&quot;icon&quot;&gt;&lt;/i&gt; </span><br><span class=\"line\">&lt;span v-if=&quot;$slots.default&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt; #判断插槽是否传值</span><br><span class=\"line\">#父</span><br><span class=\"line\">&lt;hm-button @click=&quot;fn&quot;&gt;&lt;/hm-button&gt;</span><br><span class=\"line\">#子</span><br><span class=\"line\">@click=&quot;handleClick&quot;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\thandleClick(e)&#123;</span><br><span class=\"line\">\t\tthis.$emit(&apos;click&apos;,e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>dialog</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 父组件传solt参数就覆盖，不传就显示span里的内容</span><br><span class=\"line\">&lt;slot name=&quot;title&quot;&gt;</span><br><span class=\"line\">\t&lt;span&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/slot&gt;</span><br><span class=\"line\">&lt;div :style=&quot;&#123;width:width,top:top&#125;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 提示框内容使用默认插槽</span><br><span class=\"line\">&lt;h-dialog&gt;内容&lt;/h-dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@click.self=&quot;fun3&quot; # 阻止冒泡</span><br></pre></td></tr></table></figure>\n<p><strong>sync修饰符</strong> 子组件修改父组件数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@click=&quot;fn&quot;</span><br><span class=\"line\">this.$emit(&apos;aa&apos;,200 )</span><br><span class=\"line\"></span><br><span class=\"line\"># sync 语法糖，直接修改父组件值相当于</span><br><span class=\"line\">&lt;hm-dialog :visable=&quot;visable&quot; @update:visable=&quot;fn1&quot;&gt;&lt;/hm-dialog&gt; </span><br><span class=\"line\">&lt;hm-dialog :visable.sync=&quot;visable&quot;&gt;&lt;/hm-dialog&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>vue.compoent vs vue.use</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(plugin), plugin格式为&#123;install: function () &#123;&#125;&#125;，则运行install方法，若plugin本身是function则直接运行。Vue.component才是真正的去注册组件。很多UI库用Vue.use来注册组件是因为在plugin的install方法中去执行Vue.component罢了</span><br></pre></td></tr></table></figure>\n<p><strong>v-model 是个语法糖</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; :value=&quot;username&quot; @input=&quot;username=$event.targe.value&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">实现 v-model</span><br><span class=\"line\"># 子</span><br><span class=\"line\">:value=&quot;value&quot;</span><br><span class=\"line\">@input=&quot;handleInput&quot;</span><br><span class=\"line\">handleInput(e)&#123;</span><br><span class=\"line\">\tthis.$emit(&apos;input&apos;,e.target.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 父</span><br><span class=\"line\">v-model=&quot;user&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换input type</span><br><span class=\"line\">:type=&quot;showPassword ? (passwordVisable ? &apos;text&apos;:&apos;password&apos;) : type&quot;</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"https://www.jianshu.com/p/7fbdd031fe85\" target=\"_blank\" rel=\"noopener\">关于* core-js/modules/es.array.fill in</a></p>\n<p><a href=\"https://blog.csdn.net/l284969634/article/details/78595077\" target=\"_blank\" rel=\"noopener\">组件传参数</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">表单输入绑定</a></p>"},{"title":"Prometheus入门","description":"","date":"2019-02-01T19:46:10.000Z","comments":0,"share":true,"_content":"\n### 数据模型\n\n**时序索引** 名称+标签\n\n**时序样本**  float64 值\n\n**格式**: \n\n```\n<metric name>{<label name>=<label value>, ...}\n```\n\nPrometheus 时序数据分为 [Counter](https://prometheus.io/docs/concepts/metric_types/#counter), [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge), [Histogram](https://prometheus.io/docs/concepts/metric_types/#histogram), [Summary](https://prometheus.io/docs/concepts/metric_types/#summary) 四种类型。\n\n```\nmetric_name [\n  \"{\" label_name \"=\" `\"` label_value `\"` { \",\" label_name \"=\" `\"` label_value `\"` } [ \",\" ] \"}\"\n] value [ timestamp ]\n```\n\n\n\n**Counter**\n\n```\n# 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -\n# HELP sample_http_requests_total The total number of HTTP requests.\n# TYPE sample_http_requests_total counter\nsample_http_requests_total{method=\"post\",code=\"200\"} 1027 1568018567000\nsample_http_requests_total{method=\"post\",code=\"400\"}    3 1568018567000\nidelta(sample_http_requests_total[1m]) 获取和一分钟前的差距\n```\n\n\n\n**Gauge**\n\nGauge不能解决并发问题\n\n\n\n\n\n**向量**\n\n一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：\n\n![img](https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp)\n\n我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。\n\n\n\n时间戳根据时区不同，会转换成不同的日期时间.\n\n\n\n**PromQL**\n\n```\n#CPU 个数\ncount(count(node_cpu_seconds_total{instance=\"172.16.101.209:9100\",mode=\"system\"}) by (cpu))\n#内存使用率\n(1 - (node_memory_MemAvailable_bytes{instance=~\"$node\"} / (node_memory_MemTotal_bytes{instance=~\"$node\"})))* 100\n#cpu空闲率\navg(rate(node_cpu_seconds_total{mode=\"idle\"}[2m])) by (instance)\n#offset25 一分钟前后值差异\ndelta(sample_http_requests_total{code=\"200\"} [1m] offset 25m ) \n\ngauge\nsum without(device, fstype, mountpoint)(node_filesystem_size_bytes)\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\navg without(instance, job)(process_open_fds)\n\ncounter\n#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值\nrate(node_network_receive_bytes_total[5m])\nThe output of rate is a gauge, so the same aggregations apply as for gauges.\nsum without(device)(rate(node_network_receive_bytes_total[5m]))\n\n//通过rate()函数获取HTTP请求量的增长率\nrate(http_requests_total[5m])\n//查询当前系统中，访问量前10的HTTP地址\ntopk(10, http_requests_total)\n\ncount without(instance)(process_open_fds > 10)\n```\n\n\n\n**CPU 参数**\n\n```\ntype就是CPU的不同状态值\nidle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal\n其中idle表示空闲，user表示用户使用\n```\n\n\n\n**prometheus rules**\n\n```\ngroups:\n- name: container-restart\n  rules:\n  - alert: Containers Restarts (Last 30 Minutes)\n    expr: |\n      delta(kube_pod_container_status_restarts_total{}[30m])>0  \n    for: 5m\n    labels:\n      severity: warning\n      team: DevOps\n    annotations:\n      summary: \"Instance {{ $labels.instance }} down\"\n      description: \"{{$labels.namespace}}/{{$labels.pod}} has many containers restarts in last 30 minutes\"\n```\n\n\n\n**alertManager**\n\n```\nglobal:\n  smtp_smarthost: 'smtp.qq.com:465'\n  smtp_from: '532499602@qq.com'\n  smtp_auth_username: 'weihaozhe@aa.net'\n  smtp_auth_password: ''\n  smtp_require_tls: false\nroute:\n  group_by: ['alertname']\n  group_wait: 1m\n  group_interval: 10m\n  repeat_interval: 10m\n  receiver: default-receiver\nreceivers:\n- name: 'default-receiver'\n  email_configs:\n  - to: 'air_zhe@163.com'\n\n```\n\n**configMap reload**\n\n```\nhttps://github.com/jimmidyson/configmap-reload/tree/v0.2.2\n```\n\n\n一台Prometheus服务器每秒可以摄取数百万个样本.\n\n\nPrometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。\n\n\n\n官方对非官方\n不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。\n作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。\n\n\n\n存储\n\n建议使用SSD，但并非严格要求。\n\n\n\n计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是`rate`函数的作用。该`rate`函数计算计数器每秒增加的速度。将表达式调整为 **rate(prometheus_tsdb_head_samples_appended_total[1m])**，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本\n\n\n\n量具有三种主要方法 使用：`inc`，`dec`和`set`\n\n量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。\n\n\n\n```\nLAST.set(time.time())\nPromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。\n```\n\n请求进来inc ,结束des 计算请求数\n\n\n\n**摘要**\n\n摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。\n\n```\nhello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。\n\nhello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。\n\n如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：\nrate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）\n```\n\n\n\n**直方图**\n\n直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。\n\n直方图指标还包括`_sum`和`_count`指标，它们的工作原理与摘要指标完全相同。\n\n摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。\n\n在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。\n\n\n\n默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。\n\n\n\n\n\nSummary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。\n\n同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0<= 分位数Quantiles <= 1.0。\n\n不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。\n\n\n\n\n\n**标签**\n\n对于HTTP状态代码，而不是`code~=\"4..\"`捕获401s，404s，405s等，您可以将它们组合为标签值`4xx`并使用相等匹配器`code=\"4xx\"`。\n\n\n\n**聚合运算符**\n\n```\nsum without()(node_filesystem_size_bytes)\nsum by(job, instance, device)(node_filesystem_size_bytes)\nsum without(fstype, mountpoint, device)(node_filesystem_size_bytes)\ncount without(device)(node_disk_read_bytes_total)\navg without(cpu)(rate(node_cpu_seconds_total[5m]))\n等于\n  sum without(cpu)(rate(node_cpu_seconds_total[5m]))\n/\n  count without(cpu)(rate(node_cpu_seconds_total[5m]))\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\n\ntopk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)\n分位数\nquantile without(cpu)(0.9, rate(node_cpu_seconds_total{mode=\"system\"}[5m]))\n```\n\n\n**k8s服务发现**\n要想自动发现集群中的 Service，就需要我们在 Service 的annotation区域添加：prometheus.io/scrape=true的声明\n要想自动发现集群中的 pod，也需要我们在 pod 的annotation区域添加：prometheus.io/scrape=true的声明\n\n```\nkind: Service\napiVersion: v1\nmetadata:\n  annotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"9121\"\n  name: redis\n  namespace: kube-system\n```\n\n**实战**\n```\n# 两分钟的增长率×60,为什么×60呢？因为为是按秒求的平均值，还原一分钟的就要乘以60，另外prometheus默认1分钟刮一次数据\nirate(user_behavior_request_counter[2m])*60\n\n# 统计loki某个job的日志数（通过sum by把不同日期的数据求和，通过count_over_time统计区间向量内每个度量指标的样本数据个数）\nsum(count_over_time({job=\"${job}\"} |~\"(?i)${search}\" [$__interval])) by (job)\n\n# 统计counter类型增长曲线(注意使用变量报警不支持)高版grafana可以使用$__rate_interval, 这个时间和 prometheus 的采集时间设置有关，比如1分钟采集一次，这个值要大于60s\nrate(my_test_counter[$__rate_interval])*$__interval_ms/1000\n\n# 统计counter类型一分钟内的增长数\nincrease(mysql2es_inserted_num[1m])\n# 在grafana 中设置`Min interval`为1m，设置Display为Bar\n\n# 按每半小时统计增长数，在grafana使用total计算总数，设置`Min interval`为30m\nincrease(SOA_SMS_SEND_ANY{attr=\"message_publish\"}[30m]  offset 1d)\n```\n\n通过增长率表示样本的变化情况\n\nincrease(v range-vector)函数是PromQL中提供的众多内置函数之一。其中参数v是一个区间向量，increase函数获取区间向量中的第一个后最后一个样本并返回其增长量。因此，可以通过以下表达式Counter类型指标的增长率：\n\nincrease(node_cpu[2m]) / 120\n\n**标签替换**\n```\n该函数会依次对 v 中的每一条时间序列进行处理，通过 regex 匹配 src_label 的值，并将匹配部分 relacement 写入到 dst_label 标签中。如下所示：\n\nlabel_replace(up, \"host\", \"$1\", \"instance\",  \"(.*):.*\")\n函数处理后，时间序列将包含一个 host 标签，host 标签的值为 Exporter 实例的 IP 地址：\n\nup{host=\"localhost\",instance=\"localhost:8080\",job=\"cadvisor\"}   1\nup{host=\"localhost\",instance=\"localhost:9090\",job=\"prometheus\"}   1\nup{host=\"localhost\",instance=\"localhost:9100\",job=\"node\"}   1$$\n\nlabel_replace(BIW_SHT_QUEUE_DELIVERY_ORDER_OUT, \"attr\", \"$1\", \"attr\",  \".*_(.*)\")\n```\n\n\n**consul 配置**\n```yaml\n    - consul_sd_configs:\n      - server: consul.kube-public:8500\n        services: []\n      job_name: consul-prometheus\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_consul_service_metadata_(.+)\n      - action: replace\n        regex: ^(.+)$\n        replacement: $1\n        source_labels:\n        - __meta_consul_service_metadata_metrics\n        target_label: __metrics_path__\n```\n\n**consul 注册服务**\n```sh\ncurl -X PUT -d '{\"id\":\"minion-1\",\"name\":\"minio\",\"address\":\"10.2.4.1\",\"port\":9000,\"meta\":{\"app\":\"minio\",\"team\":\"soa\",\"metrics\":\"/minio/prometheus/metrics\"}}'  http://consul.t1.abc.net/v1/agent/service/register\n```\n\n参考：\n\nhttps://mojotv.cn/go/prometheus-client-for-go\n\n[Prometheus 通过 consul 实现自动服务发现](https://blog.csdn.net/aixiaoyang168/article/details/103022342)","source":"_posts/prometheus.md","raw":"---\ntitle: \"Prometheus入门\"\ndescription: \"\"\ndate: 2019-02-01 19:46:10\ntags: [prometheus,监控,consul]\ncomments: false\nshare: true\n---\n\n### 数据模型\n\n**时序索引** 名称+标签\n\n**时序样本**  float64 值\n\n**格式**: \n\n```\n<metric name>{<label name>=<label value>, ...}\n```\n\nPrometheus 时序数据分为 [Counter](https://prometheus.io/docs/concepts/metric_types/#counter), [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge), [Histogram](https://prometheus.io/docs/concepts/metric_types/#histogram), [Summary](https://prometheus.io/docs/concepts/metric_types/#summary) 四种类型。\n\n```\nmetric_name [\n  \"{\" label_name \"=\" `\"` label_value `\"` { \",\" label_name \"=\" `\"` label_value `\"` } [ \",\" ] \"}\"\n] value [ timestamp ]\n```\n\n\n\n**Counter**\n\n```\n# 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -\n# HELP sample_http_requests_total The total number of HTTP requests.\n# TYPE sample_http_requests_total counter\nsample_http_requests_total{method=\"post\",code=\"200\"} 1027 1568018567000\nsample_http_requests_total{method=\"post\",code=\"400\"}    3 1568018567000\nidelta(sample_http_requests_total[1m]) 获取和一分钟前的差距\n```\n\n\n\n**Gauge**\n\nGauge不能解决并发问题\n\n\n\n\n\n**向量**\n\n一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：\n\n![img](https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp)\n\n我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。\n\n\n\n时间戳根据时区不同，会转换成不同的日期时间.\n\n\n\n**PromQL**\n\n```\n#CPU 个数\ncount(count(node_cpu_seconds_total{instance=\"172.16.101.209:9100\",mode=\"system\"}) by (cpu))\n#内存使用率\n(1 - (node_memory_MemAvailable_bytes{instance=~\"$node\"} / (node_memory_MemTotal_bytes{instance=~\"$node\"})))* 100\n#cpu空闲率\navg(rate(node_cpu_seconds_total{mode=\"idle\"}[2m])) by (instance)\n#offset25 一分钟前后值差异\ndelta(sample_http_requests_total{code=\"200\"} [1m] offset 25m ) \n\ngauge\nsum without(device, fstype, mountpoint)(node_filesystem_size_bytes)\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\navg without(instance, job)(process_open_fds)\n\ncounter\n#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值\nrate(node_network_receive_bytes_total[5m])\nThe output of rate is a gauge, so the same aggregations apply as for gauges.\nsum without(device)(rate(node_network_receive_bytes_total[5m]))\n\n//通过rate()函数获取HTTP请求量的增长率\nrate(http_requests_total[5m])\n//查询当前系统中，访问量前10的HTTP地址\ntopk(10, http_requests_total)\n\ncount without(instance)(process_open_fds > 10)\n```\n\n\n\n**CPU 参数**\n\n```\ntype就是CPU的不同状态值\nidle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal\n其中idle表示空闲，user表示用户使用\n```\n\n\n\n**prometheus rules**\n\n```\ngroups:\n- name: container-restart\n  rules:\n  - alert: Containers Restarts (Last 30 Minutes)\n    expr: |\n      delta(kube_pod_container_status_restarts_total{}[30m])>0  \n    for: 5m\n    labels:\n      severity: warning\n      team: DevOps\n    annotations:\n      summary: \"Instance {{ $labels.instance }} down\"\n      description: \"{{$labels.namespace}}/{{$labels.pod}} has many containers restarts in last 30 minutes\"\n```\n\n\n\n**alertManager**\n\n```\nglobal:\n  smtp_smarthost: 'smtp.qq.com:465'\n  smtp_from: '532499602@qq.com'\n  smtp_auth_username: 'weihaozhe@aa.net'\n  smtp_auth_password: ''\n  smtp_require_tls: false\nroute:\n  group_by: ['alertname']\n  group_wait: 1m\n  group_interval: 10m\n  repeat_interval: 10m\n  receiver: default-receiver\nreceivers:\n- name: 'default-receiver'\n  email_configs:\n  - to: 'air_zhe@163.com'\n\n```\n\n**configMap reload**\n\n```\nhttps://github.com/jimmidyson/configmap-reload/tree/v0.2.2\n```\n\n\n一台Prometheus服务器每秒可以摄取数百万个样本.\n\n\nPrometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。\n\n\n\n官方对非官方\n不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。\n作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。\n\n\n\n存储\n\n建议使用SSD，但并非严格要求。\n\n\n\n计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是`rate`函数的作用。该`rate`函数计算计数器每秒增加的速度。将表达式调整为 **rate(prometheus_tsdb_head_samples_appended_total[1m])**，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本\n\n\n\n量具有三种主要方法 使用：`inc`，`dec`和`set`\n\n量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。\n\n\n\n```\nLAST.set(time.time())\nPromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。\n```\n\n请求进来inc ,结束des 计算请求数\n\n\n\n**摘要**\n\n摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。\n\n```\nhello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。\n\nhello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。\n\n如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：\nrate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）\n```\n\n\n\n**直方图**\n\n直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。\n\n直方图指标还包括`_sum`和`_count`指标，它们的工作原理与摘要指标完全相同。\n\n摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。\n\n在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。\n\n\n\n默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。\n\n\n\n\n\nSummary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。\n\n同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0<= 分位数Quantiles <= 1.0。\n\n不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。\n\n\n\n\n\n**标签**\n\n对于HTTP状态代码，而不是`code~=\"4..\"`捕获401s，404s，405s等，您可以将它们组合为标签值`4xx`并使用相等匹配器`code=\"4xx\"`。\n\n\n\n**聚合运算符**\n\n```\nsum without()(node_filesystem_size_bytes)\nsum by(job, instance, device)(node_filesystem_size_bytes)\nsum without(fstype, mountpoint, device)(node_filesystem_size_bytes)\ncount without(device)(node_disk_read_bytes_total)\navg without(cpu)(rate(node_cpu_seconds_total[5m]))\n等于\n  sum without(cpu)(rate(node_cpu_seconds_total[5m]))\n/\n  count without(cpu)(rate(node_cpu_seconds_total[5m]))\nmax without(device, fstype, mountpoint)(node_filesystem_size_bytes)\n\ntopk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)\n分位数\nquantile without(cpu)(0.9, rate(node_cpu_seconds_total{mode=\"system\"}[5m]))\n```\n\n\n**k8s服务发现**\n要想自动发现集群中的 Service，就需要我们在 Service 的annotation区域添加：prometheus.io/scrape=true的声明\n要想自动发现集群中的 pod，也需要我们在 pod 的annotation区域添加：prometheus.io/scrape=true的声明\n\n```\nkind: Service\napiVersion: v1\nmetadata:\n  annotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"9121\"\n  name: redis\n  namespace: kube-system\n```\n\n**实战**\n```\n# 两分钟的增长率×60,为什么×60呢？因为为是按秒求的平均值，还原一分钟的就要乘以60，另外prometheus默认1分钟刮一次数据\nirate(user_behavior_request_counter[2m])*60\n\n# 统计loki某个job的日志数（通过sum by把不同日期的数据求和，通过count_over_time统计区间向量内每个度量指标的样本数据个数）\nsum(count_over_time({job=\"${job}\"} |~\"(?i)${search}\" [$__interval])) by (job)\n\n# 统计counter类型增长曲线(注意使用变量报警不支持)高版grafana可以使用$__rate_interval, 这个时间和 prometheus 的采集时间设置有关，比如1分钟采集一次，这个值要大于60s\nrate(my_test_counter[$__rate_interval])*$__interval_ms/1000\n\n# 统计counter类型一分钟内的增长数\nincrease(mysql2es_inserted_num[1m])\n# 在grafana 中设置`Min interval`为1m，设置Display为Bar\n\n# 按每半小时统计增长数，在grafana使用total计算总数，设置`Min interval`为30m\nincrease(SOA_SMS_SEND_ANY{attr=\"message_publish\"}[30m]  offset 1d)\n```\n\n通过增长率表示样本的变化情况\n\nincrease(v range-vector)函数是PromQL中提供的众多内置函数之一。其中参数v是一个区间向量，increase函数获取区间向量中的第一个后最后一个样本并返回其增长量。因此，可以通过以下表达式Counter类型指标的增长率：\n\nincrease(node_cpu[2m]) / 120\n\n**标签替换**\n```\n该函数会依次对 v 中的每一条时间序列进行处理，通过 regex 匹配 src_label 的值，并将匹配部分 relacement 写入到 dst_label 标签中。如下所示：\n\nlabel_replace(up, \"host\", \"$1\", \"instance\",  \"(.*):.*\")\n函数处理后，时间序列将包含一个 host 标签，host 标签的值为 Exporter 实例的 IP 地址：\n\nup{host=\"localhost\",instance=\"localhost:8080\",job=\"cadvisor\"}   1\nup{host=\"localhost\",instance=\"localhost:9090\",job=\"prometheus\"}   1\nup{host=\"localhost\",instance=\"localhost:9100\",job=\"node\"}   1$$\n\nlabel_replace(BIW_SHT_QUEUE_DELIVERY_ORDER_OUT, \"attr\", \"$1\", \"attr\",  \".*_(.*)\")\n```\n\n\n**consul 配置**\n```yaml\n    - consul_sd_configs:\n      - server: consul.kube-public:8500\n        services: []\n      job_name: consul-prometheus\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_consul_service_metadata_(.+)\n      - action: replace\n        regex: ^(.+)$\n        replacement: $1\n        source_labels:\n        - __meta_consul_service_metadata_metrics\n        target_label: __metrics_path__\n```\n\n**consul 注册服务**\n```sh\ncurl -X PUT -d '{\"id\":\"minion-1\",\"name\":\"minio\",\"address\":\"10.2.4.1\",\"port\":9000,\"meta\":{\"app\":\"minio\",\"team\":\"soa\",\"metrics\":\"/minio/prometheus/metrics\"}}'  http://consul.t1.abc.net/v1/agent/service/register\n```\n\n参考：\n\nhttps://mojotv.cn/go/prometheus-client-for-go\n\n[Prometheus 通过 consul 实现自动服务发现](https://blog.csdn.net/aixiaoyang168/article/details/103022342)","slug":"prometheus","published":1,"updated":"2020-12-29T10:23:06.973Z","layout":"post","photos":[],"link":"","_id":"ckj9uennf004d0wpb2bxf3yxm","content":"<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p><strong>时序索引</strong> 名称+标签</p>\n<p><strong>时序样本</strong>  float64 值</p>\n<p><strong>格式</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>\n<p>Prometheus 时序数据分为 <a href=\"https://prometheus.io/docs/concepts/metric_types/#counter\" target=\"_blank\" rel=\"noopener\">Counter</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#gauge\" target=\"_blank\" rel=\"noopener\">Gauge</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#histogram\" target=\"_blank\" rel=\"noopener\">Histogram</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#summary\" target=\"_blank\" rel=\"noopener\">Summary</a> 四种类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metric_name [</span><br><span class=\"line\">  &quot;&#123;&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#123; &quot;,&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#125; [ &quot;,&quot; ] &quot;&#125;&quot;</span><br><span class=\"line\">] value [ timestamp ]</span><br></pre></td></tr></table></figure>\n<p><strong>Counter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -</span><br><span class=\"line\"># HELP sample_http_requests_total The total number of HTTP requests.</span><br><span class=\"line\"># TYPE sample_http_requests_total counter</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;200&quot;&#125; 1027 1568018567000</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;400&quot;&#125;    3 1568018567000</span><br><span class=\"line\">idelta(sample_http_requests_total[1m]) 获取和一分钟前的差距</span><br></pre></td></tr></table></figure>\n<p><strong>Gauge</strong></p>\n<p>Gauge不能解决并发问题</p>\n<p><strong>向量</strong></p>\n<p>一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp\" alt=\"img\"></p>\n<p>我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。</p>\n<p>时间戳根据时区不同，会转换成不同的日期时间.</p>\n<p><strong>PromQL</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#CPU 个数</span><br><span class=\"line\">count(count(node_cpu_seconds_total&#123;instance=&quot;172.16.101.209:9100&quot;,mode=&quot;system&quot;&#125;) by (cpu))</span><br><span class=\"line\">#内存使用率</span><br><span class=\"line\">(1 - (node_memory_MemAvailable_bytes&#123;instance=~&quot;$node&quot;&#125; / (node_memory_MemTotal_bytes&#123;instance=~&quot;$node&quot;&#125;)))* 100</span><br><span class=\"line\">#cpu空闲率</span><br><span class=\"line\">avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) by (instance)</span><br><span class=\"line\">#offset25 一分钟前后值差异</span><br><span class=\"line\">delta(sample_http_requests_total&#123;code=&quot;200&quot;&#125; [1m] offset 25m ) </span><br><span class=\"line\"></span><br><span class=\"line\">gauge</span><br><span class=\"line\">sum without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">avg without(instance, job)(process_open_fds)</span><br><span class=\"line\"></span><br><span class=\"line\">counter</span><br><span class=\"line\">#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值</span><br><span class=\"line\">rate(node_network_receive_bytes_total[5m])</span><br><span class=\"line\">The output of rate is a gauge, so the same aggregations apply as for gauges.</span><br><span class=\"line\">sum without(device)(rate(node_network_receive_bytes_total[5m]))</span><br><span class=\"line\"></span><br><span class=\"line\">//通过rate()函数获取HTTP请求量的增长率</span><br><span class=\"line\">rate(http_requests_total[5m])</span><br><span class=\"line\">//查询当前系统中，访问量前10的HTTP地址</span><br><span class=\"line\">topk(10, http_requests_total)</span><br><span class=\"line\"></span><br><span class=\"line\">count without(instance)(process_open_fds &gt; 10)</span><br></pre></td></tr></table></figure>\n<p><strong>CPU 参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type就是CPU的不同状态值</span><br><span class=\"line\">idle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal</span><br><span class=\"line\">其中idle表示空闲，user表示用户使用</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus rules</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups:</span><br><span class=\"line\">- name: container-restart</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: Containers Restarts (Last 30 Minutes)</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      delta(kube_pod_container_status_restarts_total&#123;&#125;[30m])&gt;0  </span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: warning</span><br><span class=\"line\">      team: DevOps</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.namespace&#125;&#125;/&#123;&#123;$labels.pod&#125;&#125; has many containers restarts in last 30 minutes&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>alertManager</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  smtp_smarthost: &apos;smtp.qq.com:465&apos;</span><br><span class=\"line\">  smtp_from: &apos;532499602@qq.com&apos;</span><br><span class=\"line\">  smtp_auth_username: &apos;weihaozhe@aa.net&apos;</span><br><span class=\"line\">  smtp_auth_password: &apos;&apos;</span><br><span class=\"line\">  smtp_require_tls: false</span><br><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&apos;alertname&apos;]</span><br><span class=\"line\">  group_wait: 1m</span><br><span class=\"line\">  group_interval: 10m</span><br><span class=\"line\">  repeat_interval: 10m</span><br><span class=\"line\">  receiver: default-receiver</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &apos;default-receiver&apos;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &apos;air_zhe@163.com&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>configMap reload</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/jimmidyson/configmap-reload/tree/v0.2.2</span><br></pre></td></tr></table></figure>\n<p>一台Prometheus服务器每秒可以摄取数百万个样本.</p>\n<p>Prometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。</p>\n<p>官方对非官方<br>不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。<br>作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。</p>\n<p>存储</p>\n<p>建议使用SSD，但并非严格要求。</p>\n<p>计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是<code>rate</code>函数的作用。该<code>rate</code>函数计算计数器每秒增加的速度。将表达式调整为 <strong>rate(prometheus_tsdb_head_samples_appended_total[1m])</strong>，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本</p>\n<p>量具有三种主要方法 使用：<code>inc</code>，<code>dec</code>和<code>set</code></p>\n<p>量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LAST.set(time.time())</span><br><span class=\"line\">PromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。</span><br></pre></td></tr></table></figure>\n<p>请求进来inc ,结束des 计算请求数</p>\n<p><strong>摘要</strong></p>\n<p>摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。</span><br><span class=\"line\"></span><br><span class=\"line\">hello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。</span><br><span class=\"line\"></span><br><span class=\"line\">如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：</span><br><span class=\"line\">rate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）</span><br></pre></td></tr></table></figure>\n<p><strong>直方图</strong></p>\n<p>直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。</p>\n<p>直方图指标还包括<code>_sum</code>和<code>_count</code>指标，它们的工作原理与摘要指标完全相同。</p>\n<p>摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。</p>\n<p>在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。</p>\n<p>默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。</p>\n<p>Summary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。</p>\n<p>同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0&lt;= 分位数Quantiles &lt;= 1.0。</p>\n<p>不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。</p>\n<p><strong>标签</strong></p>\n<p>对于HTTP状态代码，而不是<code>code~=&quot;4..&quot;</code>捕获401s，404s，405s等，您可以将它们组合为标签值<code>4xx</code>并使用相等匹配器<code>code=&quot;4xx&quot;</code>。</p>\n<p><strong>聚合运算符</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum without()(node_filesystem_size_bytes)</span><br><span class=\"line\">sum by(job, instance, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">sum without(fstype, mountpoint, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">count without(device)(node_disk_read_bytes_total)</span><br><span class=\"line\">avg without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">等于</span><br><span class=\"line\">  sum without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">/</span><br><span class=\"line\">  count without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">topk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)</span><br><span class=\"line\">分位数</span><br><span class=\"line\">quantile without(cpu)(0.9, rate(node_cpu_seconds_total&#123;mode=&quot;system&quot;&#125;[5m]))</span><br></pre></td></tr></table></figure>\n<p><strong>k8s服务发现</strong><br>要想自动发现集群中的 Service，就需要我们在 Service 的annotation区域添加：prometheus.io/scrape=true的声明<br>要想自动发现集群中的 pod，也需要我们在 pod 的annotation区域添加：prometheus.io/scrape=true的声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    prometheus.io/scrape: &quot;true&quot;</span><br><span class=\"line\">    prometheus.io/port: &quot;9121&quot;</span><br><span class=\"line\">  name: redis</span><br><span class=\"line\">  namespace: kube-system</span><br></pre></td></tr></table></figure>\n<p><strong>实战</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 两分钟的增长率×60,为什么×60呢？因为为是按秒求的平均值，还原一分钟的就要乘以60，另外prometheus默认1分钟刮一次数据</span><br><span class=\"line\">irate(user_behavior_request_counter[2m])*60</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计loki某个job的日志数（通过sum by把不同日期的数据求和，通过count_over_time统计区间向量内每个度量指标的样本数据个数）</span><br><span class=\"line\">sum(count_over_time(&#123;job=&quot;$&#123;job&#125;&quot;&#125; |~&quot;(?i)$&#123;search&#125;&quot; [$__interval])) by (job)</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计counter类型增长曲线(注意使用变量报警不支持)高版grafana可以使用$__rate_interval, 这个时间和 prometheus 的采集时间设置有关，比如1分钟采集一次，这个值要大于60s</span><br><span class=\"line\">rate(my_test_counter[$__rate_interval])*$__interval_ms/1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计counter类型一分钟内的增长数</span><br><span class=\"line\">increase(mysql2es_inserted_num[1m])</span><br><span class=\"line\"># 在grafana 中设置`Min interval`为1m，设置Display为Bar</span><br><span class=\"line\"></span><br><span class=\"line\"># 按每半小时统计增长数，在grafana使用total计算总数，设置`Min interval`为30m</span><br><span class=\"line\">increase(SOA_SMS_SEND_ANY&#123;attr=&quot;message_publish&quot;&#125;[30m]  offset 1d)</span><br></pre></td></tr></table></figure></p>\n<p>通过增长率表示样本的变化情况</p>\n<p>increase(v range-vector)函数是PromQL中提供的众多内置函数之一。其中参数v是一个区间向量，increase函数获取区间向量中的第一个后最后一个样本并返回其增长量。因此，可以通过以下表达式Counter类型指标的增长率：</p>\n<p>increase(node_cpu[2m]) / 120</p>\n<p><strong>标签替换</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该函数会依次对 v 中的每一条时间序列进行处理，通过 regex 匹配 src_label 的值，并将匹配部分 relacement 写入到 dst_label 标签中。如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">label_replace(up, &quot;host&quot;, &quot;$1&quot;, &quot;instance&quot;,  &quot;(.*):.*&quot;)</span><br><span class=\"line\">函数处理后，时间序列将包含一个 host 标签，host 标签的值为 Exporter 实例的 IP 地址：</span><br><span class=\"line\"></span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:8080&quot;,job=&quot;cadvisor&quot;&#125;   1</span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;&#125;   1</span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node&quot;&#125;   1$$</span><br><span class=\"line\"></span><br><span class=\"line\">label_replace(BIW_SHT_QUEUE_DELIVERY_ORDER_OUT, &quot;attr&quot;, &quot;$1&quot;, &quot;attr&quot;,  &quot;.*_(.*)&quot;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>consul 配置</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- consul_sd_configs:</span></span><br><span class=\"line\"><span class=\"attr\">  - server:</span> <span class=\"string\">consul.kube-public:8500</span></span><br><span class=\"line\"><span class=\"attr\">    services:</span> <span class=\"string\">[]</span></span><br><span class=\"line\"><span class=\"attr\">  job_name:</span> <span class=\"string\">consul-prometheus</span></span><br><span class=\"line\"><span class=\"attr\">  relabel_configs:</span></span><br><span class=\"line\"><span class=\"attr\">  - action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">__meta_consul_service_metadata_(.+)</span></span><br><span class=\"line\"><span class=\"attr\">  - action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">^(.+)$</span></span><br><span class=\"line\"><span class=\"attr\">    replacement:</span> <span class=\"string\">$1</span></span><br><span class=\"line\"><span class=\"attr\">    source_labels:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">__meta_consul_service_metadata_metrics</span></span><br><span class=\"line\"><span class=\"attr\">    target_label:</span> <span class=\"string\">__metrics_path__</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>consul 注册服务</strong><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT -d <span class=\"string\">'&#123;\"id\":\"minion-1\",\"name\":\"minio\",\"address\":\"10.2.4.1\",\"port\":9000,\"meta\":&#123;\"app\":\"minio\",\"team\":\"soa\",\"metrics\":\"/minio/prometheus/metrics\"&#125;&#125;'</span>  http://consul.t1.abc.net/v1/agent/service/register</span><br></pre></td></tr></table></figure></p>\n<p>参考：</p>\n<p><a href=\"https://mojotv.cn/go/prometheus-client-for-go\" target=\"_blank\" rel=\"noopener\">https://mojotv.cn/go/prometheus-client-for-go</a></p>\n<p><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/103022342\" target=\"_blank\" rel=\"noopener\">Prometheus 通过 consul 实现自动服务发现</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p><strong>时序索引</strong> 名称+标签</p>\n<p><strong>时序样本</strong>  float64 值</p>\n<p><strong>格式</strong>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>\n<p>Prometheus 时序数据分为 <a href=\"https://prometheus.io/docs/concepts/metric_types/#counter\" target=\"_blank\" rel=\"noopener\">Counter</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#gauge\" target=\"_blank\" rel=\"noopener\">Gauge</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#histogram\" target=\"_blank\" rel=\"noopener\">Histogram</a>, <a href=\"https://prometheus.io/docs/concepts/metric_types/#summary\" target=\"_blank\" rel=\"noopener\">Summary</a> 四种类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metric_name [</span><br><span class=\"line\">  &quot;&#123;&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#123; &quot;,&quot; label_name &quot;=&quot; `&quot;` label_value `&quot;` &#125; [ &quot;,&quot; ] &quot;&#125;&quot;</span><br><span class=\"line\">] value [ timestamp ]</span><br></pre></td></tr></table></figure>\n<p><strong>Counter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不同时间获取不同值，图形上按时间增量展示，如果后面时间戳不写，就使用当前时间，如果获取不到，就为空，图像表示为中间断了如图:   _- -</span><br><span class=\"line\"># HELP sample_http_requests_total The total number of HTTP requests.</span><br><span class=\"line\"># TYPE sample_http_requests_total counter</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;200&quot;&#125; 1027 1568018567000</span><br><span class=\"line\">sample_http_requests_total&#123;method=&quot;post&quot;,code=&quot;400&quot;&#125;    3 1568018567000</span><br><span class=\"line\">idelta(sample_http_requests_total[1m]) 获取和一分钟前的差距</span><br></pre></td></tr></table></figure>\n<p><strong>Gauge</strong></p>\n<p>Gauge不能解决并发问题</p>\n<p><strong>向量</strong></p>\n<p>一个向量就是一列数，这些数是有序排列的。用过次序中的索引，我们可以确定每个单独的数。通常会赋予向量粗体的小写名称。当我们需要明确表示向量中的元素时，我们会将元素排列成一个方括号包围的纵柱：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12621529-a47a2a3008428942.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/134/format/webp\" alt=\"img\"></p>\n<p>我们可以把向量看作空间中的点，每个元素是不同的坐标轴上的坐标。</p>\n<p>时间戳根据时区不同，会转换成不同的日期时间.</p>\n<p><strong>PromQL</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#CPU 个数</span><br><span class=\"line\">count(count(node_cpu_seconds_total&#123;instance=&quot;172.16.101.209:9100&quot;,mode=&quot;system&quot;&#125;) by (cpu))</span><br><span class=\"line\">#内存使用率</span><br><span class=\"line\">(1 - (node_memory_MemAvailable_bytes&#123;instance=~&quot;$node&quot;&#125; / (node_memory_MemTotal_bytes&#123;instance=~&quot;$node&quot;&#125;)))* 100</span><br><span class=\"line\">#cpu空闲率</span><br><span class=\"line\">avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) by (instance)</span><br><span class=\"line\">#offset25 一分钟前后值差异</span><br><span class=\"line\">delta(sample_http_requests_total&#123;code=&quot;200&quot;&#125; [1m] offset 25m ) </span><br><span class=\"line\"></span><br><span class=\"line\">gauge</span><br><span class=\"line\">sum without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\">avg without(instance, job)(process_open_fds)</span><br><span class=\"line\"></span><br><span class=\"line\">counter</span><br><span class=\"line\">#要计算每秒接收的网络流量，可以使用：返回值将是最近5分钟的平均值</span><br><span class=\"line\">rate(node_network_receive_bytes_total[5m])</span><br><span class=\"line\">The output of rate is a gauge, so the same aggregations apply as for gauges.</span><br><span class=\"line\">sum without(device)(rate(node_network_receive_bytes_total[5m]))</span><br><span class=\"line\"></span><br><span class=\"line\">//通过rate()函数获取HTTP请求量的增长率</span><br><span class=\"line\">rate(http_requests_total[5m])</span><br><span class=\"line\">//查询当前系统中，访问量前10的HTTP地址</span><br><span class=\"line\">topk(10, http_requests_total)</span><br><span class=\"line\"></span><br><span class=\"line\">count without(instance)(process_open_fds &gt; 10)</span><br></pre></td></tr></table></figure>\n<p><strong>CPU 参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type就是CPU的不同状态值</span><br><span class=\"line\">idle, nice, user (default), system (default for Windows), iowait, interrupt, softirq, steal</span><br><span class=\"line\">其中idle表示空闲，user表示用户使用</span><br></pre></td></tr></table></figure>\n<p><strong>prometheus rules</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups:</span><br><span class=\"line\">- name: container-restart</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: Containers Restarts (Last 30 Minutes)</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      delta(kube_pod_container_status_restarts_total&#123;&#125;[30m])&gt;0  </span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: warning</span><br><span class=\"line\">      team: DevOps</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; down&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.namespace&#125;&#125;/&#123;&#123;$labels.pod&#125;&#125; has many containers restarts in last 30 minutes&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>alertManager</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  smtp_smarthost: &apos;smtp.qq.com:465&apos;</span><br><span class=\"line\">  smtp_from: &apos;532499602@qq.com&apos;</span><br><span class=\"line\">  smtp_auth_username: &apos;weihaozhe@aa.net&apos;</span><br><span class=\"line\">  smtp_auth_password: &apos;&apos;</span><br><span class=\"line\">  smtp_require_tls: false</span><br><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&apos;alertname&apos;]</span><br><span class=\"line\">  group_wait: 1m</span><br><span class=\"line\">  group_interval: 10m</span><br><span class=\"line\">  repeat_interval: 10m</span><br><span class=\"line\">  receiver: default-receiver</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &apos;default-receiver&apos;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &apos;air_zhe@163.com&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>configMap reload</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/jimmidyson/configmap-reload/tree/v0.2.2</span><br></pre></td></tr></table></figure>\n<p>一台Prometheus服务器每秒可以摄取数百万个样本.</p>\n<p>Prometheus旨在跟踪整个系统的运行状况，行为和性能，而不是单个事件。换句话说，Prometheus关心在最后一分钟有15个请求，花了4秒钟来处理，导致40次数据库调用，17次缓存命中和2次客户购买。单个调用的成本和代码路径将成为性能分析或日志记录的问题。</p>\n<p>官方对非官方<br>不要因为客户端库是非官方的或第三方的集成而推迟。您可能希望与数百个应用程序和系统集成，因此Prometheus项目团队不可能有时间和专业知识来创建和维护它们。因此，生态系统中的绝大多数集成都是第三方。为了使事情合理地保持一致并按预期工作，可以使用有关如何编写集成的准则。<br>作为Prometheus的用户，您应该了解，拉力已根植于Prometheus的核心中，而试图使其进行推顶充其量是不明智的。作为基于指标的系统，Prometheus不适合存储事件日志或单个事件。</p>\n<p>存储</p>\n<p>建议使用SSD，但并非严格要求。</p>\n<p>计数器总是在增加。这样可以创建美观的图形，但是计数器的值本身并没有太多用处。您真正想知道的是计数器增加的速度，这就是<code>rate</code>函数的作用。该<code>rate</code>函数计算计数器每秒增加的速度。将表达式调整为 <strong>rate(prometheus_tsdb_head_samples_appended_total[1m])</strong>，它将计算出Prometheus在1分钟内每秒平均摄取多少个样本</p>\n<p>量具有三种主要方法 使用：<code>inc</code>，<code>dec</code>和<code>set</code></p>\n<p>量规是某些当前状态的快照。对于计数器来说，增长的速度是您所关心的，而对于量规，则是量规的实际值。因此，值可以同时上升和下降。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LAST.set(time.time())</span><br><span class=\"line\">PromQL表达式time() - hello_world_last_time_seconds 将告诉您自上次请求以来有多少秒。</span><br></pre></td></tr></table></figure>\n<p>请求进来inc ,结束des 计算请求数</p>\n<p><strong>摘要</strong></p>\n<p>摘要的作用是让您能够计算事件的平均大小，在这种情况下，是每个响应中返回的平均字节数。 如果您有三个大小分别为1、4和7的响应，则平均值将是它们的总和除以它们的计数，即12除以3。同样适用于摘要。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_world_latency_seconds_count是observe已进行的呼叫数，因此rate(hello_world_latency_seconds_count[1m])在表达式浏览器中将返回Hello World请求的每秒速率。</span><br><span class=\"line\"></span><br><span class=\"line\">hello_world_latency_seconds_sum是传递给的值的总和 observe，因此rate(hello_world_latency_seconds_sum[1m])每秒响应请求所花费的时间也是如此。</span><br><span class=\"line\"></span><br><span class=\"line\">如果将这两个表达式相除，您将获得最后一分钟的平均延迟。 平均延迟的完整表达式为：</span><br><span class=\"line\">rate（hello_world_latency_seconds_sum [1m]）/rate（hello_world_latency_seconds_count [1m]）</span><br></pre></td></tr></table></figure>\n<p><strong>直方图</strong></p>\n<p>直方图度量标准允许您跟踪事件大小的分布，从而可以从中计算分位数。例如，您可以使用直方图来计算0.9分位数（也称为第90 个 百分位数）延迟。</p>\n<p>直方图指标还包括<code>_sum</code>和<code>_count</code>指标，它们的工作原理与摘要指标完全相同。</p>\n<p>摘要将提供平均延迟，但是如果要分位数呢？分位数告诉您，一定比例的事件的大小小于给定值。 例如，0.95分位数为300毫秒，这意味着95％的请求花费的时间少于300毫秒。</p>\n<p>在推理实际的最终用户体验时，分位数很有用。如果用户的浏览器向您的应用程序发出20个并发请求，则确定用户可见延迟的时间是最慢的。在这种情况下，第95 个 百分点捕获了该延迟。</p>\n<p>默认存储桶的延迟范围从1 ms到10 s。这旨在捕获Web应用程序的典型延迟范围。但是，您也可以覆盖它们，并在定义指标时提供自己的存储桶。</p>\n<p>Summary和Histogram都提供了对于事件的计数_count以及值的汇总_sum。 因此使用_count,和_sum时间序列可以计算出相同的内容，例如http每秒的平均响应时间：rate(basename_sum[5m]) / rate(basename_count[5m])。</p>\n<p>同时Summary和Histogram都可以计算和统计样本的分布情况，比如中位数，9分位数等等。其中 0.0&lt;= 分位数Quantiles &lt;= 1.0。</p>\n<p>不同在于Histogram可以通过histogram_quantile函数在服务器端计算分位数。 而Sumamry的分位数则是直接在客户端进行定义。因此对于分位数的计算。 Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。相对的对于客户端而言Histogram消耗的资源更少。</p>\n<p><strong>标签</strong></p>\n<p>对于HTTP状态代码，而不是<code>code~=&quot;4..&quot;</code>捕获401s，404s，405s等，您可以将它们组合为标签值<code>4xx</code>并使用相等匹配器<code>code=&quot;4xx&quot;</code>。</p>\n<p><strong>聚合运算符</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum without()(node_filesystem_size_bytes)</span><br><span class=\"line\">sum by(job, instance, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">sum without(fstype, mountpoint, device)(node_filesystem_size_bytes)</span><br><span class=\"line\">count without(device)(node_disk_read_bytes_total)</span><br><span class=\"line\">avg without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">等于</span><br><span class=\"line\">  sum without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">/</span><br><span class=\"line\">  count without(cpu)(rate(node_cpu_seconds_total[5m]))</span><br><span class=\"line\">max without(device, fstype, mountpoint)(node_filesystem_size_bytes)</span><br><span class=\"line\"></span><br><span class=\"line\">topk without(device, fstype, mountpoint)(2, node_filesystem_size_bytes)</span><br><span class=\"line\">分位数</span><br><span class=\"line\">quantile without(cpu)(0.9, rate(node_cpu_seconds_total&#123;mode=&quot;system&quot;&#125;[5m]))</span><br></pre></td></tr></table></figure>\n<p><strong>k8s服务发现</strong><br>要想自动发现集群中的 Service，就需要我们在 Service 的annotation区域添加：prometheus.io/scrape=true的声明<br>要想自动发现集群中的 pod，也需要我们在 pod 的annotation区域添加：prometheus.io/scrape=true的声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    prometheus.io/scrape: &quot;true&quot;</span><br><span class=\"line\">    prometheus.io/port: &quot;9121&quot;</span><br><span class=\"line\">  name: redis</span><br><span class=\"line\">  namespace: kube-system</span><br></pre></td></tr></table></figure>\n<p><strong>实战</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 两分钟的增长率×60,为什么×60呢？因为为是按秒求的平均值，还原一分钟的就要乘以60，另外prometheus默认1分钟刮一次数据</span><br><span class=\"line\">irate(user_behavior_request_counter[2m])*60</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计loki某个job的日志数（通过sum by把不同日期的数据求和，通过count_over_time统计区间向量内每个度量指标的样本数据个数）</span><br><span class=\"line\">sum(count_over_time(&#123;job=&quot;$&#123;job&#125;&quot;&#125; |~&quot;(?i)$&#123;search&#125;&quot; [$__interval])) by (job)</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计counter类型增长曲线(注意使用变量报警不支持)高版grafana可以使用$__rate_interval, 这个时间和 prometheus 的采集时间设置有关，比如1分钟采集一次，这个值要大于60s</span><br><span class=\"line\">rate(my_test_counter[$__rate_interval])*$__interval_ms/1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 统计counter类型一分钟内的增长数</span><br><span class=\"line\">increase(mysql2es_inserted_num[1m])</span><br><span class=\"line\"># 在grafana 中设置`Min interval`为1m，设置Display为Bar</span><br><span class=\"line\"></span><br><span class=\"line\"># 按每半小时统计增长数，在grafana使用total计算总数，设置`Min interval`为30m</span><br><span class=\"line\">increase(SOA_SMS_SEND_ANY&#123;attr=&quot;message_publish&quot;&#125;[30m]  offset 1d)</span><br></pre></td></tr></table></figure></p>\n<p>通过增长率表示样本的变化情况</p>\n<p>increase(v range-vector)函数是PromQL中提供的众多内置函数之一。其中参数v是一个区间向量，increase函数获取区间向量中的第一个后最后一个样本并返回其增长量。因此，可以通过以下表达式Counter类型指标的增长率：</p>\n<p>increase(node_cpu[2m]) / 120</p>\n<p><strong>标签替换</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该函数会依次对 v 中的每一条时间序列进行处理，通过 regex 匹配 src_label 的值，并将匹配部分 relacement 写入到 dst_label 标签中。如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">label_replace(up, &quot;host&quot;, &quot;$1&quot;, &quot;instance&quot;,  &quot;(.*):.*&quot;)</span><br><span class=\"line\">函数处理后，时间序列将包含一个 host 标签，host 标签的值为 Exporter 实例的 IP 地址：</span><br><span class=\"line\"></span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:8080&quot;,job=&quot;cadvisor&quot;&#125;   1</span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;&#125;   1</span><br><span class=\"line\">up&#123;host=&quot;localhost&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node&quot;&#125;   1$$</span><br><span class=\"line\"></span><br><span class=\"line\">label_replace(BIW_SHT_QUEUE_DELIVERY_ORDER_OUT, &quot;attr&quot;, &quot;$1&quot;, &quot;attr&quot;,  &quot;.*_(.*)&quot;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>consul 配置</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- consul_sd_configs:</span></span><br><span class=\"line\"><span class=\"attr\">  - server:</span> <span class=\"string\">consul.kube-public:8500</span></span><br><span class=\"line\"><span class=\"attr\">    services:</span> <span class=\"string\">[]</span></span><br><span class=\"line\"><span class=\"attr\">  job_name:</span> <span class=\"string\">consul-prometheus</span></span><br><span class=\"line\"><span class=\"attr\">  relabel_configs:</span></span><br><span class=\"line\"><span class=\"attr\">  - action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">__meta_consul_service_metadata_(.+)</span></span><br><span class=\"line\"><span class=\"attr\">  - action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\"><span class=\"attr\">    regex:</span> <span class=\"string\">^(.+)$</span></span><br><span class=\"line\"><span class=\"attr\">    replacement:</span> <span class=\"string\">$1</span></span><br><span class=\"line\"><span class=\"attr\">    source_labels:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">__meta_consul_service_metadata_metrics</span></span><br><span class=\"line\"><span class=\"attr\">    target_label:</span> <span class=\"string\">__metrics_path__</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>consul 注册服务</strong><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X PUT -d <span class=\"string\">'&#123;\"id\":\"minion-1\",\"name\":\"minio\",\"address\":\"10.2.4.1\",\"port\":9000,\"meta\":&#123;\"app\":\"minio\",\"team\":\"soa\",\"metrics\":\"/minio/prometheus/metrics\"&#125;&#125;'</span>  http://consul.t1.abc.net/v1/agent/service/register</span><br></pre></td></tr></table></figure></p>\n<p>参考：</p>\n<p><a href=\"https://mojotv.cn/go/prometheus-client-for-go\" target=\"_blank\" rel=\"noopener\">https://mojotv.cn/go/prometheus-client-for-go</a></p>\n<p><a href=\"https://blog.csdn.net/aixiaoyang168/article/details/103022342\" target=\"_blank\" rel=\"noopener\">Prometheus 通过 consul 实现自动服务发现</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckj9uenj200000wpbtgzfos9l","tag_id":"ckj9uenjc00020wpb7bsmfaey","_id":"ckj9uenjl00050wpbivps7eqd"},{"post_id":"ckj9uenj900010wpb2a5aamg4","tag_id":"ckj9uenjk00040wpb895kvcuc","_id":"ckj9uenjn00070wpb69b70yqv"},{"post_id":"ckj9uenjg00030wpb7armbeqm","tag_id":"ckj9uenjm00060wpbxnd0usw0","_id":"ckj9uenjo00080wpbhegu0p0y"},{"post_id":"ckj9uenkh00090wpbo727ymro","tag_id":"ckj9uenkl000b0wpbf512b2fr","_id":"ckj9uenl2000k0wpblunaw0oy"},{"post_id":"ckj9uenkh00090wpbo727ymro","tag_id":"ckj9uenkt000f0wpbqez97d6a","_id":"ckj9uenl4000m0wpbu8wd9er6"},{"post_id":"ckj9uenkj000a0wpbx6l1qerf","tag_id":"ckj9uenkz000i0wpbg5eow5q9","_id":"ckj9uenl6000p0wpb7rh4gn3n"},{"post_id":"ckj9uenkl000c0wpb0enxy88b","tag_id":"ckj9uenl4000n0wpbjkgehhe7","_id":"ckj9uenle000w0wpbiatac2cv"},{"post_id":"ckj9uenkl000c0wpb0enxy88b","tag_id":"ckj9uenl8000r0wpbwtyhm6cu","_id":"ckj9uenlg000y0wpb9n9qpa7p"},{"post_id":"ckj9uenkn000d0wpbzil67v7c","tag_id":"ckj9uenld000v0wpbw1na9lmd","_id":"ckj9uenlp00150wpbwjijwobt"},{"post_id":"ckj9uenkn000d0wpbzil67v7c","tag_id":"ckj9uenlh00100wpbcsf0bujg","_id":"ckj9uenlt00170wpb4csa3vab"},{"post_id":"ckj9uenkr000e0wpblyjy7owi","tag_id":"ckj9uenln00130wpbou22qrwo","_id":"ckj9uenm4001d0wpbshaba9wk"},{"post_id":"ckj9uenkr000e0wpblyjy7owi","tag_id":"ckj9uenlh00100wpbcsf0bujg","_id":"ckj9uenm6001f0wpbaadvyyl8"},{"post_id":"ckj9uenku000g0wpbrs8gua86","tag_id":"ckj9uenkz000i0wpbg5eow5q9","_id":"ckj9uenmd001l0wpbcnh62s8b"},{"post_id":"ckj9uenku000g0wpbrs8gua86","tag_id":"ckj9uenm6001g0wpbqd3tb4in","_id":"ckj9uenme001n0wpb9ie0tpbi"},{"post_id":"ckj9uenkx000h0wpbnu7frt09","tag_id":"ckj9uenl4000n0wpbjkgehhe7","_id":"ckj9uenmg001q0wpbjkjvazkx"},{"post_id":"ckj9uenkx000h0wpbnu7frt09","tag_id":"ckj9uenl8000r0wpbwtyhm6cu","_id":"ckj9uenmg001r0wpbijdjuf9j"},{"post_id":"ckj9uenl0000j0wpbxnzhsbx4","tag_id":"ckj9uenln00130wpbou22qrwo","_id":"ckj9uenmh001v0wpby5miup1u"},{"post_id":"ckj9uenl0000j0wpbxnzhsbx4","tag_id":"ckj9uenmg001s0wpbeprqgiw4","_id":"ckj9uenmh001w0wpb3lxnud30"},{"post_id":"ckj9uenl0000j0wpbxnzhsbx4","tag_id":"ckj9uenmg001t0wpbiwbwcfhw","_id":"ckj9uenmh001y0wpbf0u54nwx"},{"post_id":"ckj9uenl3000l0wpb969zilaq","tag_id":"ckj9uenmh001u0wpb5uj31dzq","_id":"ckj9uenmi00210wpb9bxk0vaa"},{"post_id":"ckj9uenl3000l0wpb969zilaq","tag_id":"ckj9uenmh001x0wpbz6y5zioi","_id":"ckj9uenmi00220wpbqeqt4n15"},{"post_id":"ckj9uenl3000l0wpb969zilaq","tag_id":"ckj9uenln00130wpbou22qrwo","_id":"ckj9uenmj00240wpb2trqr5v6"},{"post_id":"ckj9uenl5000o0wpbazg0yy9b","tag_id":"ckj9uenmi00200wpbdla9xqwo","_id":"ckj9uenmj00260wpbfe7hemrc"},{"post_id":"ckj9uenl5000o0wpbazg0yy9b","tag_id":"ckj9uenmi00230wpbf5864qt9","_id":"ckj9uenmj00270wpblmoqnpo8"},{"post_id":"ckj9uenl6000q0wpb90iul1kh","tag_id":"ckj9uenmj00250wpbx8k8wti1","_id":"ckj9uenmk002a0wpboun3jp1a"},{"post_id":"ckj9uenl6000q0wpb90iul1kh","tag_id":"ckj9uenlh00100wpbcsf0bujg","_id":"ckj9uenmk002b0wpb50krj1vq"},{"post_id":"ckj9uenl8000s0wpb29idws2o","tag_id":"ckj9uenmk00290wpbk9tacdow","_id":"ckj9uenml002d0wpblysxng82"},{"post_id":"ckj9uenla000t0wpbb2vdeueg","tag_id":"ckj9uenmk002c0wpbmxy138su","_id":"ckj9uenmm002g0wpbjvm24ng0"},{"post_id":"ckj9uenla000t0wpbb2vdeueg","tag_id":"ckj9uenml002e0wpbsc2vh9ea","_id":"ckj9uenmm002h0wpbzbfrhjis"},{"post_id":"ckj9uenlc000u0wpbz5d741yz","tag_id":"ckj9uenmk002c0wpbmxy138su","_id":"ckj9uenmn002k0wpbmljbw1ac"},{"post_id":"ckj9uenlc000u0wpbz5d741yz","tag_id":"ckj9uenml002e0wpbsc2vh9ea","_id":"ckj9uenmn002l0wpbiy803q2s"},{"post_id":"ckj9uenle000x0wpbdsiqalgl","tag_id":"ckj9uenmm002j0wpb3x5voqz2","_id":"ckj9uenmo002o0wpbil174b1y"},{"post_id":"ckj9uenle000x0wpbdsiqalgl","tag_id":"ckj9uenmn002m0wpbsq1hg254","_id":"ckj9uenmo002p0wpb1ehg4mhc"},{"post_id":"ckj9uenlg000z0wpbtgr5nexi","tag_id":"ckj9uenmj00250wpbx8k8wti1","_id":"ckj9uenmp002u0wpbsj196zt9"},{"post_id":"ckj9uenlg000z0wpbtgr5nexi","tag_id":"ckj9uenmo002q0wpb09q7bo69","_id":"ckj9uenmq002v0wpbfwuzhvft"},{"post_id":"ckj9uenlg000z0wpbtgr5nexi","tag_id":"ckj9uenmo002r0wpb3pvs2ae8","_id":"ckj9uenmq002x0wpb3jw28oek"},{"post_id":"ckj9uenlg000z0wpbtgr5nexi","tag_id":"ckj9uenmp002s0wpb6tvsmvs4","_id":"ckj9uenmq002y0wpbza1r1ubq"},{"post_id":"ckj9uenli00110wpb4j58g8kb","tag_id":"ckj9uenmp002t0wpb5qnd5hdo","_id":"ckj9uenmr00310wpb1xeiv9dt"},{"post_id":"ckj9uenli00110wpb4j58g8kb","tag_id":"ckj9uenmq002w0wpbwi57le1g","_id":"ckj9uenmr00320wpbmbmdzq3s"},{"post_id":"ckj9uenli00110wpb4j58g8kb","tag_id":"ckj9uenmq002z0wpbp8eumse3","_id":"ckj9uenms00340wpbdadlia2d"},{"post_id":"ckj9uenlm00120wpb0dnf9ehz","tag_id":"ckj9uenmj00250wpbx8k8wti1","_id":"ckj9uenms00360wpbv2fti6tx"},{"post_id":"ckj9uenlm00120wpb0dnf9ehz","tag_id":"ckj9uenmo002q0wpb09q7bo69","_id":"ckj9uenmt00370wpbkcej5vcw"},{"post_id":"ckj9uenlo00140wpbm675erta","tag_id":"ckj9uenms00350wpbvr64kgki","_id":"ckj9uenmt00390wpbxhhmalw1"},{"post_id":"ckj9uenlr00160wpb1yryekkt","tag_id":"ckj9uenmj00250wpbx8k8wti1","_id":"ckj9uenmv003c0wpb3ympzrec"},{"post_id":"ckj9uenlr00160wpb1yryekkt","tag_id":"ckj9uenmu003a0wpbwrbzu3dl","_id":"ckj9uenmv003d0wpb6lf9bek7"},{"post_id":"ckj9uenlu00190wpbq6gikqc4","tag_id":"ckj9uenmu003b0wpbzx72nzc2","_id":"ckj9uenmw003g0wpb30umjmpc"},{"post_id":"ckj9uenlu00190wpbq6gikqc4","tag_id":"ckj9uenmv003e0wpbhv5j8sud","_id":"ckj9uenmw003h0wpbvbewbs4w"},{"post_id":"ckj9uenly001a0wpbsxcz8qlj","tag_id":"ckj9uenmh001u0wpb5uj31dzq","_id":"ckj9uenmy003l0wpbmjvpvrq3"},{"post_id":"ckj9uenly001a0wpbsxcz8qlj","tag_id":"ckj9uenmh001x0wpbz6y5zioi","_id":"ckj9uenmy003m0wpb1zpyc38g"},{"post_id":"ckj9uenly001a0wpbsxcz8qlj","tag_id":"ckj9uenln00130wpbou22qrwo","_id":"ckj9uenmy003o0wpbv9p4g32b"},{"post_id":"ckj9uenly001a0wpbsxcz8qlj","tag_id":"ckj9uenmx003j0wpb0d8nnoj2","_id":"ckj9uenmy003p0wpbg9rhy2zr"},{"post_id":"ckj9uenm2001c0wpbd5wpa6mn","tag_id":"ckj9uenl4000n0wpbjkgehhe7","_id":"ckj9uenmz003r0wpb54lh2p8i"},{"post_id":"ckj9uenm2001c0wpbd5wpa6mn","tag_id":"ckj9uenmj00250wpbx8k8wti1","_id":"ckj9uenmz003s0wpb88ff1cka"},{"post_id":"ckj9uenm2001c0wpbd5wpa6mn","tag_id":"ckj9uenmo002q0wpb09q7bo69","_id":"ckj9uenmz003u0wpb7nmsg0mt"},{"post_id":"ckj9uenm4001e0wpbgihg9w81","tag_id":"ckj9uenmy003q0wpbhyvs7bos","_id":"ckj9uenn0003w0wpbojos3zv8"},{"post_id":"ckj9uenm4001e0wpbgihg9w81","tag_id":"ckj9uenmz003t0wpbk07p0ums","_id":"ckj9uenn0003x0wpb1qxzurhn"},{"post_id":"ckj9uenm6001h0wpbopxouo4b","tag_id":"ckj9uenmz003v0wpbftua2nv8","_id":"ckj9uenn000400wpbzeipnuww"},{"post_id":"ckj9uenm6001h0wpbopxouo4b","tag_id":"ckj9uenn0003y0wpb249kzcbq","_id":"ckj9uenn100410wpbe3oope99"},{"post_id":"ckj9uenm9001i0wpbctpf6r06","tag_id":"ckj9uenn0003z0wpbhcfjvuuh","_id":"ckj9uenn200430wpb6m7up0n1"},{"post_id":"ckj9uenmb001j0wpb2343s1bv","tag_id":"ckj9uenn100420wpb5kn2oqqh","_id":"ckj9uenn300470wpbyj2uzatl"},{"post_id":"ckj9uenmb001j0wpb2343s1bv","tag_id":"ckj9uenn200440wpbepk1y1n0","_id":"ckj9uenn300480wpbwmrjxwyr"},{"post_id":"ckj9uenmb001j0wpb2343s1bv","tag_id":"ckj9uenn300450wpbstyk2xne","_id":"ckj9uenn4004a0wpb3wu7nvjl"},{"post_id":"ckj9uenmd001m0wpbuxymb61s","tag_id":"ckj9uenn300460wpbelhp9gv7","_id":"ckj9uenn4004b0wpbwly00qzz"},{"post_id":"ckj9uenmd001m0wpbuxymb61s","tag_id":"ckj9uenn400490wpbk8mxsgi7","_id":"ckj9uenn4004c0wpbqe71ko61"},{"post_id":"ckj9uennf004d0wpb2bxf3yxm","tag_id":"ckj9uenmg001s0wpbeprqgiw4","_id":"ckj9uenni004g0wpbgev9nws1"},{"post_id":"ckj9uennf004d0wpb2bxf3yxm","tag_id":"ckj9uennh004e0wpbc78u1lf7","_id":"ckj9uenni004h0wpb8uwa5t14"},{"post_id":"ckj9uennf004d0wpb2bxf3yxm","tag_id":"ckj9uennh004f0wpb35adz8hk","_id":"ckj9uenni004i0wpbical1iae"}],"Tag":[{"name":"awk","_id":"ckj9uenjc00020wpb7bsmfaey"},{"name":"clickhouse 高可用","_id":"ckj9uenjk00040wpb895kvcuc"},{"name":"angular js","_id":"ckj9uenjm00060wpbxnd0usw0"},{"name":"coredns","_id":"ckj9uenkl000b0wpbf512b2fr"},{"name":"etcd","_id":"ckj9uenkt000f0wpbqez97d6a"},{"name":"clickhouse","_id":"ckj9uenkz000i0wpbg5eow5q9"},{"name":"docker","_id":"ckj9uenl4000n0wpbjkgehhe7"},{"name":"webshell","_id":"ckj9uenl8000r0wpbwtyhm6cu"},{"name":"gitrunner","_id":"ckj9uenld000v0wpbw1na9lmd"},{"name":"helm","_id":"ckj9uenlh00100wpbcsf0bujg"},{"name":"grafana","_id":"ckj9uenln00130wpbou22qrwo"},{"name":"OLAP","_id":"ckj9uenm6001g0wpbqd3tb4in"},{"name":"prometheus","_id":"ckj9uenmg001s0wpbeprqgiw4"},{"name":"报警","_id":"ckj9uenmg001t0wpbiwbwcfhw"},{"name":"loki","_id":"ckj9uenmh001u0wpb5uj31dzq"},{"name":"promtal","_id":"ckj9uenmh001x0wpbz6y5zioi"},{"name":"go-mysql-elasticsearch","_id":"ckj9uenmi00200wpbdla9xqwo"},{"name":"中间件","_id":"ckj9uenmi00230wpbf5864qt9"},{"name":"k8s","_id":"ckj9uenmj00250wpbx8k8wti1"},{"name":"hexo","_id":"ckj9uenmk00290wpbk9tacdow"},{"name":"jenkins","_id":"ckj9uenmk002c0wpbmxy138su"},{"name":"pipeline","_id":"ckj9uenml002e0wpbsc2vh9ea"},{"name":"containerd","_id":"ckj9uenmm002j0wpb3x5voqz2"},{"name":"k3s","_id":"ckj9uenmn002m0wpbsq1hg254"},{"name":"kubernetes","_id":"ckj9uenmo002q0wpb09q7bo69"},{"name":"kube-adm","_id":"ckj9uenmo002r0wpb3pvs2ae8"},{"name":"haproxy","_id":"ckj9uenmp002s0wpb6tvsmvs4"},{"name":"openldap","_id":"ckj9uenmp002t0wpb5qnd5hdo"},{"name":"gogs","_id":"ckj9uenmq002w0wpbwi57le1g"},{"name":"pbkdf2","_id":"ckj9uenmq002z0wpbp8eumse3"},{"name":"ldap","_id":"ckj9uenms00350wpbvr64kgki"},{"name":"microk8s","_id":"ckj9uenmu003a0wpbwrbzu3dl"},{"name":"nginx","_id":"ckj9uenmu003b0wpbzx72nzc2"},{"name":"openresty","_id":"ckj9uenmv003e0wpbhv5j8sud"},{"name":"日志","_id":"ckj9uenmx003j0wpb0d8nnoj2"},{"name":"linux","_id":"ckj9uenmy003q0wpbhyvs7bos"},{"name":"tcp/ip","_id":"ckj9uenmz003t0wpbk07p0ums"},{"name":"shazam","_id":"ckj9uenmz003v0wpbftua2nv8"},{"name":"gaea","_id":"ckj9uenn0003y0wpb249kzcbq"},{"name":"ubuntu","_id":"ckj9uenn0003z0wpbhcfjvuuh"},{"name":"xorm","_id":"ckj9uenn100420wpb5kn2oqqh"},{"name":"golang","_id":"ckj9uenn200440wpbepk1y1n0"},{"name":"logrus","_id":"ckj9uenn300450wpbstyk2xne"},{"name":"vue","_id":"ckj9uenn300460wpbelhp9gv7"},{"name":"vuejs","_id":"ckj9uenn400490wpbk8mxsgi7"},{"name":"监控","_id":"ckj9uennh004e0wpbc78u1lf7"},{"name":"consul","_id":"ckj9uennh004f0wpb35adz8hk"}]}}
<svg id="SvgjsSvg1006" width="1643" height="2994.5" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs"><defs id="SvgjsDefs1007"><marker id="SvgjsMarker1034" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1035" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1042" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1043" d="M0,2 L14,6 L0,11 L0,2" fill="#000000" stroke="#000000" stroke-width="2"></path></marker><marker id="SvgjsMarker1050" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1051" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1082" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1083" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker1447" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1448" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1451" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1452" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1455" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1456" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1459" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1460" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1481" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1482" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1707" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1708" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker1801" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1802" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker1809" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1810" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker1817" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1818" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker></defs><g id="SvgjsG1008" transform="translate(41.5,55)"><path id="SvgjsPath1009" d="M 0 4Q 0 0 4 0L 138.8452291229857 0Q 142.8452291229857 0 142.8452291229857 4L 142.8452291229857 73.91945017182132Q 142.8452291229857 77.91945017182132 138.8452291229857 77.91945017182132L 4 77.91945017182132Q 0 77.91945017182132 0 73.91945017182132Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1010"><text id="SvgjsText1011" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="123px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan1012" dy="25" x="71.5"><tspan id="SvgjsTspan1013" style="text-decoration:;">Sender</tspan></tspan></text></g></g><g id="SvgjsG1014" transform="translate(309.11404379695364,55)"><path id="SvgjsPath1015" d="M 0 0L 142.8452291229857 0L 142.8452291229857 77.91945017182132L 0 77.91945017182132Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1016"><text id="SvgjsText1017" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="123px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan1018" dy="25" x="71.5"><tspan id="SvgjsTspan1019" style="text-decoration:;">Server</tspan></tspan></text></g></g><g id="SvgjsG1020" transform="translate(309.1140437969536,256.7831556210113)"><path id="SvgjsPath1021" d="M 21.426784368447855 0L 129.85865409434882 0C 146.38702231261394 0 146.38702231261394 77.91945017182132 129.85865409434882 77.91945017182132L 21.426784368447855 77.91945017182132C -7.142261456149285 77.91945017182132 -7.142261456149285 0 21.426784368447855 0ZM 129.85865409434882 0C 113.62543530855271 0 113.62543530855271 77.91945017182132 129.85865409434882 77.91945017182132C 113.62543530855271 77.91945017182132 113.62543530855271 0 129.85865409434882 0" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1022"><text id="SvgjsText1023" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="115px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan1024" dy="25" x="57.5"><tspan id="SvgjsTspan1025" style="text-decoration:;">Broker</tspan></tspan></text></g></g><g id="SvgjsG1026" transform="translate(674.4343625470602,441.0805498281786)"><path id="SvgjsPath1027" d="M 21.426784368447855 0L 129.85865409434882 0C 146.38702231261394 0 146.38702231261394 77.91945017182132 129.85865409434882 77.91945017182132L 21.426784368447855 77.91945017182132C -7.142261456149285 77.91945017182132 -7.142261456149285 0 21.426784368447855 0ZM 129.85865409434882 0C 113.62543530855271 0 113.62543530855271 77.91945017182132 129.85865409434882 77.91945017182132C 113.62543530855271 77.91945017182132 113.62543530855271 0 129.85865409434882 0" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1028"><text id="SvgjsText1029" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="115px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan1030" dy="25" x="57.5"><tspan id="SvgjsTspan1031" style="text-decoration:;">Backend</tspan></tspan></text></g></g><g id="SvgjsG1032"><path id="SvgjsPath1033" d="M380.5366583584465 132.91945017182132L380.5366583584465 194.8513028964163L380.53665835844646 194.8513028964163L380.53665835844646 256.7831556210113" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1034)"></path><rect id="SvgjsRect1036" width="200" height="20" x="280.5366583584465" y="184.8513028964163" fill="#ffffff"></rect><text id="SvgjsText1037" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="200px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="182.4513028964163" transform="rotate(0)"><tspan id="SvgjsTspan1038" dy="20" x="380.5366583584465"><tspan id="SvgjsTspan1039" style="text-decoration:;">broker.Publish(ctx, signature）</tspan></tspan></text></g><g id="SvgjsG1040"><path id="SvgjsPath1041" d="M112.92261456149282 132.91945017182132L112.92261456149282 480.0402749140893L674.4343625470602 480.0402749140893" stroke="#000000" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1042)"></path><rect id="SvgjsRect1044" width="80" height="25" x="180.11807618314253" y="467.5402749140893" fill="#ffffff"></rect><text id="SvgjsText1045" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="80px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="464.5402749140893" transform="rotate(0)"><tspan id="SvgjsTspan1046" dy="25" x="220.11807618314253"><tspan id="SvgjsTspan1047" style="text-decoration:;">获取结果</tspan></tspan></text></g><g id="SvgjsG1048"><path id="SvgjsPath1049" d="M184.34522912298564 93.95972508591066L246.72963645996964 93.95972508591066L246.72963645996964 93.95972508591066L309.11404379695364 93.95972508591066" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1050)"></path><rect id="SvgjsRect1052" width="42" height="26" x="225.72963645996964" y="80.95972508591066" fill="#ffffff"></rect><text id="SvgjsText1053" font-family="微软雅黑" text-anchor="middle" font-size="21px" width="42px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="21px" weight="400" font-style="" opacity="1" y="75.80972508591066" transform="rotate(0)"><tspan id="SvgjsTspan1054" dy="26" x="246.72963645996964"><tspan id="SvgjsTspan1055" style="text-decoration:;">调用</tspan></tspan></text></g><g id="SvgjsG1056" transform="translate(672.6080820910886,259.1454401309114)"><path id="SvgjsPath1057" d="M 0 0L 146.49779003492918 0L 146.49779003492918 73.19488115202087L 0 73.19488115202087Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1058"><text id="SvgjsText1059" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="127px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="21.097440576010435" transform="rotate(0)"><tspan id="SvgjsTspan1060" dy="25" x="73.5"><tspan id="SvgjsTspan1061" style="text-decoration:;">woker</tspan></tspan></text></g></g><g id="SvgjsG1062" transform="translate(45.5,792)"><path id="SvgjsPath1063" d="M 0 0L 443 0L 443 145L 0 145Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1064"><text id="SvgjsText1065" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="423px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.55" transform="rotate(0)"><tspan id="SvgjsTspan1066" dy="16" x="221.5"><tspan id="SvgjsTspan1067" style="text-decoration:;">NewServer</tspan></tspan><tspan id="SvgjsTspan1068" dy="16" x="221.5"><tspan id="SvgjsTspan1069" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1070" dy="16" x="221.5"><tspan id="SvgjsTspan1071" style="text-decoration:;">broker, err := BrokerFactory(cnf)</tspan></tspan><tspan id="SvgjsTspan1072" dy="16" x="221.5"><tspan id="SvgjsTspan1073" style="text-decoration:;"> backend, _ := BackendFactory(cnf)</tspan></tspan><tspan id="SvgjsTspan1074" dy="16" x="221.5"><tspan id="SvgjsTspan1075" style="text-decoration:;">lock, err := LockFactory(cnf) </tspan></tspan><tspan id="SvgjsTspan1076" dy="16" x="221.5"><tspan id="SvgjsTspan1077" style="text-decoration:;">srv := NewServerWithBrokerBackendLock(cnf, broker, backend, lock)</tspan></tspan><tspan id="SvgjsTspan1078" dy="16" x="221.5"><tspan id="SvgjsTspan1079" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1080"><path id="SvgjsPath1081" d="M745.8569771085532 332.34032128293234L745.8569771085532 386.7104355555555L745.8569771085531 386.7104355555555L745.8569771085531 441.0805498281786" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1082)"></path><rect id="SvgjsRect1084" width="161" height="20" x="665.3569771085531" y="376.7104355555555" fill="#ffffff"></rect><text id="SvgjsText1085" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="161px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="374.3104355555555" transform="rotate(0)"><tspan id="SvgjsTspan1086" dy="20" x="745.8569771085531"><tspan id="SvgjsTspan1087" style="text-decoration:;">woker.Process(signature)</tspan></tspan></text></g><g id="SvgjsG1088" transform="translate(46.5,971.4135802469134)"><path id="SvgjsPath1089" d="M 0 0L 443 0L 443 130L 0 130Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1090"><text id="SvgjsText1091" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="423px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.05" transform="rotate(0)"><tspan id="SvgjsTspan1092" dy="16" x="221.5"><tspan id="SvgjsTspan1093" style="text-decoration:;">RegisterTasks</tspan></tspan><tspan id="SvgjsTspan1094" dy="16" x="221.5"><tspan id="SvgjsTspan1095" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1096" dy="16" x="221.5"><tspan id="SvgjsTspan1097" style="text-decoration:;"> tasks.ValidateTask(task); //遍历验证task格式</tspan></tspan><tspan id="SvgjsTspan1098" dy="16" x="221.5"><tspan id="SvgjsTspan1099" style="text-decoration:;">server.registeredTasks.Store(k, v) //存储task</tspan></tspan><tspan id="SvgjsTspan1100" dy="16" x="221.5"><tspan id="SvgjsTspan1101" style="text-decoration:;">server.broker.SetRegisteredTaskNames(names) //broker存储任务名称</tspan></tspan><tspan id="SvgjsTspan1102" dy="16" x="221.5"><tspan id="SvgjsTspan1103" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1104" transform="translate(46.5,1135.5)"><path id="SvgjsPath1105" d="M 0 0L 437 0L 437 156L 0 156Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1106"><text id="SvgjsText1107" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="417px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="4.05" transform="rotate(0)"><tspan id="SvgjsTspan1108" dy="16" x="218.5"><tspan id="SvgjsTspan1109" style="text-decoration:;">SendTask</tspan></tspan><tspan id="SvgjsTspan1110" dy="16" x="218.5"><tspan id="SvgjsTspan1111" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1112" dy="16" x="218.5"><tspan id="SvgjsTspan1113" style="text-decoration:;">server.backend.SetStatePending(signature) //设置任务状态为PENDING</tspan></tspan><tspan id="SvgjsTspan1114" dy="16" x="218.5"><tspan id="SvgjsTspan1115" style="text-decoration:;">server.prePublishHandler(signature) //预处理</tspan></tspan><tspan id="SvgjsTspan1116" dy="16" x="218.5"><tspan id="SvgjsTspan1117" style="text-decoration:;"> asyncResult, err := server.SendTaskWithContext(ctx, &amp;addTask0) </tspan><tspan id="SvgjsTspan1118" style="text-decoration:;font-size: inherit;">-&gt; </tspan></tspan><tspan id="SvgjsTspan1119" dy="16" x="218.5"><tspan id="SvgjsTspan1120" style="text-decoration:;font-size: inherit;">server.broker.Publish(ctx, signature) //发布任务</tspan></tspan><tspan id="SvgjsTspan1121" dy="16" x="218.5"><tspan id="SvgjsTspan1122" style="text-decoration:;">//返回result.AsyncResult结构体</tspan></tspan><tspan id="SvgjsTspan1123" dy="16" x="218.5"><tspan id="SvgjsTspan1124" style="text-decoration:;">return result.NewAsyncResult(signature, server.backend), nil</tspan></tspan><tspan id="SvgjsTspan1125" dy="16" x="218.5"><tspan id="SvgjsTspan1126" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1127" transform="translate(546.7962962962964,791.8333333333334)"><path id="SvgjsPath1128" d="M 0 0L 447.40740740740716 0L 447.40740740740716 188.8888888888888L 0 188.8888888888888Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1129"><text id="SvgjsText1130" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="428px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="12.494444444444401" transform="rotate(0)"><tspan id="SvgjsTspan1131" dy="16" x="224"><tspan id="SvgjsTspan1132" style="text-decoration:;">NewCustomQueueWorker</tspan></tspan><tspan id="SvgjsTspan1133" dy="16" x="224"><tspan id="SvgjsTspan1134" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1135" dy="16" x="224"><tspan id="SvgjsTspan1136" style="text-decoration:;">//返回worker结构体，queue 决定了worker消费队列名</tspan></tspan><tspan id="SvgjsTspan1137" dy="16" x="224"><tspan id="SvgjsTspan1138" style="text-decoration:;">worker := server.NewWorker(consumerTag, 0,queue) </tspan></tspan><tspan id="SvgjsTspan1139" dy="16" x="224"><tspan id="SvgjsTspan1140" style="text-decoration:;">return &amp;Worker{server:server,Queue:queue}</tspan></tspan><tspan id="SvgjsTspan1141" dy="16" x="224"><tspan id="SvgjsTspan1142" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1143" dy="16" x="224"><tspan id="SvgjsTspan1144" style="text-decoration:;"> worker.SetPostTaskHandler(posttaskhandler)</tspan></tspan><tspan id="SvgjsTspan1145" dy="16" x="224"><tspan id="SvgjsTspan1146" style="text-decoration:;"> worker.SetErrorHandler(errorhandler)</tspan></tspan><tspan id="SvgjsTspan1147" dy="16" x="224"><tspan id="SvgjsTspan1148" style="text-decoration:;"> worker.SetPreTaskHandler(pretaskhandler)</tspan></tspan><tspan id="SvgjsTspan1149" dy="16" x="224"><tspan id="SvgjsTspan1150" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1151" transform="translate(549.5,1024.3888888888885)"><path id="SvgjsPath1152" d="M 0 0L 442 0L 442 144L 0 144Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1153"><text id="SvgjsText1154" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="422px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="22.05" transform="rotate(0)"><tspan id="SvgjsTspan1155" dy="16" x="221"><tspan id="SvgjsTspan1156" style="text-decoration:;">worker.Launch()</tspan></tspan><tspan id="SvgjsTspan1157" dy="16" x="221"><tspan id="SvgjsTspan1158" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1159" dy="16" x="221"><tspan id="SvgjsTspan1160" style="text-decoration:;">worker.LaunchAsync(errorsChan)</tspan></tspan><tspan id="SvgjsTspan1161" dy="16" x="221"><tspan id="SvgjsTspan1162" style="text-decoration:;">   retry, err :=  worker.server.GetBroker().StartConsuming(worker.ConsumerTag, </tspan></tspan><tspan id="SvgjsTspan1163" dy="16" x="221"><tspan id="SvgjsTspan1164" style="text-decoration:;">worker.Concurrency, worker) // goroutine for 循环执行，retry为false return</tspan></tspan><tspan id="SvgjsTspan1165" dy="16" x="221"><tspan id="SvgjsTspan1166" style="text-decoration:;">  signal.Notify(sig, os.Interrupt, syscall.SIGTERM) //goroutine 监听优雅退出</tspan></tspan></text></g></g><g id="SvgjsG1167" transform="translate(41.5,585)"><path id="SvgjsPath1168" d="M 0 0L 421 0L 437 16L 437 165L 0 165L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1169" d="M 421 0L 421 16L 437 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1170" d="M 0 0L 421 0L 437 16L 437 165L 0 165L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1171"><text id="SvgjsText1172" font-family="微软雅黑" text-anchor="start" font-size="13px" width="417px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="8.55" transform="rotate(0)"><tspan id="SvgjsTspan1173" dy="16" x="10"><tspan id="SvgjsTspan1174" style="text-decoration:;">type Server struct {</tspan></tspan><tspan id="SvgjsTspan1175" dy="16" x="10"><tspan id="SvgjsTspan1176" style="text-decoration:;">    config            *config.Config</tspan></tspan><tspan id="SvgjsTspan1177" dy="16" x="10"><tspan id="SvgjsTspan1178" style="text-decoration:;">    registeredTasks   *sync.Map</tspan></tspan><tspan id="SvgjsTspan1179" dy="16" x="10"><tspan id="SvgjsTspan1180" style="text-decoration:;">    broker            brokersiface.Broker   //接口</tspan></tspan><tspan id="SvgjsTspan1181" dy="16" x="10"><tspan id="SvgjsTspan1182" style="text-decoration:;">    backend           backendsiface.Backend //接口</tspan></tspan><tspan id="SvgjsTspan1183" dy="16" x="10"><tspan id="SvgjsTspan1184" style="text-decoration:;">    lock              lockiface.Lock //定时任务用到</tspan></tspan><tspan id="SvgjsTspan1185" dy="16" x="10"><tspan id="SvgjsTspan1186" style="text-decoration:;">    scheduler         *cron.Cron</tspan></tspan><tspan id="SvgjsTspan1187" dy="16" x="10"><tspan id="SvgjsTspan1188" style="text-decoration:;">    prePublishHandler func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan1189" dy="16" x="10"><tspan id="SvgjsTspan1190" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1191" transform="translate(546.4958847736627,582.4444444444445)"><path id="SvgjsPath1192" d="M 0 0L 426 0L 442 16L 442 170.5L 0 170.5L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1193" d="M 426 0L 426 16L 442 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1194" d="M 0 0L 426 0L 442 16L 442 170.5L 0 170.5L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1195"><text id="SvgjsText1196" font-family="微软雅黑" text-anchor="start" font-size="13px" width="422px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="3.3" transform="rotate(0)"><tspan id="SvgjsTspan1197" dy="16" x="10"><tspan id="SvgjsTspan1198" style="text-decoration:;">type Worker struct {</tspan></tspan><tspan id="SvgjsTspan1199" dy="16" x="10"><tspan id="SvgjsTspan1200" style="text-decoration:;">    server                   *Server</tspan></tspan><tspan id="SvgjsTspan1201" dy="16" x="10"><tspan id="SvgjsTspan1202" style="text-decoration:;">    ConsumerTag       string</tspan></tspan><tspan id="SvgjsTspan1203" dy="16" x="10"><tspan id="SvgjsTspan1204" style="text-decoration:;">    Concurrency         int</tspan></tspan><tspan id="SvgjsTspan1205" dy="16" x="10"><tspan id="SvgjsTspan1206" style="text-decoration:;">    Queue                   string   // 什么地方用到了？</tspan></tspan><tspan id="SvgjsTspan1207" dy="16" x="10"><tspan id="SvgjsTspan1208" style="text-decoration:;">    errorHandler         func(err error)</tspan></tspan><tspan id="SvgjsTspan1209" dy="16" x="10"><tspan id="SvgjsTspan1210" style="text-decoration:;">    preTaskHandler    func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan1211" dy="16" x="10"><tspan id="SvgjsTspan1212" style="text-decoration:;">    postTaskHandler   func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan1213" dy="16" x="10"><tspan id="SvgjsTspan1214" style="text-decoration:;">    preConsumeHandler func(*Worker) bool</tspan></tspan><tspan id="SvgjsTspan1215" dy="16" x="10"><tspan id="SvgjsTspan1216" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1217" transform="translate(1072.5,25.5)"><path id="SvgjsPath1218" d="M 0 0L 482 0L 498 16L 498 493L 0 493L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1219" d="M 482 0L 482 16L 498 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1220" d="M 0 0L 482 0L 498 16L 498 493L 0 493L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1221"><text id="SvgjsText1222" font-family="微软雅黑" text-anchor="start" font-size="13px" width="478px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="20.55" transform="rotate(0)"><tspan id="SvgjsTspan1223" dy="16" x="10"><tspan id="SvgjsTspan1224" style="text-decoration:;">defaultCnf = &amp;Config{</tspan></tspan><tspan id="SvgjsTspan1225" dy="16" x="10"><tspan id="SvgjsTspan1226" style="text-decoration:;">     Broker:          "amqp://guest:guest@localhost:5672/",</tspan></tspan><tspan id="SvgjsTspan1227" dy="16" x="10"><tspan id="SvgjsTspan1228" style="text-decoration:;">     DefaultQueue:    "machinery_tasks",</tspan></tspan><tspan id="SvgjsTspan1229" dy="16" x="10"><tspan id="SvgjsTspan1230" style="text-decoration:;">     ResultBackend:   "amqp://guest:guest@localhost:5672/",</tspan></tspan><tspan id="SvgjsTspan1231" dy="16" x="10"><tspan id="SvgjsTspan1232" style="text-decoration:;">     ResultsExpireIn: DefaultResultsExpireIn,</tspan></tspan><tspan id="SvgjsTspan1233" dy="16" x="10"><tspan id="SvgjsTspan1234" style="text-decoration:;">     AMQP: &amp;AMQPConfig{</tspan></tspan><tspan id="SvgjsTspan1235" dy="16" x="10"><tspan id="SvgjsTspan1236" style="text-decoration:;">          Exchange:      "machinery_exchange",</tspan></tspan><tspan id="SvgjsTspan1237" dy="16" x="10"><tspan id="SvgjsTspan1238" style="text-decoration:;">          ExchangeType:  "direct",</tspan></tspan><tspan id="SvgjsTspan1239" dy="16" x="10"><tspan id="SvgjsTspan1240" style="text-decoration:;">          BindingKey:    "machinery_task",</tspan></tspan><tspan id="SvgjsTspan1241" dy="16" x="10"><tspan id="SvgjsTspan1242" style="text-decoration:;">          PrefetchCount: 3,</tspan></tspan><tspan id="SvgjsTspan1243" dy="16" x="10"><tspan id="SvgjsTspan1244" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan1245" dy="16" x="10"><tspan id="SvgjsTspan1246" style="text-decoration:;">     DynamoDB: &amp;DynamoDBConfig{</tspan></tspan><tspan id="SvgjsTspan1247" dy="16" x="10"><tspan id="SvgjsTspan1248" style="text-decoration:;">          TaskStatesTable: "task_states",</tspan></tspan><tspan id="SvgjsTspan1249" dy="16" x="10"><tspan id="SvgjsTspan1250" style="text-decoration:;">          GroupMetasTable: "group_metas",</tspan></tspan><tspan id="SvgjsTspan1251" dy="16" x="10"><tspan id="SvgjsTspan1252" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan1253" dy="16" x="10"><tspan id="SvgjsTspan1254" style="text-decoration:;">     Redis: &amp;RedisConfig{</tspan></tspan><tspan id="SvgjsTspan1255" dy="16" x="10"><tspan id="SvgjsTspan1256" style="text-decoration:;">          MaxIdle:                3,</tspan></tspan><tspan id="SvgjsTspan1257" dy="16" x="10"><tspan id="SvgjsTspan1258" style="text-decoration:;">          IdleTimeout:            240,</tspan></tspan><tspan id="SvgjsTspan1259" dy="16" x="10"><tspan id="SvgjsTspan1260" style="text-decoration:;">          ReadTimeout:            15,</tspan></tspan><tspan id="SvgjsTspan1261" dy="16" x="10"><tspan id="SvgjsTspan1262" style="text-decoration:;">          WriteTimeout:           15,</tspan></tspan><tspan id="SvgjsTspan1263" dy="16" x="10"><tspan id="SvgjsTspan1264" style="text-decoration:;">          ConnectTimeout:         15,</tspan></tspan><tspan id="SvgjsTspan1265" dy="16" x="10"><tspan id="SvgjsTspan1266" style="text-decoration:;">          NormalTasksPollPeriod:  1000,</tspan></tspan><tspan id="SvgjsTspan1267" dy="16" x="10"><tspan id="SvgjsTspan1268" style="text-decoration:;">          DelayedTasksPollPeriod: 500,</tspan></tspan><tspan id="SvgjsTspan1269" dy="16" x="10"><tspan id="SvgjsTspan1270" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan1271" dy="16" x="10"><tspan id="SvgjsTspan1272" style="text-decoration:;">     GCPPubSub: &amp;GCPPubSubConfig{</tspan></tspan><tspan id="SvgjsTspan1273" dy="16" x="10"><tspan id="SvgjsTspan1274" style="text-decoration:;">          Client: nil,</tspan></tspan><tspan id="SvgjsTspan1275" dy="16" x="10"><tspan id="SvgjsTspan1276" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan1277" dy="16" x="10"><tspan id="SvgjsTspan1278" style="text-decoration:;"> }</tspan></tspan></text></g></g><g id="SvgjsG1279" transform="translate(1069.5,1427)"><path id="SvgjsPath1280" d="M 0 0L 517 0L 517 133.5L 0 133.5Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1281"><text id="SvgjsText1282" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.8" transform="rotate(0)"><tspan id="SvgjsTspan1283" dy="16" x="258.5"><tspan id="SvgjsTspan1284" style="text-decoration:;"> broker.StartConsuming  (worker循环调用)</tspan></tspan><tspan id="SvgjsTspan1285" dy="16" x="258.5"><tspan id="SvgjsTspan1286" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1287" dy="16" x="258.5"><tspan id="SvgjsTspan1288" style="text-decoration:;">b.Broker.StartConsuming(consumerTag, concurrency, taskProcessor) //初始化retry函数</tspan></tspan><tspan id="SvgjsTspan1289" dy="16" x="258.5"><tspan id="SvgjsTspan1290" style="text-decoration:;">b.GetRetryFunc()(b.GetRetryStopChan()) //闭包fibonacci阻塞后重试</tspan></tspan><tspan id="SvgjsTspan1291" dy="16" x="258.5"><tspan id="SvgjsTspan1292" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1293" transform="translate(1066,579)"><path id="SvgjsPath1294" d="M 0 0L 501 0L 517 16L 517 331L 0 331L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1295" d="M 501 0L 501 16L 517 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1296" d="M 0 0L 501 0L 517 16L 517 331L 0 331L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1297"><text id="SvgjsText1298" font-family="微软雅黑" text-anchor="start" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="11.55" transform="rotate(0)"><tspan id="SvgjsTspan1299" dy="16" x="10"><tspan id="SvgjsTspan1300" style="text-decoration:;">// Broker - a common interface for all brokers</tspan></tspan><tspan id="SvgjsTspan1301" dy="16" x="10"><tspan id="SvgjsTspan1302" style="text-decoration:;">type Broker interface {</tspan></tspan><tspan id="SvgjsTspan1303" dy="16" x="10"><tspan id="SvgjsTspan1304" style="text-decoration:;">    GetConfig() *config.Config</tspan></tspan><tspan id="SvgjsTspan1305" dy="16" x="10"><tspan id="SvgjsTspan1306" style="text-decoration:;">    SetRegisteredTaskNames(names []string)</tspan></tspan><tspan id="SvgjsTspan1307" dy="16" x="10"><tspan id="SvgjsTspan1308" style="text-decoration:;">    IsTaskRegistered(name string) bool</tspan></tspan><tspan id="SvgjsTspan1309" dy="16" x="10"><tspan id="SvgjsTspan1310" style="text-decoration:;">    StartConsuming(consumerTag string, concurrency int, p TaskProcessor) (bool, error)</tspan></tspan><tspan id="SvgjsTspan1311" dy="16" x="10"><tspan id="SvgjsTspan1312" style="text-decoration:;">    StopConsuming()</tspan></tspan><tspan id="SvgjsTspan1313" dy="16" x="10"><tspan id="SvgjsTspan1314" style="text-decoration:;">    Publish(ctx context.Context, task *tasks.Signature) error // common 未实现</tspan></tspan><tspan id="SvgjsTspan1315" dy="16" x="10"><tspan id="SvgjsTspan1316" style="text-decoration:;">    GetPendingTasks(queue string) ([]*tasks.Signature, error) // common 未实现</tspan></tspan><tspan id="SvgjsTspan1317" dy="16" x="10"><tspan id="SvgjsTspan1318" style="text-decoration:;">    GetDelayedTasks() ([]*tasks.Signature, error) // common 未实现</tspan></tspan><tspan id="SvgjsTspan1319" dy="16" x="10"><tspan id="SvgjsTspan1320" style="text-decoration:;">    AdjustRoutingKey(s *tasks.Signature) // </tspan></tspan><tspan id="SvgjsTspan1321" dy="16" x="10"><tspan id="SvgjsTspan1322" style="text-decoration:;">}</tspan></tspan><tspan id="SvgjsTspan1323" dy="16" x="10"><tspan id="SvgjsTspan1324" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1325" dy="16" x="10"><tspan id="SvgjsTspan1326" style="text-decoration:;">// TaskProcessor - can process a delivered task</tspan></tspan><tspan id="SvgjsTspan1327" dy="16" x="10"><tspan id="SvgjsTspan1328" style="text-decoration:;">type TaskProcessor interface {</tspan></tspan><tspan id="SvgjsTspan1329" dy="16" x="10"><tspan id="SvgjsTspan1330" style="text-decoration:;">    Process(signature *tasks.Signature) error</tspan></tspan><tspan id="SvgjsTspan1331" dy="16" x="10"><tspan id="SvgjsTspan1332" style="text-decoration:;">    CustomQueue() string</tspan></tspan><tspan id="SvgjsTspan1333" dy="16" x="10"><tspan id="SvgjsTspan1334" style="text-decoration:;">    PreConsumeHandler() bool</tspan></tspan><tspan id="SvgjsTspan1335" dy="16" x="10"><tspan id="SvgjsTspan1336" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1337" transform="translate(1069.5,1246.5)"><path id="SvgjsPath1338" d="M 0 0L 511 0L 511 146L 0 146Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1339"><text id="SvgjsText1340" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="491px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.05" transform="rotate(0)"><tspan id="SvgjsTspan1341" dy="16" x="255.5"><tspan id="SvgjsTspan1342" style="text-decoration:;">broker.Publish</tspan></tspan><tspan id="SvgjsTspan1343" dy="16" x="255.5"><tspan id="SvgjsTspan1344" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1345" dy="16" x="255.5"><tspan id="SvgjsTspan1346" style="text-decoration:;">//使用signature的RoutingKey，或者DefaultQueue作发布</tspan></tspan><tspan id="SvgjsTspan1347" dy="16" x="255.5"><tspan id="SvgjsTspan1348" style="text-decoration:;"> b.Broker.AdjustRoutingKey(signature)</tspan></tspan><tspan id="SvgjsTspan1349" dy="16" x="255.5"><tspan id="SvgjsTspan1350" style="text-decoration:;">msg, err := json.Marshal(signature)</tspan></tspan><tspan id="SvgjsTspan1351" dy="16" x="255.5"><tspan id="SvgjsTspan1352" style="text-decoration:;">_, err = conn.Do("ZADD", redisDelayedTasksKey, score, msg) //延迟 score为时间戳</tspan></tspan><tspan id="SvgjsTspan1353" dy="16" x="255.5"><tspan id="SvgjsTspan1354" style="text-decoration:;">_, err = conn.Do("RPUSH", signature.RoutingKey, msg) //非延迟</tspan></tspan><tspan id="SvgjsTspan1355" dy="16" x="255.5"><tspan id="SvgjsTspan1356" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1357" transform="translate(1066,940.5)"><path id="SvgjsPath1358" d="M 0 0L 501 0L 517 16L 517 259L 0 259L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1359" d="M 501 0L 501 16L 517 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1360" d="M 0 0L 501 0L 517 16L 517 259L 0 259L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1361"><text id="SvgjsText1362" font-family="微软雅黑" text-anchor="start" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.55" transform="rotate(0)"><tspan id="SvgjsTspan1363" dy="16" x="10"><tspan id="SvgjsTspan1364" style="text-decoration:;">type Broker struct {</tspan></tspan><tspan id="SvgjsTspan1365" dy="16" x="10"><tspan id="SvgjsTspan1366" style="text-decoration:;">    common.Broker</tspan></tspan><tspan id="SvgjsTspan1367" dy="16" x="10"><tspan id="SvgjsTspan1368" style="text-decoration:;">    common.RedisConnector // 嵌套RedisConnector，后面调用NewPool</tspan></tspan><tspan id="SvgjsTspan1369" dy="16" x="10"><tspan id="SvgjsTspan1370" style="text-decoration:;">    host                  string</tspan></tspan><tspan id="SvgjsTspan1371" dy="16" x="10"><tspan id="SvgjsTspan1372" style="text-decoration:;">    password          string</tspan></tspan><tspan id="SvgjsTspan1373" dy="16" x="10"><tspan id="SvgjsTspan1374" style="text-decoration:;">    db                     int</tspan></tspan><tspan id="SvgjsTspan1375" dy="16" x="10"><tspan id="SvgjsTspan1376" style="text-decoration:;">    pool                  *redis.Pool</tspan></tspan><tspan id="SvgjsTspan1377" dy="16" x="10"><tspan id="SvgjsTspan1378" style="text-decoration:;">    consumingWG        sync.WaitGroup // make sure whole consumption completes</tspan></tspan><tspan id="SvgjsTspan1379" dy="16" x="10"><tspan id="SvgjsTspan1380" style="text-decoration:;">    processingWG        sync.WaitGroup // make sure task processing completes</tspan></tspan><tspan id="SvgjsTspan1381" dy="16" x="10"><tspan id="SvgjsTspan1382" style="text-decoration:;">    delayedWG             sync.WaitGroup</tspan></tspan><tspan id="SvgjsTspan1383" dy="16" x="10"><tspan id="SvgjsTspan1384" style="text-decoration:;">    socketPath string       // If set, path to a socket file overrides hostname</tspan></tspan><tspan id="SvgjsTspan1385" dy="16" x="10"><tspan id="SvgjsTspan1386" style="text-decoration:;">    redsync    *redsync.Redsync</tspan></tspan><tspan id="SvgjsTspan1387" dy="16" x="10"><tspan id="SvgjsTspan1388" style="text-decoration:;">    redisOnce  sync.Once</tspan></tspan><tspan id="SvgjsTspan1389" dy="16" x="10"><tspan id="SvgjsTspan1390" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1391" transform="translate(1068,1804.5)"><path id="SvgjsPath1392" d="M 0 0L 520 0L 520 118L 0 118Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1393"><text id="SvgjsText1394" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="500px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="9.05" transform="rotate(0)"><tspan id="SvgjsTspan1395" dy="16" x="260"><tspan id="SvgjsTspan1396" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1397" dy="16" x="260"><tspan id="SvgjsTspan1398" style="text-decoration:;"> 延迟任务（goroutine for循环）</tspan></tspan><tspan id="SvgjsTspan1399" dy="16" x="260"><tspan id="SvgjsTspan1400" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1401" dy="16" x="260"><tspan id="SvgjsTspan1402" style="text-decoration:;">task, err := b.nextDelayedTask(redisDelayedTasksKey)</tspan></tspan><tspan id="SvgjsTspan1403" dy="16" x="260"><tspan id="SvgjsTspan1404" style="text-decoration:;">// 转task为signature,重新发布</tspan></tspan><tspan id="SvgjsTspan1405" dy="16" x="260"><tspan id="SvgjsTspan1406" style="text-decoration:;"> b.Publish(context.Background(), signature);</tspan></tspan></text></g></g><g id="SvgjsG1407" transform="translate(1068.5,1617.5)"><path id="SvgjsPath1408" d="M 0 0L 519 0L 519 134L 0 134Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1409"><text id="SvgjsText1410" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="17.05" transform="rotate(0)"><tspan id="SvgjsTspan1411" dy="16" x="259.5"><tspan id="SvgjsTspan1412" style="text-decoration:;">非延迟任务（goroutine for循环）</tspan></tspan><tspan id="SvgjsTspan1413" dy="16" x="259.5"><tspan id="SvgjsTspan1414" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1415" dy="16" x="259.5"><tspan id="SvgjsTspan1416" style="text-decoration:;">taskProcessor.PreConsumeHandler()  </tspan></tspan><tspan id="SvgjsTspan1417" dy="16" x="259.5"><tspan id="SvgjsTspan1418" style="text-decoration:;">//通过Blpop获取下一个任务，task为切片格式</tspan></tspan><tspan id="SvgjsTspan1419" dy="16" x="259.5"><tspan id="SvgjsTspan1420" style="text-decoration:;">task, _ := b.nextTask(getQueue(b.GetConfig(), taskProcessor))</tspan></tspan><tspan id="SvgjsTspan1421" dy="16" x="259.5"><tspan id="SvgjsTspan1422" style="text-decoration:;">deliveries &lt;- task</tspan></tspan></text></g></g><g id="SvgjsG1423" transform="translate(1068.5,1972.5)"><path id="SvgjsPath1424" d="M 0 0L 519 0L 519 163L 0 163Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1425"><text id="SvgjsText1426" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.55" transform="rotate(0)"><tspan id="SvgjsTspan1427" dy="16" x="259.5"><tspan id="SvgjsTspan1428" style="text-decoration:;">b.consume</tspan></tspan><tspan id="SvgjsTspan1429" dy="16" x="259.5"><tspan id="SvgjsTspan1430" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1431" dy="16" x="259.5"><tspan id="SvgjsTspan1432" style="text-decoration:;">if err := b.consume(deliveries, concurrency, taskProcessor); err != nil {return b.GetRetry(), err}</tspan></tspan><tspan id="SvgjsTspan1433" dy="16" x="259.5"><tspan id="SvgjsTspan1434" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1435" dy="16" x="259.5"><tspan id="SvgjsTspan1436" style="text-decoration:;">//开启for 循环阻塞</tspan></tspan><tspan id="SvgjsTspan1437" dy="16" x="259.5"><tspan id="SvgjsTspan1438" style="text-decoration:;">case &lt;-b.GetStopChan():</tspan></tspan><tspan id="SvgjsTspan1439" dy="16" x="259.5"><tspan id="SvgjsTspan1440" style="text-decoration:;">     // 如果收到停止信号，消息重新入队</tspan></tspan><tspan id="SvgjsTspan1441" dy="16" x="259.5"><tspan id="SvgjsTspan1442" style="text-decoration:;">     b.requeueMessage(d, taskProcessor)</tspan></tspan><tspan id="SvgjsTspan1443" dy="16" x="259.5"><tspan id="SvgjsTspan1444" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1445"><path id="SvgjsPath1446" d="M1068.5 1684.5L1030.5 1684.5L1030.5 2054L1068.5 2054" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1447)"></path></g><g id="SvgjsG1449"><path id="SvgjsPath1450" d="M1328 1751.5L1328 1778L1328 1778L1328 1804.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1451)"></path></g><g id="SvgjsG1453"><path id="SvgjsPath1454" d="M1588 1863.5L1618 1863.5L1618 1684.5L1587.5 1684.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1455)"></path></g><g id="SvgjsG1457"><path id="SvgjsPath1458" d="M1328 1560.5L1328 1589L1328 1589L1328 1617.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1459)"></path></g><g id="SvgjsG1461" transform="translate(1066,2197.5)"><path id="SvgjsPath1462" d="M 0 0L 524 0L 524 140L 0 140Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1463"><text id="SvgjsText1464" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="504px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="12.05" transform="rotate(0)"><tspan id="SvgjsTspan1465" dy="16" x="262"><tspan id="SvgjsTspan1466" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1467" dy="16" x="262"><tspan id="SvgjsTspan1468" style="text-decoration:;">b.consumeOne(d, taskProcessor)</tspan></tspan><tspan id="SvgjsTspan1469" dy="16" x="262"><tspan id="SvgjsTspan1470" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1471" dy="16" x="262"><tspan id="SvgjsTspan1472" style="text-decoration:;">//还原signature</tspan></tspan><tspan id="SvgjsTspan1473" dy="16" x="262"><tspan id="SvgjsTspan1474" style="text-decoration:;">//判断任务是否注册过</tspan></tspan><tspan id="SvgjsTspan1475" dy="16" x="262"><tspan id="SvgjsTspan1476" style="text-decoration:;">if !b.IsTaskRegistered(signature.Name) {return nil}</tspan></tspan><tspan id="SvgjsTspan1477" dy="16" x="262"><tspan id="SvgjsTspan1478" style="text-decoration:;"> taskProcessor.Process(signature)</tspan></tspan></text></g></g><g id="SvgjsG1479"><path id="SvgjsPath1480" d="M1328 2135.5L1328 2166.5L1328 2166.5L1328 2197.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1481)"></path></g><g id="SvgjsG1483" transform="translate(550.2165574353502,1249.5246913580247)"><path id="SvgjsPath1484" d="M 0 0L 446 0L 446 416L 0 416Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1485"><text id="SvgjsText1486" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.05" transform="rotate(0)"><tspan id="SvgjsTspan1487" dy="16" x="223"><tspan id="SvgjsTspan1488" style="text-decoration:;">worker.Process</tspan></tspan><tspan id="SvgjsTspan1489" dy="16" x="223"><tspan id="SvgjsTspan1490" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1491" dy="16" x="223"><tspan id="SvgjsTspan1492" style="text-decoration:;">if !worker.server.IsTaskRegistered(signature.Name) {return nil}</tspan></tspan><tspan id="SvgjsTspan1493" dy="16" x="223"><tspan id="SvgjsTspan1494" style="text-decoration:;">// 根据signature名称，获取taskFunc</tspan></tspan><tspan id="SvgjsTspan1495" dy="16" x="223"><tspan id="SvgjsTspan1496" style="text-decoration:;"> taskFunc, err := worker.server.GetRegisteredTask(signature.Name)</tspan></tspan><tspan id="SvgjsTspan1497" dy="16" x="223"><tspan id="SvgjsTspan1498" style="text-decoration:;">//设置task状态为RECEIVED</tspan></tspan><tspan id="SvgjsTspan1499" dy="16" x="223"><tspan id="SvgjsTspan1500" style="text-decoration:;"> worker.server.GetBackend().SetStateReceived(signature);</tspan></tspan><tspan id="SvgjsTspan1501" dy="16" x="223"><tspan id="SvgjsTspan1502" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1503" dy="16" x="223"><tspan id="SvgjsTspan1504" style="text-decoration:;">// 根据 taskFunc 和签名，反射得到task对象</tspan></tspan><tspan id="SvgjsTspan1505" dy="16" x="223"><tspan id="SvgjsTspan1506" style="text-decoration:;"> task, err := tasks.NewWithSignature(taskFunc, signature)</tspan></tspan><tspan id="SvgjsTspan1507" dy="16" x="223"><tspan id="SvgjsTspan1508" style="text-decoration:;">//设置task状态为STARTED</tspan></tspan><tspan id="SvgjsTspan1509" dy="16" x="223"><tspan id="SvgjsTspan1510" style="text-decoration:;"> worker.server.GetBackend().SetStateStarted(signature); </tspan></tspan><tspan id="SvgjsTspan1511" dy="16" x="223"><tspan id="SvgjsTspan1512" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1513" dy="16" x="223"><tspan id="SvgjsTspan1514" style="text-decoration:;">if worker.postTaskHandler != nil {defer worker.postTaskHandler(signature)}</tspan></tspan><tspan id="SvgjsTspan1515" dy="16" x="223"><tspan id="SvgjsTspan1516" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1517" dy="16" x="223"><tspan id="SvgjsTspan1518" style="text-decoration:;">results, err := task.Call()</tspan></tspan><tspan id="SvgjsTspan1519" dy="16" x="223"><tspan id="SvgjsTspan1520" style="text-decoration:;">// err 不为nil</tspan></tspan><tspan id="SvgjsTspan1521" dy="16" x="223"><tspan id="SvgjsTspan1522" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1523" dy="16" x="223"><tspan id="SvgjsTspan1524" style="text-decoration:;">// 如果重试次数大于 0,执行taskRetry: retrycount--,retrytimeout下次非波那且</tspan></tspan><tspan id="SvgjsTspan1525" dy="16" x="223"><tspan id="SvgjsTspan1526" style="text-decoration:;">值，worker.server.SendTask(signature)</tspan></tspan><tspan id="SvgjsTspan1527" dy="16" x="223"><tspan id="SvgjsTspan1528" style="text-decoration:;">  if signature.RetryCount &gt; 0 {return worker.taskRetry(signature)}</tspan></tspan><tspan id="SvgjsTspan1529" dy="16" x="223"><tspan id="SvgjsTspan1530" style="text-decoration:;">//设置task状态为RETRY</tspan></tspan><tspan id="SvgjsTspan1531" dy="16" x="223"><tspan id="SvgjsTspan1532" style="text-decoration:;">if err := worker.server.GetBackend().SetStateRetry(signature);</tspan></tspan><tspan id="SvgjsTspan1533" dy="16" x="223"><tspan id="SvgjsTspan1534" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1535" transform="translate(550.2165574353502,1715.5)"><path id="SvgjsPath1536" d="M 0 0L 446 0L 446 499L 0 499Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1537"><text id="SvgjsText1538" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.55" transform="rotate(0)"><tspan id="SvgjsTspan1539" dy="16" x="223"><tspan id="SvgjsTspan1540" style="text-decoration:;">taskSucceeded</tspan></tspan><tspan id="SvgjsTspan1541" dy="16" x="223"><tspan id="SvgjsTspan1542" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1543" dy="16" x="223"><tspan id="SvgjsTspan1544" style="text-decoration:;">//设置task状态为SUCCESS</tspan></tspan><tspan id="SvgjsTspan1545" dy="16" x="223"><tspan id="SvgjsTspan1546" style="text-decoration:;"> worker.server.GetBackend().SetStateSuccess(signature, taskResults)</tspan></tspan><tspan id="SvgjsTspan1547" dy="16" x="223"><tspan id="SvgjsTspan1548" style="text-decoration:;">// 把结果写入日志</tspan></tspan><tspan id="SvgjsTspan1549" dy="16" x="223"><tspan id="SvgjsTspan1550" style="text-decoration:;">log.DEBUG.Printf("Processed task %s. Results = %s", signature.UUID, </tspan></tspan><tspan id="SvgjsTspan1551" dy="16" x="223"><tspan id="SvgjsTspan1552" style="text-decoration:;">debugResults)</tspan></tspan><tspan id="SvgjsTspan1553" dy="16" x="223"><tspan id="SvgjsTspan1554" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1555" dy="16" x="223"><tspan id="SvgjsTspan1556" style="text-decoration:;">// 触发成功回调</tspan></tspan><tspan id="SvgjsTspan1557" dy="16" x="223"><tspan id="SvgjsTspan1558" style="text-decoration:;">//是否把结果传入successfunc</tspan></tspan><tspan id="SvgjsTspan1559" dy="16" x="223"><tspan id="SvgjsTspan1560" style="text-decoration:;"> for _, successTask := range signature.OnSuccess {}</tspan></tspan><tspan id="SvgjsTspan1561" dy="16" x="223"><tspan id="SvgjsTspan1562" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1563" dy="16" x="223"><tspan id="SvgjsTspan1564" style="text-decoration:;">//非chord任务到此返回</tspan></tspan><tspan id="SvgjsTspan1565" dy="16" x="223"><tspan id="SvgjsTspan1566" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1567" dy="16" x="223"><tspan id="SvgjsTspan1568" style="text-decoration:;">// 判断分组任务是否完成，完成包括成功或失败，没有返回</tspan></tspan><tspan id="SvgjsTspan1569" dy="16" x="223"><tspan id="SvgjsTspan1570" style="text-decoration:;"> groupCompleted, err := worker.server.GetBackend().GroupCompleted(）</tspan></tspan><tspan id="SvgjsTspan1571" dy="16" x="223"><tspan id="SvgjsTspan1572" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1573" dy="16" x="223"><tspan id="SvgjsTspan1574" style="text-decoration:;">// 判断 ChordTriggered 是否触发过了</tspan></tspan><tspan id="SvgjsTspan1575" dy="16" x="223"><tspan id="SvgjsTspan1576" style="text-decoration:;"> shouldTrigger, err := </tspan></tspan><tspan id="SvgjsTspan1577" dy="16" x="223"><tspan id="SvgjsTspan1578" style="text-decoration:;">worker.server.GetBackend().TriggerChord(signature.GroupUUID)</tspan></tspan><tspan id="SvgjsTspan1579" dy="16" x="223"><tspan id="SvgjsTspan1580" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1581" dy="16" x="223"><tspan id="SvgjsTspan1582" style="text-decoration:;">//获取多个task 状态</tspan></tspan><tspan id="SvgjsTspan1583" dy="16" x="223"><tspan id="SvgjsTspan1584" style="text-decoration:;">taskStates, err := worker.server.GetBackend().GroupTaskStates()</tspan></tspan><tspan id="SvgjsTspan1585" dy="16" x="223"><tspan id="SvgjsTspan1586" style="text-decoration:;">//如果有一个task非成功，返回不触发chrod任务</tspan></tspan><tspan id="SvgjsTspan1587" dy="16" x="223"><tspan id="SvgjsTspan1588" style="text-decoration:;">//根据条件，把result结果添加到signature.ChordCallback.Args</tspan></tspan><tspan id="SvgjsTspan1589" dy="16" x="223"><tspan id="SvgjsTspan1590" style="text-decoration:;">for _, taskResult := range taskState.Results {}</tspan></tspan><tspan id="SvgjsTspan1591" dy="16" x="223"><tspan id="SvgjsTspan1592" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1593" dy="16" x="223"><tspan id="SvgjsTspan1594" style="text-decoration:;">// 触发 chord task</tspan></tspan><tspan id="SvgjsTspan1595" dy="16" x="223"><tspan id="SvgjsTspan1596" style="text-decoration:;"> _, err = worker.server.SendTask(signature.ChordCallback)</tspan></tspan><tspan id="SvgjsTspan1597" dy="16" x="223"><tspan id="SvgjsTspan1598" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1599" transform="translate(57.5,1480.5)"><path id="SvgjsPath1600" d="M 0 0L 426 0L 426 185L 0 185Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1601"><text id="SvgjsText1602" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="26.55" transform="rotate(0)"><tspan id="SvgjsTspan1603" dy="16" x="213"><tspan id="SvgjsTspan1604" style="text-decoration:;">task.NewWithSignature</tspan></tspan><tspan id="SvgjsTspan1605" dy="16" x="213"><tspan id="SvgjsTspan1606" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1607" dy="16" x="213"><tspan id="SvgjsTspan1608" style="text-decoration:;">ctx = context.WithValue(ctx, signatureCtx, signature)</tspan></tspan><tspan id="SvgjsTspan1609" dy="16" x="213"><tspan id="SvgjsTspan1610" style="text-decoration:;">task := &amp;Task{TaskFunc: reflect.ValueOf(taskFunc),Context:  ctx}</tspan></tspan><tspan id="SvgjsTspan1611" dy="16" x="213"><tspan id="SvgjsTspan1612" style="text-decoration:;">//判断参数个数&gt;0，以及地一个参数是否是ctx类型</tspan></tspan><tspan id="SvgjsTspan1613" dy="16" x="213"><tspan id="SvgjsTspan1614" style="text-decoration:;">if taskFuncType.NumIn() &gt; 0 {if IsContextType(taskFuncType.In(0)) {}}</tspan></tspan><tspan id="SvgjsTspan1615" dy="16" x="213"><tspan id="SvgjsTspan1616" style="text-decoration:;">//转换args</tspan></tspan><tspan id="SvgjsTspan1617" dy="16" x="213"><tspan id="SvgjsTspan1618" style="text-decoration:;">if err := task.ReflectArgs(args); err != nil </tspan></tspan></text></g></g><g id="SvgjsG1619" transform="translate(52.5,1841.5)"><path id="SvgjsPath1620" d="M 0 0L 431 0L 431 229L 0 229Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1621"><text id="SvgjsText1622" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="411px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="8.55" transform="rotate(0)"><tspan id="SvgjsTspan1623" dy="16" x="215.5"><tspan id="SvgjsTspan1624" style="text-decoration:;">task.Call()</tspan></tspan><tspan id="SvgjsTspan1625" dy="16" x="215.5"><tspan id="SvgjsTspan1626" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1627" dy="16" x="215.5"><tspan id="SvgjsTspan1628" style="text-decoration:;">//panic捕捉</tspan></tspan><tspan id="SvgjsTspan1629" dy="16" x="215.5"><tspan id="SvgjsTspan1630" style="text-decoration:;">// 通过反射调用TaskFun</tspan></tspan><tspan id="SvgjsTspan1631" dy="16" x="215.5"><tspan id="SvgjsTspan1632" style="text-decoration:;"> results := t.TaskFunc.Call(args)</tspan></tspan><tspan id="SvgjsTspan1633" dy="16" x="215.5"><tspan id="SvgjsTspan1634" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1635" dy="16" x="215.5"><tspan id="SvgjsTspan1636" style="text-decoration:;">// 最后一个返回值</tspan></tspan><tspan id="SvgjsTspan1637" dy="16" x="215.5"><tspan id="SvgjsTspan1638" style="text-decoration:;"> lastResult := results[len(results)-1]</tspan></tspan><tspan id="SvgjsTspan1639" dy="16" x="215.5"><tspan id="SvgjsTspan1640" style="text-decoration:;">//判断lastResult是否为Retriabl错误类型</tspan></tspan><tspan id="SvgjsTspan1641" dy="16" x="215.5"><tspan id="SvgjsTspan1642" style="text-decoration:;"> if lastResult.Type().Implements(retriableErrorInterface) </tspan></tspan><tspan id="SvgjsTspan1643" dy="16" x="215.5"><tspan id="SvgjsTspan1644" style="text-decoration:;">//遍历results返回taskResult type </tspan></tspan><tspan id="SvgjsTspan1645" dy="16" x="215.5"><tspan id="SvgjsTspan1646" style="text-decoration:;">//返回结果的type类型,value 返回结果转接口类型</tspan></tspan><tspan id="SvgjsTspan1647" dy="16" x="215.5"><tspan id="SvgjsTspan1648" style="text-decoration:;">taskResults[i] = &amp;TaskResult{Type:  typeStr,Value: val}</tspan></tspan></text></g></g><g id="SvgjsG1649" transform="translate(57.5,1329.5)"><path id="SvgjsPath1650" d="M 0 0L 405 0L 421 16L 421 128L 0 128L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1651" d="M 405 0L 405 16L 421 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1652" d="M 0 0L 405 0L 421 16L 421 128L 0 128L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1653"><text id="SvgjsText1654" font-family="微软雅黑" text-anchor="start" font-size="13px" width="401px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="6.05" transform="rotate(0)"><tspan id="SvgjsTspan1655" dy="16" x="10"><tspan id="SvgjsTspan1656" style="text-decoration:;">//待运行tasktype Task struct {</tspan></tspan><tspan id="SvgjsTspan1657" dy="16" x="10"><tspan id="SvgjsTspan1658" style="text-decoration:;">    TaskFunc   reflect.Value</tspan></tspan><tspan id="SvgjsTspan1659" dy="16" x="10"><tspan id="SvgjsTspan1660" style="text-decoration:;">    UseContext bool</tspan></tspan><tspan id="SvgjsTspan1661" dy="16" x="10"><tspan id="SvgjsTspan1662" style="text-decoration:;">    Context    context.Context</tspan></tspan><tspan id="SvgjsTspan1663" dy="16" x="10"><tspan id="SvgjsTspan1664" style="text-decoration:;">    Args       []reflect.Value</tspan></tspan><tspan id="SvgjsTspan1665" dy="16" x="10"><tspan id="SvgjsTspan1666" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1667" transform="translate(57.5,2123.5)"><path id="SvgjsPath1668" d="M 0 0L 426 0L 426 161L 0 161Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1669"><text id="SvgjsText1670" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.55" transform="rotate(0)"><tspan id="SvgjsTspan1671" dy="16" x="213"><tspan id="SvgjsTspan1672" style="text-decoration:;">ReflectValue</tspan></tspan><tspan id="SvgjsTspan1673" dy="16" x="213"><tspan id="SvgjsTspan1674" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1675" dy="16" x="213"><tspan id="SvgjsTspan1676" style="text-decoration:;">// 参数是切片类型</tspan></tspan><tspan id="SvgjsTspan1677" dy="16" x="213"><tspan id="SvgjsTspan1678" style="text-decoration:;">if strings.HasPrefix(valueType, "[]") {return reflectValues(valueType, </tspan></tspan><tspan id="SvgjsTspan1679" dy="16" x="213"><tspan id="SvgjsTspan1680" style="text-decoration:;">value)}</tspan></tspan><tspan id="SvgjsTspan1681" dy="16" x="213"><tspan id="SvgjsTspan1682" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1683" dy="16" x="213"><tspan id="SvgjsTspan1684" style="text-decoration:;">// 非切片类型</tspan></tspan><tspan id="SvgjsTspan1685" dy="16" x="213"><tspan id="SvgjsTspan1686" style="text-decoration:;">return reflectValue(valueType, value)</tspan></tspan><tspan id="SvgjsTspan1687" dy="16" x="213"><tspan id="SvgjsTspan1688" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1689" transform="translate(55,1691.5)"><path id="SvgjsPath1690" d="M 0 0L 426 0L 426 111L 0 111Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1691"><text id="SvgjsText1692" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="5.55" transform="rotate(0)"><tspan id="SvgjsTspan1693" dy="16" x="213"><tspan id="SvgjsTspan1694" style="text-decoration:;"> task.ReflectArgs</tspan></tspan><tspan id="SvgjsTspan1695" dy="16" x="213"><tspan id="SvgjsTspan1696" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1697" dy="16" x="213"><tspan id="SvgjsTspan1698" style="text-decoration:;">//遍历args，转换为reflect.Value类型， type为切片或基本类型</tspan></tspan><tspan id="SvgjsTspan1699" dy="16" x="213"><tspan id="SvgjsTspan1700" style="text-decoration:;">argValue, err := ReflectValue(arg.Type, arg.Value)</tspan></tspan><tspan id="SvgjsTspan1701" dy="16" x="213"><tspan id="SvgjsTspan1702" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1703" dy="16" x="213"><tspan id="SvgjsTspan1704" style="text-decoration:;">argValues[i] = argValue</tspan></tspan></text></g></g><g id="SvgjsG1705"><path id="SvgjsPath1706" d="M55 1747L25 1747L25 2204L57.5 2204" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1707)"></path></g><g id="SvgjsG1709" transform="translate(60.5,2325.5)"><path id="SvgjsPath1710" d="M 0 0L 423 0L 423 332L 0 332Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1711"><text id="SvgjsText1712" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="403px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="4.05" transform="rotate(0)"><tspan id="SvgjsTspan1713" dy="16" x="211.5"><tspan id="SvgjsTspan1714" style="text-decoration:;">reflectValues</tspan></tspan><tspan id="SvgjsTspan1715" dy="16" x="211.5"><tspan id="SvgjsTspan1716" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1717" dy="16" x="211.5"><tspan id="SvgjsTspan1718" style="text-decoration:;">//判断类型是否在 typeMap 自定义map 中</tspan></tspan><tspan id="SvgjsTspan1719" dy="16" x="211.5"><tspan id="SvgjsTspan1720" style="text-decoration:;"> theType, ok := typesMap[valueType]</tspan></tspan><tspan id="SvgjsTspan1721" dy="16" x="211.5"><tspan id="SvgjsTspan1722" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1723" dy="16" x="211.5"><tspan id="SvgjsTspan1724" style="text-decoration:;">// 如果value为nil,  返回空切片</tspan></tspan><tspan id="SvgjsTspan1725" dy="16" x="211.5"><tspan id="SvgjsTspan1726" style="text-decoration:;">if value == nil {return reflect.MakeSlice(theType, 0, 0), nil}</tspan></tspan><tspan id="SvgjsTspan1727" dy="16" x="211.5"><tspan id="SvgjsTspan1728" style="text-decoration:;">//如果为字符串切片</tspan></tspan><tspan id="SvgjsTspan1729" dy="16" x="211.5"><tspan id="SvgjsTspan1730" style="text-decoration:;">if theType.String() == "[]string" {}</tspan></tspan><tspan id="SvgjsTspan1731" dy="16" x="211.5"><tspan id="SvgjsTspan1732" style="text-decoration:;">// 通过反射创建类型切片</tspan></tspan><tspan id="SvgjsTspan1733" dy="16" x="211.5"><tspan id="SvgjsTspan1734" style="text-decoration:;">  theValue = reflect.MakeSlice(theType, strs.Len(), strs.Len())</tspan></tspan><tspan id="SvgjsTspan1735" dy="16" x="211.5"><tspan id="SvgjsTspan1736" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1737" dy="16" x="211.5"><tspan id="SvgjsTspan1738" style="text-decoration:;">// 通过类型，及值转Interface 获取值字面量</tspan></tspan><tspan id="SvgjsTspan1739" dy="16" x="211.5"><tspan id="SvgjsTspan1740" style="text-decoration:;"> strValue, err := getStringValue(strings.Split(theType.String(), "[]")[1], </tspan></tspan><tspan id="SvgjsTspan1741" dy="16" x="211.5"><tspan id="SvgjsTspan1742" style="text-decoration:;">strs.Index(i).Interface())</tspan></tspan><tspan id="SvgjsTspan1743" dy="16" x="211.5"><tspan id="SvgjsTspan1744" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1745" dy="16" x="211.5"><tspan id="SvgjsTspan1746" style="text-decoration:;">//通过下表设置value</tspan></tspan><tspan id="SvgjsTspan1747" dy="16" x="211.5"><tspan id="SvgjsTspan1748" style="text-decoration:;">theValue.Index(i).SetString(strValue)</tspan></tspan><tspan id="SvgjsTspan1749" dy="16" x="211.5"><tspan id="SvgjsTspan1750" style="text-decoration:;">  return theValue, nil</tspan></tspan><tspan id="SvgjsTspan1751" dy="16" x="211.5"><tspan id="SvgjsTspan1752" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG1753" transform="translate(549.8433260935832,2582.453125)"><path id="SvgjsPath1754" d="M 0 0L 227 0L 227 74L 0 74Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1755"><text id="SvgjsText1756" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="207px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="3.05" transform="rotate(0)"><tspan id="SvgjsTspan1757" dy="16" x="113.5"><tspan id="SvgjsTspan1758" style="text-decoration:;">getStringValue</tspan></tspan><tspan id="SvgjsTspan1759" dy="16" x="113.5"><tspan id="SvgjsTspan1760" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1761" dy="16" x="113.5"><tspan id="SvgjsTspan1762" style="text-decoration:;">s, ok := value.(string)</tspan></tspan><tspan id="SvgjsTspan1763" dy="16" x="113.5"><tspan id="SvgjsTspan1764" style="text-decoration:;">return s, nil</tspan></tspan></text></g></g><g id="SvgjsG1765" transform="translate(60.5,2692.5)"><path id="SvgjsPath1766" d="M 0 0L 423 0L 423 277L 0 277Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1767"><text id="SvgjsText1768" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="403px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="16.55" transform="rotate(0)"><tspan id="SvgjsTspan1769" dy="16" x="211.5"><tspan id="SvgjsTspan1770" style="text-decoration:;">reflectValue</tspan></tspan><tspan id="SvgjsTspan1771" dy="16" x="211.5"><tspan id="SvgjsTspan1772" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1773" dy="16" x="211.5"><tspan id="SvgjsTspan1774" style="text-decoration:;">//判断类型是否在 typeMap 自定义map 中</tspan></tspan><tspan id="SvgjsTspan1775" dy="16" x="211.5"><tspan id="SvgjsTspan1776" style="text-decoration:;">theType, ok := typesMap[valueType]</tspan></tspan><tspan id="SvgjsTspan1777" dy="16" x="211.5"><tspan id="SvgjsTspan1778" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1779" dy="16" x="211.5"><tspan id="SvgjsTspan1780" style="text-decoration:;">// 通过反射创建类型</tspan></tspan><tspan id="SvgjsTspan1781" dy="16" x="211.5"><tspan id="SvgjsTspan1782" style="text-decoration:;"> theValue := reflect.New(theType)</tspan></tspan><tspan id="SvgjsTspan1783" dy="16" x="211.5"><tspan id="SvgjsTspan1784" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1785" dy="16" x="211.5"><tspan id="SvgjsTspan1786" style="text-decoration:;"> if theType.String() == "string" {</tspan></tspan><tspan id="SvgjsTspan1787" dy="16" x="211.5"><tspan id="SvgjsTspan1788" style="text-decoration:;"> stringValue, err := getStringValue(theType.String(), value)</tspan></tspan><tspan id="SvgjsTspan1789" dy="16" x="211.5"><tspan id="SvgjsTspan1790" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1791" dy="16" x="211.5"><tspan id="SvgjsTspan1792" style="text-decoration:;">//通过指针改变值</tspan></tspan><tspan id="SvgjsTspan1793" dy="16" x="211.5"><tspan id="SvgjsTspan1794" style="text-decoration:;">theValue.Elem().SetString(stringValue)</tspan></tspan><tspan id="SvgjsTspan1795" dy="16" x="211.5"><tspan id="SvgjsTspan1796" style="text-decoration:;">//返回值</tspan></tspan><tspan id="SvgjsTspan1797" dy="16" x="211.5"><tspan id="SvgjsTspan1798" style="text-decoration:;">  return theValue.Elem(), nil</tspan></tspan></text></g></g><g id="SvgjsG1799"><path id="SvgjsPath1800" d="M451.9592729199393 93.95972508591066L745.8569771085532 93.95972508591066L745.8569771085532 259.1454401309114" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1801)"></path><rect id="SvgjsRect1803" width="82" height="20" x="640.5009825367466" y="83.95972508591066" fill="#ffffff"></rect><text id="SvgjsText1804" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="82px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="81.55972508591066" transform="rotate(0)"><tspan id="SvgjsTspan1805" dy="20" x="681.5009825367466"><tspan id="SvgjsTspan1806" style="text-decoration:;">New Wroker</tspan></tspan></text></g><g id="SvgjsG1807"><path id="SvgjsPath1808" d="M819.1058721260177 295.7428807069218L849.1058721260177 295.7428807069218L849.1058721260177 25L380.53665835844646 25L380.53665835844646 55" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1809)"></path><rect id="SvgjsRect1811" width="89" height="20" x="705.692705595693" y="15" fill="#ffffff"></rect><text id="SvgjsText1812" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="89px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="12.6" transform="rotate(0)"><tspan id="SvgjsTspan1813" dy="20" x="750.192705595693"><tspan id="SvgjsTspan1814" style="text-decoration:;">LaunchAsync</tspan></tspan></text></g><g id="SvgjsG1815"><path id="SvgjsPath1816" d="M380.5366583584464 334.7026057928326L380.5366583584464 364.7026057928326L699.297295747255 364.7026057928326L699.297295747255 329" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1817)"></path><rect id="SvgjsRect1819" width="149" height="20" x="468.268279949267" y="354.7026057928326" fill="#ffffff"></rect><text id="SvgjsText1820" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="149px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="352.30260579283265" transform="rotate(0)"><tspan id="SvgjsTspan1821" dy="20" x="542.768279949267"><tspan id="SvgjsTspan1822" style="text-decoration:;"> broker.StartConsuming</tspan></tspan></text></g><g id="SvgjsG1823" transform="translate(550.2165574353502,2240.5)"><path id="SvgjsPath1824" d="M 0 0L 446 0L 446 222L 0 222Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1825"><text id="SvgjsText1826" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="37.05" transform="rotate(0)"><tspan id="SvgjsTspan1827" dy="16" x="223"><tspan id="SvgjsTspan1828" style="text-decoration:;">taskFailed</tspan></tspan><tspan id="SvgjsTspan1829" dy="16" x="223"><tspan id="SvgjsTspan1830" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1831" dy="16" x="223"><tspan id="SvgjsTspan1832" style="text-decoration:;">//设置task状态为FAILURE</tspan></tspan><tspan id="SvgjsTspan1833" dy="16" x="223"><tspan id="SvgjsTspan1834" style="text-decoration:;">worker.server.GetBackend().SetStateFailure(signature, taskErr.Error());</tspan></tspan><tspan id="SvgjsTspan1835" dy="16" x="223"><tspan id="SvgjsTspan1836" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1837" dy="16" x="223"><tspan id="SvgjsTspan1838" style="text-decoration:;">//处理错误</tspan></tspan><tspan id="SvgjsTspan1839" dy="16" x="223"><tspan id="SvgjsTspan1840" style="text-decoration:;"> worker.errorHandler(taskErr)</tspan></tspan><tspan id="SvgjsTspan1841" dy="16" x="223"><tspan id="SvgjsTspan1842" style="text-decoration:;">//循环signature.OnError，把error当作参数传给 errorTask，将errorTask入队</tspan></tspan><tspan id="SvgjsTspan1843" dy="16" x="223"><tspan id="SvgjsTspan1844" style="text-decoration:;">worker.server.SendTask(errorTask)</tspan></tspan></text></g></g><g id="SvgjsG1845" transform="translate(1072.5,2651.5)"><path id="SvgjsPath1846" d="M 0 0L 519.125 0L 519.125 314L 0 314Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1847"><text id="SvgjsText1848" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="500px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="19.05" transform="rotate(0)"><tspan id="SvgjsTspan1849" dy="16" x="260"><tspan id="SvgjsTspan1850" style="text-decoration:;">asyncResult</tspan></tspan><tspan id="SvgjsTspan1851" dy="16" x="260"><tspan id="SvgjsTspan1852" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1853" dy="16" x="260"><tspan id="SvgjsTspan1854" style="text-decoration:;">//循环执行Touch方法，获取结果，如果空sleep后继续for {results, err := </tspan></tspan><tspan id="SvgjsTspan1855" dy="16" x="260"><tspan id="SvgjsTspan1856" style="text-decoration:;">asyncResult.Touch()</tspan><tspan id="SvgjsTspan1857" style="text-decoration:;font-size: inherit;">}</tspan></tspan><tspan id="SvgjsTspan1858" dy="16" x="260"><tspan id="SvgjsTspan1859" style="text-decoration:;">//</tspan></tspan><tspan id="SvgjsTspan1860" dy="16" x="260"><tspan id="SvgjsTspan1861" style="text-decoration:;">asyncResult.GetState()</tspan></tspan><tspan id="SvgjsTspan1862" dy="16" x="260"><tspan id="SvgjsTspan1863" style="text-decoration:;">asyncResult.backend.GetState(asyncResult.Signature.UUID)</tspan></tspan><tspan id="SvgjsTspan1864" dy="16" x="260"><tspan id="SvgjsTspan1865" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1866" dy="16" x="260"><tspan id="SvgjsTspan1867" style="text-decoration:;">// 通过可变参数形式执行mget</tspan></tspan><tspan id="SvgjsTspan1868" dy="16" x="260"><tspan id="SvgjsTspan1869" style="text-decoration:;"> reply, err := redis.Values(conn.Do("MGET", taskUUIDInterfaces...))</tspan></tspan><tspan id="SvgjsTspan1870" dy="16" x="260"><tspan id="SvgjsTspan1871" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1872" dy="16" x="260"><tspan id="SvgjsTspan1873" style="text-decoration:;font-size: inherit;">//把读取的结构装换成taskState结构体</tspan></tspan><tspan id="SvgjsTspan1874" dy="16" x="260"><tspan id="SvgjsTspan1875" style="text-decoration:;"> taskState := new(tasks.TaskState)</tspan></tspan><tspan id="SvgjsTspan1876" dy="16" x="260"><tspan id="SvgjsTspan1877" style="text-decoration:;">  if err := decoder.Decode(taskState); err != nil </tspan></tspan><tspan id="SvgjsTspan1878" dy="16" x="260"><tspan id="SvgjsTspan1879" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1880" dy="16" x="260"><tspan id="SvgjsTspan1881" style="text-decoration:;font-size: inherit;">taskStates[i] = taskState</tspan></tspan><tspan id="SvgjsTspan1882" dy="16" x="260"><tspan id="SvgjsTspan1883" style="text-decoration:;font-size: inherit;">return </tspan><tspan id="SvgjsTspan1884" style="text-decoration:;">taskStates</tspan></tspan></text></g></g><g id="SvgjsG1885" transform="translate(1068.5,2416.5)"><path id="SvgjsPath1886" d="M 0 0L 503 0L 519 16L 519 184L 0 184L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1887" d="M 503 0L 503 16L 519 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1888" d="M 0 0L 503 0L 519 16L 519 184L 0 184L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1889"><text id="SvgjsText1890" font-family="微软雅黑" text-anchor="start" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="2.05" transform="rotate(0)"><tspan id="SvgjsTspan1891" dy="16" x="10"><tspan id="SvgjsTspan1892" style="text-decoration:;">backend 获取结果</tspan></tspan><tspan id="SvgjsTspan1893" dy="16" x="10"><tspan id="SvgjsTspan1894" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1895" dy="16" x="10"><tspan id="SvgjsTspan1896" style="text-decoration:;">type TaskState struct {</tspan></tspan><tspan id="SvgjsTspan1897" dy="16" x="10"><tspan id="SvgjsTspan1898" style="text-decoration:;">    TaskUUID  string        `bson:"_id"`</tspan></tspan><tspan id="SvgjsTspan1899" dy="16" x="10"><tspan id="SvgjsTspan1900" style="text-decoration:;">    TaskName  string        `bson:"task_name"`</tspan></tspan><tspan id="SvgjsTspan1901" dy="16" x="10"><tspan id="SvgjsTspan1902" style="text-decoration:;">    State     string        `bson:"state"`</tspan></tspan><tspan id="SvgjsTspan1903" dy="16" x="10"><tspan id="SvgjsTspan1904" style="text-decoration:;">    Results   []*TaskResult `bson:"results"`</tspan></tspan><tspan id="SvgjsTspan1905" dy="16" x="10"><tspan id="SvgjsTspan1906" style="text-decoration:;">    Error     string        `bson:"error"`</tspan></tspan><tspan id="SvgjsTspan1907" dy="16" x="10"><tspan id="SvgjsTspan1908" style="text-decoration:;">    CreatedAt time.Time     `bson:"created_at"`</tspan></tspan><tspan id="SvgjsTspan1909" dy="16" x="10"><tspan id="SvgjsTspan1910" style="text-decoration:;">    TTL       int64         `bson:"ttl,omitempty"`</tspan></tspan><tspan id="SvgjsTspan1911" dy="16" x="10"><tspan id="SvgjsTspan1912" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG1913" transform="translate(549.2165574353501,2700.5)"><path id="SvgjsPath1914" d="M 0 0L 448 0L 448 269L 0 269Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG1915"><text id="SvgjsText1916" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="428px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="28.55" transform="rotate(0)"><tspan id="SvgjsTspan1917" dy="16" x="224"><tspan id="SvgjsTspan1918" style="text-decoration:;">workflow</tspan></tspan><tspan id="SvgjsTspan1919" dy="16" x="224"><tspan id="SvgjsTspan1920" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1921" dy="16" x="224"><tspan id="SvgjsTspan1922" style="text-decoration:;">NewGroup</tspan></tspan><tspan id="SvgjsTspan1923" dy="16" x="224"><tspan id="SvgjsTspan1924" style="text-decoration:;"> signature.GroupUUID = groupID</tspan></tspan><tspan id="SvgjsTspan1925" dy="16" x="224"><tspan id="SvgjsTspan1926" style="text-decoration:;">  signature.GroupTaskCount = len(signatures)</tspan></tspan><tspan id="SvgjsTspan1927" dy="16" x="224"><tspan id="SvgjsTspan1928" style="text-decoration:;"> &amp;Group{GroupUUID: groupID,Tasks:signatures}</tspan></tspan><tspan id="SvgjsTspan1929" dy="16" x="224"><tspan id="SvgjsTspan1930" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1931" dy="16" x="224"><tspan id="SvgjsTspan1932" style="text-decoration:;">NewChain</tspan></tspan><tspan id="SvgjsTspan1933" dy="16" x="224"><tspan id="SvgjsTspan1934" style="text-decoration:;">signatures[i-1].OnSuccess = []*Signature{signatures[i]}</tspan></tspan><tspan id="SvgjsTspan1935" dy="16" x="224"><tspan id="SvgjsTspan1936" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan1937" dy="16" x="224"><tspan id="SvgjsTspan1938" style="text-decoration:;">NewChord</tspan></tspan><tspan id="SvgjsTspan1939" dy="16" x="224"><tspan id="SvgjsTspan1940" style="text-decoration:;">NewChord(group *Group, callback *Signature)</tspan></tspan><tspan id="SvgjsTspan1941" dy="16" x="224"><tspan id="SvgjsTspan1942" style="text-decoration:;">for _, signature := range group.Tasks {signature.ChordCallback = callback}</tspan></tspan></text></g></g><g id="SvgjsG1943" transform="translate(787.5,2582.453125)"><path id="SvgjsPath1944" d="M 0 0L 197 0L 213 16L 213 74L 0 74L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath1945" d="M 197 0L 197 16L 213 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath1946" d="M 0 0L 197 0L 213 16L 213 74L 0 74L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG1947"><text id="SvgjsText1948" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="193px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="27.05" transform="rotate(0)"><tspan id="SvgjsTspan1949" dy="16" x="106.5"><tspan id="SvgjsTspan1950" style="text-decoration:;">workflow</tspan></tspan></text></g></g></svg>
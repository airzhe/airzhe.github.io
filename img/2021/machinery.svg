<svg id="SvgjsSvg1999" width="1643" height="2994.5" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs"><defs id="SvgjsDefs2000"><marker id="SvgjsMarker2027" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2028" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2035" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2036" d="M0,2 L14,6 L0,11 L0,2" fill="#000000" stroke="#000000" stroke-width="2"></path></marker><marker id="SvgjsMarker2043" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2044" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2075" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2076" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker2440" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2441" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2444" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2445" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2448" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2449" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2452" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2453" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2474" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2475" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2704" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2705" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"></path></marker><marker id="SvgjsMarker2798" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2799" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker2806" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2807" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker><marker id="SvgjsMarker2814" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath2815" d="M0,2 L14,6 L0,11 L0,2" fill="#3399ff" stroke="#3399ff" stroke-width="2"></path></marker></defs><g id="SvgjsG2001" transform="translate(41.5,55)"><path id="SvgjsPath2002" d="M 0 4Q 0 0 4 0L 138.8452291229857 0Q 142.8452291229857 0 142.8452291229857 4L 142.8452291229857 73.91945017182132Q 142.8452291229857 77.91945017182132 138.8452291229857 77.91945017182132L 4 77.91945017182132Q 0 77.91945017182132 0 73.91945017182132Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2003"><text id="SvgjsText2004" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="123px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan2005" dy="25" x="71.5"><tspan id="SvgjsTspan2006" style="text-decoration:;">Sender</tspan></tspan></text></g></g><g id="SvgjsG2007" transform="translate(309.11404379695364,55)"><path id="SvgjsPath2008" d="M 0 0L 142.8452291229857 0L 142.8452291229857 77.91945017182132L 0 77.91945017182132Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2009"><text id="SvgjsText2010" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="123px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan2011" dy="25" x="71.5"><tspan id="SvgjsTspan2012" style="text-decoration:;">Server</tspan></tspan></text></g></g><g id="SvgjsG2013" transform="translate(309.1140437969536,256.7831556210113)"><path id="SvgjsPath2014" d="M 21.426784368447855 0L 129.85865409434882 0C 146.38702231261394 0 146.38702231261394 77.91945017182132 129.85865409434882 77.91945017182132L 21.426784368447855 77.91945017182132C -7.142261456149285 77.91945017182132 -7.142261456149285 0 21.426784368447855 0ZM 129.85865409434882 0C 113.62543530855271 0 113.62543530855271 77.91945017182132 129.85865409434882 77.91945017182132C 113.62543530855271 77.91945017182132 113.62543530855271 0 129.85865409434882 0" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2015"><text id="SvgjsText2016" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="115px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan2017" dy="25" x="57.5"><tspan id="SvgjsTspan2018" style="text-decoration:;">Broker</tspan></tspan></text></g></g><g id="SvgjsG2019" transform="translate(674.4343625470602,441.0805498281786)"><path id="SvgjsPath2020" d="M 21.426784368447855 0L 129.85865409434882 0C 146.38702231261394 0 146.38702231261394 77.91945017182132 129.85865409434882 77.91945017182132L 21.426784368447855 77.91945017182132C -7.142261456149285 77.91945017182132 -7.142261456149285 0 21.426784368447855 0ZM 129.85865409434882 0C 113.62543530855271 0 113.62543530855271 77.91945017182132 129.85865409434882 77.91945017182132C 113.62543530855271 77.91945017182132 113.62543530855271 0 129.85865409434882 0" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2021"><text id="SvgjsText2022" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="115px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="23.459725085910662" transform="rotate(0)"><tspan id="SvgjsTspan2023" dy="25" x="57.5"><tspan id="SvgjsTspan2024" style="text-decoration:;">Backend</tspan></tspan></text></g></g><g id="SvgjsG2025"><path id="SvgjsPath2026" d="M380.5366583584465 132.91945017182132L380.5366583584465 194.8513028964163L380.53665835844646 194.8513028964163L380.53665835844646 256.7831556210113" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2027)"></path><rect id="SvgjsRect2029" width="200" height="20" x="280.5366583584465" y="184.8513028964163" fill="#ffffff"></rect><text id="SvgjsText2030" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="200px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="182.4513028964163" transform="rotate(0)"><tspan id="SvgjsTspan2031" dy="20" x="380.5366583584465"><tspan id="SvgjsTspan2032" style="text-decoration:;">broker.Publish(ctx, signature）</tspan></tspan></text></g><g id="SvgjsG2033"><path id="SvgjsPath2034" d="M112.92261456149282 132.91945017182132L112.92261456149282 480.0402749140893L674.4343625470602 480.0402749140893" stroke="#000000" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2035)"></path><rect id="SvgjsRect2037" width="80" height="25" x="180.11807618314253" y="467.5402749140893" fill="#ffffff"></rect><text id="SvgjsText2038" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="80px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="464.5402749140893" transform="rotate(0)"><tspan id="SvgjsTspan2039" dy="25" x="220.11807618314253"><tspan id="SvgjsTspan2040" style="text-decoration:;">获取结果</tspan></tspan></text></g><g id="SvgjsG2041"><path id="SvgjsPath2042" d="M184.34522912298564 93.95972508591066L246.72963645996964 93.95972508591066L246.72963645996964 93.95972508591066L309.11404379695364 93.95972508591066" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2043)"></path><rect id="SvgjsRect2045" width="42" height="26" x="225.72963645996964" y="80.95972508591066" fill="#ffffff"></rect><text id="SvgjsText2046" font-family="微软雅黑" text-anchor="middle" font-size="21px" width="42px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="21px" weight="400" font-style="" opacity="1" y="75.80972508591066" transform="rotate(0)"><tspan id="SvgjsTspan2047" dy="26" x="246.72963645996964"><tspan id="SvgjsTspan2048" style="text-decoration:;">调用</tspan></tspan></text></g><g id="SvgjsG2049" transform="translate(672.6080820910886,259.1454401309114)"><path id="SvgjsPath2050" d="M 0 0L 146.49779003492918 0L 146.49779003492918 73.19488115202087L 0 73.19488115202087Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2051"><text id="SvgjsText2052" font-family="微软雅黑" text-anchor="middle" font-size="20px" width="127px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="20px" weight="400" font-style="" opacity="1" y="21.097440576010435" transform="rotate(0)"><tspan id="SvgjsTspan2053" dy="25" x="73.5"><tspan id="SvgjsTspan2054" style="text-decoration:;">woker</tspan></tspan></text></g></g><g id="SvgjsG2055" transform="translate(45.5,792)"><path id="SvgjsPath2056" d="M 0 0L 443 0L 443 145L 0 145Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2057"><text id="SvgjsText2058" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="423px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.55" transform="rotate(0)"><tspan id="SvgjsTspan2059" dy="16" x="221.5"><tspan id="SvgjsTspan2060" style="text-decoration:;">NewServer</tspan></tspan><tspan id="SvgjsTspan2061" dy="16" x="221.5"><tspan id="SvgjsTspan2062" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2063" dy="16" x="221.5"><tspan id="SvgjsTspan2064" style="text-decoration:;">broker, err := BrokerFactory(cnf)</tspan></tspan><tspan id="SvgjsTspan2065" dy="16" x="221.5"><tspan id="SvgjsTspan2066" style="text-decoration:;"> backend, _ := BackendFactory(cnf)</tspan></tspan><tspan id="SvgjsTspan2067" dy="16" x="221.5"><tspan id="SvgjsTspan2068" style="text-decoration:;">lock, err := LockFactory(cnf) </tspan></tspan><tspan id="SvgjsTspan2069" dy="16" x="221.5"><tspan id="SvgjsTspan2070" style="text-decoration:;">srv := NewServerWithBrokerBackendLock(cnf, broker, backend, lock)</tspan></tspan><tspan id="SvgjsTspan2071" dy="16" x="221.5"><tspan id="SvgjsTspan2072" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2073"><path id="SvgjsPath2074" d="M745.8569771085532 332.34032128293234L745.8569771085532 386.7104355555555L745.8569771085531 386.7104355555555L745.8569771085531 441.0805498281786" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2075)"></path><rect id="SvgjsRect2077" width="161" height="20" x="665.3569771085531" y="376.7104355555555" fill="#ffffff"></rect><text id="SvgjsText2078" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="161px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="374.3104355555555" transform="rotate(0)"><tspan id="SvgjsTspan2079" dy="20" x="745.8569771085531"><tspan id="SvgjsTspan2080" style="text-decoration:;">woker.Process(signature)</tspan></tspan></text></g><g id="SvgjsG2081" transform="translate(46.5,971.4135802469134)"><path id="SvgjsPath2082" d="M 0 0L 443 0L 443 130L 0 130Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2083"><text id="SvgjsText2084" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="423px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.05" transform="rotate(0)"><tspan id="SvgjsTspan2085" dy="16" x="221.5"><tspan id="SvgjsTspan2086" style="text-decoration:;">RegisterTasks</tspan></tspan><tspan id="SvgjsTspan2087" dy="16" x="221.5"><tspan id="SvgjsTspan2088" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2089" dy="16" x="221.5"><tspan id="SvgjsTspan2090" style="text-decoration:;"> tasks.ValidateTask(task); //遍历验证task格式</tspan></tspan><tspan id="SvgjsTspan2091" dy="16" x="221.5"><tspan id="SvgjsTspan2092" style="text-decoration:;">server.registeredTasks.Store(k, v) //存储task</tspan></tspan><tspan id="SvgjsTspan2093" dy="16" x="221.5"><tspan id="SvgjsTspan2094" style="text-decoration:;">server.broker.SetRegisteredTaskNames(names) //broker存储任务名称</tspan></tspan><tspan id="SvgjsTspan2095" dy="16" x="221.5"><tspan id="SvgjsTspan2096" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2097" transform="translate(46.5,1135.5)"><path id="SvgjsPath2098" d="M 0 0L 437 0L 437 156L 0 156Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2099"><text id="SvgjsText2100" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="417px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="4.05" transform="rotate(0)"><tspan id="SvgjsTspan2101" dy="16" x="218.5"><tspan id="SvgjsTspan2102" style="text-decoration:;">SendTask</tspan></tspan><tspan id="SvgjsTspan2103" dy="16" x="218.5"><tspan id="SvgjsTspan2104" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2105" dy="16" x="218.5"><tspan id="SvgjsTspan2106" style="text-decoration:;">server.backend.SetStatePending(signature) //设置任务状态为PENDING</tspan></tspan><tspan id="SvgjsTspan2107" dy="16" x="218.5"><tspan id="SvgjsTspan2108" style="text-decoration:;">server.prePublishHandler(signature) //预处理</tspan></tspan><tspan id="SvgjsTspan2109" dy="16" x="218.5"><tspan id="SvgjsTspan2110" style="text-decoration:;"> asyncResult, err := server.SendTaskWithContext(ctx, &amp;addTask0) </tspan><tspan id="SvgjsTspan2111" style="text-decoration:;font-size: inherit;">-&gt; </tspan></tspan><tspan id="SvgjsTspan2112" dy="16" x="218.5"><tspan id="SvgjsTspan2113" style="text-decoration:;font-size: inherit;">server.broker.Publish(ctx, signature) //发布任务</tspan></tspan><tspan id="SvgjsTspan2114" dy="16" x="218.5"><tspan id="SvgjsTspan2115" style="text-decoration:;">//返回result.AsyncResult结构体</tspan></tspan><tspan id="SvgjsTspan2116" dy="16" x="218.5"><tspan id="SvgjsTspan2117" style="text-decoration:;">return result.NewAsyncResult(signature, server.backend), nil</tspan></tspan><tspan id="SvgjsTspan2118" dy="16" x="218.5"><tspan id="SvgjsTspan2119" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2120" transform="translate(546.7962962962964,791.8333333333334)"><path id="SvgjsPath2121" d="M 0 0L 447.40740740740716 0L 447.40740740740716 188.8888888888888L 0 188.8888888888888Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2122"><text id="SvgjsText2123" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="428px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="12.494444444444401" transform="rotate(0)"><tspan id="SvgjsTspan2124" dy="16" x="224"><tspan id="SvgjsTspan2125" style="text-decoration:;">NewCustomQueueWorker</tspan></tspan><tspan id="SvgjsTspan2126" dy="16" x="224"><tspan id="SvgjsTspan2127" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2128" dy="16" x="224"><tspan id="SvgjsTspan2129" style="text-decoration:;">//返回worker结构体，queue 决定了worker消费队列名</tspan></tspan><tspan id="SvgjsTspan2130" dy="16" x="224"><tspan id="SvgjsTspan2131" style="text-decoration:;">worker := server.NewWorker(consumerTag, 0,queue) </tspan></tspan><tspan id="SvgjsTspan2132" dy="16" x="224"><tspan id="SvgjsTspan2133" style="text-decoration:;">return &amp;Worker{server:server,Queue:queue}</tspan></tspan><tspan id="SvgjsTspan2134" dy="16" x="224"><tspan id="SvgjsTspan2135" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2136" dy="16" x="224"><tspan id="SvgjsTspan2137" style="text-decoration:;"> worker.SetPostTaskHandler(posttaskhandler)</tspan></tspan><tspan id="SvgjsTspan2138" dy="16" x="224"><tspan id="SvgjsTspan2139" style="text-decoration:;"> worker.SetErrorHandler(errorhandler)</tspan></tspan><tspan id="SvgjsTspan2140" dy="16" x="224"><tspan id="SvgjsTspan2141" style="text-decoration:;"> worker.SetPreTaskHandler(pretaskhandler)</tspan></tspan><tspan id="SvgjsTspan2142" dy="16" x="224"><tspan id="SvgjsTspan2143" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2144" transform="translate(549.5,1024.3888888888885)"><path id="SvgjsPath2145" d="M 0 0L 442 0L 442 144L 0 144Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2146"><text id="SvgjsText2147" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="422px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="22.05" transform="rotate(0)"><tspan id="SvgjsTspan2148" dy="16" x="221"><tspan id="SvgjsTspan2149" style="text-decoration:;">worker.Launch()</tspan></tspan><tspan id="SvgjsTspan2150" dy="16" x="221"><tspan id="SvgjsTspan2151" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2152" dy="16" x="221"><tspan id="SvgjsTspan2153" style="text-decoration:;">worker.LaunchAsync(errorsChan)</tspan></tspan><tspan id="SvgjsTspan2154" dy="16" x="221"><tspan id="SvgjsTspan2155" style="text-decoration:;">   retry, err :=  worker.server.GetBroker().StartConsuming(worker.ConsumerTag, </tspan></tspan><tspan id="SvgjsTspan2156" dy="16" x="221"><tspan id="SvgjsTspan2157" style="text-decoration:;">worker.Concurrency, worker) // goroutine for 循环执行，retry为false return</tspan></tspan><tspan id="SvgjsTspan2158" dy="16" x="221"><tspan id="SvgjsTspan2159" style="text-decoration:;">  signal.Notify(sig, os.Interrupt, syscall.SIGTERM) //goroutine 监听优雅退出</tspan></tspan></text></g></g><g id="SvgjsG2160" transform="translate(41.5,585)"><path id="SvgjsPath2161" d="M 0 0L 421 0L 437 16L 437 165L 0 165L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2162" d="M 421 0L 421 16L 437 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2163" d="M 0 0L 421 0L 437 16L 437 165L 0 165L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2164"><text id="SvgjsText2165" font-family="微软雅黑" text-anchor="start" font-size="13px" width="417px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="8.55" transform="rotate(0)"><tspan id="SvgjsTspan2166" dy="16" x="10"><tspan id="SvgjsTspan2167" style="text-decoration:;">type Server struct {</tspan></tspan><tspan id="SvgjsTspan2168" dy="16" x="10"><tspan id="SvgjsTspan2169" style="text-decoration:;">    config            *config.Config</tspan></tspan><tspan id="SvgjsTspan2170" dy="16" x="10"><tspan id="SvgjsTspan2171" style="text-decoration:;">    registeredTasks   *sync.Map</tspan></tspan><tspan id="SvgjsTspan2172" dy="16" x="10"><tspan id="SvgjsTspan2173" style="text-decoration:;">    broker            brokersiface.Broker   //接口</tspan></tspan><tspan id="SvgjsTspan2174" dy="16" x="10"><tspan id="SvgjsTspan2175" style="text-decoration:;">    backend           backendsiface.Backend //接口</tspan></tspan><tspan id="SvgjsTspan2176" dy="16" x="10"><tspan id="SvgjsTspan2177" style="text-decoration:;">    lock              lockiface.Lock //定时任务用到</tspan></tspan><tspan id="SvgjsTspan2178" dy="16" x="10"><tspan id="SvgjsTspan2179" style="text-decoration:;">    scheduler         *cron.Cron</tspan></tspan><tspan id="SvgjsTspan2180" dy="16" x="10"><tspan id="SvgjsTspan2181" style="text-decoration:;">    prePublishHandler func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan2182" dy="16" x="10"><tspan id="SvgjsTspan2183" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2184" transform="translate(546.4958847736627,582.4444444444445)"><path id="SvgjsPath2185" d="M 0 0L 426 0L 442 16L 442 170.5L 0 170.5L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2186" d="M 426 0L 426 16L 442 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2187" d="M 0 0L 426 0L 442 16L 442 170.5L 0 170.5L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2188"><text id="SvgjsText2189" font-family="微软雅黑" text-anchor="start" font-size="13px" width="422px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="3.3" transform="rotate(0)"><tspan id="SvgjsTspan2190" dy="16" x="10"><tspan id="SvgjsTspan2191" style="text-decoration:;">type Worker struct {</tspan></tspan><tspan id="SvgjsTspan2192" dy="16" x="10"><tspan id="SvgjsTspan2193" style="text-decoration:;">    server                   *Server</tspan></tspan><tspan id="SvgjsTspan2194" dy="16" x="10"><tspan id="SvgjsTspan2195" style="text-decoration:;">    ConsumerTag       string</tspan></tspan><tspan id="SvgjsTspan2196" dy="16" x="10"><tspan id="SvgjsTspan2197" style="text-decoration:;">    Concurrency         int</tspan></tspan><tspan id="SvgjsTspan2198" dy="16" x="10"><tspan id="SvgjsTspan2199" style="text-decoration:;">    Queue                   string   // 确定从哪个队列消费</tspan></tspan><tspan id="SvgjsTspan2200" dy="16" x="10"><tspan id="SvgjsTspan2201" style="text-decoration:;">    errorHandler         func(err error)</tspan></tspan><tspan id="SvgjsTspan2202" dy="16" x="10"><tspan id="SvgjsTspan2203" style="text-decoration:;">    preTaskHandler    func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan2204" dy="16" x="10"><tspan id="SvgjsTspan2205" style="text-decoration:;">    postTaskHandler   func(*tasks.Signature)</tspan></tspan><tspan id="SvgjsTspan2206" dy="16" x="10"><tspan id="SvgjsTspan2207" style="text-decoration:;">    preConsumeHandler func(*Worker) bool</tspan></tspan><tspan id="SvgjsTspan2208" dy="16" x="10"><tspan id="SvgjsTspan2209" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2210" transform="translate(1233.5,26)"><path id="SvgjsPath2211" d="M 0 0L 331 0L 347 16L 347 493L 0 493L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2212" d="M 331 0L 331 16L 347 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2213" d="M 0 0L 331 0L 347 16L 347 493L 0 493L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2214"><text id="SvgjsText2215" font-family="微软雅黑" text-anchor="start" font-size="13px" width="327px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="20.55" transform="rotate(0)"><tspan id="SvgjsTspan2216" dy="16" x="10"><tspan id="SvgjsTspan2217" style="text-decoration:;">defaultCnf = &amp;Config{</tspan></tspan><tspan id="SvgjsTspan2218" dy="16" x="10"><tspan id="SvgjsTspan2219" style="text-decoration:;">     Broker:          "amqp://guest:guest@localhost:5672/",</tspan></tspan><tspan id="SvgjsTspan2220" dy="16" x="10"><tspan id="SvgjsTspan2221" style="text-decoration:;">     DefaultQueue:    "machinery_tasks",</tspan></tspan><tspan id="SvgjsTspan2222" dy="16" x="10"><tspan id="SvgjsTspan2223" style="text-decoration:;">     ResultBackend:   "amqp://guest:guest@localhost:5672/",</tspan></tspan><tspan id="SvgjsTspan2224" dy="16" x="10"><tspan id="SvgjsTspan2225" style="text-decoration:;">     ResultsExpireIn: DefaultResultsExpireIn,</tspan></tspan><tspan id="SvgjsTspan2226" dy="16" x="10"><tspan id="SvgjsTspan2227" style="text-decoration:;">     AMQP: &amp;AMQPConfig{</tspan></tspan><tspan id="SvgjsTspan2228" dy="16" x="10"><tspan id="SvgjsTspan2229" style="text-decoration:;">          Exchange:      "machinery_exchange",</tspan></tspan><tspan id="SvgjsTspan2230" dy="16" x="10"><tspan id="SvgjsTspan2231" style="text-decoration:;">          ExchangeType:  "direct",</tspan></tspan><tspan id="SvgjsTspan2232" dy="16" x="10"><tspan id="SvgjsTspan2233" style="text-decoration:;">          BindingKey:    "machinery_task",</tspan></tspan><tspan id="SvgjsTspan2234" dy="16" x="10"><tspan id="SvgjsTspan2235" style="text-decoration:;">          PrefetchCount: 3,</tspan></tspan><tspan id="SvgjsTspan2236" dy="16" x="10"><tspan id="SvgjsTspan2237" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan2238" dy="16" x="10"><tspan id="SvgjsTspan2239" style="text-decoration:;">     DynamoDB: &amp;DynamoDBConfig{</tspan></tspan><tspan id="SvgjsTspan2240" dy="16" x="10"><tspan id="SvgjsTspan2241" style="text-decoration:;">          TaskStatesTable: "task_states",</tspan></tspan><tspan id="SvgjsTspan2242" dy="16" x="10"><tspan id="SvgjsTspan2243" style="text-decoration:;">          GroupMetasTable: "group_metas",</tspan></tspan><tspan id="SvgjsTspan2244" dy="16" x="10"><tspan id="SvgjsTspan2245" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan2246" dy="16" x="10"><tspan id="SvgjsTspan2247" style="text-decoration:;">     Redis: &amp;RedisConfig{</tspan></tspan><tspan id="SvgjsTspan2248" dy="16" x="10"><tspan id="SvgjsTspan2249" style="text-decoration:;">          MaxIdle:                3,</tspan></tspan><tspan id="SvgjsTspan2250" dy="16" x="10"><tspan id="SvgjsTspan2251" style="text-decoration:;">          IdleTimeout:            240,</tspan></tspan><tspan id="SvgjsTspan2252" dy="16" x="10"><tspan id="SvgjsTspan2253" style="text-decoration:;">          ReadTimeout:            15,</tspan></tspan><tspan id="SvgjsTspan2254" dy="16" x="10"><tspan id="SvgjsTspan2255" style="text-decoration:;">          WriteTimeout:           15,</tspan></tspan><tspan id="SvgjsTspan2256" dy="16" x="10"><tspan id="SvgjsTspan2257" style="text-decoration:;">          ConnectTimeout:         15,</tspan></tspan><tspan id="SvgjsTspan2258" dy="16" x="10"><tspan id="SvgjsTspan2259" style="text-decoration:;">          NormalTasksPollPeriod:  1000,</tspan></tspan><tspan id="SvgjsTspan2260" dy="16" x="10"><tspan id="SvgjsTspan2261" style="text-decoration:;">          DelayedTasksPollPeriod: 500,</tspan></tspan><tspan id="SvgjsTspan2262" dy="16" x="10"><tspan id="SvgjsTspan2263" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan2264" dy="16" x="10"><tspan id="SvgjsTspan2265" style="text-decoration:;">     GCPPubSub: &amp;GCPPubSubConfig{</tspan></tspan><tspan id="SvgjsTspan2266" dy="16" x="10"><tspan id="SvgjsTspan2267" style="text-decoration:;">          Client: nil,</tspan></tspan><tspan id="SvgjsTspan2268" dy="16" x="10"><tspan id="SvgjsTspan2269" style="text-decoration:;">     },</tspan></tspan><tspan id="SvgjsTspan2270" dy="16" x="10"><tspan id="SvgjsTspan2271" style="text-decoration:;"> }</tspan></tspan></text></g></g><g id="SvgjsG2272" transform="translate(1069.5,1427)"><path id="SvgjsPath2273" d="M 0 0L 517 0L 517 133.5L 0 133.5Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2274"><text id="SvgjsText2275" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.8" transform="rotate(0)"><tspan id="SvgjsTspan2276" dy="16" x="258.5"><tspan id="SvgjsTspan2277" style="text-decoration:;"> broker.StartConsuming  (worker循环调用)</tspan></tspan><tspan id="SvgjsTspan2278" dy="16" x="258.5"><tspan id="SvgjsTspan2279" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2280" dy="16" x="258.5"><tspan id="SvgjsTspan2281" style="text-decoration:;">b.Broker.StartConsuming(consumerTag, concurrency, taskProcessor) //初始化retry函数</tspan></tspan><tspan id="SvgjsTspan2282" dy="16" x="258.5"><tspan id="SvgjsTspan2283" style="text-decoration:;">b.GetRetryFunc()(b.GetRetryStopChan()) //闭包fibonacci阻塞后重试</tspan></tspan><tspan id="SvgjsTspan2284" dy="16" x="258.5"><tspan id="SvgjsTspan2285" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2286" transform="translate(1066,579)"><path id="SvgjsPath2287" d="M 0 0L 501 0L 517 16L 517 331L 0 331L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2288" d="M 501 0L 501 16L 517 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2289" d="M 0 0L 501 0L 517 16L 517 331L 0 331L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2290"><text id="SvgjsText2291" font-family="微软雅黑" text-anchor="start" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="11.55" transform="rotate(0)"><tspan id="SvgjsTspan2292" dy="16" x="10"><tspan id="SvgjsTspan2293" style="text-decoration:;">// Broker - a common interface for all brokers</tspan></tspan><tspan id="SvgjsTspan2294" dy="16" x="10"><tspan id="SvgjsTspan2295" style="text-decoration:;">type Broker interface {</tspan></tspan><tspan id="SvgjsTspan2296" dy="16" x="10"><tspan id="SvgjsTspan2297" style="text-decoration:;">    GetConfig() *config.Config</tspan></tspan><tspan id="SvgjsTspan2298" dy="16" x="10"><tspan id="SvgjsTspan2299" style="text-decoration:;">    SetRegisteredTaskNames(names []string)</tspan></tspan><tspan id="SvgjsTspan2300" dy="16" x="10"><tspan id="SvgjsTspan2301" style="text-decoration:;">    IsTaskRegistered(name string) bool</tspan></tspan><tspan id="SvgjsTspan2302" dy="16" x="10"><tspan id="SvgjsTspan2303" style="text-decoration:;">    StartConsuming(consumerTag string, concurrency int, p TaskProcessor) (bool, error)</tspan></tspan><tspan id="SvgjsTspan2304" dy="16" x="10"><tspan id="SvgjsTspan2305" style="text-decoration:;">    StopConsuming()</tspan></tspan><tspan id="SvgjsTspan2306" dy="16" x="10"><tspan id="SvgjsTspan2307" style="text-decoration:;">    Publish(ctx context.Context, task *tasks.Signature) error // common 未实现</tspan></tspan><tspan id="SvgjsTspan2308" dy="16" x="10"><tspan id="SvgjsTspan2309" style="text-decoration:;">    GetPendingTasks(queue string) ([]*tasks.Signature, error) // common 未实现</tspan></tspan><tspan id="SvgjsTspan2310" dy="16" x="10"><tspan id="SvgjsTspan2311" style="text-decoration:;">    GetDelayedTasks() ([]*tasks.Signature, error) // common 未实现</tspan></tspan><tspan id="SvgjsTspan2312" dy="16" x="10"><tspan id="SvgjsTspan2313" style="text-decoration:;">    AdjustRoutingKey(s *tasks.Signature) // </tspan></tspan><tspan id="SvgjsTspan2314" dy="16" x="10"><tspan id="SvgjsTspan2315" style="text-decoration:;">}</tspan></tspan><tspan id="SvgjsTspan2316" dy="16" x="10"><tspan id="SvgjsTspan2317" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2318" dy="16" x="10"><tspan id="SvgjsTspan2319" style="text-decoration:;">// TaskProcessor - can process a delivered task</tspan></tspan><tspan id="SvgjsTspan2320" dy="16" x="10"><tspan id="SvgjsTspan2321" style="text-decoration:;">type TaskProcessor interface {</tspan></tspan><tspan id="SvgjsTspan2322" dy="16" x="10"><tspan id="SvgjsTspan2323" style="text-decoration:;">    Process(signature *tasks.Signature) error</tspan></tspan><tspan id="SvgjsTspan2324" dy="16" x="10"><tspan id="SvgjsTspan2325" style="text-decoration:;">    CustomQueue() string</tspan></tspan><tspan id="SvgjsTspan2326" dy="16" x="10"><tspan id="SvgjsTspan2327" style="text-decoration:;">    PreConsumeHandler() bool</tspan></tspan><tspan id="SvgjsTspan2328" dy="16" x="10"><tspan id="SvgjsTspan2329" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2330" transform="translate(1069.5,1246.5)"><path id="SvgjsPath2331" d="M 0 0L 511 0L 511 146L 0 146Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2332"><text id="SvgjsText2333" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="491px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.05" transform="rotate(0)"><tspan id="SvgjsTspan2334" dy="16" x="255.5"><tspan id="SvgjsTspan2335" style="text-decoration:;">broker.Publish</tspan></tspan><tspan id="SvgjsTspan2336" dy="16" x="255.5"><tspan id="SvgjsTspan2337" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2338" dy="16" x="255.5"><tspan id="SvgjsTspan2339" style="text-decoration:;">//使用signature的RoutingKey，或者DefaultQueue作发布</tspan></tspan><tspan id="SvgjsTspan2340" dy="16" x="255.5"><tspan id="SvgjsTspan2341" style="text-decoration:;"> b.Broker.AdjustRoutingKey(signature)</tspan></tspan><tspan id="SvgjsTspan2342" dy="16" x="255.5"><tspan id="SvgjsTspan2343" style="text-decoration:;">msg, err := json.Marshal(signature)</tspan></tspan><tspan id="SvgjsTspan2344" dy="16" x="255.5"><tspan id="SvgjsTspan2345" style="text-decoration:;">_, err = conn.Do("ZADD", redisDelayedTasksKey, score, msg) //延迟 score为时间戳</tspan></tspan><tspan id="SvgjsTspan2346" dy="16" x="255.5"><tspan id="SvgjsTspan2347" style="text-decoration:;">_, err = conn.Do("RPUSH", signature.RoutingKey, msg) //非延迟</tspan></tspan><tspan id="SvgjsTspan2348" dy="16" x="255.5"><tspan id="SvgjsTspan2349" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2350" transform="translate(1066,940.5)"><path id="SvgjsPath2351" d="M 0 0L 501 0L 517 16L 517 259L 0 259L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2352" d="M 501 0L 501 16L 517 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2353" d="M 0 0L 501 0L 517 16L 517 259L 0 259L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2354"><text id="SvgjsText2355" font-family="微软雅黑" text-anchor="start" font-size="13px" width="497px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.55" transform="rotate(0)"><tspan id="SvgjsTspan2356" dy="16" x="10"><tspan id="SvgjsTspan2357" style="text-decoration:;">type Broker struct {</tspan></tspan><tspan id="SvgjsTspan2358" dy="16" x="10"><tspan id="SvgjsTspan2359" style="text-decoration:;">    common.Broker</tspan></tspan><tspan id="SvgjsTspan2360" dy="16" x="10"><tspan id="SvgjsTspan2361" style="text-decoration:;">    common.RedisConnector // 嵌套RedisConnector，后面调用NewPool</tspan></tspan><tspan id="SvgjsTspan2362" dy="16" x="10"><tspan id="SvgjsTspan2363" style="text-decoration:;">    host                  string</tspan></tspan><tspan id="SvgjsTspan2364" dy="16" x="10"><tspan id="SvgjsTspan2365" style="text-decoration:;">    password          string</tspan></tspan><tspan id="SvgjsTspan2366" dy="16" x="10"><tspan id="SvgjsTspan2367" style="text-decoration:;">    db                     int</tspan></tspan><tspan id="SvgjsTspan2368" dy="16" x="10"><tspan id="SvgjsTspan2369" style="text-decoration:;">    pool                  *redis.Pool</tspan></tspan><tspan id="SvgjsTspan2370" dy="16" x="10"><tspan id="SvgjsTspan2371" style="text-decoration:;">    consumingWG        sync.WaitGroup // make sure whole consumption completes</tspan></tspan><tspan id="SvgjsTspan2372" dy="16" x="10"><tspan id="SvgjsTspan2373" style="text-decoration:;">    processingWG        sync.WaitGroup // make sure task processing completes</tspan></tspan><tspan id="SvgjsTspan2374" dy="16" x="10"><tspan id="SvgjsTspan2375" style="text-decoration:;">    delayedWG             sync.WaitGroup</tspan></tspan><tspan id="SvgjsTspan2376" dy="16" x="10"><tspan id="SvgjsTspan2377" style="text-decoration:;">    socketPath string       // If set, path to a socket file overrides hostname</tspan></tspan><tspan id="SvgjsTspan2378" dy="16" x="10"><tspan id="SvgjsTspan2379" style="text-decoration:;">    redsync    *redsync.Redsync</tspan></tspan><tspan id="SvgjsTspan2380" dy="16" x="10"><tspan id="SvgjsTspan2381" style="text-decoration:;">    redisOnce  sync.Once</tspan></tspan><tspan id="SvgjsTspan2382" dy="16" x="10"><tspan id="SvgjsTspan2383" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2384" transform="translate(1068,1804.5)"><path id="SvgjsPath2385" d="M 0 0L 520 0L 520 118L 0 118Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2386"><text id="SvgjsText2387" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="500px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="9.05" transform="rotate(0)"><tspan id="SvgjsTspan2388" dy="16" x="260"><tspan id="SvgjsTspan2389" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2390" dy="16" x="260"><tspan id="SvgjsTspan2391" style="text-decoration:;"> 延迟任务（goroutine for循环）</tspan></tspan><tspan id="SvgjsTspan2392" dy="16" x="260"><tspan id="SvgjsTspan2393" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2394" dy="16" x="260"><tspan id="SvgjsTspan2395" style="text-decoration:;">task, err := b.nextDelayedTask(redisDelayedTasksKey)</tspan></tspan><tspan id="SvgjsTspan2396" dy="16" x="260"><tspan id="SvgjsTspan2397" style="text-decoration:;">// 转task为signature,重新发布</tspan></tspan><tspan id="SvgjsTspan2398" dy="16" x="260"><tspan id="SvgjsTspan2399" style="text-decoration:;"> b.Publish(context.Background(), signature);</tspan></tspan></text></g></g><g id="SvgjsG2400" transform="translate(1068.5,1617.5)"><path id="SvgjsPath2401" d="M 0 0L 519 0L 519 134L 0 134Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2402"><text id="SvgjsText2403" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="17.05" transform="rotate(0)"><tspan id="SvgjsTspan2404" dy="16" x="259.5"><tspan id="SvgjsTspan2405" style="text-decoration:;">非延迟任务（goroutine for循环）</tspan></tspan><tspan id="SvgjsTspan2406" dy="16" x="259.5"><tspan id="SvgjsTspan2407" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2408" dy="16" x="259.5"><tspan id="SvgjsTspan2409" style="text-decoration:;">taskProcessor.PreConsumeHandler()  </tspan></tspan><tspan id="SvgjsTspan2410" dy="16" x="259.5"><tspan id="SvgjsTspan2411" style="text-decoration:;">//通过Blpop获取下一个任务，task为切片格式</tspan></tspan><tspan id="SvgjsTspan2412" dy="16" x="259.5"><tspan id="SvgjsTspan2413" style="text-decoration:;">task, _ := b.nextTask(getQueue(b.GetConfig(), taskProcessor))</tspan></tspan><tspan id="SvgjsTspan2414" dy="16" x="259.5"><tspan id="SvgjsTspan2415" style="text-decoration:;">deliveries &lt;- task</tspan></tspan></text></g></g><g id="SvgjsG2416" transform="translate(1068.5,1972.5)"><path id="SvgjsPath2417" d="M 0 0L 519 0L 519 163L 0 163Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2418"><text id="SvgjsText2419" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.55" transform="rotate(0)"><tspan id="SvgjsTspan2420" dy="16" x="259.5"><tspan id="SvgjsTspan2421" style="text-decoration:;">b.consume</tspan></tspan><tspan id="SvgjsTspan2422" dy="16" x="259.5"><tspan id="SvgjsTspan2423" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2424" dy="16" x="259.5"><tspan id="SvgjsTspan2425" style="text-decoration:;">if err := b.consume(deliveries, concurrency, taskProcessor); err != nil {return b.GetRetry(), err}</tspan></tspan><tspan id="SvgjsTspan2426" dy="16" x="259.5"><tspan id="SvgjsTspan2427" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2428" dy="16" x="259.5"><tspan id="SvgjsTspan2429" style="text-decoration:;">//开启for 循环阻塞</tspan></tspan><tspan id="SvgjsTspan2430" dy="16" x="259.5"><tspan id="SvgjsTspan2431" style="text-decoration:;">case &lt;-b.GetStopChan():</tspan></tspan><tspan id="SvgjsTspan2432" dy="16" x="259.5"><tspan id="SvgjsTspan2433" style="text-decoration:;">     // 如果收到停止信号，消息重新入队</tspan></tspan><tspan id="SvgjsTspan2434" dy="16" x="259.5"><tspan id="SvgjsTspan2435" style="text-decoration:;">     b.requeueMessage(d, taskProcessor)</tspan></tspan><tspan id="SvgjsTspan2436" dy="16" x="259.5"><tspan id="SvgjsTspan2437" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2438"><path id="SvgjsPath2439" d="M1068.5 1684.5L1030.5 1684.5L1030.5 2054L1068.5 2054" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2440)"></path></g><g id="SvgjsG2442"><path id="SvgjsPath2443" d="M1328 1751.5L1328 1778L1328 1778L1328 1804.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2444)"></path></g><g id="SvgjsG2446"><path id="SvgjsPath2447" d="M1588 1863.5L1618 1863.5L1618 1684.5L1587.5 1684.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2448)"></path></g><g id="SvgjsG2450"><path id="SvgjsPath2451" d="M1328 1560.5L1328 1589L1328 1589L1328 1617.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2452)"></path></g><g id="SvgjsG2454" transform="translate(1066,2197.5)"><path id="SvgjsPath2455" d="M 0 0L 524 0L 524 140L 0 140Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2456"><text id="SvgjsText2457" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="504px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="12.05" transform="rotate(0)"><tspan id="SvgjsTspan2458" dy="16" x="262"><tspan id="SvgjsTspan2459" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2460" dy="16" x="262"><tspan id="SvgjsTspan2461" style="text-decoration:;">b.consumeOne(d, taskProcessor)</tspan></tspan><tspan id="SvgjsTspan2462" dy="16" x="262"><tspan id="SvgjsTspan2463" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2464" dy="16" x="262"><tspan id="SvgjsTspan2465" style="text-decoration:;">//还原signature</tspan></tspan><tspan id="SvgjsTspan2466" dy="16" x="262"><tspan id="SvgjsTspan2467" style="text-decoration:;">//判断任务是否注册过</tspan></tspan><tspan id="SvgjsTspan2468" dy="16" x="262"><tspan id="SvgjsTspan2469" style="text-decoration:;">if !b.IsTaskRegistered(signature.Name) {return nil}</tspan></tspan><tspan id="SvgjsTspan2470" dy="16" x="262"><tspan id="SvgjsTspan2471" style="text-decoration:;"> taskProcessor.Process(signature)</tspan></tspan></text></g></g><g id="SvgjsG2472"><path id="SvgjsPath2473" d="M1328 2135.5L1328 2166.5L1328 2166.5L1328 2197.5" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2474)"></path></g><g id="SvgjsG2476" transform="translate(550.2165574353502,1249.5246913580247)"><path id="SvgjsPath2477" d="M 0 0L 446 0L 446 416L 0 416Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2478"><text id="SvgjsText2479" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.05" transform="rotate(0)"><tspan id="SvgjsTspan2480" dy="16" x="223"><tspan id="SvgjsTspan2481" style="text-decoration:;">worker.Process</tspan></tspan><tspan id="SvgjsTspan2482" dy="16" x="223"><tspan id="SvgjsTspan2483" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2484" dy="16" x="223"><tspan id="SvgjsTspan2485" style="text-decoration:;">if !worker.server.IsTaskRegistered(signature.Name) {return nil}</tspan></tspan><tspan id="SvgjsTspan2486" dy="16" x="223"><tspan id="SvgjsTspan2487" style="text-decoration:;">// 根据signature名称，获取taskFunc</tspan></tspan><tspan id="SvgjsTspan2488" dy="16" x="223"><tspan id="SvgjsTspan2489" style="text-decoration:;"> taskFunc, err := worker.server.GetRegisteredTask(signature.Name)</tspan></tspan><tspan id="SvgjsTspan2490" dy="16" x="223"><tspan id="SvgjsTspan2491" style="text-decoration:;">//设置task状态为RECEIVED</tspan></tspan><tspan id="SvgjsTspan2492" dy="16" x="223"><tspan id="SvgjsTspan2493" style="text-decoration:;"> worker.server.GetBackend().SetStateReceived(signature);</tspan></tspan><tspan id="SvgjsTspan2494" dy="16" x="223"><tspan id="SvgjsTspan2495" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2496" dy="16" x="223"><tspan id="SvgjsTspan2497" style="text-decoration:;">// 根据 taskFunc 和签名，反射得到task对象</tspan></tspan><tspan id="SvgjsTspan2498" dy="16" x="223"><tspan id="SvgjsTspan2499" style="text-decoration:;"> task, err := tasks.NewWithSignature(taskFunc, signature)</tspan></tspan><tspan id="SvgjsTspan2500" dy="16" x="223"><tspan id="SvgjsTspan2501" style="text-decoration:;">//设置task状态为STARTED</tspan></tspan><tspan id="SvgjsTspan2502" dy="16" x="223"><tspan id="SvgjsTspan2503" style="text-decoration:;"> worker.server.GetBackend().SetStateStarted(signature); </tspan></tspan><tspan id="SvgjsTspan2504" dy="16" x="223"><tspan id="SvgjsTspan2505" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2506" dy="16" x="223"><tspan id="SvgjsTspan2507" style="text-decoration:;">if worker.postTaskHandler != nil {defer worker.postTaskHandler(signature)}</tspan></tspan><tspan id="SvgjsTspan2508" dy="16" x="223"><tspan id="SvgjsTspan2509" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2510" dy="16" x="223"><tspan id="SvgjsTspan2511" style="text-decoration:;">results, err := task.Call()</tspan></tspan><tspan id="SvgjsTspan2512" dy="16" x="223"><tspan id="SvgjsTspan2513" style="text-decoration:;">// err 不为nil</tspan></tspan><tspan id="SvgjsTspan2514" dy="16" x="223"><tspan id="SvgjsTspan2515" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2516" dy="16" x="223"><tspan id="SvgjsTspan2517" style="text-decoration:;">// 如果重试次数大于 0,执行taskRetry: retrycount--,retrytimeout下次非波那且</tspan></tspan><tspan id="SvgjsTspan2518" dy="16" x="223"><tspan id="SvgjsTspan2519" style="text-decoration:;">值，worker.server.SendTask(signature)</tspan></tspan><tspan id="SvgjsTspan2520" dy="16" x="223"><tspan id="SvgjsTspan2521" style="text-decoration:;">  if signature.RetryCount &gt; 0 {return worker.taskRetry(signature)}</tspan></tspan><tspan id="SvgjsTspan2522" dy="16" x="223"><tspan id="SvgjsTspan2523" style="text-decoration:;">//设置task状态为RETRY</tspan></tspan><tspan id="SvgjsTspan2524" dy="16" x="223"><tspan id="SvgjsTspan2525" style="text-decoration:;">if err := worker.server.GetBackend().SetStateRetry(signature);</tspan></tspan><tspan id="SvgjsTspan2526" dy="16" x="223"><tspan id="SvgjsTspan2527" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2528" transform="translate(550.2165574353502,1715.5)"><path id="SvgjsPath2529" d="M 0 0L 446 0L 446 499L 0 499Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2530"><text id="SvgjsText2531" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="7.55" transform="rotate(0)"><tspan id="SvgjsTspan2532" dy="16" x="223"><tspan id="SvgjsTspan2533" style="text-decoration:;">taskSucceeded</tspan></tspan><tspan id="SvgjsTspan2534" dy="16" x="223"><tspan id="SvgjsTspan2535" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2536" dy="16" x="223"><tspan id="SvgjsTspan2537" style="text-decoration:;">//设置task状态为SUCCESS</tspan></tspan><tspan id="SvgjsTspan2538" dy="16" x="223"><tspan id="SvgjsTspan2539" style="text-decoration:;"> worker.server.GetBackend().SetStateSuccess(signature, taskResults)</tspan></tspan><tspan id="SvgjsTspan2540" dy="16" x="223"><tspan id="SvgjsTspan2541" style="text-decoration:;">// 把结果写入日志</tspan></tspan><tspan id="SvgjsTspan2542" dy="16" x="223"><tspan id="SvgjsTspan2543" style="text-decoration:;">log.DEBUG.Printf("Processed task %s. Results = %s", signature.UUID, </tspan></tspan><tspan id="SvgjsTspan2544" dy="16" x="223"><tspan id="SvgjsTspan2545" style="text-decoration:;">debugResults)</tspan></tspan><tspan id="SvgjsTspan2546" dy="16" x="223"><tspan id="SvgjsTspan2547" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2548" dy="16" x="223"><tspan id="SvgjsTspan2549" style="text-decoration:;">// 触发成功回调</tspan></tspan><tspan id="SvgjsTspan2550" dy="16" x="223"><tspan id="SvgjsTspan2551" style="text-decoration:;">//是否把结果传入successfunc</tspan></tspan><tspan id="SvgjsTspan2552" dy="16" x="223"><tspan id="SvgjsTspan2553" style="text-decoration:;"> for _, successTask := range signature.OnSuccess {}</tspan></tspan><tspan id="SvgjsTspan2554" dy="16" x="223"><tspan id="SvgjsTspan2555" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2556" dy="16" x="223"><tspan id="SvgjsTspan2557" style="text-decoration:;">//非chord任务到此返回</tspan></tspan><tspan id="SvgjsTspan2558" dy="16" x="223"><tspan id="SvgjsTspan2559" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2560" dy="16" x="223"><tspan id="SvgjsTspan2561" style="text-decoration:;">// 判断分组任务是否完成，完成包括成功或失败，没有返回</tspan></tspan><tspan id="SvgjsTspan2562" dy="16" x="223"><tspan id="SvgjsTspan2563" style="text-decoration:;"> groupCompleted, err := worker.server.GetBackend().GroupCompleted(）</tspan></tspan><tspan id="SvgjsTspan2564" dy="16" x="223"><tspan id="SvgjsTspan2565" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2566" dy="16" x="223"><tspan id="SvgjsTspan2567" style="text-decoration:;">// 判断 ChordTriggered 是否触发过了</tspan></tspan><tspan id="SvgjsTspan2568" dy="16" x="223"><tspan id="SvgjsTspan2569" style="text-decoration:;"> shouldTrigger, err := </tspan></tspan><tspan id="SvgjsTspan2570" dy="16" x="223"><tspan id="SvgjsTspan2571" style="text-decoration:;">worker.server.GetBackend().TriggerChord(signature.GroupUUID)</tspan></tspan><tspan id="SvgjsTspan2572" dy="16" x="223"><tspan id="SvgjsTspan2573" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2574" dy="16" x="223"><tspan id="SvgjsTspan2575" style="text-decoration:;">//获取多个task 状态</tspan></tspan><tspan id="SvgjsTspan2576" dy="16" x="223"><tspan id="SvgjsTspan2577" style="text-decoration:;">taskStates, err := worker.server.GetBackend().GroupTaskStates()</tspan></tspan><tspan id="SvgjsTspan2578" dy="16" x="223"><tspan id="SvgjsTspan2579" style="text-decoration:;">//如果有一个task非成功，返回不触发chrod任务</tspan></tspan><tspan id="SvgjsTspan2580" dy="16" x="223"><tspan id="SvgjsTspan2581" style="text-decoration:;">//根据条件，把result结果添加到signature.ChordCallback.Args</tspan></tspan><tspan id="SvgjsTspan2582" dy="16" x="223"><tspan id="SvgjsTspan2583" style="text-decoration:;">for _, taskResult := range taskState.Results {}</tspan></tspan><tspan id="SvgjsTspan2584" dy="16" x="223"><tspan id="SvgjsTspan2585" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2586" dy="16" x="223"><tspan id="SvgjsTspan2587" style="text-decoration:;">// 触发 chord task</tspan></tspan><tspan id="SvgjsTspan2588" dy="16" x="223"><tspan id="SvgjsTspan2589" style="text-decoration:;"> _, err = worker.server.SendTask(signature.ChordCallback)</tspan></tspan><tspan id="SvgjsTspan2590" dy="16" x="223"><tspan id="SvgjsTspan2591" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2592" transform="translate(57.5,1480.5)"><path id="SvgjsPath2593" d="M 0 0L 426 0L 426 185L 0 185Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2594"><text id="SvgjsText2595" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="26.55" transform="rotate(0)"><tspan id="SvgjsTspan2596" dy="16" x="213"><tspan id="SvgjsTspan2597" style="text-decoration:;">task.NewWithSignature</tspan></tspan><tspan id="SvgjsTspan2598" dy="16" x="213"><tspan id="SvgjsTspan2599" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2600" dy="16" x="213"><tspan id="SvgjsTspan2601" style="text-decoration:;">ctx = context.WithValue(ctx, signatureCtx, signature)</tspan></tspan><tspan id="SvgjsTspan2602" dy="16" x="213"><tspan id="SvgjsTspan2603" style="text-decoration:;">task := &amp;Task{TaskFunc: reflect.ValueOf(taskFunc),Context:  ctx}</tspan></tspan><tspan id="SvgjsTspan2604" dy="16" x="213"><tspan id="SvgjsTspan2605" style="text-decoration:;">//判断参数个数&gt;0，以及地一个参数是否是ctx类型</tspan></tspan><tspan id="SvgjsTspan2606" dy="16" x="213"><tspan id="SvgjsTspan2607" style="text-decoration:;">if taskFuncType.NumIn() &gt; 0 {if IsContextType(taskFuncType.In(0)) {}}</tspan></tspan><tspan id="SvgjsTspan2608" dy="16" x="213"><tspan id="SvgjsTspan2609" style="text-decoration:;">//转换args</tspan></tspan><tspan id="SvgjsTspan2610" dy="16" x="213"><tspan id="SvgjsTspan2611" style="text-decoration:;">if err := task.ReflectArgs(args); err != nil </tspan></tspan></text></g></g><g id="SvgjsG2612" transform="translate(52.5,1841.5)"><path id="SvgjsPath2613" d="M 0 0L 431 0L 431 229L 0 229Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2614"><text id="SvgjsText2615" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="411px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="8.55" transform="rotate(0)"><tspan id="SvgjsTspan2616" dy="16" x="215.5"><tspan id="SvgjsTspan2617" style="text-decoration:;">task.Call()</tspan></tspan><tspan id="SvgjsTspan2618" dy="16" x="215.5"><tspan id="SvgjsTspan2619" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2620" dy="16" x="215.5"><tspan id="SvgjsTspan2621" style="text-decoration:;">//panic捕捉</tspan></tspan><tspan id="SvgjsTspan2622" dy="16" x="215.5"><tspan id="SvgjsTspan2623" style="text-decoration:;">// 通过反射调用TaskFun</tspan></tspan><tspan id="SvgjsTspan2624" dy="16" x="215.5"><tspan id="SvgjsTspan2625" style="text-decoration:;"> results := t.TaskFunc.Call(args)</tspan></tspan><tspan id="SvgjsTspan2626" dy="16" x="215.5"><tspan id="SvgjsTspan2627" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2628" dy="16" x="215.5"><tspan id="SvgjsTspan2629" style="text-decoration:;">// 最后一个返回值</tspan></tspan><tspan id="SvgjsTspan2630" dy="16" x="215.5"><tspan id="SvgjsTspan2631" style="text-decoration:;"> lastResult := results[len(results)-1]</tspan></tspan><tspan id="SvgjsTspan2632" dy="16" x="215.5"><tspan id="SvgjsTspan2633" style="text-decoration:;">//判断lastResult是否为Retriabl错误类型</tspan></tspan><tspan id="SvgjsTspan2634" dy="16" x="215.5"><tspan id="SvgjsTspan2635" style="text-decoration:;"> if lastResult.Type().Implements(retriableErrorInterface) </tspan></tspan><tspan id="SvgjsTspan2636" dy="16" x="215.5"><tspan id="SvgjsTspan2637" style="text-decoration:;">//遍历results返回taskResult type </tspan></tspan><tspan id="SvgjsTspan2638" dy="16" x="215.5"><tspan id="SvgjsTspan2639" style="text-decoration:;">//返回结果的type类型,value 返回结果转接口类型</tspan></tspan><tspan id="SvgjsTspan2640" dy="16" x="215.5"><tspan id="SvgjsTspan2641" style="text-decoration:;">taskResults[i] = &amp;TaskResult{Type:  typeStr,Value: val}</tspan></tspan></text></g></g><g id="SvgjsG2642" transform="translate(49.5,1313.5)"><path id="SvgjsPath2643" d="M 0 0L 421 0L 437 16L 437 149L 0 149L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2644" d="M 421 0L 421 16L 437 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2645" d="M 0 0L 421 0L 437 16L 437 149L 0 149L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2646"><text id="SvgjsText2647" font-family="微软雅黑" text-anchor="start" font-size="13px" width="417px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="8.55" transform="rotate(0)"><tspan id="SvgjsTspan2648" dy="16" x="10"><tspan id="SvgjsTspan2649" style="text-decoration:;">//待运行task</tspan></tspan><tspan id="SvgjsTspan2650" dy="16" x="10"><tspan id="SvgjsTspan2651" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2652" dy="16" x="10"><tspan id="SvgjsTspan2653" style="text-decoration:;">type Task struct {</tspan></tspan><tspan id="SvgjsTspan2654" dy="16" x="10"><tspan id="SvgjsTspan2655" style="text-decoration:;">    TaskFunc   reflect.Value</tspan></tspan><tspan id="SvgjsTspan2656" dy="16" x="10"><tspan id="SvgjsTspan2657" style="text-decoration:;">    UseContext bool</tspan></tspan><tspan id="SvgjsTspan2658" dy="16" x="10"><tspan id="SvgjsTspan2659" style="text-decoration:;">    Context    context.Context</tspan></tspan><tspan id="SvgjsTspan2660" dy="16" x="10"><tspan id="SvgjsTspan2661" style="text-decoration:;">    Args       []reflect.Value</tspan></tspan><tspan id="SvgjsTspan2662" dy="16" x="10"><tspan id="SvgjsTspan2663" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2664" transform="translate(57.5,2123.5)"><path id="SvgjsPath2665" d="M 0 0L 426 0L 426 161L 0 161Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2666"><text id="SvgjsText2667" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.55" transform="rotate(0)"><tspan id="SvgjsTspan2668" dy="16" x="213"><tspan id="SvgjsTspan2669" style="text-decoration:;">ReflectValue</tspan></tspan><tspan id="SvgjsTspan2670" dy="16" x="213"><tspan id="SvgjsTspan2671" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2672" dy="16" x="213"><tspan id="SvgjsTspan2673" style="text-decoration:;">// 参数是切片类型</tspan></tspan><tspan id="SvgjsTspan2674" dy="16" x="213"><tspan id="SvgjsTspan2675" style="text-decoration:;">if strings.HasPrefix(valueType, "[]") {return reflectValues(valueType, </tspan></tspan><tspan id="SvgjsTspan2676" dy="16" x="213"><tspan id="SvgjsTspan2677" style="text-decoration:;">value)}</tspan></tspan><tspan id="SvgjsTspan2678" dy="16" x="213"><tspan id="SvgjsTspan2679" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2680" dy="16" x="213"><tspan id="SvgjsTspan2681" style="text-decoration:;">// 非切片类型</tspan></tspan><tspan id="SvgjsTspan2682" dy="16" x="213"><tspan id="SvgjsTspan2683" style="text-decoration:;">return reflectValue(valueType, value)</tspan></tspan><tspan id="SvgjsTspan2684" dy="16" x="213"><tspan id="SvgjsTspan2685" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2686" transform="translate(55,1691.5)"><path id="SvgjsPath2687" d="M 0 0L 426 0L 426 111L 0 111Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2688"><text id="SvgjsText2689" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="406px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="5.55" transform="rotate(0)"><tspan id="SvgjsTspan2690" dy="16" x="213"><tspan id="SvgjsTspan2691" style="text-decoration:;"> task.ReflectArgs</tspan></tspan><tspan id="SvgjsTspan2692" dy="16" x="213"><tspan id="SvgjsTspan2693" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2694" dy="16" x="213"><tspan id="SvgjsTspan2695" style="text-decoration:;">//遍历args，转换为reflect.Value类型， type为切片或基本类型</tspan></tspan><tspan id="SvgjsTspan2696" dy="16" x="213"><tspan id="SvgjsTspan2697" style="text-decoration:;">argValue, err := ReflectValue(arg.Type, arg.Value)</tspan></tspan><tspan id="SvgjsTspan2698" dy="16" x="213"><tspan id="SvgjsTspan2699" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2700" dy="16" x="213"><tspan id="SvgjsTspan2701" style="text-decoration:;">argValues[i] = argValue</tspan></tspan></text></g></g><g id="SvgjsG2702"><path id="SvgjsPath2703" d="M55 1747L25 1747L25 2204L57.5 2204" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2704)"></path></g><g id="SvgjsG2706" transform="translate(60.5,2325.5)"><path id="SvgjsPath2707" d="M 0 0L 423 0L 423 332L 0 332Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2708"><text id="SvgjsText2709" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="403px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="4.05" transform="rotate(0)"><tspan id="SvgjsTspan2710" dy="16" x="211.5"><tspan id="SvgjsTspan2711" style="text-decoration:;">reflectValues</tspan></tspan><tspan id="SvgjsTspan2712" dy="16" x="211.5"><tspan id="SvgjsTspan2713" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2714" dy="16" x="211.5"><tspan id="SvgjsTspan2715" style="text-decoration:;">//判断类型是否在 typeMap 自定义map 中</tspan></tspan><tspan id="SvgjsTspan2716" dy="16" x="211.5"><tspan id="SvgjsTspan2717" style="text-decoration:;"> theType, ok := typesMap[valueType]</tspan></tspan><tspan id="SvgjsTspan2718" dy="16" x="211.5"><tspan id="SvgjsTspan2719" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2720" dy="16" x="211.5"><tspan id="SvgjsTspan2721" style="text-decoration:;">// 如果value为nil,  返回空切片</tspan></tspan><tspan id="SvgjsTspan2722" dy="16" x="211.5"><tspan id="SvgjsTspan2723" style="text-decoration:;">if value == nil {return reflect.MakeSlice(theType, 0, 0), nil}</tspan></tspan><tspan id="SvgjsTspan2724" dy="16" x="211.5"><tspan id="SvgjsTspan2725" style="text-decoration:;">//如果为字符串切片</tspan></tspan><tspan id="SvgjsTspan2726" dy="16" x="211.5"><tspan id="SvgjsTspan2727" style="text-decoration:;">if theType.String() == "[]string" {}</tspan></tspan><tspan id="SvgjsTspan2728" dy="16" x="211.5"><tspan id="SvgjsTspan2729" style="text-decoration:;">// 通过反射创建类型切片</tspan></tspan><tspan id="SvgjsTspan2730" dy="16" x="211.5"><tspan id="SvgjsTspan2731" style="text-decoration:;">  theValue = reflect.MakeSlice(theType, strs.Len(), strs.Len())</tspan></tspan><tspan id="SvgjsTspan2732" dy="16" x="211.5"><tspan id="SvgjsTspan2733" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2734" dy="16" x="211.5"><tspan id="SvgjsTspan2735" style="text-decoration:;">// 通过类型，及值转Interface 获取值字面量</tspan></tspan><tspan id="SvgjsTspan2736" dy="16" x="211.5"><tspan id="SvgjsTspan2737" style="text-decoration:;"> strValue, err := getStringValue(strings.Split(theType.String(), "[]")[1], </tspan></tspan><tspan id="SvgjsTspan2738" dy="16" x="211.5"><tspan id="SvgjsTspan2739" style="text-decoration:;">strs.Index(i).Interface())</tspan></tspan><tspan id="SvgjsTspan2740" dy="16" x="211.5"><tspan id="SvgjsTspan2741" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2742" dy="16" x="211.5"><tspan id="SvgjsTspan2743" style="text-decoration:;">//通过下表设置value</tspan></tspan><tspan id="SvgjsTspan2744" dy="16" x="211.5"><tspan id="SvgjsTspan2745" style="text-decoration:;">theValue.Index(i).SetString(strValue)</tspan></tspan><tspan id="SvgjsTspan2746" dy="16" x="211.5"><tspan id="SvgjsTspan2747" style="text-decoration:;">  return theValue, nil</tspan></tspan><tspan id="SvgjsTspan2748" dy="16" x="211.5"><tspan id="SvgjsTspan2749" style="text-decoration:;"> </tspan></tspan></text></g></g><g id="SvgjsG2750" transform="translate(549.8433260935832,2582.453125)"><path id="SvgjsPath2751" d="M 0 0L 227 0L 227 74L 0 74Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2752"><text id="SvgjsText2753" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="207px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="3.05" transform="rotate(0)"><tspan id="SvgjsTspan2754" dy="16" x="113.5"><tspan id="SvgjsTspan2755" style="text-decoration:;">getStringValue</tspan></tspan><tspan id="SvgjsTspan2756" dy="16" x="113.5"><tspan id="SvgjsTspan2757" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2758" dy="16" x="113.5"><tspan id="SvgjsTspan2759" style="text-decoration:;">s, ok := value.(string)</tspan></tspan><tspan id="SvgjsTspan2760" dy="16" x="113.5"><tspan id="SvgjsTspan2761" style="text-decoration:;">return s, nil</tspan></tspan></text></g></g><g id="SvgjsG2762" transform="translate(60.5,2692.5)"><path id="SvgjsPath2763" d="M 0 0L 423 0L 423 277L 0 277Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2764"><text id="SvgjsText2765" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="403px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="16.55" transform="rotate(0)"><tspan id="SvgjsTspan2766" dy="16" x="211.5"><tspan id="SvgjsTspan2767" style="text-decoration:;">reflectValue</tspan></tspan><tspan id="SvgjsTspan2768" dy="16" x="211.5"><tspan id="SvgjsTspan2769" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2770" dy="16" x="211.5"><tspan id="SvgjsTspan2771" style="text-decoration:;">//判断类型是否在 typeMap 自定义map 中</tspan></tspan><tspan id="SvgjsTspan2772" dy="16" x="211.5"><tspan id="SvgjsTspan2773" style="text-decoration:;">theType, ok := typesMap[valueType]</tspan></tspan><tspan id="SvgjsTspan2774" dy="16" x="211.5"><tspan id="SvgjsTspan2775" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2776" dy="16" x="211.5"><tspan id="SvgjsTspan2777" style="text-decoration:;">// 通过反射创建类型</tspan></tspan><tspan id="SvgjsTspan2778" dy="16" x="211.5"><tspan id="SvgjsTspan2779" style="text-decoration:;"> theValue := reflect.New(theType)</tspan></tspan><tspan id="SvgjsTspan2780" dy="16" x="211.5"><tspan id="SvgjsTspan2781" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2782" dy="16" x="211.5"><tspan id="SvgjsTspan2783" style="text-decoration:;"> if theType.String() == "string" {</tspan></tspan><tspan id="SvgjsTspan2784" dy="16" x="211.5"><tspan id="SvgjsTspan2785" style="text-decoration:;"> stringValue, err := getStringValue(theType.String(), value)</tspan></tspan><tspan id="SvgjsTspan2786" dy="16" x="211.5"><tspan id="SvgjsTspan2787" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2788" dy="16" x="211.5"><tspan id="SvgjsTspan2789" style="text-decoration:;">//通过指针改变值</tspan></tspan><tspan id="SvgjsTspan2790" dy="16" x="211.5"><tspan id="SvgjsTspan2791" style="text-decoration:;">theValue.Elem().SetString(stringValue)</tspan></tspan><tspan id="SvgjsTspan2792" dy="16" x="211.5"><tspan id="SvgjsTspan2793" style="text-decoration:;">//返回值</tspan></tspan><tspan id="SvgjsTspan2794" dy="16" x="211.5"><tspan id="SvgjsTspan2795" style="text-decoration:;">  return theValue.Elem(), nil</tspan></tspan></text></g></g><g id="SvgjsG2796"><path id="SvgjsPath2797" d="M451.9592729199393 93.95972508591066L745.8569771085532 93.95972508591066L745.8569771085532 259.1454401309114" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2798)"></path><rect id="SvgjsRect2800" width="82" height="20" x="640.5009825367466" y="83.95972508591066" fill="#ffffff"></rect><text id="SvgjsText2801" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="82px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="81.55972508591066" transform="rotate(0)"><tspan id="SvgjsTspan2802" dy="20" x="681.5009825367466"><tspan id="SvgjsTspan2803" style="text-decoration:;">New Wroker</tspan></tspan></text></g><g id="SvgjsG2804"><path id="SvgjsPath2805" d="M819.1058721260177 295.7428807069218L849.1058721260177 295.7428807069218L849.1058721260177 25L380.53665835844646 25L380.53665835844646 55" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2806)"></path><rect id="SvgjsRect2808" width="89" height="20" x="705.692705595693" y="15" fill="#ffffff"></rect><text id="SvgjsText2809" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="89px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="12.6" transform="rotate(0)"><tspan id="SvgjsTspan2810" dy="20" x="750.192705595693"><tspan id="SvgjsTspan2811" style="text-decoration:;">LaunchAsync</tspan></tspan></text></g><g id="SvgjsG2812"><path id="SvgjsPath2813" d="M380.5366583584464 334.7026057928326L380.5366583584464 364.7026057928326L699.297295747255 364.7026057928326L699.297295747255 329" stroke="#3399ff" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker2814)"></path><rect id="SvgjsRect2816" width="149" height="20" x="468.268279949267" y="354.7026057928326" fill="#ffffff"></rect><text id="SvgjsText2817" font-family="微软雅黑" text-anchor="middle" font-size="16px" width="149px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="16px" weight="400" font-style="" opacity="1" y="352.30260579283265" transform="rotate(0)"><tspan id="SvgjsTspan2818" dy="20" x="542.768279949267"><tspan id="SvgjsTspan2819" style="text-decoration:;"> broker.StartConsuming</tspan></tspan></text></g><g id="SvgjsG2820" transform="translate(550.2165574353502,2240.5)"><path id="SvgjsPath2821" d="M 0 0L 446 0L 446 222L 0 222Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2822"><text id="SvgjsText2823" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="426px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="37.05" transform="rotate(0)"><tspan id="SvgjsTspan2824" dy="16" x="223"><tspan id="SvgjsTspan2825" style="text-decoration:;">taskFailed</tspan></tspan><tspan id="SvgjsTspan2826" dy="16" x="223"><tspan id="SvgjsTspan2827" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2828" dy="16" x="223"><tspan id="SvgjsTspan2829" style="text-decoration:;">//设置task状态为FAILURE</tspan></tspan><tspan id="SvgjsTspan2830" dy="16" x="223"><tspan id="SvgjsTspan2831" style="text-decoration:;">worker.server.GetBackend().SetStateFailure(signature, taskErr.Error());</tspan></tspan><tspan id="SvgjsTspan2832" dy="16" x="223"><tspan id="SvgjsTspan2833" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2834" dy="16" x="223"><tspan id="SvgjsTspan2835" style="text-decoration:;">//处理错误</tspan></tspan><tspan id="SvgjsTspan2836" dy="16" x="223"><tspan id="SvgjsTspan2837" style="text-decoration:;"> worker.errorHandler(taskErr)</tspan></tspan><tspan id="SvgjsTspan2838" dy="16" x="223"><tspan id="SvgjsTspan2839" style="text-decoration:;">//循环signature.OnError，把error当作参数传给 errorTask，将errorTask入队</tspan></tspan><tspan id="SvgjsTspan2840" dy="16" x="223"><tspan id="SvgjsTspan2841" style="text-decoration:;">worker.server.SendTask(errorTask)</tspan></tspan></text></g></g><g id="SvgjsG2842" transform="translate(1072.5,2651.5)"><path id="SvgjsPath2843" d="M 0 0L 519.125 0L 519.125 314L 0 314Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2844"><text id="SvgjsText2845" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="500px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="19.05" transform="rotate(0)"><tspan id="SvgjsTspan2846" dy="16" x="260"><tspan id="SvgjsTspan2847" style="text-decoration:;">asyncResult</tspan></tspan><tspan id="SvgjsTspan2848" dy="16" x="260"><tspan id="SvgjsTspan2849" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2850" dy="16" x="260"><tspan id="SvgjsTspan2851" style="text-decoration:;">//循环执行Touch方法，获取结果，如果空sleep后继续for {results, err := </tspan></tspan><tspan id="SvgjsTspan2852" dy="16" x="260"><tspan id="SvgjsTspan2853" style="text-decoration:;">asyncResult.Touch()</tspan><tspan id="SvgjsTspan2854" style="text-decoration:;font-size: inherit;">}</tspan></tspan><tspan id="SvgjsTspan2855" dy="16" x="260"><tspan id="SvgjsTspan2856" style="text-decoration:;">//</tspan></tspan><tspan id="SvgjsTspan2857" dy="16" x="260"><tspan id="SvgjsTspan2858" style="text-decoration:;">asyncResult.GetState()</tspan></tspan><tspan id="SvgjsTspan2859" dy="16" x="260"><tspan id="SvgjsTspan2860" style="text-decoration:;">asyncResult.backend.GetState(asyncResult.Signature.UUID)</tspan></tspan><tspan id="SvgjsTspan2861" dy="16" x="260"><tspan id="SvgjsTspan2862" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2863" dy="16" x="260"><tspan id="SvgjsTspan2864" style="text-decoration:;">// 通过可变参数形式执行mget</tspan></tspan><tspan id="SvgjsTspan2865" dy="16" x="260"><tspan id="SvgjsTspan2866" style="text-decoration:;"> reply, err := redis.Values(conn.Do("MGET", taskUUIDInterfaces...))</tspan></tspan><tspan id="SvgjsTspan2867" dy="16" x="260"><tspan id="SvgjsTspan2868" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2869" dy="16" x="260"><tspan id="SvgjsTspan2870" style="text-decoration:;font-size: inherit;">//把读取的结构装换成taskState结构体</tspan></tspan><tspan id="SvgjsTspan2871" dy="16" x="260"><tspan id="SvgjsTspan2872" style="text-decoration:;"> taskState := new(tasks.TaskState)</tspan></tspan><tspan id="SvgjsTspan2873" dy="16" x="260"><tspan id="SvgjsTspan2874" style="text-decoration:;">  if err := decoder.Decode(taskState); err != nil </tspan></tspan><tspan id="SvgjsTspan2875" dy="16" x="260"><tspan id="SvgjsTspan2876" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2877" dy="16" x="260"><tspan id="SvgjsTspan2878" style="text-decoration:;font-size: inherit;">taskStates[i] = taskState</tspan></tspan><tspan id="SvgjsTspan2879" dy="16" x="260"><tspan id="SvgjsTspan2880" style="text-decoration:;font-size: inherit;">return </tspan><tspan id="SvgjsTspan2881" style="text-decoration:;">taskStates</tspan></tspan></text></g></g><g id="SvgjsG2882" transform="translate(1068.5,2416.5)"><path id="SvgjsPath2883" d="M 0 0L 503 0L 519 16L 519 184L 0 184L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2884" d="M 503 0L 503 16L 519 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2885" d="M 0 0L 503 0L 519 16L 519 184L 0 184L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2886"><text id="SvgjsText2887" font-family="微软雅黑" text-anchor="start" font-size="13px" width="499px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="2.05" transform="rotate(0)"><tspan id="SvgjsTspan2888" dy="16" x="10"><tspan id="SvgjsTspan2889" style="text-decoration:;">backend 获取结果</tspan></tspan><tspan id="SvgjsTspan2890" dy="16" x="10"><tspan id="SvgjsTspan2891" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2892" dy="16" x="10"><tspan id="SvgjsTspan2893" style="text-decoration:;">type TaskState struct {</tspan></tspan><tspan id="SvgjsTspan2894" dy="16" x="10"><tspan id="SvgjsTspan2895" style="text-decoration:;">    TaskUUID  string        `bson:"_id"`</tspan></tspan><tspan id="SvgjsTspan2896" dy="16" x="10"><tspan id="SvgjsTspan2897" style="text-decoration:;">    TaskName  string        `bson:"task_name"`</tspan></tspan><tspan id="SvgjsTspan2898" dy="16" x="10"><tspan id="SvgjsTspan2899" style="text-decoration:;">    State     string        `bson:"state"`</tspan></tspan><tspan id="SvgjsTspan2900" dy="16" x="10"><tspan id="SvgjsTspan2901" style="text-decoration:;">    Results   []*TaskResult `bson:"results"`</tspan></tspan><tspan id="SvgjsTspan2902" dy="16" x="10"><tspan id="SvgjsTspan2903" style="text-decoration:;">    Error     string        `bson:"error"`</tspan></tspan><tspan id="SvgjsTspan2904" dy="16" x="10"><tspan id="SvgjsTspan2905" style="text-decoration:;">    CreatedAt time.Time     `bson:"created_at"`</tspan></tspan><tspan id="SvgjsTspan2906" dy="16" x="10"><tspan id="SvgjsTspan2907" style="text-decoration:;">    TTL       int64         `bson:"ttl,omitempty"`</tspan></tspan><tspan id="SvgjsTspan2908" dy="16" x="10"><tspan id="SvgjsTspan2909" style="text-decoration:;">}</tspan></tspan></text></g></g><g id="SvgjsG2910" transform="translate(549.2165574353501,2700.5)"><path id="SvgjsPath2911" d="M 0 0L 448 0L 448 269L 0 269Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path><g id="SvgjsG2912"><text id="SvgjsText2913" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="428px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="28.55" transform="rotate(0)"><tspan id="SvgjsTspan2914" dy="16" x="224"><tspan id="SvgjsTspan2915" style="text-decoration:;">workflow</tspan></tspan><tspan id="SvgjsTspan2916" dy="16" x="224"><tspan id="SvgjsTspan2917" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2918" dy="16" x="224"><tspan id="SvgjsTspan2919" style="text-decoration:;">NewGroup</tspan></tspan><tspan id="SvgjsTspan2920" dy="16" x="224"><tspan id="SvgjsTspan2921" style="text-decoration:;"> signature.GroupUUID = groupID</tspan></tspan><tspan id="SvgjsTspan2922" dy="16" x="224"><tspan id="SvgjsTspan2923" style="text-decoration:;">  signature.GroupTaskCount = len(signatures)</tspan></tspan><tspan id="SvgjsTspan2924" dy="16" x="224"><tspan id="SvgjsTspan2925" style="text-decoration:;"> &amp;Group{GroupUUID: groupID,Tasks:signatures}</tspan></tspan><tspan id="SvgjsTspan2926" dy="16" x="224"><tspan id="SvgjsTspan2927" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2928" dy="16" x="224"><tspan id="SvgjsTspan2929" style="text-decoration:;">NewChain</tspan></tspan><tspan id="SvgjsTspan2930" dy="16" x="224"><tspan id="SvgjsTspan2931" style="text-decoration:;">signatures[i-1].OnSuccess = []*Signature{signatures[i]}</tspan></tspan><tspan id="SvgjsTspan2932" dy="16" x="224"><tspan id="SvgjsTspan2933" style="text-decoration:;"> </tspan></tspan><tspan id="SvgjsTspan2934" dy="16" x="224"><tspan id="SvgjsTspan2935" style="text-decoration:;">NewChord</tspan></tspan><tspan id="SvgjsTspan2936" dy="16" x="224"><tspan id="SvgjsTspan2937" style="text-decoration:;">NewChord(group *Group, callback *Signature)</tspan></tspan><tspan id="SvgjsTspan2938" dy="16" x="224"><tspan id="SvgjsTspan2939" style="text-decoration:;">for _, signature := range group.Tasks {signature.ChordCallback = callback}</tspan></tspan></text></g></g><g id="SvgjsG2940" transform="translate(787.5,2582.453125)"><path id="SvgjsPath2941" d="M 0 0L 197 0L 213 16L 213 74L 0 74L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2942" d="M 197 0L 197 16L 213 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2943" d="M 0 0L 197 0L 213 16L 213 74L 0 74L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2944"><text id="SvgjsText2945" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="193px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="27.05" transform="rotate(0)"><tspan id="SvgjsTspan2946" dy="16" x="106.5"><tspan id="SvgjsTspan2947" style="text-decoration:;">workflow</tspan></tspan></text></g></g><g id="SvgjsG2948" transform="translate(895.5,150)"><path id="SvgjsPath2949" d="M 0 0L 294 0L 310 16L 310 369L 0 369L 0 0Z" stroke="none" fill-opacity="1" fill="#ffffaa"></path><path id="SvgjsPath2950" d="M 294 0L 294 16L 310 16Z" stroke="none" fill-opacity="1" fill="#cdcdcd"></path><path id="SvgjsPath2951" d="M 0 0L 294 0L 310 16L 310 369L 0 369L 0 0Z" stroke="none" fill="none"></path><g id="SvgjsG2952"><text id="SvgjsText2953" font-family="微软雅黑" text-anchor="start" font-size="13px" width="290px" fill="#323232" font-weight="400" align="middle" anchor="start" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="14.55" transform="rotate(0)"><tspan id="SvgjsTspan2954" dy="16" x="10"><tspan id="SvgjsTspan2955" style="text-decoration:;">type Signature struct {</tspan></tspan><tspan id="SvgjsTspan2956" dy="16" x="10"><tspan id="SvgjsTspan2957" style="text-decoration:;">    UUID           string </tspan></tspan><tspan id="SvgjsTspan2958" dy="16" x="10"><tspan id="SvgjsTspan2959" style="text-decoration:;">    Name           string</tspan></tspan><tspan id="SvgjsTspan2960" dy="16" x="10"><tspan id="SvgjsTspan2961" style="text-decoration:;">    RoutingKey     string</tspan></tspan><tspan id="SvgjsTspan2962" dy="16" x="10"><tspan id="SvgjsTspan2963" style="text-decoration:;">    ETA            *time.Time</tspan></tspan><tspan id="SvgjsTspan2964" dy="16" x="10"><tspan id="SvgjsTspan2965" style="text-decoration:;">    GroupUUID      string</tspan></tspan><tspan id="SvgjsTspan2966" dy="16" x="10"><tspan id="SvgjsTspan2967" style="text-decoration:;">    GroupTaskCount int</tspan></tspan><tspan id="SvgjsTspan2968" dy="16" x="10"><tspan id="SvgjsTspan2969" style="text-decoration:;">    Args           []Arg</tspan></tspan><tspan id="SvgjsTspan2970" dy="16" x="10"><tspan id="SvgjsTspan2971" style="text-decoration:;">    Headers        Headers //记录调用链</tspan></tspan><tspan id="SvgjsTspan2972" dy="16" x="10"><tspan id="SvgjsTspan2973" style="text-decoration:;">    Priority       uint8</tspan></tspan><tspan id="SvgjsTspan2974" dy="16" x="10"><tspan id="SvgjsTspan2975" style="text-decoration:;">    Immutable      bool</tspan></tspan><tspan id="SvgjsTspan2976" dy="16" x="10"><tspan id="SvgjsTspan2977" style="text-decoration:;">    RetryCount     int</tspan></tspan><tspan id="SvgjsTspan2978" dy="16" x="10"><tspan id="SvgjsTspan2979" style="text-decoration:;">    RetryTimeout   int</tspan></tspan><tspan id="SvgjsTspan2980" dy="16" x="10"><tspan id="SvgjsTspan2981" style="text-decoration:;">    OnSuccess      []*Signature //成功</tspan></tspan><tspan id="SvgjsTspan2982" dy="16" x="10"><tspan id="SvgjsTspan2983" style="text-decoration:;">    OnError        []*Signature //失败</tspan></tspan><tspan id="SvgjsTspan2984" dy="16" x="10"><tspan id="SvgjsTspan2985" style="text-decoration:;">    ChordCallback  *Signature  //Chord回调</tspan></tspan><tspan id="SvgjsTspan2986" dy="16" x="10"><tspan id="SvgjsTspan2987" style="text-decoration:;">    BrokerMessageGroupId string</tspan></tspan><tspan id="SvgjsTspan2988" dy="16" x="10"><tspan id="SvgjsTspan2989" style="text-decoration:;">    SQSReceiptHandle string</tspan></tspan><tspan id="SvgjsTspan2990" dy="16" x="10"><tspan id="SvgjsTspan2991" style="text-decoration:;">    StopTaskDeletionOnError bool</tspan></tspan><tspan id="SvgjsTspan2992" dy="16" x="10"><tspan id="SvgjsTspan2993" style="text-decoration:;">    IgnoreWhenTaskNotRegistered bool</tspan></tspan><tspan id="SvgjsTspan2994" dy="16" x="10"><tspan id="SvgjsTspan2995" style="text-decoration:;">}</tspan></tspan></text></g></g></svg>